<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>testing on Log4D</title>
    <link>https://blog.alswl.com/tags/testing/</link>
    <description>Recent content in testing on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 18 Apr 2010 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/testing/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最近在学的技术</title>
      <link>https://blog.alswl.com/2010/04/recent-study-technologys/</link>
      <pubDate>Sun, 18 Apr 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/04/recent-study-technologys/</guid>
      <description>根据这篇日志的题目，必然是一篇水文，我思量再三，还是把它放出来，这些技术的接触把我带入了另一个广阔的天堂。这是我学Java以来的第二个里程碑。 使用Java1年半，1年前开始JSP编程，一直是我和周围的朋友自己摸索，学校没有开Java课，也没有参加什么培训课程，面对庞大的Java开源分支，我一直摸索 ，不能登堂入室。 万分感谢倪经理这1个月来的教导，他给了我一个不一样的Java。 iBatis 如果说Hibernat</description>
      <content:encoded><![CDATA[<p>根据这篇日志的题目，必然是一篇水文，我思量再三，还是把它放出来，这些技术的接触把我带入了另一个广阔的天堂。这是我学Java以来的第二个里程碑。</p>
<p>使用Java1年半，1年前开始JSP编程，一直是我和周围的朋友自己摸索，学校没有开Java课，也没有参加什么培训课程，面对庞大的Java开源分支，我一直摸索
，不能登堂入室。</p>
<p>万分感谢倪经理这1个月来的教导，他给了我一个不一样的Java。</p>
<h3 id="ibatis">iBatis</h3>
<p>如果说Hibernate是一款自动化的导弹，那么iBatis则是一款轻型的半自动步枪，简介、高效、方便配置。加上iBator这个神器，iBatis可以使开发
效率几倍提升。</p>
<p>年前开始学习iBatis，想借其思想自己完成一个简单的ORM系统，3月份时候，公司的一个新框架采用了iBatis，更是给我提供了一个绝佳的Playgroun
d。Hibernate和iBatis有各自的适合使用的领域，不能单纯的说谁好谁不好，不过iBatis绝对值得尝试。</p>
<p>动软的.net生成器使用的DAL接入层也是使用的iBats.net做数据接入。</p>
<h3 id="jaas">Jaas</h3>
<p>我对权限控制的理解，从最早的单表用户字段管理，到贴吧的基于角色权限控制，直到后来公司使用的基于权限+菜单控制，最好到现在的Jaas提供的资源-角色-权限-
菜单 控制体系。细化到原子级的权限控制带来了莫大的好处，这个很大程度归功于Jaas。</p>
<blockquote>
<p>Java Authentication Authorization Service（JAAS，Java验证和授权API）提供了灵活和可伸缩的机制来保证客
户端或服务器端的Java程序。Java早期的安全框架强调的是通过验证代码的来源和作者，保护用户避免受到下载下来的代码的攻击。JAAS强调的是通过验证谁在运行
代码以及他／她的权限来保护系统面受用户的攻击。它让你能够将一些标准的安全机制，例如Solaris NIS（网络信息服务）、Windows
NT、LDAP（轻量目录存取协议），Kerberos等通过一种通用的，可配置的方式集成到系统中。</p>
</blockquote>
<p>我对这套权限系统的学习还不透彻，还有很多地方需要琢磨和研究，学无止境啊。</p>
<h3 id="esb">ESB</h3>
<p>很惭愧，知道现在才知道这个名词，ESB的思想其实在很多地方得到了灌输，我一直自认经常会跟进主流技术，现在才发现果然还是自己道行不够。</p>
<blockquote>
<p>ESB全称为Enterprise Service
Bus，即企业服务总线。它是传统中间件技术与XML、Web服务等技术结合的产物。ESB提供了网络中最基本的连接中枢，是构筑企业神经系统的必要元素</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>ESB的出现改变了传统的软件架构，可以提供比传统中间件产品更为廉价的解决方案，同时它还可以消除不同应用之间的技术差异，让不同的应用服务器协调运作，实现了
不同服务之间的通信与整合。从功能上看，ESB提供了事件驱动和文档导向的处理模式，以及分布式的运行管理机制，它支持基于内容的路由和过滤，具备了复杂数据的传输能
力，并可以提供一系列的标准接口。</p>
</blockquote>
<h3 id="mule">Mule</h3>
<p>Mule是一个企业服务总线(ESB)消息框架，也就是上面所说的ESB的一个开源框架实现。Mule的优势体现在：</p>
<p>1.基于J2EE1.4的企业消息总线(ESB)和消息代理(broker).</p>
<p>2.可插入的连接性:比如 Jms,jdbc,tcp,udp,multicast,http,servlet,smtp,pop3, file,xmpp等.</p>
<p>3.支持任何传输之上的异步，同步和请求响应事件处理机制.</p>
<p>4.支持Axis或者Glue的Web Service.</p>
<p>5.灵活的部署结构 [Topologies]包括Client/Server, P2P, ESB 和Enterprise Service Network.</p>
<ol start="6">
<li>与Spring 框架集成:可用作ESB 容器，也可以很容易的嵌入到Spring应用中.</li>
</ol>
<p>7.使用基于SEDA处理模型的高度可伸缩的企业服务器.</p>
<p>8.强大的基于EIP模式的事件路由机制等.</p>
<p>Mule发布最新版本1.1，这个发布包括集成了JBI，对 BPEL的支持,还增加一些新的传输器(transport)Quartz,FTP,RMI与EJB等。</p>
<h3 id="tiles">Tiles</h3>
<p>我之前认识是<include>已经是一种比较好的页面实现方式，Tiles的出现粉碎了我的认识。Tiles框架提供了一种模板机制，模板定义了网页的布局，同一模
板可以被多个Web页面共用。通过配置文件进行协调，把页面文件的分层应用到极致。</p>
<blockquote>
<p>Apache Tiles 是一个创建简单的网络应用用户界面的模板框架，Tiles让用户可以在运行中使用定义好的小模块装配成完整的页面。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>采用基本的JSP语句创建复合式网页 -&gt; 采用JSP的include指令创建复合式网页 -&gt; 采用Tiles:Insert标签创建复合式网页 -&gt;
采用Tiles模板创建复合式网页</p>
</blockquote>
<h3 id="web压力测试">Web压力测试</h3>
<p>这是我在翻阅大学里软件工程课孙老师给05届毕业生的PPT时候发现的内容。PPT体面推荐了3种Web压力测试工具。</p>
<p>Web Application Stress Tool, Microsoft</p>
<p><a href="http://jakarta.apache.org/jmeter/">JMeter, Java Apache Project</a></p>
<p><a href="http://www.broadgun.com">LoadItUp, BroadGun Software</a></p>
<p>上述三种，我只试用了JMeter，还在继续研究中。</p>
<h3 id="web测试自动化">Web测试自动化</h3>
<p>这也是从那堆PPT中学习的东西，我把他们列到我的GTD计划中，还没来得及实现。</p>
<h4 id="watir">[Watir</h4>
<p>](<a href="http://wtr.rubyforge.org/">http://wtr.rubyforge.org/</a>)</p>
<p>一个使用 Ruby 实现的开源Web 自动化测试框架。</p>
<h4 id="selenium">[Selenium</h4>
<p>](<a href="http://selenium.openqa.org/">http://selenium.openqa.org/</a>)</p>
<p>ThoughtWorks 专门为 Web 应用而开发的自动化测试工具，适合进行功能测试、验收测试 。</p>
<h4 id="jwebunit">[jWebUnit</h4>
<p>](<a href="http://jwebunit.sourceforge.net/">http://jwebunit.sourceforge.net/</a>)</p>
<p>为 Web 应用程序创建测试用例的一个开源框架，它可以容易地插入到大多数 Java IDE 中。</p>
<h3 id="last">Last</h3>
<p>啥也不说了，埋头学习吧～</p>
<p>路漫漫其修远兮，吾将上下而求索。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Delphi 的单元测试工具DUnit</title>
      <link>https://blog.alswl.com/2010/01/delphi-unit-testing-tool-dunit/</link>
      <pubDate>Wed, 06 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/delphi-unit-testing-tool-dunit/</guid>
      <description>以前写Java时候经常使用一款单元测试工具JUnit，工作之后在用Delphi，自然也要换到Delphi下面的单元测试工具DUnit。 DUnit是XUnit家族中的一员，是Extreme Programming测试实现Xtreme Testing的一种工具。 DUnit的用法和JUnit很类似，如果有相关经验很容易上手。这里是DUnit的官方地址：http://dunit.sourceforge.net</description>
      <content:encoded><![CDATA[<p>以前写Java时候经常使用一款单元测试工具JUnit，工作之后在用Delphi，自然也要换到Delphi下面的单元测试工具DUnit。</p>
<p>DUnit是XUnit家族中的一员，是Extreme Programming测试实现Xtreme Testing的一种工具。</p>
<p>DUnit的用法和JUnit很类似，如果有相关经验很容易上手。这里是DUnit的官方地址：<a href="http://dunit.sourceforge.net/">http://dunit.sourceforge.net/</a> ，
下载地址：<a href="http://sourceforge.net/projects/dunit/">http://sourceforge.net/projects/dunit/</a></p>
<p>将DUnit解压至任意目录（我习惯在<code>D:/Study/DelphiLib/</code>），打开Delphi 7，将DUnit路径添加到 Tools- &gt; Environment Options 里面的 Library -&gt; Library Path，这样DUnit就安装完成了。</p>
<p>如果有装过CnPack 的Delphi工具包，就可以很轻松的在 File -&gt; New -&gt; Other -&gt; CnPack -&gt; DUnit测试实例生成向导 中建立新的测试用例。</p>
<p>下面是我的一个简单的测试用例，测试AppFun中的<code>GetString()</code>和 <code>Add() </code>方法。</p>
<p>TAppFun.pas</p>
<pre tabindex="0"><code>(*
UTest by Jason
2010-01-06 21:30
*)
unit AppFun;
interface
uses SysUtils;
type TAppFun = class(TObject)
public
	class function GetString(sName: string; iAge: Integer): string;
	class function Add(iA: Integer; iB: Integer): Integer;
end;
implementation
class function TAppFun.GetString(sName: string; iAge: Integer): string;
begin
	result := &#39;Hello &#39; + sName + &#39;, your age is &#39; +
	IntToStr(iAge);
end;
class function TAppFun.Add(iA: Integer; iB: Integer): Integer;
begin
	Result := iA + iB;
end;
end.
</code></pre><p>UTest.pas</p>
<pre tabindex="0"><code>(*
UTest by Jason
2010-01-06 21:30
*)
unit UTest;
interface
uses
	Windows, SysUtils, Classes, TestFramework, TestExtensions;
type
	TTest = class(TTestCase)
protected
procedure SetUp; override;
procedure TearDown; override;
published
procedure Test;
procedure TestGetString();
end;
implementation
uses
	AppFun, Dialogs;
procedure TTest.Setup;
begin
	ShowMessage(&#39;In Setup!&#39;);
end;
procedure TTest.TearDown;
begin
	ShowMessage(&#39;In TearDown!&#39;);
end;
procedure TTest.Test;
begin
	Self.Check(TAppFun.GetString(&#39;Jason&#39;, 22) = &#39;Hello Jason, your age is 22&#39;,
	&#39;Second Test&#39;);
end;
procedure TTest.TestGetString();
begin
	Check(TAppFun.Add(3, 5) = 8, &#39;First Test&#39;);
end;
initialization
TestFramework.RegisterTest(TTest.Suite);
end.
</code></pre><p>从上面的代码可以看出，XUnit系列风格都比较类似，很容易操作。</p>
<p><a href="../../static/images/upload_dropbox/201001/dunit.jpg">




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201001/dunit.jpg" alt="image"  />

</a></p>
<p>DUnit还有一些更高阶的操作，比如在控制台输出/在独立线程中运行测试/Exception测试等等，详细操作可以参考下列文档。目前我用到的就是简单的单元测试
。</p>
<p>一点资料：</p>
<ol>
<li><a href="http://dunit.sourceforge.net/">DUnit 的官方地址</a></li>
<li><a href="http://sourceforge.net/projects/dunit/">DUnit 下载地址</a></li>
<li><a href="http://dunit.sourceforge.net/README.html">DUnit 官方文档（英文）</a></li>
<li><a href="http://dunit.sourceforge.net/README_CHT.html">DUnit 官方文档（繁体中文）</a></li>
<li><a href="http://www.delphifans.com/infoview/Article_499.html">『Delphi园地』-Delphi单元测试工具Dunit介绍</a></li>
<li><a href="http://www.51testing.com/html/32/297.html">Delphi单元测试工具Dunit介绍_51Testing软件测试网</a></li>
</ol>
<p>Delphi宝刀不老啊～呵呵～</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
