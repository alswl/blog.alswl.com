<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jetty on Log4D</title>
    <link>https://blog.alswl.com/tags/jetty/</link>
    <description>Recent content in Jetty on Log4D</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 04 Apr 2011 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/jetty/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maven 下 Jetty 启动</title>
      <link>https://blog.alswl.com/2011/04/run-jetty-in-maven/</link>
      <pubDate>Mon, 04 Apr 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/04/run-jetty-in-maven/</guid>
      <description>&lt;p&gt;部门最近开发的产品使用的开发服务器是 Jetty（挂载在 GWT 中），启动方法是通过 Eclipse 的 External
Tool 执行。我对此表示很好奇，特意在自己电脑下面组建了一个 Jetty 开发环境，发现 Maven 和 Jetty 合作起来非常愉快，现在小记之。&lt;/p&gt;
&lt;h2 id=&#34;准备-maven-配置文件&#34;&gt;准备 Maven 配置文件&lt;/h2&gt;
&lt;p&gt;我使用 Maven 推荐的标准 webapp 结构，结构如下，官方文档可以参考 &lt;a href=&#34;http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html&#34;&gt;Maven - Introduction to the Standard Directory Layout&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src/main/java
&lt;ul&gt;
&lt;li&gt;Application/Library sources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/main/resources
&lt;ul&gt;
&lt;li&gt;Application/Library resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/main/filters
&lt;ul&gt;
&lt;li&gt;Resource filter files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/main/assembly
&lt;ul&gt;
&lt;li&gt;Assembly descriptors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/main/config
&lt;ul&gt;
&lt;li&gt;Configuration files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/main/webapp
&lt;ul&gt;
&lt;li&gt;Web application sources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/test/java
&lt;ul&gt;
&lt;li&gt;Test sources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/test/resources
&lt;ul&gt;
&lt;li&gt;Test resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/test/filters
&lt;ul&gt;
&lt;li&gt;Test resource filter files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/site
&lt;ul&gt;
&lt;li&gt;Site&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LICENSE.txt
&lt;ul&gt;
&lt;li&gt;Project&amp;rsquo;s license&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NOTICE.txt
&lt;ul&gt;
&lt;li&gt;Notices and attributions required by libraries that the project depends on&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;README.txt
&lt;ul&gt;
&lt;li&gt;Project&amp;rsquo;s readme&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用的 pom.xml 主要添加了 build-
plugins 的 Jetty 插件，另外修改了 outputDirectory，从而实现自动编译到&lt;code&gt;targert/projectName/WEB- INF/classes&lt;/code&gt;目录，实现 &lt;a href=&#34;http://wiki.eclipse.org/FAQ_What_is_hot_code_replace%3F&#34;&gt;Eclipse Hot Code&lt;/a&gt;。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>部门最近开发的产品使用的开发服务器是 Jetty（挂载在 GWT 中），启动方法是通过 Eclipse 的 External
Tool 执行。我对此表示很好奇，特意在自己电脑下面组建了一个 Jetty 开发环境，发现 Maven 和 Jetty 合作起来非常愉快，现在小记之。</p>
<h2 id="准备-maven-配置文件">准备 Maven 配置文件</h2>
<p>我使用 Maven 推荐的标准 webapp 结构，结构如下，官方文档可以参考 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Maven - Introduction to the Standard Directory Layout</a></p>
<ul>
<li>src/main/java
<ul>
<li>Application/Library sources</li>
</ul>
</li>
<li>src/main/resources
<ul>
<li>Application/Library resources</li>
</ul>
</li>
<li>src/main/filters
<ul>
<li>Resource filter files</li>
</ul>
</li>
<li>src/main/assembly
<ul>
<li>Assembly descriptors</li>
</ul>
</li>
<li>src/main/config
<ul>
<li>Configuration files</li>
</ul>
</li>
<li>src/main/webapp
<ul>
<li>Web application sources</li>
</ul>
</li>
<li>src/test/java
<ul>
<li>Test sources</li>
</ul>
</li>
<li>src/test/resources
<ul>
<li>Test resources</li>
</ul>
</li>
<li>src/test/filters
<ul>
<li>Test resource filter files</li>
</ul>
</li>
<li>src/site
<ul>
<li>Site</li>
</ul>
</li>
<li>LICENSE.txt
<ul>
<li>Project&rsquo;s license</li>
</ul>
</li>
<li>NOTICE.txt
<ul>
<li>Notices and attributions required by libraries that the project depends on</li>
</ul>
</li>
<li>README.txt
<ul>
<li>Project&rsquo;s readme</li>
</ul>
</li>
</ul>
<p>使用的 pom.xml 主要添加了 build-
plugins 的 Jetty 插件，另外修改了 outputDirectory，从而实现自动编译到<code>targert/projectName/WEB- INF/classes</code>目录，实现 <a href="http://wiki.eclipse.org/FAQ_What_is_hot_code_replace%3F">Eclipse Hot Code</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;directory&gt;</span>${project.basedir}/target<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;finalName&gt;</span>${project.artifactId}-${project.version}<span class="nt">&lt;/finalName&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/${project.build.finalName}/WEB-INF/classes<span class="nt">&lt;/outputDirectory&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-eclipse-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.7<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;sourceIncludes&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;sourceInclude&gt;</span>*<span class="nt">&lt;/sourceInclude&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/sourceIncludes&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-plugin-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p>准备几个测试用的 Servlet，外加 web.xml。运行<code>mvn install</code>即可在 target/war 下面生成 war 包，同时在 target/projectName/ 下会生成项目文件。</p>
<p>如果有 m2eclipse，那这个动作很容易就可以完成，如果没有，也可以参照我之前的<a href="http://log4d.com/2011/03/maven-eclipse">在 Eclipse 中使用 Maven</a>。</p>
<h2 id="撰写-eclipse-external-tool">撰写 Eclipse External Tool</h2>
<p>建立可以运行的 Jetty 实例分为两步，建立 Jetty 的 Java Application 和创建 jetty.xml 配置文件。</p>
<p>1、在 Run-Run Configurations 中的 Java Application 中建立一个新的应用，起名为&quot;jetty&quot;, 使用 Main
class 为<code>org.mortbay.xml.XmlConfiguration</code>，在 Arguments - Program arguments 中加入<code>${p roject_loc}/jetty.xml</code>，其中<code>${project_loc}</code>是动态参数，指向当前项目目录，jetty.xml 为我们随后要创建的 jett
y 配置文件。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201104/run_configurations.png" alt="image"  />


</p>
<p>如果想将这个应用保存成文件，可以修改 Common - Sava
as 到当前目录，就可以保存为 jetty.launch 文件了。（没错，就是 launch 文件，Eclipse 的运行配置文件）</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201104/eclipse_common.png" alt="image"  />


</p>
<p>2、准备 jetty.xml 文件</p>
<p>Jetty 是一款轻量形的 Web 服务器，轻到甚至仅仅靠 Maven 插件即可运行，不过我们依然需要通过 jetty.xml 文件进行配置。在项目根目录下建立 jetty
.xml（此路径与 Java Application 中的 Arguments 相对应，有些朋友可能更习惯放在 WEB-INF 下面）。</p>
<p>官方说从 <code>$JETTY_HOME/webapps/test/WEB-INF/jetty-web.xml</code> 可以取到 jetty-xml 的范例，我这里就提供下载好了。</p>
<p>点击下载 <a href="../../static/images/upload_dropbox/201104/jetty.xml">jetty.xml</a>，这里面写了 hard
code<code>&lt;Set name=&quot;resourceBase&quot;&gt;./target/study_web-1.0-SNAPSHOT&lt;/Set&gt;</code>，请记得替换。</p>
<p>配置好 Jetty 之后，就可以运行 Jetty 了，在 Run - Run
As 中找到名为 jetty 的运行命令，不出意外的话，Jetty 会在 4000 端口建立一个实例。</p>
<p>当我们在 Debug 模式运行时，由于我们修改 java 代码会动态更新到 classes 目录，所以我们可以在运行时修改代码，不信你可以在 Debug 时候修改 Servl
et 中代码试试，这就是所谓 Hot code。</p>
<p>Enjoy it!</p>
<h2 id="参考文章">参考文章</h2>
<p><a href="http://www.daniel-journey.com/archives/214">Eclipse 中运行 Jetty</a></p>
<p><a href="http://www.blogjava.net/alwayscy/archive/2007/05/19/118584.html">天生一对&quot;Maven2+Jetty&quot; &ndash; Maven2 创建并管理 WebApp，并使用 Maven Jetty Plugin 在 Eclipse 中调试</a></p>
<p><a href="http://www.blogjava.net/alwayscy/archive/2007/09/13/144969.html">目前发现的最好最快的直接在 ECLIPSE 中 JETTY 调试方式</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
