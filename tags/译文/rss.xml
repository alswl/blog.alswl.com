<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>译文 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E8%AF%91%E6%96%87/</link>
    <description>Recent content in 译文 on Log4D</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 12 Nov 2017 15:30:12 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/%E8%AF%91%E6%96%87/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务性能监控：USE 方法（The USE Method）</title>
      <link>https://blog.alswl.com/2017/11/use-method/</link>
      <pubDate>Sun, 12 Nov 2017 15:30:12 +0800</pubDate>
      <guid>https://blog.alswl.com/2017/11/use-method/</guid>
      <description>&lt;p&gt;本文首发在沪江技术学院公众号，小莞翻译，我做了校对。
由于微信公众号的封闭性，我担心未来文章不容易被发现。
为了避免沧海遗珠，特意转到这里。&lt;/p&gt;
&lt;p&gt;英文原文：&lt;a href=&#34;http://www.brendangregg.com/usemethod.html&#34;&gt;The USE Method&lt;/a&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;




&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.alswl.com/images/upload_dropbox/201711/performance_900.jpg&#34; alt=&#34;201711/performance.jpg&#34;  /&gt;


&lt;/p&gt;
&lt;p&gt;USE 方法是一种能分析任何系统性能的方法论。
我们可以根据能帮助系统分析的结构化清单，来迅速的定位资源的瓶颈和错误所在。
它通常会先以列出问题为开始，然后再寻找适合的指标，而不是给你制定一些固定的指标，
然后让你按部就班的执行下去。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;本页左侧下方，是我列出的，根据不同的操作系统（Linux、 Solaris 等）
衍生的 USE 方法列表。（译者注：可以参考原文链接）&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>本文首发在沪江技术学院公众号，小莞翻译，我做了校对。
由于微信公众号的封闭性，我担心未来文章不容易被发现。
为了避免沧海遗珠，特意转到这里。</p>
<p>英文原文：<a href="http://www.brendangregg.com/usemethod.html">The USE Method</a>。</p>
<hr />
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201711/performance_900.jpg" alt="201711/performance.jpg"  />


</p>
<p>USE 方法是一种能分析任何系统性能的方法论。
我们可以根据能帮助系统分析的结构化清单，来迅速的定位资源的瓶颈和错误所在。
它通常会先以列出问题为开始，然后再寻找适合的指标，而不是给你制定一些固定的指标，
然后让你按部就班的执行下去。</p>
<!-- more -->
<p>本页左侧下方，是我列出的，根据不同的操作系统（Linux、 Solaris 等）
衍生的 USE 方法列表。（译者注：可以参考原文链接）</p>
<p>我列出了为不同的操作系统而衍生的 USE 方法列表供大家参考，
你们可以根据你的环境来为你的站点服务，选择适合的附加监控指标。</p>
<p>通过这个工具，可以很方便的筛选出适合不同的系统的建议 metrics：<a href="http://www.brendangregg.com/USEmethod/use-rosetta.html">USE Method: Rosetta Stone of Performance Checklists</a></p>
<h2 id="introintroduction">Intro（Introduction）</h2>
<p>如果你遇到一个很严重的性能问题升级的时候，并且你不能确定它是否由服务导致的，
这时候你该怎么办？</p>
<p>我们都说万事开头难。所以我开发出了 USE 方法，来帮助大家，如何去快速的解决常见的性能问题，而同时又不容易忽略重要的地方。</p>
<p>USE 方法在设计之初就定位了简洁、明了、完整、快速的特性，
就好像一本航天手册的紧急事项列表那样。
（译者注：航天手册，介绍包括不限于飞机的各种特性、指标、性能等，
用于帮助飞行学员学习驾驶飞机，或者是帮助那些希望提高他们的飞行潜能和航空知识的人了解的更全面）。</p>
<p>USE 方法已经在不同的企业、课堂（作为学习工具）以及最近的云计算等场景中，被成功应用了无数次。</p>
<p>USE 方法基于 3+1 模型（三种指标类型+一种策略），来切入一个复杂的系统。我发现它仅仅发挥了
5% 的力量，就解决了大概 80% 的服务器问题，并且正如我将证明的，它除了服务器以外，也同样适应于各种系统。</p>
<p>它应当被理解为一种工具，一种很大的方法工具箱里面的工具。不过，它目前仍然还有很多问题类型以待解决，还需要点其他方法和更多的时间。</p>
<h2 id="summary">Summary</h2>
<p>USE 方法可以概括为：检查所有的资源的利用率，饱和度，和错误信息。</p>
<p>我们期望大家能尽早使用 USE 方法去做性能检查，或者是用它确定系统的瓶颈。</p>
<p>名词定义：</p>
<ul>
<li>资源： 服务器功能性的物理组成硬件（CPU， 硬盘, 总线）</li>
<li>利用率： 资源执行某工作的平均时间</li>
<li>饱和：衡量资源超载工作的程度，往往会被塞入队列</li>
<li>错误： 错误事件的数量</li>
</ul>
<p>分析软件资源，或者是软件的强制性限制（资源控制）也是很有用的，同时要关注哪些指标是处于正常的可接受范围之内的。这些指标通常用以下术语表示：</p>
<ul>
<li>利用率：
以一个时间段内的百分比来表示，例如：一个硬盘以 90% 的利用率运行</li>
<li>饱和度： 一个队列的长度，例如：CPUs 平均的运行时队列长度是4</li>
<li>错误（数）： 可度量的数量，例如：这个网络接口有 50 次（超时？）</li>
</ul>
<p>我们应该要调查那些错误，因为它们会降低系统的性能，并且当故障模型处于可回复模式的时候，它可能不会立刻被发现。</p>
<p>这包括了那些失败和重试等操作，以及那些来自无效设备池的失效设备。</p>
<h2 id="低利用率是否意味着未饱和">低利用率是否意味着未饱和？</h2>
<p>即使在很长一段时间内利用率很低，一个爆发增长的高利用率，也会导致饱和 and
性能问题，这点要理解起来可能有违三观！</p>
<p>我举个例子，有一位客户遇到的问题，即使他们的监控工具显示
CPU 使用率从来没有超出过 80% ，但是
CPU 饱和度依然有问题（延迟）监控工具报告了
5 分钟的平均值，而其中，CPU利用率曾在数秒内高达 100% 。</p>
<h2 id="资源列表">资源列表</h2>
<p>下面来看如何开始使用。</p>
<p>准备工作时， 你需要一个资源列表来按步就班的去做。
下面是一个服务器的通用列表：</p>
<ul>
<li>CPUs： sockets, cores, hardware threads (virtual CPUs)</li>
<li>内存： 容量</li>
<li>网络接口</li>
<li>存储设备： I/O, 容量</li>
<li>控制器： 存储, 网卡</li>
<li>通道： CPUs, memory, I/O</li>
</ul>
<p>有些组件分两种类型的资源：存储设备是服务请求资源（I / O）
以及容量资源（population）， 两种类型都可能成为系统瓶颈。
请求资源可以定义为队列系统，可以将请求先存入排队然后再消化请求。</p>
<p>有些物理组件已被省略，例如硬件缓存（例如，MMU TLB / TSB，CPU）。</p>
<p>USE 方法对于在高利用率或高饱和度下，遭受性能退化、导致瓶颈的资源最有效，在高利用率下缓存可以提高性能。</p>
<p>在使用 USE 方法排除系统的瓶颈问题之后
，你可以检查缓存利用率和其他的性能属性。</p>
<p>如果你不确认要不要监控某一个资源时，不要犹豫，监控它，然后你就能看到那些指标工作的有多么的棒。</p>
<h2 id="功能模块示意图">功能模块示意图</h2>
<p>另外一种迭代资源的方法，是找到或者绘制一张系统的功能模块示意图。</p>
<p>这些显示了模块关系的图，在你查找数据流的瓶颈的时候是非常有用的，这里有一张Sun
Fire V480 Guide(page 82)的例图：</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201711/v480.png" alt="201711/v480.png"  />


</p>
<p>我喜欢这些图表，尽管制作出它很难。
不过，由硬件工程师来画这张图是最适合的-他们最善于做这类事。如果不信的话你可以自己试试。</p>
<p>在确定各种总线的利用率的同时，为每个总线的功能图表，注释好它的最大带宽。这样我们就能在进行单次测量之前，得到能将系统瓶颈识别出来的图表。</p>
<h2 id="interconnects">Interconnects</h2>
<p>CPU，内存和I / O interconnects 往往被忽略。
幸运的是，它们并不会频繁地成为系统的瓶颈。
不幸的是，如果它们真的频繁的成为瓶颈，我们能做的很少（也许你可以升级主板，或减少 load：例如，&ldquo;zero copy&quot;项目减轻内存总线 load）。</p>
<p>使用 USE 方法，至少你会意识到你没有考虑过的内容：interconnect 性能。
有关使用 USE 方法确定的互连问题的示例，请参阅分析 Analyzing the HyperTransport。</p>
<h2 id="metrics">Metrics</h2>
<p>给定资源列表，识别指标类型：利用率，饱和度和错误指标。这里有几个示例。看下面的 table，思考下每个资源和指标类型，metric 列是一些通用的 Unix/Linux 的术语提示（你可以描述的更具体些）：</p>
<hr />
<p>resource type metric
CPU utilization CPU utilization (either per-CPU or a system-wide average)
CPU saturation run-queue length or scheduler latency(aka
Memory capacity utilization available free memory (system-wide)
Memory capacity saturation anonymous paging or thread swapping (maybe &ldquo;page scanning&rdquo; too)
Network interface utilization RX/TX throughput / max bandwidth
Storage device I/O utilization device busy percent
Storage device I/O saturation wait queue length
Storage device I/O errors device errors (&ldquo;soft&rdquo;, &ldquo;hard&rdquo;, &hellip;)</p>
<hr />
<p>这些指标是每段间隔或者计数的平均值，作为你的自定义清单，要包括使用的监控软件，以及要查看的统计信息。如果是不可用的指标，可以打个问号。最后，你会完成一个完事的、简单、易读的
metrics 清单.</p>
<h2 id="harder-metrics">Harder Metrics</h2>
<p>再来看几个硬件指标的组合</p>
<hr />
<p>resource type metric
CPU errors eg, correctable CPU cache ECC events or faulted CPUs (if the OS+HW supports that)
Memory capacity errors
Network saturation
Storage controller utilization
CPU interconnect utilization
Memory interconnect saturation
I/O interconnect utilization</p>
<hr />
<p>这些依赖于操作系统的指标一般会更难测量些，
而我通常要用自己写的软件去收集这些指标。</p>
<p>重复所有的组合，并附上获取每个指标的说明，你会完成一个大概有30项指标的列表，其中有些是不能被测量的，还有些是难以测量的。</p>
<p>幸运的是，最常见的问题往往是简单的（例如，CPU 饱和度，内存容量饱和度，网络接口利用率，磁盘利用率），这类问题往往第一时间就能被检查出来。</p>
<p>本文的顶部，pic-1中的 example checklists 可作为参考。</p>
<h2 id="in-practice">In Practice</h2>
<p>读取系统的所有组合指标，是非常耗时的，特别是当你开始使用总线和 interconnect
指标的情况下。</p>
<p>现在我们可以稍微解放下了，USE 方法可以让你了解你没有检查的部分,你可以只有关注其中几项的时间例如：CPUs,
内存容量, 存储容易, 存储设备 I/O,
网络接口等。通过 USE 方法，那些以前未知的未知指标现在变成了已知的未知指标（我理解为，以前我们不知道有哪些指标会有什么样的数据，现在起码能知道我们应该要关注哪些指标）。</p>
<p>如果将来定位一个性能问题的根本原因，对你的公司至关重要的时候，你至少已经有一个明确的、经过验证的列表，来辅助你进行更彻底的分析，请完成适合你自己的 USE 方法，有备无患。</p>
<p>希望随着时间的推移，易于检查的指标能得以增长，因为被添加到系统的 metrics
越多，会使 USE 方法将更容易（发挥它的力量）。
性能监视软件也可以帮上忙，添加 USE 方法向导to do the work for you（do what
work? ）。</p>
<h2 id="software-resources">Software Resources</h2>
<p>有些软件资源可以用类似的方式去分析。
这通常适用于软件的较小组件，而不是整个应用程序。 例如：</p>
<ul>
<li>互斥锁(mutex locks)：利用率可以定义为锁等待耗时；饱和率定义为等待这把锁的线程个数。</li>
<li>线程池：利用率可以定义为线程工作的时长；饱和率是等待线程池分配的请求数量。</li>
<li>进程/线程
容量：系统是有进程或线程的上限的，它的实际使用情况被定义为利用率；等待数量定义为饱和度；错误即是（资源）分配失败的情况（比如无法 fork）。
（译注：fork 是一个现有进程，通过调用 fork 函数创建一个新进程的过程)</li>
<li>文件描述符容量(file descriptor capacity)：和上述类似，但是把资源替换成文件描述符。</li>
</ul>
<p>如果这几个指标很管用就一直用，要不然软件问题会被遗留给其他方法了（例如，延迟，后文会提到其他方法：other methodologies ）。</p>
<h2 id="suggested-interpretations">Suggested Interpretations</h2>
<p>USE 方法帮助你定位要使用哪些指标。
在学习了如何从操作系统中读取到这些指标后，你的下一步工作就是诠释它们的值。对于有的人来说，
这些诠释可能是很清晰的（因为他们可能很早就学习过，或者是做过笔记）。而其他并不那么明了的人，可能取决于系统负载的要求或期望
。</p>
<p>下面是一些解释指标类型的通用建议：</p>
<ul>
<li>Utilization：
利用率通常象征瓶颈（检查饱和度可以进一步确认）。高利用率可能开始导致若干问题：</li>
<li>对利用率进行长期观察时（几秒或几分钟），通常来说 70%
的利用率会掩盖掉瞬时的 100% 利用率。</li>
<li>某些系统资源，比如硬盘，就算是高优先级请求来了，也不会在操作进行中被中断。当他们的利用率到
70% 时候，队列系统中的等待已经非常频繁和明显。而 CPU 则不一样，它能在大部分情况下被中断。</li>
<li>Saturation：任何非 0 的饱和度都可能是问题。它们通常是队列中排队的时间或排队的长度。</li>
<li>Errors：只要有一条错误，就值得去检查，特别是当错误持续发生从而导致性能降低时候。</li>
</ul>
<p>要说明负面情况很容易：利用率低，不饱和，没有错误。 这比听起来更有用 -
缩小调查范围可以快速定位问题区域。</p>
<h2 id="cloud-computing">Cloud Computing</h2>
<p>在云计算环境中，软件资源控制可能是为了限制
使用共享计算服务的 tenants 的流量。在 Joyent 公司，我们主要使用操作系统虚拟化（SmartOS），它强加了内存限制，
CPU 限制和存储I / O限制。 所有这些资源限制，都可以使用USE Method进行检查，类似于检查物理资源。</p>
<p>例如，在我们的环境中，&ldquo;内存容量利用率&quot;可以是 tenants 的内存使用率 vs 它的内存上限
。即使传统的 Unix 页面扫描程序可能处于空闲状态，也可以通过匿名页面活动看到&quot;内存容量饱和度&rdquo;。</p>
<h2 id="strategy">Strategy</h2>
<p>下面是用流程图 的方式画了 USE 方法的示意图。
请注意，错误检查优先于利用率和饱和度检查（因为通常错误更快的表现出来，并更容易解释）。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201711/usemethod_flow.png" alt="201711/usemethod_flow.png"  />


</p>
<p>USE 方法定位到的问题，可能是系统瓶颈。
不幸的是，系统可能会遇到多个性能问题，因此您发现的第一个可能的问题最终却不是个问题。
发现的每个问题都可以用方法持续的挖掘，然后继续使用 USE
方法对更多资源进行反复排查。</p>
<p>进一步分析的策略包括工作量特征和 drill-down 分析。
完成这些后，你应该有依据据能判断，纠正措施是要调整应用的负载或调整资源本身。</p>
<h2 id="apollo">Apollo</h2>
<p>（译者注：Apollo 这一段我们可以不太关注，它主要是讲 USE 方法，与阿波罗登月计划相关的系统设计的一些渊源）</p>
<p>我之前有提到过，USE 方法可以被应用到除服务器之外。为了找到一个有趣的例子，
我想到了一个我没有完全不了解的系统，并且不知道从哪里开始：阿波罗月球模块指导系统。
USE 方法提供了一个简单的流程来尝试第一步是寻找一个资源列表，或者更理想的话，找到一个功能模块图表。我在
【Lunar Module - LM10 Through LM14 Familiarization Manual】中发现了以下内容：</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201711/apollo_LM_guidance.png" alt="201711/apollo_LM_guidance.png"  />


</p>
<p>这些组件中的一部分可能未表现出利用率或饱和度特性。在迭代后，
就可以重新绘制只包含相关组件的图表（还可以包括：&ldquo;可擦除存储&quot;部分的内存，&ldquo;核心区域&quot;和 &ldquo;vac区域 &ldquo;寄存器）。</p>
<p>我将从阿波罗主脑（AGC）本身开始。
对于每个指标，我浏览了各种 LM 文档，看看哪些是合理的（有意义的）：</p>
<ul>
<li>AGC utilization： This could be defined as the number of CPU cycles
doing jobs (not the &ldquo;DUMMY JOB&rdquo;) divided by the clock rate (2.048
MHz). This metric appears to have been well understood at the time.</li>
<li>AGC saturation： This could be defined as the number of jobs in the
&ldquo;core set area&rdquo;, which are seven sets of registers to store
program state. These allow a job to be suspended (by the
&ldquo;EXECUTIVE&rdquo; program - what we'd call a &ldquo;kernel&rdquo; these days) if
an interrupt for a higher priority job arrives. Once exhausted, this
moves from a saturation state to an error state, and the AGC reports
a 1202 &ldquo;EXECUTIVE OVERFLOW-NO CORE SETS&rdquo; alarm.</li>
<li>AGC errors： Many alarms are defined. Apart from 1202, there is also
a 1203 alarm &ldquo;WAITLIST OVERFLOW-TOO MANY TASKS&rdquo;, which is a
performance issue of a different type： too many timed tasks are
being processed before returning to normal job scheduling. As with
1202, it could be useful to define a saturation metric that was the
length of the WAITLIST, so that saturation can be measured before
the overflow and error occurs.</li>
</ul>
<p>其中的一些细节，可能对于太空爱好者来说是非常熟悉的：在阿波罗 11 号降落的时候发生的著名的
1201（&ldquo;NO VAC AREAS&rdquo;）和 1202 警报。（&ldquo;VAC&quot;是向量加速器的缩写，
用于处理 vector quantities 作业的额外存储； 我觉得 wikipadia 上将 &ldquo;向量&quot;描述为&quot;空&quot;可能是错误的）。</p>
<p>鉴于阿波罗 11 号的 1201 警报，可以继续使用其他方法分析，如工作负载表征。
工作负载很多可以在功能图中看到，大多数工作负载是通过中断来生效的。
包括用于跟踪命令模块的会合雷达，即使 LM 正在下降，该模块也仍然在执行中断 AGC（阿波罗主脑）的任务。
这是发现非必要工作的一个例子（或低优先级的工作;
雷达的一些更新可能是可取的，因此 LM AGC可以立即计算出中止路径）。</p>
<p>作为一个更深的例子，我将把会合雷达当作资源去检查. 错误最容易识别。
有三种信号类型： &ldquo;DATA NO GOOD&rdquo;, &ldquo;NO TRACK&rdquo;, and &ldquo;SHAFT- AND TRUNNION-AXIS ERROR&rdquo;。</p>
<p>在有某一小段时间里，我不知道能从哪里开始使用这个方法,
去寻找和研究具体的指标。</p>
<h2 id="other-methodologies">Other Methodologies</h2>
<p>虽然 USE 方法可能会发现 80％ 的服务器问题，但基于延迟的方法（例如Method R）可以找到所有的问题。
不过，如果你不熟悉软件内部结构，Method R 就有可能需要花费更多时间。
它们可能更适合已经熟悉它的数据库管理员或应用程序开发人员。</p>
<p>而 USE 方法的职责和专长包括操作系统（OS）和硬件，它更适合初级或高级系统管理员，当需要快速检查系统健康时，也可以由其他人员使用。</p>
<h2 id="tools-method">Tools Method</h2>
<p>以下介绍一个基于工具的方法流程（我称它作&quot;工具方法&rdquo;），与 USE 方法作比较：</p>
<ol>
<li>列出可用的性能工具（可以选择性安装或购买其他的）。</li>
<li>列出每个工具提供的有用的指标</li>
<li>列出每个工具可能的解释规则</li>
</ol>
<p>按照这个方法做完后，将得到一个符合标准的清单，它告诉我们要运行的工具，要关注的指标以及如何解释它们。
虽然这相当有效，但有一个问题，它完全依赖于可用（或已知的）的，可以提供系统的不完整视图的工具。
用户也不知道他们得到的是一张不完整的视图 - 所以问题将仍然存在。</p>
<p>而如果使用 USE 方法，不同的是， USE 方法将通过迭代系统资源的方式，来创建一个完整的待确认问题列表，然后搜索工具来回答这些问题。这样构建了一张更完整的视图，未知的部分被记录下来，它们的存在被感知（这一句我理解成前文中提到的：未知
的未知变为已知的未知）。
基于 USE ，同样可以开发一个清单类似于工具方法(Tool-Method)，显示要运行的工具（可用的位置），要关注的指标以及如何解释它。</p>
<p>另一个问题是，工具方法在遍历大量的工具时，将会使寻找瓶颈的任务性能得到分散。而 USE 方法提供了一种策略，即使是超多的可用工具和指标，也能有效地查找瓶颈和错误。</p>
<h2 id="conclusion">Conclusion</h2>
<p>USE 方法是一个简单的，能执行完整的系统健康检查的策略，它可以识别常见的系统瓶颈和错误。它可以在调查的早期部署并快速定位问题范围，如果需要的话，还可以进一步通过其他方法进行更详细的研究。</p>
<p>我在这个篇幅上，解释了 USE 方法并且提供了通用的指标案例，请参阅左侧导航面板中对应操作系统的示例清单，
其建议了应用 USE 方法的工具和指标。另请参阅基于线程的补充方法，TSA Method。</p>
<h2 id="acknowledgments">Acknowledgments</h2>
<ul>
<li>感谢 Cary Millsap and Jeff Holt (2003)
在&quot;优化 Oracle 性能&quot;一文中提到的 Method R 方法 (以及其他方法),
使我有了灵感，我应该要把这个方法论写出来。</li>
<li>感谢 Sun Microsystems 的组织，包括 PAE 和 ISV，
他们将 USE 方法（那时还没命名）应用于他们的存储设备系列，绘制了标注指标和总线速度的 ASCII 功能块图表 -
这些都比您想象的要困难（我们应该早些时候询问硬件团队的帮助）。</li>
<li>感谢我的学生们，多年前我授予他们这个方法论，谢谢他们提供给我的使用反馈。</li>
<li>感谢 Virtual AGC 项目组（The Virtual
AGC project），读他们的站点 ibiblio.org 上的文档库，就象是一种娱乐.
尤其是 LMA790-2 &ldquo;Lunar Module LM-10 Through LM-14 Vehicle
Familiarization Manual&rdquo; ( 48 页有功能模块图表), 以及
&ldquo;阿波罗指导和月球导航模块入门学习指南&rdquo;,
都很好的解释了执行程序和它的流程图 (These docs are 109 and 9 Mbytes in size.)</li>
<li>感谢 Deirdré Straughan 编辑和提供反馈，这提高了我的认知。</li>
<li>文章顶部的图片，是来自于波音 707 手册，1969 出版。它不是完整的，点击查看完整的版本（译注：为方便阅读，就是下面这张：）</li>
</ul>
<h2 id="updates">Updates</h2>
<p>USE Method updates：（略）</p>
<ul>
<li>It was published in ACMQ as Thinking Methodically about
Performance (2012).</li>
<li>It was also published in Communications of the ACM as Thinking
Methodically about Performance (2013).</li>
<li>I presented it in the FISL13 talk The USE Method (2012).</li>
<li>I spoke about it at Oaktable World 2012： video, PDF.</li>
<li>I included it in the USENIX LISA `12 talk Performance Analysis
Methodology.</li>
<li>It is covered in my book on Systems Performance, published by
Prentice Hall (2013).</li>
</ul>
<p>More updates (Apr 2014)：</p>
<ul>
<li>LuceraHQ are implementing USE Method metrics on SmartOS
for performance monitoring of their high performance financial
cloud.</li>
<li>LuceraHQ 正在 SmartOS 上，为他们高性能金融云的性能监测，实施 USE 方法指标</li>
<li>I spoke about the USE Method for OS X at MacIT 2014 (slides)。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Stack Overflow 的 HTTPS 化：漫漫长路的终点</title>
      <link>https://blog.alswl.com/2017/09/https-on-stack-overflow/</link>
      <pubDate>Wed, 27 Sep 2017 12:07:44 +0800</pubDate>
      <guid>https://blog.alswl.com/2017/09/https-on-stack-overflow/</guid>
      <description>&lt;p&gt;




&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.alswl.com/images/upload_dropbox/201709/stack-overflow.jpg&#34; alt=&#34;Stack Overflow&#34;  /&gt;


&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原文作者：Nick Craver&lt;/li&gt;
&lt;li&gt;翻译作者：&lt;a href=&#34;https://twitter.com/luosheng&#34;&gt;罗晟 @luosheng&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/alswl&#34;&gt;@alswl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文地址：&lt;a href=&#34;https://nickcraver.com/blog/2017/05/22/https-on-stack-overflow/&#34;&gt;Nick Craver - HTTPS on Stack Overflow: The End of a Long Road&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文为原创翻译文章，已经获得原作者授权，转载请注明作者及出处。&lt;/li&gt;
&lt;li&gt;本文首发在「沪江技术学院」公众号&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;今天，我们默认在 &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; 上部署了 HTTPS。目前所有的流量都将跳转到 &lt;code&gt;https://&lt;/code&gt; 上。与此同时，Google 链接也会在接下去的几周内更改。启用的过程本身只是举手之劳，但在此之前我们却花了好几年的时间。到目前为止，HTTPS 在我们所有的 Q&amp;amp;A 网站上都默认启用了。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/stack-overflow.jpg" alt="Stack Overflow"  />


</p>
<ul>
<li>原文作者：Nick Craver</li>
<li>翻译作者：<a href="https://twitter.com/luosheng">罗晟 @luosheng</a> &amp; <a href="https://twitter.com/alswl">@alswl</a></li>
<li>原文地址：<a href="https://nickcraver.com/blog/2017/05/22/https-on-stack-overflow/">Nick Craver - HTTPS on Stack Overflow: The End of a Long Road</a></li>
<li>本文为原创翻译文章，已经获得原作者授权，转载请注明作者及出处。</li>
<li>本文首发在「沪江技术学院」公众号</li>
</ul>
<hr />
<p>今天，我们默认在 <a href="https://stackoverflow.com/">Stack Overflow</a> 上部署了 HTTPS。目前所有的流量都将跳转到 <code>https://</code> 上。与此同时，Google 链接也会在接下去的几周内更改。启用的过程本身只是举手之劳，但在此之前我们却花了好几年的时间。到目前为止，HTTPS 在我们所有的 Q&amp;A 网站上都默认启用了。</p>
<p><a href="https://meta.stackoverflow.com/q/345012/13249">在过去的两个月里</a>，我们在 Stack Exchange 全网维持发布 HTTPS。Stack Overflow 是最后，也是迄今最大的的一个站点。这对我们来说是一个巨大里程碑，但决不意味着是终点。<a href="#next-steps">后文会提到</a>，我们仍有很多需要做的事情。但现在我们总算能看得见终点了，耶！</p>
<p>友情提示：这篇文章讲述的是一个漫长的旅程。非常漫长。你可能已经注意到你的滚动条现在非常小。我们遇到的问题并不是只在 Stack Exchange/Overflow 才有，但这些问题的组合还挺罕见。我在文章中会讲到我们的一些尝试、折腾、错误、成功，也会包括一些开源项目——希望这些细节对你们有所帮助。由于它们的关系错综复杂，我难以用时间顺序来组织这篇文章，所以我会将文章拆解成架构、应用层、错误等几个主题。</p>
<!-- more -->
<p>首先，我们要提一下为什么我们的处境相对独特：</p>
<ul>
<li>我们有几百个域名（<a href="https://stackexchange.com/sites">大量站点</a>及服务）
<ul>
<li>大量二级域名（<a href="https://stackoverflow.com/">stackoverflow.com</a>、<a href="https://stackexchange.com/">stackexchange.com</a>、<a href="https://askubuntu.com/">askubuntu.com</a>等）</li>
<li>大量四级域名（如 <a href="http://meta.gaming.stackexchange.com/">meta.gaming.stackexchange.com</a>）</li>
</ul>
</li>
<li>我们允许用户提交、嵌入内容（比如帖子中的图片和 YouTube 视频）</li>
<li>我们仅有一个数据中心（造成单源的延时）</li>
<li>我们有广告（及广告网络）</li>
<li>我们用 websockets，任何时刻的活跃数都不少于 50 万个（连接数问题）</li>
<li>我们会被 DDoSed 攻击（代理问题）</li>
<li>我们有不少站点及应用还是通过 HTTP API 通信的（代理问题）</li>
<li>我们热衷于性能（<em>好像</em>有点太过了）</li>
</ul>
<p>由于这篇文章实在太长，我在这里先列出链接：</p>
<ul>
<li><a href="#the-beginning">开篇</a></li>
<li><a href="#quick-specs">懒人包</a></li>
<li>基础设施
<ul>
<li><a href="#certificates">证书</a>
<ul>
<li><a href="#certificates-child-metas-metastackexchangecom">Meta 子域（meta.*.stackexcange.com）</a></li>
</ul>
</li>
<li><a href="#performance-http2">性能：HTTP/2</a></li>
<li><a href="#haproxy-serving-up-https">HAProxy：支持 HTTPS</a></li>
<li><a href="#cdnproxy-countering-latency-with-cloudflare--fastly">CDN/代理层：通过 Cloudflar 和 Fastly 优化延迟</a>
<ul>
<li><a href="#preparing-for-a-proxy-client-timings">优化代理层的准备：客户端性能测试</a></li>
<li><a href="#cloudflare">CloudFlare</a>
<ul>
<li><a href="#cloudflare-railgun">Railgun</a></li>
</ul>
</li>
<li><a href="#fastly">Fastly</a></li>
</ul>
</li>
<li><a href="#global-dns">全局 DNS</a></li>
<li><a href="#testing">测试</a></li>
</ul>
</li>
<li>应用层/代码
<ul>
<li><a href="#preparing-the-applications">应用层准备</a></li>
<li><a href="#global-login">全局登录</a></li>
<li><a href="#local-https-development">本地 HTTPS 开发</a></li>
<li>混合内容
<ul>
<li><a href="#mixed-content-from-you">来自你们</a></li>
<li><a href="#mixed-content-from-us">来自我们</a></li>
</ul>
</li>
<li><a href="#redirects-301s">跳转（301）</a></li>
<li><a href="#websockets">Websockets</a></li>
</ul>
</li>
<li><a href="#unknowns">未知</a></li>
<li><a href="#mistakes">错误</a>
<ul>
<li><a href="#mistakes-protocol-relative-urls">相对协议 URL</a></li>
<li><a href="#mistakes-apis-and-internal">API 及 .internal</a></li>
<li><a href="#mistakes-301-caching">301 缓存</a></li>
<li><a href="#mistakes-help-center-snafu">帮助中心的小插曲</a></li>
</ul>
</li>
<li><a href="#open-source">开源</a></li>
<li><a href="#next-steps">下一步</a>
<ul>
<li><a href="#hsts-preloading">HSTS 预加载</a></li>
<li><a href="#chat">聊天</a></li>
<li><a href="#today">今天</a></li>
</ul>
</li>
</ul>
<h3 id="开篇">开篇</h3>
<p>我们<a href="https://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/">早在 2013</a> 年就开始考虑在 Stack Overflow 上部署 HTTPS 了。是的，现在是 2017 年。所以，**究竟是什么拖了我们四年？**这个问题的答案放在任何一个 IT 项目上都适用：依赖和优先级。老实说，Stack Overflow 在信息安全性上的要求并不像别家那么高。我们不是银行，也不是医院，我们也不涉及信用卡支付，<a href="https://archive.org/details/stackexchange">甚至于我们每个季度都会通过 HTTP 和 BT 种子的方式发布我们大部分的数据库</a>。这意味着，从安全的角度来看，这件事情的紧急程度不像它在其他领域里那么高。而从依赖上来说，我们的复杂度比别人要高，在部署 HTTPS 时会在几大领域里踩坑，这些问题的组合是比较特殊的。后文中会看到，有一些域名的问题还是一直存在的。</p>
<p>容易踩坑的几个领域包括：</p>
<ul>
<li>用户内容（用户可以上传图片或者指定 URL）</li>
<li>广告网络（合同及支持）</li>
<li>单数据中心托管（延迟）</li>
<li>不同层级下的<a href="https://stackexchange.com/sites"><strong>几百个</strong>域名</a>（证书）</li>
</ul>
<p>那我们究竟是为什么需要 HTTPS 呢？因为数据并不是唯一需要安全性的东西。我们的用户中有操作员、开发者、还有各个级别的公司员工。我们希望他们到我们站点的通信是安全的。我们希望每一个用户的浏览历史是安全的。某些用户暗地里喜欢 monad 却又害怕被人发现。同时，Google 会<a href="https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html">提升 HTTPS 站点的搜索排名</a>（虽然我们不知道能提升多少）。</p>
<p>哦，还有<strong>性能</strong>。我们热爱性能。我热爱性能。你热爱性能。我的狗热爱性能。让我给你一个性能的拥抱。很好。谢谢。你闻起来很香。</p>
<h3 id="懒人包">懒人包</h3>
<p>很多人喜欢情人包，所以我们来一场快速问答（我们喜欢问答！）：</p>
<ul>
<li>问：你们支持什么协议？
<ul>
<li>答：TLS 1.0、1.1、1.2（注意：<a href="https://www.fastly.com/blog/phase-two-our-tls-10-and-11-deprecation-plan">Fastly 准备放弃 TLS 1.0 和 1.1</a>)。我们马上也会支持 TLS 1.3。</li>
</ul>
</li>
<li>问：你们支持 SSL v2 或者 v3 吗？
<ul>
<li>答：不支持。<a href="http://disablessl3.com/">这些协议不安全</a>。大家都应该尽早禁用。</li>
</ul>
</li>
<li>问：你们支持哪些加密套件？
<ul>
<li>答：CDN 上，我们用的是 <a href="https://www.ssllabs.com/ssltest/analyze.html?d=meta.stackexchange.com&amp;s=151.101.129.69#suitesHeading">Fastly 的默认套件</a>；</li>
<li>答：我们自己的负载均衡器上用的是 <a href="https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility">Mozilla 的现代兼容性套件</a>。</li>
</ul>
</li>
<li>问：Fastly 回源走的是 HTTPS 吗？
<ul>
<li>答：是。如果到 CDN 的请求是 HTTPS，回源的请求也是 HTTPS。</li>
</ul>
</li>
<li>问：你们支持前向安全性吗？
<ul>
<li>答：是。</li>
</ul>
</li>
<li>问：你们支持 <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS</a> 吗？
<ul>
<li>答：支持。我们正在 Q&amp;A 站点中逐步支持。一旦完成的话我们就会将其移至节点上。</li>
</ul>
</li>
<li>问：你们支持 HPKP 吗？
<ul>
<li>答：不支持，应该也不会支持。</li>
</ul>
</li>
<li>问：你们支持 SNI 吗？
<ul>
<li>答：不支持。出于 HTTP/2 性能考虑，我们使用是一个合并的通配符证书（详见后文）。</li>
</ul>
</li>
<li>问：你们的证书是哪来的？
<ul>
<li>答：我们用的是 <a href="https://www.digicert.com/">DigiCert</a>，他们很棒。</li>
</ul>
</li>
<li>问：你们支持 IE 6 吗？
<ul>
<li>答：这次之后终于不再支持了。IE 6 默认不支持 TLS（尽管你可以启用 1.0 的支持），而我们则不支持 SSL。当我们 301 跳转就绪的时候大部分 IE 6 用户就不能访问 Stack Overflow 了。一旦我们弃用 TLS 1.0，所有 IE 6 用户都不行了。</li>
</ul>
</li>
<li>问：你们负载均衡器用的什么？
<ul>
<li>答：<a href="https://www.haproxy.org/">HAProxy</a>（内部使用的是 <a href="https://www.openssl.org/">OpenSSL</a>）。</li>
</ul>
</li>
<li>问：使用 HTTPS 的动机是什么？
<ul>
<li>答：有人一直攻击我们的管员员路由，如 <a href="https://stackoverflow.com/admin.php">stackoverflow.com/admin.php</a>。</li>
</ul>
</li>
</ul>
<h3 id="证书">证书</h3>
<p>让我们先聊聊证书，因为这是最容易被误解的部分。不少朋友跟我说，他安装了 HTTPS 证书，因此他们已经完成 HTTPS 准备了。呵呵，麻烦你看一眼右侧那个小小的滚动条，这篇文章才刚刚开始，你觉得真的这么简单么？<a href="https://en.wikipedia.org/wiki/Scientific_wild-ass_guess">我有这个必要告诉你们一点人生的经验</a> ：没这么容易的。</p>
<p>一个最常见的问题是：「为何不直接用 <a href="https://letsencrypt.org/">Let’s Encrypt</a>？」</p>
<p>答案是：这个方案不适合我们。 Let’s Encrypt 的确是一个伟大的产品，我希望他们能够长期服务于大家。当你只有一个或少数几个域名时，它是非常出色的选择。但是很可惜，我们 Stack Exchange 有<a href="https://stackexchange.com/sites">数百个站点</a>，而 Let’s Encrypt 并<a href="https://letsencrypt.org/docs/faq/">不支持通配域名配置</a>。这导致 Let’s Encrypt 无法满足我们的需求。要这么做，我们就不得不在每上一个新的 Q&amp;A 站点的时候都部署一个（或两个）证书。这样会增加我们部署的复杂性，并且我们要么放弃不支持 SNI 的客户端（大约占 2% 的流量）要么提供超多的 IP——而我们目前没这么多的 IP。</p>
<p>我们之所以想控制证书，还有另外一个原因是我们想在本地负载均衡器以及 CDN / 代理提供商那边使用完成相同的证书。如果不做到这个，我们无法顺畅地做从代理那里做失效备援（failover）。支持 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning">HTTP 公钥固定（HPKP）</a>的客户端会报认证失败。虽然我们仍在评估是否使用 HPKP，但是如果有一天要用的话我们得提前做好准备。</p>
<p>很多朋友在看见我们的主证书时候会吓得目瞪口呆，因为它包含了我们的主域名和通配符子域名。它看上去长成这样：</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-MainCertificate.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-MainCertificate.png" alt="Main Certificate"  />


</a></p>
<p>为什么这么做？老实说，是我们让 <a href="https://www.digicert.com/">DigiCert</a> 替我们做的。这么做会导致每次发生变化的时候都需要手动合并证书，了　我们为什么要忍受这么麻烦的事呢？首先，我们期望能够尽可能让更多用户使用我们产品。这里面包括了那些还不支持 SNI 的用户（比如在我们项目启动的时候 Android 2.3 势头正猛）。另外，也包括 HTTP/2 与一些现实问题——我们过会儿会谈到这一块。</p>
<p>Meta 子域（meta.*.<a href="http://stackexcange.com/">stackexcange.com</a>）</p>
<p>Stack Exchage 的一个设计理念是，针对每个 Q&amp;A 站点，我们都有一个地方供讨论。我们称之为 <a href="https://stackoverflow.blog/2010/04/29/do-trilogy-sites-need-a-third-place/">“second place”</a>。比如 <code>meta.gaming.stackexchange.com</code> 用来讨论 <code>gaming.stackexchange.com</code>。这个有什么特别之处呢？好吧，并没有，除了域名：这是一个 4 级域名。</p>
<p>我之前已经说过<a href="https://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/">这个问题</a>，但后来怎么样了呢？具体来说，现在面临的问题是 <code>*.stackexchange.com</code> 包含 <code>gaming.stackexchange.com</code>（及几百个其它站点），但它<strong>并不包含</strong> <code>meta.gaming.stackexchange.com</code>。<a href="https://tools.ietf.org/html/rfc6125#section-6.4.3">RFC 6125 （第 6.4.3 节）</a> 写道：</p>
<blockquote>
<p>客户端 <strong>不应该</strong> 尝试匹配一个通配符在中间的域名（比如，不要匹配 <code>bar.*.example.net</code>）</p>
</blockquote>
<p>这意味着我们无法使用 <code>meta.*.stackexchange.com</code>，那怎么办呢？</p>
<ul>
<li>方案一：部署 <a href="https://www.digicert.com/subject-alternative-name.htm">SAN 证书（多域名证书）</a>
<ul>
<li>我们需要准备 3 个证书和 3 个 IP（每张证书支持域名上限是 100），并且会把新站上线复杂化（虽然这个机制已经改了）</li>
<li>我们要在 CDN/代理层上部署三个自定义证书</li>
<li>我们要给 <code>meta.*</code> 这种形式的域名配置额外的 DNS 词条
<ul>
<li>根据 DNS 规则，我们必须给每个这样的站点配置一条 DNS，无法批量配置，从而提高了新站上线和维护代理的成本</li>
</ul>
</li>
</ul>
</li>
<li>方案二：将所有域名迁移到 <code>*.meta.stackexchange.com</code>
<ul>
<li>我们会有一次痛苦的迁移过程，但这是一次性的，并且未来维护证书成本较低</li>
<li>我们需要部署一个全局登录系统（<a href="#global-login">详情见此</a>）</li>
<li>这个方案仍然不解决 HSTS 预加载下面的 <code>includeSubDomains</code> 问题（<a href="#hsts-reloading">详情见此</a>）</li>
</ul>
</li>
<li>方案三：啥都不做，放弃
<ul>
<li>这个方案最简单，然而这是假方案</li>
</ul>
</li>
</ul>
<p>我们部署了 <a href="#global-login">全局登录系统</a>，然后将子 meta 域名用 301 重定向到新地址，比如 <a href="https://gaming.meta.stackexchange.com">gaming.meta.stackexchange.com</a>。做完这个之后我们才意识到，因为这些域名<em>曾经</em>存在过，所以对于 HSTS 预加载来说是个很大的问题。这件事情还在进行中，我会在<a href="#hsts-preloading">文章最后面</a>讨论这个问题。这类问题对于 <code>meta.pt.stackoverflow.com</code> 等站点也存在，不过还好我们只有四个非英语版本的 Stack Overflow，所以问题没有被扩大。</p>
<p>对了，这个方案本身还存在<em>另一个</em>问题。由于将 cookies 移动到顶级目录，然后依赖于子域名对其的继承，我们必须调整一些其他域名。比如，在我们新系统中，我们使用 SendGrid 来发送邮件（进行中）。我们从 <code>stackoverflow.email</code> 这个域名发邮件，邮件内容里的链接域名是 <code>sg-links.stackoverflow.email</code>（使用 <a href="https://en.wikipedia.org/wiki/CNAME_record">CNAME</a> 管理)，这样你的浏览器就不会将敏感的 cookie 发出去。如果这个域名是 <code>links.stackoverflow.com</code>，那么你的浏览器会将你在这个域名下的 cookie 发送出去。 我们有不少虽然使用我们的域名，但并不属于我们自己的服务。这些子域名都需要从我们受信的域名下移走，否则我们就会把你们的 cookie 发给非我们自有的服务器上。如果因为这种错误而导致 cookie 数据泄露，这将是件很丢人的事情。</p>
<p>我们有试过通过代理的方式来访问我们的 Hubspot CRM 网站，在传输过程中可以将 cookies 移除掉。但是很不幸 Hubspot 使用 <a href="https://www.akamai.com/">Akamai</a>，它会判定我们的 HAProxy 实例是机器人，并将其封掉。头三次的时候还挺有意思的……当然这也说明这个方式真的不管用。我们后来再也没试过了。</p>
<p>你是否好奇为什么 Stack Overflow 的博客地址是 <a href="https://stackoverflow.blog/">https://stackoverflow.blog/</a>？没错，这也是出于安全目的。我们把博客搭在一个外部服务上，这样市场部门和其他团队能够更便利地使用。正因为这样，我们不能把它放在有 cookie 的域名下面。</p>
<p>上面的方案会牵涉到子域名，引出 <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS</a> <a href="https://hstspreload.org/">预加载</a> 和 <code>includeSubDomains</code> 命令问题，我们一会来谈这块内容。</p>
<h3 id="性能http2">性能：HTTP/2</h3>
<p>很久之前，大家都认为 HTTPS 更慢。在那时候也确实是这样。但是时代在变化，我们说 HTTPS 的时候不再是单纯的 HTTPS，而是基于 HTTPS 的 HTTP/2。虽然 <a href="https://http2.github.io/faq/#does-http2-require-encryption">HTTP/2 不要求加密</a>，但<em>事实上</em>却是加密的。主流浏览器都要求 HTTP/2 提供加密连接来启用其大部分特性。你可以来说 spec 或者规定上不是这么说的，但浏览器才是你要面对的现实。我诚挚地期望这个协议直接改名叫做 HTTPS/2，这样也能给大家省点时间。各浏览器厂商，你们听见了吗？</p>
<p>HTTP/2 有很多功能上的增强，特别是在用户请求之前可以主动推送资源这点。这里我就不展开了，<a href="https://hpbn.co/http2/">Ilya Grigorik 已经写了一篇非常不错的文章</a>。我这里简单罗列一下主要优点：</p>
<ul>
<li><a href="https://hpbn.co/http2/#request-and-response-multiplexing">请求/响应多路复用</a></li>
<li><a href="https://hpbn.co/http2/#server-push">服务端推送</a></li>
<li><a href="https://hpbn.co/http2/#header-compression">Header 压缩</a></li>
<li><a href="https://hpbn.co/http2/#stream-prioritization">网络流优先级</a></li>
<li><a href="https://hpbn.co/http2/#one-connection-per-origin">更少的连接</a></li>
</ul>
<p>咦？怎么没提到证书呢？</p>
<p>一个很少人知道的特性是，<a href="https://hpbn.co/optimizing-application-delivery/#eliminate-domain-sharding">你可以推送内容到不同的域名</a>，只要满足以下的条件：</p>
<ol>
<li>这两个域名需要解析到同一个 IP 上</li>
<li>这两个域名需要使用同一张 TLS 证书（看到没！）</li>
</ol>
<p>让我们看一下我们当前 DNS 配置：</p>
<pre tabindex="0"><code>λ dig stackoverflow.com +noall +answer
; &lt;&lt;&gt;&gt; DiG 9.10.2-P3 &lt;&lt;&gt;&gt; stackoverflow.com +noall +answer
;; global options: +cmd
stackoverflow.com.      201     IN      A       151.101.1.69
stackoverflow.com.      201     IN      A       151.101.65.69
stackoverflow.com.      201     IN      A       151.101.129.69
stackoverflow.com.      201     IN      A       151.101.193.69

λ dig cdn.sstatic.net +noall +answer
; &lt;&lt;&gt;&gt; DiG 9.10.2-P3 &lt;&lt;&gt;&gt; cdn.sstatic.net +noall +answer
;; global options: +cmd
cdn.sstatic.net.        724     IN      A       151.101.193.69
cdn.sstatic.net.        724     IN      A       151.101.1.69
cdn.sstatic.net.        724     IN      A       151.101.65.69
cdn.sstatic.net.        724     IN      A       151.101.129.69
</code></pre><p>嘿，这些 IP 都是一致的，并且他们也拥有相同的证书！这意味着你可以直接使用 HTTP/2 的服务器推送功能，而无需影响 HTTP/1.1 用户。 HTTP/2 有推送的同时，HTTP/1.1 也有了<a href="https://blog.stackpath.com/glossary/domain-sharding/">域名共享</a>（通过 <code>sstatic.net</code>）。我们暂未部署服务器推送功能，但一切都尽在掌握之中。</p>
<p>HTTPS 是我们实现性能目标的一个手段。可以这么说，我们的主要目标是性能，而非站点安全性。我们想要安全性，但光是安全性不足以让我们花那么多精力来在全网部署 HTTPS。当我们把所有因素都考虑在一起的时候，我们可以评估出要完成这件事情需要付出的巨大的时间和精力。在 2013 年，HTTP/2 还没有扮演那么重要的角色。而现在形势变了，对其的支持也多了，最终这成为了我们花时间调研 HTTPS 的催化剂。</p>
<p>值得注意的是 HTTP/2 标准在我们项目进展时还在持续发生变化。它从 <a href="https://en.wikipedia.org/wiki/SPDY">SPDY</a> 演化为 <a href="https://en.wikipedia.org/wiki/HTTP/2">HTTP/2</a>，从 <a href="https://tools.ietf.org/id/draft-agl-tls-nextprotoneg-03.html">NPN</a> 演化为 <a href="https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation">ALPN</a>。我们这里不会过多涉及到这部分细节，因为我们并没有为其做太多贡献。我们观望并从中获准，但整个互联网却在推进其向前发展。如果你感兴趣，可以看看 <a href="https://blog.cloudflare.com/introducing-http2/">Cloudflare 是怎么讲述其演变的</a>。</p>
<h3 id="haproxy支持-https">HAProxy：支持 HTTPS</h3>
<p>我们最早在 2013 年开始在 HAProxy 中使用 HTTPS。为什么是 <a href="https://www.haproxy.org/">HAProxy</a> 呢？这是历史原因，我们已经在使用它了，而它在 2013 年 的 <a href="https://www.haproxy.org/news.html">1.5 开发版</a>中支持了 HTTPS，并在 2014 年发布了正式版。曾经有段时间，我们把 Nginx 放置在 HAProxy 之前（<a href="https://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/">详情看这里</a>）。但是简单些总是更好，我们总是想着要避免在链路、部署和其他问题上的复杂问题。</p>
<p>我不会探讨太多细节，因为也没什么好说的。HAProxy 在 1.5 之后使用 OpenSSL 支持 HTTPS，配置文件也是清晰易懂的。我们的配置方式如下：</p>
<ul>
<li>跑在 4 个进程上
<ul>
<li>1 个用来做 HTTP/前端处理</li>
<li>2-4 个用来处理 HTTPS 通讯</li>
</ul>
</li>
<li>HTTPS 前端使用 <a href="https://unix.stackexchange.com/a/206395/400">socket 抽象命名空间</a>来连接至 HTTP 后端，这样可以极大减少资源消耗</li>
<li>每一个前端或者每一「层」都监听了 :433 端口（我们有主、二级、websockets 及开发环境）</li>
<li>当请求进来的时候，我们在请求头上加入一些数据（也会移除掉一些你们发送过来的），再将其转发给 web 层</li>
<li>我们使用 <a href="https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility">Mozilla 提供的加密套件</a>。注意，这和我们 CDN 用的不是同样的套件。</li>
</ul>
<p>HAProxy 比较简单，这是我们使用一个 SSL 证书来支持 :433 端口的第一步。事后看来，这也只是一小步。</p>
<p>这里是上面描述情况下的架构图，我们马上来说前面的那块云是怎么回事：</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-Layout.svg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-Layout.svg" alt="Logical Architecture"  />


</a></p>
<h3 id="cdn代理层通过-cloudflare-和-fastly-优化延迟">CDN/代理层：通过 Cloudflare 和 Fastly 优化延迟</h3>
<p>我对 Stack Overflow <a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/">架构</a><a href="https://stackexchange.com/performance">的效率</a>一直很自豪。我们很厉害吧？仅用一个数据中心和几个服务器就撑起了一个大型网站。不过这次不一样了。尽管效率这件事情很好，但是在延迟上就成了个问题。我们不需要那么多服务器，我们也不需要多地扩展（不过我们有一个灾备节点）。这一次，这就成为了问题。由于光速，我们（暂时）无法解决延迟这个基础性问题。我们听说有人已经在处理这个问题了，不过他们造的时间机器好像有点问题。</p>
<p>让我们用数字来理解延迟。赤道长度是 40000 公里（光绕地球一圈的最坏情况）。<a href="https://en.wikipedia.org/wiki/Speed_of_light">光速</a>在真空中是 299,792,458 米/秒。很多人用这个数字，但光纤并不是真空的。实际上光纤有 <a href="https://physics.stackexchange.com/q/80043/653">30-31% 损耗</a>，所以我们的这个数字是：(40,075,000 m) / (299,792,458 m/s * .70) = 0.191s，也就是说最坏情况下绕地球一圈是 191ms，对吧？不对。这假设的是一条理想路径，而实际上两个网络节点的之间几乎不可能是直线。中间还有路由器、交换机、缓存、处理器队列等各种各样的延迟。累加起来的延迟相当可观。</p>
<p>这些和 Stack Overflow 有什么关系呢？云主机的优势出来了。如果你用一家云供应商，你访问到的就是相对较近的服务器。但对我们来说不是这样，你离服务部署在纽约或丹佛（主备模式）越远，延迟就越高。而使用 HTTPS，在协商连接的时候需要一个额外的往返。这还是最好的情况（<a href="https://blog.cloudflare.com/introducing-0-rtt/">使用 0-RTT 优化 TLS 1.3</a>）。<a href="https://twitter.com/igrigorik">Ilya Grigorik</a> 的 <a href="https://istlsfastyet.com/">这个总结</a> 讲的很好。</p>
<p>来说 <a href="https://www.cloudflare.com/">Cloudflare</a> 和 <a href="https://www.fastly.com/">Fastly</a>。HTTPS 并不是闭门造车的一个项目，你看下去就会知道，我们还有好几个项目在并行。在搭建一个靠近用户的 HTTPS 终端（以降低往返时间）时，我们主要考虑的是：</p>
<ul>
<li>终端 HTTPS 支持</li>
<li>DDoS 防护</li>
<li>CDN 功能</li>
<li>与直连等同或更优的性能</li>
</ul>
<h3 id="优化代理层的准备客户端性能测试">优化代理层的准备：客户端性能测试</h3>
<p>开始正式启用终端链路加速之前，我们需要有性能测试报告。我们在浏览器搭好了一整套覆盖全链路性能数据的测试。 浏览器里可以通过 JavaScript 从 <a href="https://www.w3.org/TR/navigation-timing/"><code>window.performance</code></a> 取性能耗时。打开你浏览器的审查器，你可以亲手试一下。我们希望这个过程透明，所以从第一天开始就把详细信息<a href="https://teststackoverflow.com/">放在了 teststackoverflow.com</a> 上。这上面并没有敏感信息，只有一些由页面<em>直接</em>载入的 URI 和资源，以及它们的耗时。每一张记录下来的页面大概长这样：</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-Teststackoverflow.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-Teststackoverflow.png" alt="teststackoverflow.com"  />


</a></p>
<p>我们目前对 5% 的流量做性能监控。这个过程没有那么复杂，但是我们需要做的事情包括：</p>
<ol>
<li>把耗时转成 JSON</li>
<li>页面加载后上传性能测试数据</li>
<li>将性能测试上传给我们后台服务器</li>
<li>在 SQL Server 中使用 <a href="http://www.nikoport.com/columnstore/">clustered columnstore</a> 存储数据</li>
<li>使用 <a href="https://bosun.org/">Bosun</a> (具体是 <a href="https://github.com/bretcope/BosunReporter.NET">BosunReporter.NET</a>) 汇集数据</li>
</ol>
<p>最终的结果是我们有了一份来自于全球<em>真实</em>用户的很好的实时汇总。这些数据可供我们分析、监控、报警，以及用于评估变化。它大概长这样：</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-ClientTimings.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-ClientTimings.png" alt="Client Timings Dashboard"  />


</a></p>
<p>幸好，我们有持续的流量来获取数据以供我们决策使用，目前的量级是 50 亿，并且还在增长中。这些数据概览如下：</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-ClientTimingsDatabase.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-ClientTimingsDatabase.png" alt="Client Timings Database"  />


</a></p>
<p>OK，我们已经把基础工作准备好了，是时候来测试 CDN/代理层供应商了。</p>
<h3 id="cloudflare">Cloudflare</h3>
<p>我们评估了很多 CDN/DDoS 防护层供应商。最终选择了 <a href="https://www.cloudflare.com/">Cloudflare</a>，主要是考虑到他们的基础设施、快速响应、还有他们承诺的 <a href="https://www.cloudflare.com/website-optimization/railgun/">Railgun</a>。那么我们如何测试使用了 Cloudfalre 之后用户的真实效果？是否需要部署服务来获取用户数据？答案是不需要！</p>
<p>Stack Overflow 的数据量非常大：月 PV 过十亿。记得我们上面讲的客户端耗时纪录吗？我们每天都有几百万的访问了，所以不是直接可以问他们吗？我们是可以这么做，只需要在页面中嵌入 <code>&lt;iframe&gt;</code> 就行了。Cloudflare 已经是我们 <a href="https://cdn.sstatic.net/">cdn.sstatic.net</a>（我们共用的无 cookie 的静态内容域）的托管商了。但是这是通过一条<a href="https://en.wikipedia.org/wiki/CNAME_record"><code>CNAME</code> DNS 纪录</a>来做的，我们把 DNS 指向他们的 DNS。所以要用 Cloudflare 来当代理服务的话，我们需要他们指向我们的 DNS。所以我们先需要测试他们 DNS 的性能。</p>
<p>实际上，要测试性能我们需要把二级域名给他们，而不是 <code>something.stackoverflow.com</code>，因为这样可能会有不一致的<a href="https://wiki.gandi.net/en/glossary/glue-record">胶水记录</a>而导致多次查询。明确一下，<a href="https://en.wikipedia.org/wiki/Top-level_domain">一级域名 (TLDs)</a>指的是 <code>.com</code>, <code>.net</code>, <code>.org</code>, <code>.dance</code>, <code>.duck</code>, <code>.fail</code>, <code>.gripe</code>, <code>.here</code>, <code>.horse</code>, <code>.ing</code>, <code>.kim</code>, <code>.lol</code>, <code>.ninja</code>, <code>.pink</code>, <code>.red</code>, <code>.vodka</code>. 和 <code>.wtf</code>。 注意，<a href="https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains">这些域名尾缀都是</a>，我可没开玩笑。 <a href="https://en.wikipedia.org/wiki/Second-level_domain">二级域名 (SLDs)</a> 就多了一级，比如 <code>stackoverflow.com</code>, <code>superuser.com</code> 等等。我们需要测的就是这些域名的行为及表现。因此，我们就有了 <code>teststackoverflow.com</code>，通过这个新域名，我们在全球范围内测试 DNS 性能。对一部分比例的用户，通过嵌一个 <code>&lt;iframe&gt;</code>（在测试中开关），我们可以轻松地获取用户访问 DNS 的相关数据。</p>
<p>注意，测试过程最少需要 24 小时。在各个时区，互联网的表现会随着用户作息或者 Netflix 的使用情况等发生变化。所以要测试一个国家，需要完整的一天数据。最好是在工作日（而不要半天落在周六）。我们知道会有各种意外情况。互联网的性能并不是稳定的，我们要通过数据来证明这一点。</p>
<p>我们最初的假设是，多增加了的一个节点会带来额外的延时，我们会因此损失一部分页面加载性能。但是 DNS 性能上的增加其实弥补了这一块。比起我们只有一个数据中心来说，Cloudflare 的 DNS 服务器部署在离用户更近的地方，这一块性能要好得多得多。我希望我们能有空来放出这一块的数据，只不过这一块需要很多处理（以及托管），而我现在也没有足够多的时间。</p>
<p>接下来，我们开始将 <code>teststackoverflow.com</code> 放在 Cloudflare 的代理上做链路加速，同样也是放在 <code>&lt;iframe&gt;</code> 中。我们发现美国和加拿大的服务由于多余的节点而变慢，但是世界其他地方都是持平或者更好。这满足我们的期望。我们开始使用 Cloudflare 的网络对接我们的服务。期间发生了一些 DDos 的攻击，不过这是另外的事了。那么，为什么我们接受在美国和加拿大地区慢一点呢？因为每个页面加载需要的时间仅为 200-300ms，哪怕慢一点也还是飞快。当时我们认为 <a href="https://www.cloudflare.com/website-optimization/railgun/">Railgun</a> 可以将这些损耗弥补回来。</p>
<p>这些测试完成之后，我们为了预防 DDos 工作，做了一些其他工作。我们接入了额外的 ISP 服务商以供我们的 CDN/代理层对接。毕竟如果能绕过攻击的话，我们没必要在代理层做防护。现在每个机房都有 4 个 ISP 服务商（译者注：相当于电信、联通、移动、教育网），两组路由器，他们之间使用 <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP</a>协议。我们还额外添置了两组负载均衡器专门用于处理 CDN/代理层的流量。</p>
<p>Cloudflare: Railgun</p>
<p>与此配套，我们启用了两组 <a href="https://www.cloudflare.com/website-optimization/railgun/">Railgun</a>。Railgun 的原理是在 Cloudflare 那边，使用 <a href="https://memcached.org/">memcached</a> 匹配 URL 进行缓存数据。当 Railgun 启用的时候，每个页面（有一个大小阈值）都会被缓存下来。那么在下一次请求时候，如果在这个 URL 在 Cloudflare 节点上和我们这里都缓存的话，我们仍然会问 web 服务器最新的数据。但是我们不需要传输完整的数据，只需要把传输和上次请求的差异数据传给 Cloudflure。他们把这个差异运用于他们的缓存上，然后再发回给客户端。这时候， <a href="https://en.wikipedia.org/wiki/Gzip">gzip 压缩</a> 的操作也从 Stack Overflow 的 9 台 Web Server 转移到了一个 Railgun 服务上，这台服务器得是 CPU 密集型的——我指出这点是因为，这项服务需要评估、购买，并且部署在我们这边。</p>
<p>举个例子，想象一下，两个用户打开同一个问题的页面。从浏览效果来看，他们的页面技术上长得<em>几乎</em>一样，仅仅有细微的差别。如果我们大部分的传输内容只是一个 diff 的话，这将是一个巨大的性能提升。</p>
<p>总而言之，Railgun 通过减少大量数据传输的方式提高性能。当它顺利工作的时候确实是这样。除此之外，还有一个额外的优点：请求不会重置连接。由于 <a href="https://en.wikipedia.org/wiki/TCP_congestion_control#Slow_start">TCP 慢启动</a>，当连接环境较为复杂时候，可能导致连接被限流。而 Railgun 始终以固定的连接数连接到 Cloudflare 的终端，对用户请求采用了多路复用，从而其不会受慢启动影响。小的 diff 也减少了慢启动的开销。</p>
<p>很可惜，我们由于种种原因我们在使用 Railgun 过程中一直遇到问题。据我所知，我们拥有当时最大的 Railgun 部署规模，这把 Railgun 逼到了极限。尽管我们花了一年追踪各种问题，最终还是不得不放弃了。这种状况不仅没有给我们省钱，还耗费了更多的精力。现在几年过去了。如果你正在评估使用 Railgun，你最好看最新的版本，他们一直在做<a href="https://www.cloudflare.com/docs/railgun/changelog.html">优化</a>。我也建议你自己做决定是否使用 Railgun。</p>
<h3 id="fastly">Fastly</h3>
<p>我们最近才迁到 <a href="https://www.fastly.com/">Fastly</a>，因为我们在讲 CDN/代理层，我也会顺带一提。由于很多技术工作在 Cloudflare 那边已经完成，所以迁移本身并没有什么值得说的。大家会更感兴趣的是：为什么迁移？毕竟 Cloudflare 在各方面是不错的：丰富的数据中心、稳定的带宽价格、包含 DNS 服务。答案是：它不再是我们最佳的选择了。Flastly 提供了一些我们更为看中的特性：灵活的终端节点控制能力、配置快速分发、自动配置分发。并不是说 Cloudflare 不行，只是它不再适合 Stack Overflow 了。</p>
<p>事实胜于雄辩：如果我不认可 Cloudflare，我的私人博客不可能选择它，嘿，就是这个博客，你现在正在阅读的。</p>
<p>Fastly 吸引我们的主要功能是提供了 <a href="https://en.wikipedia.org/wiki/Varnish_(software)">Varnish</a> 和 <a href="https://docs.fastly.com/guides/vcl/">VCL</a>。这提供了高度的终端可定制性。有些功能吧，Cloudfalre 无法快速提供（因为他们是通用化的，会影响所有用户），在 Fastly 我们可以自己做。这是这两家架构上的差异，这种「代码级别高可配置」对于我们很适用。同时，我们也很喜欢他们在沟通、基础设施的开放性。</p>
<p>我来展示一个 VCL 好用在哪里的例子。最近我们遇到 .NET 4.6.2 的一个<a href="https://github.com/Microsoft/dotnet/issues/330">超恶心 bug</a>，它会导致 max-age 有超过 2000 年的缓存时间。快速解决方法是在终端节点上有需要的时候去覆盖掉这个头部，当我写这篇文章的时候，这个 VCL 配置是这样的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">sub</span> <span class="s">vcl_fetch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kn">if</span> <span class="s">(beresp.http.Cache-Control)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kn">if</span> <span class="s">(req.url.path</span> <span class="p">~</span> <span class="sr">&#34;^/users/flair/&#34;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="kn">set</span> <span class="s">beresp.http.Cache-Control</span> <span class="p">=</span> <span class="s">&#34;public,</span> <span class="s">max-age=180&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="kn">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="kn">set</span> <span class="s">beresp.http.Cache-Control</span> <span class="p">=</span> <span class="s">&#34;private&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>这将给用户能力展示页 3 分钟的缓存时间（数据量还好），其余页面都不设置。这是一个为解决紧急时间的非常便于部署的全局性解决方案。 我们很开心现在有能力在终端做一些事情。我们的 <a href="https://twitter.com/alioth">Jason Harvey</a> 负责 VCL 配置，并写了一些自动化推送的功能。我们基于一个 Go 的开源库 <a href="https://github.com/alienth/fastlyctl">fastlyctl</a> 做了开发。</p>
<p>另一个 Fastly 的特点是可以使用我们自己的证书，Cloudflare 虽然也有这个服务，但是费用太高。如我上文提到的，我们现在已经具备使用 HTTP/2 推送的能力。但是，Fastly 就不支持 DNS，这个在 Cloudflare 那里是支持的。现在我们需要自己解决 DNS 的问题了。可能最有意思的就是这些来回的折腾吧？</p>
<h3 id="全局-dns">全局 DNS</h3>
<p>当我们从 Cloudflare 迁移到 Fastly 时候，我们必须评估并部署一个新的 DNS 供应商。这里有篇 <a href="https://twitter.com/thefarseeker">Mark Henderson</a> 写的 <a href="http://blog.serverfault.com/2017/01/09/surviving-the-next-dns-attack/">文章</a> 。鉴于此，我们必须管理：</p>
<ul>
<li>我们自己的 DNS 服务器（备用）</li>
<li><a href="http://name.com/">Name.com</a> 的服务器（为了那些不需要 HTTPS 的跳转服务）</li>
<li>Cloudflare DNS</li>
<li>Route 53 DNS</li>
<li>Google DNS</li>
<li>Azure DNS</li>
<li>其他一些（测试时候使用）</li>
</ul>
<p>这个本身就是另一个项目了。为了高效管理，我们开发了 <a href="http://blog.serverfault.com/2017/04/11/introducing-dnscontrol-dns-as-code-has-arrived/">DNSControl</a>。这现在已经是<a href="https://stackexchange.github.io/dnscontrol/">开源项目了</a>，<a href="https://github.com/StackExchange/dnscontrol">托管在 GiHub</a> 上，使用 <a href="https://golang.org/">Go</a> 语言编写。 简而言之，每当我们推送 JavaScript 的配置到 git，它都会马上在全球范围里面部署好 DNS 配置。这里有一个简单的例子，我们拿 <a href="https://askubuntu.com/">askubuntu.com</a> 做示范：</p>
<pre tabindex="0"><code>D(&#39;askubuntu.com&#39;, REG_NAMECOM,
    DnsProvider(R53,2),
    DnsProvider(GOOGLECLOUD,2),
    SPF,
    TXT(&#39;@&#39;, &#39;google-site-verification=PgJFv7ljJQmUa7wupnJgoim3Lx22fbQzyhES7-Q9cv8&#39;), // webmasters
    A(&#39;@&#39;, ADDRESS24, FASTLY_ON),
    CNAME(&#39;www&#39;, &#39;@&#39;),
    CNAME(&#39;chat&#39;, &#39;chat.stackexchange.com.&#39;),
    A(&#39;meta&#39;, ADDRESS24, FASTLY_ON),
END)
</code></pre><p>太棒了，接下来我们就可以使用客户端响应测试工具来测试啦！<a href="#preparing-for-a-proxy-client-timings">上面提到的工具</a>可以实时告诉我们真实部署情况，而不是模拟数据。但是我们还需要测试所有部分都正常。</p>
<h3 id="测试">测试</h3>
<p>客户端响应测试的追踪可以方便我们做性能测试，但这个并不适合用来做配置测试。客户端响应测试非常适合展现结果，但是配置有时候并没有界面，所以我们开发了 <a href="https://godoc.org/github.com/StackExchange/httpunit">httpUnit</a> （后来知道<a href="http://httpunit.sourceforge.net/">这个项目重名了</a> ）。这也是一个使用 Go 语言的<a href="https://github.com/StackExchange/httpunit">开源项目</a>。以 <code>teststackoverflow.com</code> 举例，使用的配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[[plan]]</span>
</span></span><span class="line"><span class="cl">    <span class="na">label</span> <span class="o">=</span> <span class="s">&#34;teststackoverflow_com&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    url = &#34;http://teststackoverflow.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    ips = [&#34;28i&#34;]
</span></span></span><span class="line"><span class="cl"><span class="s">    text = &#34;&lt;title&gt;Test Stack Overflow Domain&lt;/title&gt;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    tags = [&#34;so&#34;]</span>
</span></span><span class="line"><span class="cl"><span class="k">[[plan]]</span>
</span></span><span class="line"><span class="cl">    <span class="na">label</span> <span class="o">=</span> <span class="s">&#34;tls_teststackoverflow_com&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    url = &#34;https://teststackoverflow.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    ips = [&#34;28&#34;]
</span></span></span><span class="line"><span class="cl"><span class="s">    text = &#34;&lt;title&gt;Test Stack Overflow Domain&lt;/title&gt;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">    tags = [&#34;so&#34;]</span>
</span></span></code></pre></div><p>每次我们更新一下防火墙、证书、绑定、跳转时都有必要测一下。我们必须保证我们的修改不会影响用户访问（先在预发布环境进行部署）。 httpUnit 就是我们来做集成测试的工具。</p>
<p>我们还有一个开发的内部工具（由亲爱的 <a href="https://twitter.com/yesthattom">Tom Limoncelli</a> 开发），用来管理我们负载均衡上面的 <a href="https://en.wikipedia.org/wiki/Virtual_IP_address">VIP 地址</a> 。我们先在一个备用负载均衡上面测试完成，然后将所有流量切过去，让之前的主负载均衡保持一个稳定状态。如果期间发生任何问题，我们可以轻易回滚。如果一切顺利，我们就把这个变更应用到那台负载均衡上。这个工具叫做 <code>keepctl</code>（keepalived control 的简称），时间允许的话很快就会整理开源出来。</p>
<h3 id="应用层准备">应用层准备</h3>
<p>上面提到的只是架构方面的工作。这通常是由 <a href="http://stackoverflow.com/company/team#Engineering">Stack Overflow 的几名网站可靠性工程师</a>组成的团队完成的。而应用层也有很多需要完成的工作。这个列表会很长，先让我拿点咖啡和零食再慢慢说。</p>
<p>很重要的一点是，<a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/">Stack Overflow 与 Stack Exchange 的架构</a> Q&amp;A 采用了<a href="https://en.wikipedia.org/wiki/Multitenancy">多租户技术</a>。这意味着如果你访问 <code>stackoverflow.com</code> 或者 <code>superuser.com</code> 又或者 <code>bicycles.stackexchange.com</code>，你返回到的其实是同一台服务器上的同一个 <code>w3wp.exe</code> 进程。我们通过浏览器发送的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host"><code>Host</code> 请求头</a>来改变请求的上下文。为了更好地理解我们下文中提到的一些概念，你需要知道我们代码中的 <code>Current.Site</code> 其实指的是 <em>请求</em> 中的站点。<code>Current.Site.Url()</code> 和 <code>Current.Site.Paths.FaviconUrl</code> 也是基于同样的概念。</p>
<p>换一句话说：我们的 Q&amp;A 全站都是跑在同一个服务器上的同一个进程，而用户对此没有感知。我们在九台服务器上每一台跑一个进程，只是为了发布版本和冗余的问题。</p>
<p>全局登录</p>
<p>整个项目中有一些看起来可以独立出来（事实上也是），不过也同属于整个大 HTTPS 迁移中的一部分。登录就是其中一个项目。我首先来说说这个，因为这比别它变化都要早上线。</p>
<p>在 Stack Overflow（及 Stack Exchange）的头五六年里，你登录的是一个个的独立网站。比如，<code>stackoverflow.com</code>、<code>stackexchange.com</code> 以及 <code>gaming.stackexchange.com</code> 都有它们自己的 cookies。值得注意的是：<code>meta.gaming.stackexchange.com</code> 的登录 cookie 是从 <code>gaming.stackexchange.com</code> 带过来的。这些是我们上面讨论证书时提到的 meta 站点。他们的登录信息是相关联的，你只能通过父站点登录。在技术上说并没有什么特别的，但考虑到用户体验就很糟糕了。你必须一个一个站登录。我们用「全局认证」的方法来<a href="https://stackoverflow.blog/2010/09/11/global-network-auto-login/">「修复」了这个问题</a>，方法是在页面上放一个 <code>&lt;iframe&gt;</code>，内面访问一下 <code>stackauth.com</code>。如果用户在别处登录过的话，它也会在这个站点上登录，至少会去试试。这个体验还行，但是会有弹出框问你是否点击重载以登录，这样就又不是太好。我们可以做得更好的。对了，你也可以去问问 <a href="https://twitter.com/kevinmontrose">Kevin Montrose</a> 关于移动 Safari 的匿名模式，你会震惊的。</p>
<p>于是我们有了「通用登录」。为什么用「通用」这个名字？因为我们已经用过「全局」了。我们就是如此单纯。所幸 cookies 也很单纯的东西。父域名里的 cookie（如 <code>stackexchange.com</code>）在你的浏览器里被带到所有子域名里去（如 <code>gaming.stackexchange.com</code>）。如果我们只二级域名的话，其实我们的域名并不多：</p>
<ul>
<li><a href="https://askubuntu.com/">askubuntu.com</a></li>
<li><a href="https://mathoverflow.net/">mathoverflow.net</a></li>
<li><a href="https://serverfault.com/">serverfault.com</a></li>
<li><a href="https://stackapps.com/">stackapps.com</a></li>
<li><a href="https://stackexchange.com/">stackexchange.com</a></li>
<li><a href="https://stackoverflow.com/">stackoverflow.com</a></li>
<li><a href="https://superuser.com/">superuser.com</a></li>
</ul>
<p>是的，我们有一些域名是跳转到上面的列表中的，比如 <a href="http://askdifferent.com/">askdifferent.com</a>。但是这些只是跳转而已，它们没有 cookies 也无需登录。</p>
<p>这里有很多细节的后端工作我没有提（归功于 <a href="https://twitter.com/superdalgas">Geoff Dalgas</a> 和 <a href="https://twitter.com/aalear">Adam Lear</a>），但大体思路就是，当你登录的时候，我们把这些域名都写入一个 cookie。我们是通过第三方的 cookie 和<a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">随机数</a>来做的。当你登录其中任意一个网站的时候，我们在页面上都会放 6 个 <code>&lt;img&gt;</code> 标签来往其它域名写入 cookie，本质上就完成了登录工作。这并不能在 <em>所有情况</em> 下都适用（尤其是移动 Safari 简直是要命了），但和之前比起来那是好得多了。</p>
<p>客户端的代码不复杂，基本上长这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/users/login/universal/request&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arrayId</span><span class="p">,</span> <span class="nx">group</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;//&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="nx">group</span><span class="p">.</span><span class="nx">Host</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;/users/login/universal.gif?authToken=&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">Token</span><span class="p">)</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&amp;nonce=&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">group</span><span class="p">.</span><span class="nx">Nonce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#footer&#34;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="s1">&#39;&lt;img style=&#34;display:none&#34; src=&#34;&#39;</span> <span class="o">+</span> <span class="nx">url</span> <span class="o">+</span> <span class="s1">&#39;&#34;&gt;&lt;/img&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><p>但是要做到这点，我们必须上升到账号级别的认证（之前是用户级别）、改变读取 cookie 的方式、改变这些 meta 站的登录工作方式，同时还要将这一新的变动整合到其它应用中。比如说，Careers（现在拆成了 Talent 和 Jobs）用的是另一份代码库。我们需要让这些应用读取相应的 cookies，然后通过 API 调用 Q&amp;A 应用来获取账户。我们部署了一个 NuGet 库来减少重复代码。底线是：你在一个地方登录，就在所有域名都登录。不弹框，不重载页面。</p>
<p>技术的层面上看，我们不用再关心 <code>*.*.stackexchange.com</code> 是什么了，只要它们是 <code>stackexchange.com</code> 下就行。这看起来和 HTTPS 没有关系，但这让我们可以把 <code>meta.gaming.stackexchange.com</code> 变成 <code>gaming.meta.stackexchange.com</code> 而不影响用户。</p>
<p>本地 HTTPS 开发</p>
<p>要想做得更好的话，本地环境应该尽量与开发和生产环境保持一致。幸好我们用的是 IIS，这件事情还简单的。我们使用一个工具来设置开发者环境，这个工具的名字叫「本地开发设置」——单纯吧？它可以安装工具（Visual Studio、git、SSMS 等）、服务（SQL Server、Redis、Elasticsearch）、仓库、数据库、网站以及一些其它东西。做好了基本的工具设置之后，我们要做的只是添加 SSL/TLS 证书。主要的思路如下：</p>
<pre tabindex="0"><code>Websites = @(
    @{
        Directory = &#34;StackOverflow&#34;;
        Site = &#34;local.mse.com&#34;;
        Aliases = &#34;discuss.local.area51.lse.com&#34;, &#34;local.sstatic.net&#34;;
        Databases = &#34;Sites.Database&#34;, &#34;Local.StackExchange.Meta&#34;, &#34;Local.Area51&#34;, &#34;Local.Area51.Meta&#34;;
        Certificate = $true;
    },
    @{
        Directory = &#34;StackExchange.Website&#34;;
        Site = &#34;local.lse.com&#34;;
        Databases = &#34;Sites.Database&#34;, &#34;Local.StackExchange&#34;, &#34;Local.StackExchange.Meta&#34;, &#34;Local.Area51.Meta&#34;;
        Certificate = $true;
    }
)
</code></pre><p>我把使用到的代码<a href="https://gist.github.com/NickCraver/6b5e75c153d60d0df5b0970d52412d4e">放在了一个 gist 上：<code>Register-Websites.psm1</code></a>。我们通过 host 头来设置网站（通过别名添加），如果直连的话就给它一个证书（嗯，现在应该把这个行为默认改为 <code>$true</code> 了），然后允许 AppPool 账号来访问数据库，于是我们本地也在使用 <code>https://</code> 开发了。嗯，我知道我们应该把这个设置过程开源出来，不过我们仍需去掉一些专有的业务。会有这么一天的。</p>
<p><strong>为什么这件事情很重要？</strong> 在此之前，我们从 <code>/content</code> 加载静态内容，而不是从另一个域名。这很方便，但也隐藏了类似于<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">跨域请求（CORS）</a>的问题。在同一个域名下用同一个协议能正常加载的资源，换到开发或者生产环境下就有可能出错。<a href="https://blog.codinghorror.com/the-works-on-my-machine-certification-program/">「在我这里是好的。」</a></p>
<p>当我们使用和生产环境中同样协议以及同样架构的 CDN 还有域名设置时，我们就可以在开发机器上找出并修复更多的问题。比如，你是否知道，从 <code>https://</code> 跳转到 <code>http://</code> 时，<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html#sec15.1.3">浏览器是不会发送 referer</a> 的？这是一个安全上的问题，referer 头中可能带有以明文传输的敏感信息。</p>
<p>「Nick 你就扯吧，我们能拿到从 Google 拿到 referer 啊！」确实。但是这是因为他们<em>主动选择这一行为</em>。如果你看一下 Google 的搜索页面，你可以看到这样的 <code>&lt;meta&gt;</code> 指令：</p>
<pre><code>&lt;meta content=&quot;origin&quot; id=&quot;mref&quot; name=&quot;referrer&quot;&gt;
</code></pre>
<p>这也就是为什么你可以取到 referer。</p>
<p>好的，我们已经设置好了，现在该做些什么呢？</p>
<h3 id="混合内容来自于你们">混合内容：来自于你们</h3>
<p>混合内容是个筐，什么都能往里装。我们这些年下来积累了哪些混合内容呢？不幸的是，有很多。这个列表里我们必须处理的用户提交内容：</p>
<ul>
<li><code>http://</code> 图片，出现在<a href="https://stackoverflow.com/questions">问题</a>、答案、<a href="https://stackoverflow.com/tags">标签</a>、wiki 等内容中使用</li>
<li><code>http://</code> 头像</li>
<li><code>http://</code> 头像，出现在聊天中（站点侧边栏）</li>
<li><code>http://</code> 图片，出现于个人资料页的「关于我」部分</li>
<li><code>http://</code> 图片，出现于<a href="https://stackoverflow.com/help">帮助中心的文章中</a></li>
<li><code>http://</code> YouTube 视频（有些站点启用了，比如 <a href="https://gaming.stackexchange.com/">gaming.stackexchange.com</a>）</li>
<li><code>http://</code> 图片，出现于<a href="https://stackoverflow.com/help/privileges">特权描述中</a></li>
<li><code>http://</code> 图片，出现于<a href="http://stackoverflow.com/users/story/13249">开发者故事中</a></li>
<li><code>http://</code> 图片，出现于<a href="https://stackoverflow.com/jobs">工作描述中</a></li>
<li><code>http://</code> 图片，出现于<a href="https://stackoverflow.com/jobs/companies">公司页面中</a></li>
<li><code>http://</code> 源地址，出现在<a href="https://meta.stackoverflow.com/q/269753/13249"> JavaScript 代码中</a>.</li>
</ul>
<p>上面的每一个都带有自己独有的问题，我仅仅会覆盖一下值得一提的部分。注意：我谈论的每一个解决方案都必须扩展到我们这个架构下的几百个站点和数据库上。</p>
<p>在上面的所有情况中（除了代码片段），要消除混合内容的第一步工作就是：你必须先消除<em>新</em>的混合内容。否则，这个清理过程将会无穷无尽。要做到这一点，<a href="https://meta.stackexchange.com/q/291947/135201">我们开始全网强制仅允许内嵌 <code>https://</code> 图片</a>。一旦这个完成之后，我们就可以开始清理了。</p>
<p>对于问题、答案以及其他帖子形式中，我们需要具体问题具体分析。我们先来搞定 90% 以上的情况：<code>stack.imgur.com</code>。在我来之前 Stack Overflow 就已经有自己托管的 Imgur 实例了。你在编辑器中上传的图片就会传到那里去。绝大部分的帖子都是用的这种方法，而他们几年前就为我们添加了 HTTPS 支持。所以这个就是一个很直接的查找替换（我们称为帖子 markdown 重处理）。</p>
<p>然后我们通过通过 <a href="https://www.elastic.co/">Elasticsearch</a> 对所有内容的索引来找出所有剩下的文件。我说的我们其实指的是 <a href="https://twitter.com/m0sa">Samo</a>。他在这里处理了大量的混合内容工作。当我们看到大部分的域名其实已经支持 HTTPS 了之后，我们决定：</p>
<ol>
<li>对于每个 <code>&lt;img&gt;</code> 的源地址都尝试替换成 <code>https://</code>。如果能正常工作则替换帖子中的链接</li>
<li>如果源地址不支持 <code>https://</code>，将其转一个链接</li>
</ol>
<p>当然，并没有那么顺利。我们发现用于匹配 URL 的正则表达式其实已经坏了好几年了，并且没有人发现……所以我们修复了正则，重新做了索引。</p>
<p>有人问我们：「为什么不做个代理呢？」呃，从法律和道德上来说，代理对我们的内容来说是个灰色地带。比如，我们 <a href="https://photo.stackexchange.com/">photo.stackexchange.com</a> 上的摄像师会明确声明不用 Imgur 以保留他们的权利。我们充分理解。如果我们开始代理并缓存<em>全图</em>，这在法律上有点问题。我们后来发现在几百万张内嵌图片中，只有几千张即不支持 <code>https://</code> 也没有 404 失效的。这个比例（低于 1%）不足于让我们去搭一个代理。</p>
<p>我们确实<em>研究过</em>搭一个代理相关的问题。费用有多少？需要多少存储？我们的带宽足够吗？我们有了一个大体上的估算，当然有点答案也不是很确定。比如我们是否要用 Fastly，还是直接走运营商？哪一种比较快？哪一种比较便宜？哪一种可以扩展？这个足够写另一篇博客了，如果你有具体问题的话可以在评论里提出，我会尽力回答。</p>
<p>所幸，在这个过程中，为了解决几个问题，<a href="https://twitter.com/balpha">balpha</a> 更改了用 HTML5 嵌入 YouTube 的方式。我们也就顺便强制了一下 YouTube 的 <code>https://</code> 嵌入。</p>
<p>剩下的几个内容领域的事情差不多：先阻止新的混合内容进来，再替换掉老的。这需要我们在下面几个领域进行更改：</p>
<ul>
<li>帖子</li>
<li>个人资料</li>
<li>开发故事</li>
<li>帮助中心</li>
<li>职场</li>
<li>公司业务</li>
</ul>
<p>声明：JavaScript 片段的问题仍然没有解决。这个有点难度的原因是：</p>
<ol>
<li>资源有可能不以 <code>https://</code> 的方式存在（比如一个库）</li>
<li>由于这个是 JavaScript，你可以自己构建出任意的 URL。这里我们就无力检查了。
<ul>
<li>如果你有更好的方式来处理这个问题，<strong>请告诉我们</strong>。我们在可用性与安全性上不可兼得。</li>
</ul>
</li>
</ol>
<h3 id="混合内容来自我们">混合内容：来自我们</h3>
<p>并不是处理完用户提交的内容就解决问题了。我们自己还是有不少 <code>http://</code> 的地方需要处理。这些更改本身没什么特别的，但是这至少能解答「为什么花了那么长时间？」这个问题：</p>
<ul>
<li>广告服务（Calculon）</li>
<li>广告服务（Adzerk）</li>
<li>标签赞助商</li>
<li>JavaScript 假定</li>
<li>Area 51（这代码库也太老了）</li>
<li>分析跟踪器（Quantcast, GA）</li>
<li>每个站点引用的 JavaScript（社区插件）</li>
<li><code>/jobs</code> 下的所有东西（这其实是个代理）</li>
<li>用户能力</li>
<li>……还有代码中所有出现 <code>http://</code> 的地方</li>
</ul>
<p>JavaScript 和链接比较令人痛苦，所以我在这里稍微提一下。</p>
<p>JavaScript 是一个不少人遗忘的角落，但这显然不能被无视。我们不少地方将主机域名传递给 JavaScript 时假定它是 <code>http://</code> ，同时也有不少地方写死了 meta 站里的 <code>meta.</code> 前缀。很多，真的很多，救命。还好现在已经不这样了，我们现在用服务器渲染出一个站点，然后在页面顶部放入相应的选择：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">StackExchange</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;locale&#34;</span><span class="o">:</span><span class="s2">&#34;en&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;stackAuthUrl&#34;</span><span class="o">:</span><span class="s2">&#34;https://stackauth.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;site&#34;</span><span class="o">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;Stack Overflow&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;childUrl&#34;</span><span class="o">:</span><span class="s2">&#34;https://meta.stackoverflow.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;protocol&#34;</span><span class="o">:</span><span class="s2">&#34;http&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;user&#34;</span><span class="o">:</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;gravatar&#34;</span><span class="o">:</span><span class="s2">&#34;&lt;div class=\&#34;gravatar-wrapper-32\&#34;&gt;&lt;img src=\&#34;https://i.stack.imgur.com/nGCYr.jpg\&#34;&gt;&lt;/div&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;profileUrl&#34;</span><span class="o">:</span><span class="s2">&#34;https://stackoverflow.com/users/13249/nick-craver&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>这几年来我们在代码里也用到了很多静态链接。比如，在页尾，在页脚，在帮助区域……到处都是。对每一个来说，解决方式都不复杂：把它们改成 <code>&lt;site&gt;.Url(&quot;/path&quot;)</code> 的形式就好了。不过要找出这些链接有点意思，因为你不能直接搜 <code>&quot;http://&quot;</code>。感谢 W3C 的丰功伟绩：</p>
<pre tabindex="0"><code>&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34;...
</code></pre><p>是的，这些是标识符，是不能改的。所以我希望 Visual Studio 在查找文件框中增加一个「排除文件类型」的选项。Visual Studio 你听见了吗？VS Code 前段时间就加了这个功能。我这要求不过分。</p>
<p>这件事情很枯燥，就是在代码中找出一千个链接然后替换而已（包括注释、许可链接等）。但这就是人生，我们必须要做。把这些链接改成 <code>.Url()</code> 的形式之后，一旦站点支持 HTTPS 的时候，我们就可以让链接动态切换过去。比如我们得等到 <code>meta.*.stackexchange.com</code> 搬迁完成之后再进行切换。插播一下我们数据中心的密码是「煎饼馃子」拼音全称，应该没有人会读到这里吧，所以在这里存密码很安全。当站点迁完之后，<code>.Url()</code> 仍会正常工作，然后用 <code>.Url()</code> 来渲染默认为 HTTPS 的站点也会继续工作。这将静态链接变成了动态。</p>
<p>另一件重要的事情：这让我们的开发和本地环境都能正常工作，而不仅仅是链到生产环境上。这件事情虽然枯燥，但还是值得去做的。对了，因为我们的规范网址（canonical）也通过 <code>.Url()</code> 来做了，所以一旦用户开始用上 HTTPS，Google 也可以感知到。</p>
<p>一旦一个站点迁到 HTTPS 之后，我们会让爬虫来更新站点链接。我们把这个叫修正「Google 果汁」，同时这也可以让用户不再碰到 301。</p>
<h3 id="跳转301">跳转（301）</h3>
<p>当你把站点移动到 HTTPS 之后，为了和 Google 配合，你有两件重要的事情要做：</p>
<ul>
<li>更新规范网址，比如 <code>&lt;link rel=&quot;canonical&quot; href=&quot;https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454&quot; /&gt;</code></li>
<li>把 <code>http://</code> 链接通过 301 跳转至 <code>https://</code></li>
</ul>
<p>这个不复杂，也不是浩大的工程，但这非常<em>非常</em>重要。Stack Overflow 大部分的流量都是从 Google 搜索结果中过来的，所以我们得保证这个不产生负面影响。这个是我们的生计，如果我们因此丢了流量那我真是要失业了。还记得那些 <code>.internal</code> 的 API 调用吗？对，我们同样不能把<em>所有东西</em>都进行跳转。所以我们在处理跳转的时候需要一定的逻辑（比如我们也不能跳转 <code>POST</code> 请求，因为浏览器处理得不好），当然这个处理还是比较直接的。这里是实际上用到的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">public</span> <span class="kr">static</span> <span class="k">void</span> <span class="nx">PerformHttpsRedirects</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">Settings</span><span class="p">.</span><span class="nx">HTTPS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// If we&#39;re on HTTPS, never redirect back
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">Request</span><span class="p">.</span><span class="nx">IsSecureConnection</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Not HTTPS-by-default? Abort.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">https</span><span class="p">.</span><span class="nx">IsDefault</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Not supposed to redirect anyone yet? Abort.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">https</span><span class="p">.</span><span class="nx">RedirectFor</span> <span class="o">==</span> <span class="nx">SiteSettings</span><span class="p">.</span><span class="nx">RedirectAudience</span><span class="p">.</span><span class="nx">NoOne</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Don&#39;t redirect .internal or any other direct connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...as this would break direct HOSTS to webserver as well
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">RequestIPIsInternal</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Only redirect GET/HEAD during the transition - we&#39;ll 301 and HSTS everything in Fastly later
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">Equals</span><span class="p">(</span><span class="nx">Request</span><span class="p">.</span><span class="nx">HttpMethod</span><span class="p">,</span> <span class="s2">&#34;GET&#34;</span><span class="p">,</span> <span class="nx">StringComparison</span><span class="p">.</span><span class="nx">InvariantCultureIgnoreCase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">||</span> <span class="nx">string</span><span class="p">.</span><span class="nx">Equals</span><span class="p">(</span><span class="nx">Request</span><span class="p">.</span><span class="nx">HttpMethod</span><span class="p">,</span> <span class="s2">&#34;HEAD&#34;</span><span class="p">,</span> <span class="nx">StringComparison</span><span class="p">.</span><span class="nx">InvariantCultureIgnoreCase</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Only redirect if we&#39;re redirecting everyone, or a crawler (if we&#39;re a crawler)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">https</span><span class="p">.</span><span class="nx">RedirectFor</span> <span class="o">==</span> <span class="nx">SiteSettings</span><span class="p">.</span><span class="nx">RedirectAudience</span><span class="p">.</span><span class="nx">Everyone</span>
</span></span><span class="line"><span class="cl">            <span class="o">||</span> <span class="p">(</span><span class="nx">https</span><span class="p">.</span><span class="nx">RedirectFor</span> <span class="o">==</span> <span class="nx">SiteSettings</span><span class="p">.</span><span class="nx">RedirectAudience</span><span class="p">.</span><span class="nx">Crawlers</span> <span class="o">&amp;&amp;</span> <span class="nx">Current</span><span class="p">.</span><span class="nx">IsSearchEngine</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">var</span> <span class="nx">resp</span> <span class="o">=</span> <span class="nx">Context</span><span class="p">.</span><span class="nx">InnerHttpContext</span><span class="p">.</span><span class="nx">Response</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 301 when we&#39;re really sure (302 is the default)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="nx">https</span><span class="p">.</span><span class="nx">RedirectVia301</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">resp</span><span class="p">.</span><span class="nx">RedirectPermanent</span><span class="p">(</span><span class="nx">Site</span><span class="p">.</span><span class="nx">Url</span><span class="p">(</span><span class="nx">Request</span><span class="p">.</span><span class="nx">Url</span><span class="p">.</span><span class="nx">PathAndQuery</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">resp</span><span class="p">.</span><span class="nx">Redirect</span><span class="p">(</span><span class="nx">Site</span><span class="p">.</span><span class="nx">Url</span><span class="p">(</span><span class="nx">Request</span><span class="p">.</span><span class="nx">Url</span><span class="p">.</span><span class="nx">PathAndQuery</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Context</span><span class="p">.</span><span class="nx">InnerHttpContext</span><span class="p">.</span><span class="nx">ApplicationInstance</span><span class="p">.</span><span class="nx">CompleteRequest</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>注意我们并不是默认就跳 301（有一个 <code>.RedirectVia301</code> 设置)，因为我们做一些会产生永久影响的事情之前必须仔细测试。我们会<a href="#hsts-preloading">晚一点</a>来讨论 <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS</a> 以及后续影响。</p>
<h3 id="websockets">Websockets</h3>
<p>这一块会过得快一点。Websocket 不难，从某种角度来说，这是我们做过的最简单的事情。我们用 websockets 来处理实时的用户影响力变化、收件箱通知、新问的问题、新增加的答案等等。这也就说基本上每开一个 Stack Overflow 的页面，我们都会有一个对应的 websocket 连接连到我们的负载均衡器上。</p>
<p>所以怎么改呢？其实很简单：安装一个证书，监听 <code>:443</code> 端口，然后用 <code>wss://qa.sockets.stackexchange.com</code> 来代替 <code>ws://</code> 。后者其实早就做完了（我们用了一个专有的证书，但是这不重要）。从 <code>ws://</code> 到 <code>wss://</code> 只是配置一下的问题。一开始我们还用 <code>ws://</code> 作为 <code>wss://</code> 的备份方案，不过后来就变成<em>仅用</em> <code>wss://</code> 了。这么做有两个原因：</p>
<ol>
<li>不用的话在 <code>https://</code> 下面会有混合内容警告</li>
<li>可以支持更多用户。因为很多老的代理不能很好地处理 websockets。如果使用加密流量，大多数代理就只是透传而不会弄乱流量。对移动用户来说尤其是这样。</li>
</ol>
<p>最大的问题就是：「我们能处理了这个负载吗？」我们全网处理了不少并发 websocket，在我写这估的时候我们有超过 600000 个<strong>并发</strong>的连接。这个是我们 HAProxy 的仪表盘在 <a href="https://github.com/opserver/Opserver">Opserver</a> 中的界面：</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-Websockets.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-Websockets.png" alt="HAProxy Websockets"  />


</a></p>
<p>不管是在终端、抽象命名空间套接字还是前端来说都有很多连接。由于启用了 <a href="https://tools.ietf.org/html/rfc5077">TLS 会话恢复</a>，HAProxy 本身的负载也很重。要让用户下一次重新连接更快，第一次协商之后用户会拿到一个令牌，下一次会把这个令牌发送过来。如果我们的内存足够并且没有超时，我们会恢复上次的会话而不是再开一个。这个操作可以节省 CPU，对用户来说有性能提升，但会用到到更多内存。这个多因 key 大小而异（2048，4096 或是更多？）我们现在用的是 4096 位的 key。在开了 600000 个 websocket 的情况下，我们只用掉了负载均衡器 64GB 内存里的 19GB。这里面 12GB 是 HAProxy 在用，大多数为 TLS 会话缓存。所以结果来说还不错，如果<em>我们不得不买内存的话</em>，这也会是整个 HTTPS 迁移中最便宜的东西。</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-WebsocketMemory.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-WebsocketMemory.png" alt="HAProxy Websocket Memory"  />


</a></p>
<h3 id="未知">未知</h3>
<p>我猜现在可能是我们来谈论一些未知问题的时候。有些问题是在我们尝试之前无法真正知道的：</p>
<ul>
<li>Google Analytics 里的流量表现怎么样？（我们会失去 referer 吗？）</li>
<li>Google Webmasters 的转换是否平滑？（301 生效吗？规范域名呢？要多长时间？）</li>
<li>Google 搜索分析会怎么工作（我们会在搜索分析中看到 <code>https://</code> 吗？）</li>
<li>我们搜索排名会下降吗？（最恐怖的）</li>
</ul>
<p>有很多人都谈过他们转化成 <code>https://</code> 的心得，但对我们却有点不一样。我们不是一个站点。我们是多个域名下的多个站点。我们不知道 Google 会怎么对待我们的网络。它会知道 <code>stackoverflow.com</code> 和 <code>superuser.com</code> 有关联吗？不知道。我们也不能指望 Google 来告诉我们这些。</p>
<p>所以我们就做测试。在我们<a href="https://meta.stackexchange.com/q/292058/135201">全网发布</a> 中，我们测试了几个域名：</p>
<ul>
<li><a href="https://meta.stackexchange.com/">meta.stackexchange.com</a></li>
<li><a href="https://security.stackexchange.com/">security.stackexchange.com</a></li>
<li><a href="https://superuser.com/">superuser.com</a></li>
</ul>
<p>对，这些是 Samo 和我会了仔细讨论出来的结果，花了有三分钟那么久吧。Meta 是因为这是我们最重要的反馈网站。Security 站上有很多专家可能会注意到相关的问题，特别是 HTTPS 方面。最后一个，Super User，我们需要知道搜索对我们内容的影响。比起 meta 和 security 来说法，Super User 的流量要大得多。最重要的是，它有<em>来自 Google</em> 的原生流量。</p>
<p>我们一直在观察并评估搜索的影响，所以 Super User 上了之后其他网站过了很久才跟上。到目前为止我们能说的是：基本上没影响。搜索、结果、点击还有排名的周变化都在正常范围内。我们公司<em>依赖</em>于这个流量，这对我们真的很重要。所幸，没有什么值得我们担心的点，我们可以继续发布。</p>
<h3 id="错误">错误</h3>
<p>如果不提到我们搞砸的部分，这篇文章就还不够好。错误永远是个选择。让我们来总结一下这一路让我们后悔的事情：</p>
<h4 id="错误相对协议-url">错误：相对协议 URL</h4>
<p>如果你的一个资源有一个 URL 的话，一般来说你会看到一些 <code>http://example.com</code> 或者 <code>https://example.com</code> 之类的东西，包括我们图片的路径等等。另一个选项就是你可以使用 <code>//example.com</code>。这被称为<a href="https://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL">相对协议 URL</a>。我们很早之前就在图片、JavaScript、CSS 等中这么用了（我们自有的资源，不是指用户提交）。几年后，我们发现这不是一个好主意，至少对我们来说不是。相对协议链接中的「相对」是<em>对于页面而言</em>。当你在 <code>http://stackoverflow.com</code> 时，<code>//example.com</code> 指的是 <code>http://example.com</code>；如果你在 <code>https://stackoverflow.com</code> 时，就和 <code>https://example.com</code> 等同。那么这个有什么问题呢？</p>
<p>问题在于，图片 URL 不仅是用在页面中，它们还用在邮件、API 还有移动应用中。当我们理了一下路径结构然后在到处都使用图片路径时我们发现不对了。虽然这个变化极大降低了代码冗余，并且简化了很多东西，结果却是我们在邮件中使用了相对 URL。绝大多数邮件客户端都不能处理相对协议 URL 的图片。因为它们不知道是什么协议。Email 不是 <code>http://</code> 也不是 <code>https://</code>。只有你在浏览器里查看邮件，有可能是预期的效果。</p>
<p>那该怎么办？我们把所有的地方都换成了 <code>https://</code>。我把我们所有的路径代码统一到两个变量上：CDN 根路径，和对应特定站点的文件夹。例如 Stack Overflow 的样式表在 <a href="https://cdn.sstatic.net/Sites/stackoverflow/all.css"><code>https://cdn.sstatic.net/Sites/stackoverflow/all.css</code></a> 上（当然我们有缓存中断器），换成本地就是 <code>https://local.sstatic.net/Sites/stackoverflow/all.css</code>。你能看出其中的共同点。通过拼接路径，逻辑简单了不少。则　通过强制 <code>https://</code>，用户还可以在整站切换之前就享受 HTTP/2 的好处，因为所有静态资源都已经就位。都用 <code>https://</code> 也表示我们可以在页面、邮件、移动还有 API 上使用<strong>同一个</strong>属性。这种统一也意味着我们有一个固定的地方来处理所有路径——我们到处都有缓存中断器。</p>
<p>注意：如果你像我们一样中断缓存，比如 <code>https://cdn.sstatic.net/Sites/stackoverflow/all.css?v=070eac3e8cf4</code>，请不要用构建号。我们的缓存中断使用的是文件的<a href="https://en.wikipedia.org/wiki/Checksum">校验值</a>，也就是说只有当文件真正变化的时候你才会下载一个新的文件。用构建号的话可能会稍微简单点，但同时也会对你的费用还有性能有所损伤。</p>
<p>能做这个当然很好，可我们为什么不从一开始就做呢？因为 HTTPS 在那个时候性能还不行。用户通过 <code>https://</code> 访问会比 <code>http://</code>慢很多。举一个大一点的例子：我们上个月在 <code>sstatic.net</code> 上收到了四百万个请求，总共有 94TB。如果 HTTPS 性能不好的话，这里累积下来的延迟就很可观了。不过因为我们上了 HTTP/2，以及设置好 CDN/代理层，性能的问题已经好很多了。对于用户来说更快了，对我们来说则更简单，何乐不为呢！</p>
<h4 id="错误api-及-internal">错误：API 及 .internal</h4>
<p>当我们把代理架起来开始测试的时候发现了什么？我们忘了一件很重要的事，准确地说，我忘了一件很重要的事。我们在内部 API 里大量地使用了 HTTP。当然这个是正常工作的，只是它们变得更慢、更复杂、也更容易出问题了。</p>
<p>比方说一个内部 API 需要访问 <code>stackoverflow.com/some-internal-route</code>，之前，节点是这些：</p>
<ul>
<li>原始 app</li>
<li>网关/防火墙（暴露给公网）</li>
<li>本地负载均衡器</li>
<li>目标 web 服务器</li>
</ul>
<p>这是因为我们是可以解析 <code>stackoverflow.com</code> 的，解析出来的 IP 就是我们的负载均衡器。当有代理的情况下，为了让用户能访问到最近的节点，他们访问到的是不同的 IP 和目标点。他们的 DNS 解析出来的 IP 是 CDN/代理层 (Fastly)。糟了，这意识着我们现在的路径是这样的：</p>
<ul>
<li>原始 app</li>
<li>网关/防火墙（暴露给公网）</li>
<li>我们的外部路由器</li>
<li>运营商（多节点）</li>
<li>代理（Cloudflare/Fastly）</li>
<li>运营商（到我们的代理路）</li>
<li>我们的外部路由器</li>
<li>本地负载均衡器</li>
<li>目标 web 服务器</li>
</ul>
<p>嗯，这个看起来更糟了。为了实现一个从 A 调用一下 B，我们多了很多不必要的依赖，同时性能也下降了。我不是说我们的代理很慢，只是原本只需要 1ms 就可以连到我们数据中心……好吧，我们的代理很慢。</p>
<p>我们内部讨论了多次如何用最简单的方法解决这个问题。我们可以把请求改成 <code>internal.stackoverflow.com</code>，但是这会产生可观的修改（也许也会产生冲突）。我们也创建一个 DNS 来专门解析内部地址（但这样会产生通配符继承的问题）。我们也可以在内部把 <code>stackoverflow.com</code> 解析成不同的地址（这被称为<a href="https://en.wikipedia.org/wiki/Split-horizon_DNS">水平分割 DNS</a>），但是这一来不好调试，二来在多数据中心的场景下不知道该到哪一个。</p>
<p>最终，我们在所有暴露给外部 DNS 的域名后面都加了一个 <code>.internal</code> 后续。比如，在我们的网络中，<code>stackoverflow.com.internal</code> 会解析到我们的负载均衡器后面（DMZ）的一个内部子网内。我们这么做有几个原因：</p>
<ul>
<li>我们可以在内部的 DNS 服务器里覆盖且包含一个顶级域名服务器（活动目录）</li>
<li>当请求从 HAProxy 传到 web 应用中时，我们可以把 <code>.internal</code> 从 <code>Host</code> 头中移除（应用层无感知）</li>
<li>如果我们需要内部到 DMZ 的 SSL，我们可以用一个类似的通配符组合</li>
<li>客户端 API 的代码很简单（如果在域名列表中就加一个 <code>.internal</code>）</li>
</ul>
<p>我们客户端的 API 代码是大部分是由 <a href="https://twitter.com/marcgravell">Marc Gravell</a> 写的一个 <code>StackExchange.Network</code> 的 NuGet 库。对于每一个要访问的 URL，我们都用静态的方法调用（所以也就只有通用的获取方法那几个地方）。如果存在的话就会返回一个「内部化」URL，否则保持不变。这意味着一次简单的 NuGet 更新就可以把这个逻辑变化部署到所有应用上。这个调用挺简单的：</p>
<p># uri = SubstituteInternalUrl(uri);</p>
<p>这里是 <code>stackoverflow.com</code> DNS 行为的一个例子：</p>
<ul>
<li>Fastly：151.101.193.69, 151.101.129.69, 151.101.65.69, 151.101.1.69</li>
<li>直连（外部路由）：198.252.206.16</li>
<li>内部：10.7.3.16</li>
</ul>
<p>记得我们之前提到的 <a href="https://github.com/StackExchange/dnscontrol">dnscontrol</a> 吗？我们可以用这个快速同步。归功于 JavaScript 的配置/定义，我们可以简单地共享、简化代码。我们匹配所有所有子网和所有数据中心中的所有 IP 的最后一个字节，所以用几个变量，所有 AD 和外部的 DNS 条目都对齐了。这也意味着我们的 HAProxy 配置更简单了，基本上就是这样：</p>
<pre tabindex="0"><code>stacklb::external::frontend_normal { &#39;t1_http-in&#39;:
  section_name    =&gt; &#39;http-in&#39;,
  maxconn         =&gt; $t1_http_in_maxconn,
  inputs          =&gt; {
    &#34;${external_ip_base}.16:80&#34;  =&gt; [ &#39;name stackexchange&#39; ],
    &#34;${external_ip_base}.17:80&#34;  =&gt; [ &#39;name careers&#39; ],
    &#34;${external_ip_base}.18:80&#34;  =&gt; [ &#39;name openid&#39; ],
    &#34;${external_ip_base}.24:80&#34;  =&gt; [ &#39;name misc&#39; ],
</code></pre><p>综上，API 路径更快了，也更可靠了：</p>
<ul>
<li>原始 app</li>
<li>本地负载均衡器（DMZ）</li>
<li>目标 web 服务器</li>
</ul>
<p>我们解决了几个问题，还剩下几百个等着我们。</p>
<h4 id="错误301-缓存">错误：301 缓存</h4>
<p>在从 <code>http://</code> 301 跳到 <code>https://</code> 时有一点我们没有意识的是，Fastly 缓存了我们的返回值。在 Fastly 中，<a href="https://docs.fastly.com/guides/vcl/manipulating-the-cache-key">默认的缓存键</a>并不考虑协议。我个人不同意这个行为，因为在源站默认启用 301 跳转会导致无限循环。这个问题是这样造成的：</p>
<ol>
<li>用户访问 <code>http://</code> 上的一个网络</li>
<li>通过 301 跳转到了 <code>https://</code></li>
<li>Fastly 缓存了这个跳转</li>
<li>任意一个用户（包括 #1 中的那个）以 <code>https://</code> 访问同一个页面</li>
<li>Fastly 返回一个跳至 <code>https://</code> 的 301，尽量你已经在这个页面上了</li>
</ol>
<p>这就是为什么我们会有无限循环。要解决这个问题，我们得关掉 301，清掉 Fastly 缓存，然后开始调查。Fastly <a href="https://docs.fastly.com/guides/vcl/manipulating-the-cache-key#purging-adjustments-when-making-additions-to-cache-keys">建议我们在 vary 中加入 <code>Fastly-SSL</code></a>，像这样：</p>
<pre tabindex="0"><code>sub vcl_fetch {
  set beresp.http.Vary = if(beresp.http.Vary, beresp.http.Vary &#34;,&#34;, &#34;&#34;) &#34;Fastly-SSL&#34;;
</code></pre><p>在我看来，这应该是默认行为。</p>
<p>错误：帮助中心的小插曲</p>
<p>记得我们必须修复的帮助文档吗？帮助文档都是按语言区分，只有极少数是按站点来分，所以本来它们是可以共享的。为了不产生大量重复代码及存储结构，我们做了一点小小的处理。我们把实际上的帖子对象（和问题、答案一样）存在了 <code>meta.stackexchange.com</code> 或者是这篇帖子关联的站点中。我们把生成的 <code>HelpPost</code> 存在中心的 <code>Sites</code> 数据库里，其实也就是生成的 HTML。在处理混合内容的时候，我们也处理了单个站里的帖子，简单吧！</p>
<p>当原始的帖子修复后，我们只需要为每个站点去再生成 HTML 然后填充回去就行了。但是这个时候我犯了个错误。回填的时候拿的是<em>当前站点</em>（调用回填的那个站点），而不是原始站。这导致 <code>meta.stackexchange.com</code> 里的 12345 帖子被 <code>stackoverflow.com</code> 里的 12345 帖子所替代。有的时候是答案、有的时候是问题，有的时候有一个 tag wiki。这也导致了一些<a href="https://meta.stackoverflow.com/q/345280/13249">很有意思的帮助文档</a>。这里有一些<a href="https://meta.stackoverflow.com/a/345282/13249">相应的后果</a>。</p>
<p>我只能说，还好修复的过程挺简单的：</p>
<p><a href="../../static/images/upload_dropbox/201709/HTTPS-HelpCommit.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201709/HTTPS-HelpCommit.png" alt="Me being a dumbass"  />


</a></p>
<p>再一次将数据填充回去就能修复了。不过怎么说，这个当时算是在公共场合闹了个笑话。抱歉。</p>
<h3 id="开源">开源</h3>
<p>这里有我们在这个过程中产出的项目，帮助我们改进了 HTTPS 部署的工作，希望有一天这些能拯救世界吧：</p>
<ul>
<li><a href="https://github.com/StackExchange/blackbox">BlackBox</a> （在版本控制中安全存储私密信息）作者 <a href="https://twitter.com/yesthattom">Tom Limoncelli</a></li>
<li><a href="https://github.com/StackExchange/capnproto-net">capnproto-net</a>（不再支持 —— .NET 版本的 <a href="https://capnproto.org/">Cap’n Proto</a>）作者 <a href="https://twitter.com/marcgravell">Marc Gravell</a></li>
<li><a href="https://github.com/StackExchange/dnscontrol">DNSControl</a>（控制多个 DNS 提供商）作者 <a href="https://twitter.com/captncraig">Craig Peterson</a> and <a href="https://twitter.com/yesthattom">Tom Limoncelli</a></li>
<li><a href="https://github.com/StackExchange/httpunit">httpUnit</a> （网站集成测试） 作者 <a href="https://twitter.com/mjibson">Matt Jibson</a> and <a href="https://twitter.com/yesthattom">Tom Limoncelli</a></li>
<li><a href="https://github.com/opserver/Opserver">Opserver</a> （支持 Cloudflare DNS） 作者 <a href="https://twitter.com/Nick_Craver">Nick Craver</a></li>
<li><a href="https://github.com/alienth/fastlyctl">fastlyctl</a>（Go 语言的 Fastly API 调用）作者 <a href="https://twitter.com/alioth">Jason Harvey</a></li>
<li><a href="https://github.com/alienth/fastly-ratelimit">fastly-ratelimit</a>（基于 Fastly syslog 流量的限流方案）作者 <a href="https://twitter.com/alioth/">Jason Harvey</a></li>
</ul>
<h3 id="下一步">下一步</h3>
<p>我们的工作并没有做完。接下去还有一此要做的：</p>
<ul>
<li>我们要修复我们聊天域名下的混合内容，如 <a href="https://chat.stackoverflow.com/">chat.stackoverflow.com</a>，这里有用户嵌入的图片等</li>
<li>如果可能的话，我们把所有适用的域名加进 <a href="https://hstspreload.org/">Chrome HSTS 预加载列表</a></li>
<li>我们要评估 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning">HPKP</a> 以及我们是否想部署（这个很危险，目前我们倾向于不部署）</li>
<li>我们需要把聊天移到 <code>https://</code></li>
<li>我们需要把所有的 cookies 迁移成安全模式</li>
<li>我们在等能支持 HTTP/2 的 HAProxy 1.8（大概在九月出来）</li>
<li>我们需要利用 HTTP/2 的推送（我会在六月与 Fastly 讨论这件事情——他们还现在不支持跨域名推送）</li>
<li>我们需要把 301 行为从 CDN/代理移出以达到更好的性能（需要按站点发布）</li>
</ul>
<p>HSTS 预加载</p>
<p><a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS</a> 指的是「HTTP 严格传输安全」。OWASP 在<a href="https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet">这里</a>有一篇很好的总结。这个概念其实很简单：</p>
<ul>
<li>当你访问 <code>https://</code> 页面的时候，我们给你发一个这样的头部：<code>Strict-Transport-Security: max-age=31536000</code></li>
<li>在这个时间内（秒），你的浏览器只会通过 <code>https://</code> 访问这个域名</li>
</ul>
<p>哪怕你是点击一个 <code>http://</code> 的链接，你的浏览器也会<em>直接</em>跳到 <code>https://</code>。哪怕你有可能已经设置了一个 <code>http://</code> 的跳转，但你的浏览器不会访问，它会直接访问 SSL/TLS。这也避免了用户访问不安全的 <code>http://</code> 而遭到劫持。比如它可以把你劫持到一个 <code>https://stack&lt;长得很像o但实际是个圈的unicode&gt;verflow.com</code> 上，那个站点甚至有可能部好了 SSL/TLS 证书。只有不访问这个站点才是安全的。</p>
<p>但这需要我们至少访问一次站点，然后才能有这个头部，对吧？对。所以我们有 <a href="https://hstspreload.org/">HSTS 预加载</a>，这是一个域名列表，随着所有主流浏览器分发且由它们预加载。也就是说它们在第一次访问的时候就会跳到 <code>https://</code> 去，所以<strong>永远不会</strong>有任何 <code>http://</code> 通信。</p>
<p>很赞吧！所以要怎么才能上这个列表呢？这里是要求：</p>
<ol>
<li>要有一个有效的证书</li>
<li>如果你监听 80 端口的话，HTTP 应该跳到同一个主机的 HTTPS 上</li>
<li>所有子域名都要支持 HTTPS</li>
<li>特别是如果有 DNS 纪录的话，www 子域名要支持 HTTPS</li>
<li>主域名的 HSTS 头必要满足如下条件：</li>
<li>max-aget 至少得是十八周（10886400 秒）</li>
<li>必须有 includeSubDomains 指令</li>
<li>必须指定 preload 指令</li>
<li>如果你要跳转到 HTTPS 站点上，跳转也必须有 HSTS 头部（而不仅仅是跳过去的那个页面）</li>
</ol>
<p>这听起来还行吧？我们所有的活跃域名都支持 HTTPS 并且有有效的证书了。不对，我们还有一个问题。记得我们有一个 <code>meta.gaming.stackexchange.com</code> 吧，虽然它跳到 <code>gaming.meta.stackexchange.com</code>，但这个跳转本身并没有有效证书。</p>
<p>以 meta 为例，如果我们在 HSTS 头里加入 <code>includeSubDomains</code> 指令，那么网上所有指向旧域名的链接都会踩坑。它们本该跳到一个 <code>http:///</code> 站点上（现在是这样的），一旦改了就会变成一个非法证书错误。昨天我们看了一下流量日志，每天仍有 8 万次访问的是通过 301 跳到 meta 子域上的。这里有很多是爬虫，但还是有不少人为的流量是从博客或者收藏夹过来的……而有些爬虫真的很蠢，从来不根据 301 来更新他们的信息。嗯，你还在看这篇文章？我自己写着写着都已经睡着 3 次了。</p>
<p>我们该怎么办呢？我们是否要启用 SAN 证书，加入几百个域名，然后调整我们的基础架构使得 301 跳转也严格遵守 HTTPS 呢？如果要通过 Fastly 来做的话就会提升我们的成本（需要更多 IP、证书等等）。<a href="https://letsencrypt.org/">Let’s Encrypt</a> <em>倒是</em>真的能帮上点忙。获取证书的成本比较低，如果你不考虑设置及维护的人力成本的话（因为我们由于<a href="#certificates">上文所述</a>内容并没有在使用它).</p>
<p>还有一块是上古遗留问题：我们内部的域名是 <code>ds.stackexchange.com</code>。为什么是 <code>ds.</code>？我不确定。我猜可能是我们不知道怎么拼 data center 这个词。这意味着 <code>includeSubDomains</code> 会自动包含<em>所有内部终端</em>。虽然我们大部分都已经上了 <code>https://</code> ，但是如果什么都走 HTTPS 会导致一些问题，也会带来一定延时。不是说我们不想在内部也用 <code>https://</code>，只不过这是一个整体的项目（大部分是证书分发和维护，还有多级证书），我们不想增加耦合。那为什么不改一下内部域名呢？主要还是时间问题，这一动迁需要大量的时间和协调。</p>
<p>目前，我们将 HSTS 的 <code>max-age</code> 设为两年，并且<strong>不包括</strong> <code>includeSubDomains</code>。除非迫不得以，我不会从代码里移除这个设定，因为它太危险了。一旦我们把所有 Q&amp;A 站点的 HSTS 时间都设置好之后，我们会和 Google 聊一下是不是能在不加 <code>includeSubDomains</code> 的情况下把我们加进 HSTS 列表中，至少我们会试试看。你可以看到，虽然很罕见，但<a href="https://chromium.googlesource.com/chromium/src/net/+/master/http/transport_security_state_static.json">目前的这份列表中</a>还是出现了这种情况的。希望从加强 Stack Overflow 安全性的角度，他们能同意这一点。</p>
<p>聊天</p>
<p>为了尽快启用 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies"><code>安全</code> cookie</a>（仅在 HTTPS 下发送），我们会将聊天（<a href="https://chat.stackoverflow.com/">chat.stackoverflow.com</a>、[<a href="http://chat.stackexchange.com/">chat.stackexchange.com</a>及 <a href="https://chat.meta.stackexchange.com/">chat.meta.stackexchange.com</a>）跳转至 <code>https://</code>。 正如我们的通用登录所做的那样，聊天会依赖于二级域名下的 cookie。如果 cookie 仅在 <code>https://</code> 下发送，你就只能在 <code>https://</code> 下登录。</p>
<p>这一块有待斟酌，但其实在有混合内容的情况下将聊天迁至 <code>https://</code> 是一件好事。我们的网络更加安全了，而我们也可以处理实时聊天中的混合内容。希望这个能在接下去的一两周之内实施，这在我的计划之中。</p>
<p>今天</p>
<p>不管怎么说，这就是我们今天到达的地步，也是我们过去四年中一直在做的事情。确实有很多更高优先级的事情阻挡了 HTTPS 的脚步——这也远远不是我们唯一在做的事情。但这就是生活。做这件事情的人们还在很多你们看不见的地方努力着，而涉及到的人也远不止我所提到的这些。在这篇文章中我只提到了一些花了我们很多时间的、比较复杂的话题（否则就会太长了），但是这一路上不管是 Stack Overflow 内部还是外部都有很多人帮助过我们。</p>
<p>我知道你们会有很多的疑问、顾虑、报怨、建议等等。我们非常欢迎这些内容。本周我们会关注底下的评论、我们的 meta 站、Reddit、Hacker News 以及 Twitter，并尽可能地回答/帮助你们。感谢阅读，能全文读下的来真是太棒了。（比心）</p>
]]></content:encoded>
    </item>
    <item>
      <title>Redis 到底有多快[译文]</title>
      <link>https://blog.alswl.com/2014/02/redis-benchmarks/</link>
      <pubDate>Sun, 23 Feb 2014 22:38:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2014/02/redis-benchmarks/</guid>
      <description>&lt;p&gt;原文地址 &lt;a href=&#34;http://redis.io/topics/benchmarks&#34;&gt;http://redis.io/topics/benchmarks&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;拖了一个半月的稿子~&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Redis 自带了一个叫 &lt;code&gt;redis-benchmark&lt;/code&gt; 的工具来模拟 N 个客户端同时发出 M 个请求。
（类似于 Apache &lt;code&gt;ab&lt;/code&gt; 程序）。你可以使用 &lt;code&gt;redis-benchmark -h&lt;/code&gt; 来查看基准参数。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;以下参数被支持：

    Usage: redis-benchmark [-h &amp;lt;host&amp;gt;] [-p &amp;lt;port&amp;gt;] [-c &amp;lt;clients&amp;gt;] [-n &amp;lt;requests]&amp;gt; [-k &amp;lt;boolean&amp;gt;]

     -h &amp;lt;hostname&amp;gt;      Server hostname (default 127.0.0.1)
     -p &amp;lt;port&amp;gt;          Server port (default 6379)
     -s &amp;lt;socket&amp;gt;        Server socket (overrides host and port)
     -c &amp;lt;clients&amp;gt;       Number of parallel connections (default 50)
     -n &amp;lt;requests&amp;gt;      Total number of requests (default 10000)
     -d &amp;lt;size&amp;gt;          Data size of SET/GET value in bytes (default 2)
     -k &amp;lt;boolean&amp;gt;       1=keep alive 0=reconnect (default 1)
     -r &amp;lt;keyspacelen&amp;gt;   Use random keys for SET/GET/INCR, random values for SADD
      Using this option the benchmark will get/set keys
      in the form mykey_rand:000000012456 instead of constant
      keys, the &amp;lt;keyspacelen&amp;gt; argument determines the max
      number of values for the random number. For instance
      if set to 10 only rand:000000000000 - rand:000000000009
      range will be allowed.
     -P &amp;lt;numreq&amp;gt;        Pipeline &amp;lt;numreq&amp;gt; requests. Default 1 (no pipeline).
     -q                 Quiet. Just show query/sec values
     --csv              Output in CSV format
     -l                 Loop. Run the tests forever
     -t &amp;lt;tests&amp;gt;         Only run the comma separated list of tests. The test
                        names are the same as the ones produced as output.
     -I                 Idle mode. Just open N idle connections and wait.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你需要在基准测试之前启动一个 Redis 实例。一般这样启动测试：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>原文地址 <a href="http://redis.io/topics/benchmarks">http://redis.io/topics/benchmarks</a>。</p>
<p>拖了一个半月的稿子~</p>
<hr />
<p>Redis 自带了一个叫 <code>redis-benchmark</code> 的工具来模拟 N 个客户端同时发出 M 个请求。
（类似于 Apache <code>ab</code> 程序）。你可以使用 <code>redis-benchmark -h</code> 来查看基准参数。</p>
<!-- more -->
<pre tabindex="0"><code>以下参数被支持：

    Usage: redis-benchmark [-h &lt;host&gt;] [-p &lt;port&gt;] [-c &lt;clients&gt;] [-n &lt;requests]&gt; [-k &lt;boolean&gt;]

     -h &lt;hostname&gt;      Server hostname (default 127.0.0.1)
     -p &lt;port&gt;          Server port (default 6379)
     -s &lt;socket&gt;        Server socket (overrides host and port)
     -c &lt;clients&gt;       Number of parallel connections (default 50)
     -n &lt;requests&gt;      Total number of requests (default 10000)
     -d &lt;size&gt;          Data size of SET/GET value in bytes (default 2)
     -k &lt;boolean&gt;       1=keep alive 0=reconnect (default 1)
     -r &lt;keyspacelen&gt;   Use random keys for SET/GET/INCR, random values for SADD
      Using this option the benchmark will get/set keys
      in the form mykey_rand:000000012456 instead of constant
      keys, the &lt;keyspacelen&gt; argument determines the max
      number of values for the random number. For instance
      if set to 10 only rand:000000000000 - rand:000000000009
      range will be allowed.
     -P &lt;numreq&gt;        Pipeline &lt;numreq&gt; requests. Default 1 (no pipeline).
     -q                 Quiet. Just show query/sec values
     --csv              Output in CSV format
     -l                 Loop. Run the tests forever
     -t &lt;tests&gt;         Only run the comma separated list of tests. The test
                        names are the same as the ones produced as output.
     -I                 Idle mode. Just open N idle connections and wait.
</code></pre><p>你需要在基准测试之前启动一个 Redis 实例。一般这样启动测试：</p>
<pre tabindex="0"><code>redis-benchmark -q -n 100000
</code></pre><p>这个工具使用起来非常方便，同时你可以使用自己的基准测试工具，
不过开始基准测试时候，我们需要注意一些细节。</p>
<h2 id="只运行一些测试用例的子集">只运行一些测试用例的子集</h2>
<p>你不必每次都运行 redis-benchmark 默认的所有测试。
使用 <code>-t</code> 参数可以选择你需要运行的测试用例，比如下面的范例：</p>
<pre><code>$ redis-benchmark -t set,lpush -n 100000 -q
SET: 74239.05 requests per second
LPUSH: 79239.30 requests per second
</code></pre>
<p>在上面的测试中，我们只运行了 SET 和 LPUSH 命令，
并且运行在安静模式中（使用 <code>-q</code> 参数）。</p>
<p>也可以直接指定命令来直接运行，比如下面的范例：</p>
<pre><code>$ redis-benchmark -n 100000 -q script load &quot;redis.call('set','foo','bar')&quot;
script load redis.call('set','foo','bar'): 69881.20 requests per second
</code></pre>
<h2 id="选择测试键的范围大小">选择测试键的范围大小</h2>
<p>默认情况下面，基准测试使用单一的 key。在一个基于内存的数据库里，
单一 key 测试和真实情况下面不会有巨大变化。当然，使用一个大的 key 范围空间，
可以模拟现实情况下面的缓存不命中情况。</p>
<p>这时候我们可以使用 <code>-r</code> 命令。比如，假设我们想设置 10 万随机 key
连续 SET 100 万次，我们可以使用下列的命令：</p>
<pre><code>$ redis-cli flushall
OK

$ redis-benchmark -t set -r 100000 -n 1000000
====== SET ======
  1000000 requests completed in 13.86 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

99.76% `&lt;=` 1 milliseconds
99.98% `&lt;=` 2 milliseconds
100.00% `&lt;=` 3 milliseconds
100.00% `&lt;=` 3 milliseconds
72144.87 requests per second

$ redis-cli dbsize
(integer) 99993
</code></pre>
<h2 id="使用-pipelining">使用 pipelining</h2>
<p>默认情况下，每个客户端都是在一个请求完成之后才发送下一个请求
（benchmark 会模拟 50 个客户端除非使用 <code>-c</code> 指定特别的数量），
这意味着服务器几乎是按顺序读取每个客户端的命令。Also RTT is payed as well.</p>
<p>真实世界会更复杂，Redis 支持
<a href="pipelining">/topics/pipelining</a>，使得可以一次性执行多条命令成为可能。
Redis pipelining 可以提高服务器的 TPS。</p>
<p>下面这个案例是在 Macbook air 11&quot; 上使用 pipelining 组织
16 条命令的测试范例：</p>
<pre><code>$ redis-benchmark -n 1000000 -t set,get -P 16 -q
SET: 403063.28 requests per second
GET: 508388.41 requests per second
</code></pre>
<p>记得在多条命令需要处理时候使用 pipelining。</p>
<h2 id="陷阱和错误的认识">陷阱和错误的认识</h2>
<p>第一点是显而易见的：基准测试的黄金准则是使用相同的标准。
用相同的任务量测试不同版本的 Redis，或者用相同的参数测试测试不同版本 Redis。
如果把 Redis 和其他工具测试，那就需要小心功能细节差异。</p>
<ul>
<li>Redis 是一个服务器：所有的命令都包含网络或 IPC 消耗。这意味着和它和 SQLite，
Berkeley DB， Tokyo/Kyoto Cabinet 等比较起来无意义，
因为大部分的消耗都在网络协议上面。</li>
<li>Redis 的大部分常用命令都有确认返回。有些数据存储系统则没有（比如 MongoDB
的写操作没有返回确认）。把 Redis 和其他单向调用命令存储系统比较意义不大。</li>
<li>简单的循环操作 Redis 其实不是对 Redis 进行基准测试，而是测试你的网络（或者
IPC）延迟。想要真正测试 Redis，需要使用多个连接（比如 redis-benchmark)，
或者使用 pipelining 来聚合多个命令，另外还可以采用多线程或多进程。</li>
<li>Redis 是一个内存数据库，同时提供一些可选的持久化功能。
如果你想和一个持久化服务器（MySQL, PostgreSQL 等等） 对比的话，
那你需要考虑启用 AOF 和适当的 fsync 策略。</li>
<li>Redis 是单线程服务。它并没有设计为多 CPU 进行优化。如果想要从多核获取好处，
那就考虑启用多个实例吧。将单实例 Redis 和多线程数据库对比是不公平的。</li>
</ul>
<p>一个普遍的误解是 redis-benchmark 特意让基准测试看起来更好，
所表现出来的数据像是人造的，而不是真实产品下面的。</p>
<p>Redis-benchmark 程序可以简单快捷的对给定硬件条件下面的机器计算出性能参数。
但是，通常情况下面这并不是 Redis 服务器可以达到的最大吞吐量。
事实上，使用 pipelining 和更快的客户端（hiredis）可以达到更大的吞吐量。
redis-benchmark 默认情况下面仅仅使用并发来提高吞吐量（创建多条连接）。
它并没有使用 pipelining 或者其他并行技术（仅仅多条连接，而不是多线程）。</p>
<p>如果想使用 pipelining 模式来进行基准测试（了达到更高吞吐量），可以使用 <code>-P</code>
参数。这种方案的确可以提高性能，有很多使用 Redis 的应用在生产环境中这样做。</p>
<p>最后，基准测试需要使用相同的操作和数据来对比，如果这些不一样，
那么基准测试是无意义的。</p>
<p>比如，Redis 和 memcached 可以在单线程模式下面对比 GET/SET 操作。
两者都是内存数据库，协议也基本相同，甚至把多个请求合并为一条请求的方式也类似
（pipelining）。在使用相同数量的连接后，这个对比是很有意义的。</p>
<p>下面这个很不错例子是在 Redis（antirez）和 memcached（dormando）测试的。</p>
<p><a href="http://antirez.com/post/redis-memcached-benchmark.html">antirez 1 - On Redis, Memcached, Speed, Benchmarks and The Toilet</a></p>
<p><a href="http://dormando.livejournal.com/525147.html">dormando - Redis VS Memcached (slightly better bench)</a></p>
<p><a href="http://antirez.com/post/update-on-memcached-redis-benchmark.html">antirez 2 - An update on the Memcached/Redis benchmark</a></p>
<p>你可以发现相同条件下面最终结果是两者差别不大。请注意最终测试时候，
两者都经过了充分优化。</p>
<p>最后，当特别高性能的服务器在基准测试时候（比如 Redis、memcached 这类），
很难让服务器性能充分发挥，通常情况下，客户端回事瓶颈限制而不是服务器端。
在这种情况下面，客户端（比如 benchmark 程序自身）需要优化，或者使用多实例，
从而能达到最大的吞吐量。</p>
<h2 id="影响-redis-性能的因素">影响 Redis 性能的因素</h2>
<p>有几个因素直接决定 Redis 的性能。它们能够改变基准测试的结果，
所以我们必须注意到它们。一般情况下，Redis 默认参数已经可以提供足够的性能，
不需要调优。</p>
<ul>
<li>网络带宽和延迟通常是最大短板。建议在基准测试之前使用
ping 来检查服务端到客户端的延迟。根据带宽，可以计算出最大吞吐量。
比如将 4 KB 的字符串塞入 Redis，吞吐量是 100000 q/s，那么实际需要 3.2 Gbits/s
的带宽，所以需要 10 GBits/s 网络连接， 1 Gbits/s 是不够的。
在很多线上服务中，Redis 吞吐会先被网络带宽限制住，而不是 CPU。
为了达到高吞吐量突破 TCP/IP 限制，最后采用 10 Gbits/s 的网卡，
或者多个 1 Gbits/s 网卡。</li>
<li>CPU 是另外一个重要的影响因素，由于是单线程模型，Redis 更喜欢大缓存快速 CPU，
而不是多核。这种场景下面，比较推荐 Intel CPU。AMD CPU 可能只有 Intel CPU
的一半性能（通过对 Nehalem EP/Westmere EP/Sandy 平台的对比）。
当其他条件相当时候，CPU 就成了 redis-benchmark 的限制因素。</li>
<li>在小对象存取时候，内存速度和带宽看上去不是很重要，但是对大对象（&gt; 10 KB），
它就变得重要起来。不过通常情况下面，倒不至于为了优化 Redis 而购买更高性能的内存模块。</li>
<li>Redis 在 VM 上会变慢。虚拟化对普通操作会有额外的消耗，Redis
对系统调用和网络终端不会有太多的 overhead。建议把 Redis 运行在物理机器上，
特别是当你很在意延迟时候。在最先进的虚拟化设备（VMWare）上面，redis-benchmark
的测试结果比物理机器上慢了一倍，很多 CPU 时间被消费在系统调用和中断上面。</li>
<li>如果服务器和客户端都运行在同一个机器上面，那么 TCP/IP loopback 和 unix domain sockets
都可以使用。对 Linux 来说，使用 unix socket 可以比 TCP/IP loopback 快 50%。
默认 redis-benchmark 是使用 TCP/IP loopback。</li>
<li>当大量使用 pipelining 时候，unix domain sockets 的优势就不那么明显了。</li>
<li>当使用网络连接时，并且以太网网数据包在 1500 bytes 以下时，
将多条命令包装成 pipelining 可以大大提高效率。事实上，处理 10 bytes，100 bytes，
1000 bytes 的请求时候，吞吐量是差不多的，详细可以见下图。</li>
</ul>
<p>


<img loading="lazy" src="https://raw.githubusercontent.com/dspezia/redis-doc/client_command/topics/Data_size.png" alt="Data size impact"  />



</p>
<ul>
<li>在多核 CPU 服务器上面，Redis 的性能还依赖 NUMA 配置和 处理器绑定位置。
最明显的影响是 redis-benchmark 会随机使用 CPU 内核。为了获得精准的结果，
需要使用固定处理器工具（在 Linux 上可以使用 taskset 或 numactl）。
最有效的办法是将客户端和服务端分离到两个不同的 CPU 来高校使用三级缓存。
这里有一些使用 4 KB 数据 SET 的基准测试，针对三种 CPU（AMD Istanbul,
Intel Nehalem EX， 和 Intel Westmere）使用不同的配置。请注意，
这不是针对 CPU 的测试。</li>
</ul>
<p>


<img loading="lazy" src="https://raw.githubusercontent.com/dspezia/redis-doc/6374a07f93e867353e5e946c1e39a573dfc83f6c/topics/NUMA_chart.gif" alt="NUMA chart"  />



</p>
<ul>
<li>在高配置下面，客户端的连接数也是一个重要的因素。得益于 epoll/kqueue，
Redis 的事件循环具有相当可扩展性。Redis 已经在超过 60000 连接下面基准测试过，
仍然可以维持 50000 q/s。一条经验法则是，30000 的连接数只有 100 连接的一半吞吐量。
下面有一个关于连接数和吞吐量的测试。</li>
</ul>
<p>


<img loading="lazy" src="https://raw.githubusercontent.com/dspezia/redis-doc/system_info/topics/Connections_chart.png" alt="connections chart"  />



</p>
<ul>
<li>在高配置下面，可以通过调优 NIC 来获得更高性能。最高性能在绑定 Rx/Tx 队列和
CPU 内核下面才能达到，还需要开启 RPS（网卡中断负载均衡）。更多信息可以在
<a href="https://groups.google.com/forum/#!msg/redis-db/gUhc19gnYgc/BruTPCOroiMJ">thread</a>
。Jumbo frames 还可以在大对象使用时候获得更高性能。</li>
<li>在不同平台下面，Redis 可以被编译成不同的内存分配方式（libc malloc, jemalloc,
tcmalloc），他们在不同速度、连续和非连续片段下会有不一样的表现。
如果你不是自己编译的 Redis，可以使用 INFO 命令来检查内存分配方式。
请注意，大部分基准测试不会长时间运行来感知不同分配模式下面的差异，
只能通过生产环境下面的 Redis 实例来查看。</li>
</ul>
<h2 id="其他需要注意的点">其他需要注意的点</h2>
<p>任何基准测试的一个重要目标是获得可重现的结果，这样才能将此和其他测试进行对比。</p>
<ul>
<li>一个好的实践是尽可能在隔离的硬件上面测试。如果没法实现，那就需要检测
benchmark 没有受其他服务器活动影响。</li>
<li>有些配置（桌面环境和笔记本，有些服务器也会）会使用可变的 CPU 分配策略。
这种策略可以在 OS 层面配置。有些 CPU 型号相对其他能更好的调整 CPU 负载。
为了达到可重现的测试结果，最好在做基准测试时候设定 CPU 到最高使用限制。</li>
<li>一个重要因素是配置尽可能大内存，千万不要使用 SWAP。注意 32 位和 64
位 Redis 有不同的内存限制。</li>
<li>如果你计划在基准测试时候使用 RDB 或 AOF，请注意不要让系统同时有其他 I/O 操作。
避免将 RDB 或 AOF 文件放到 NAS 或 NFS 共享或其他依赖网络的存储设备上面（比如
Amazon EC2 上 的 EBS）。</li>
<li>将 Redis 日志级别设置到 warning 或者 notice。避免将日志放到远程文件系统。</li>
<li>避免使用检测工具，它们会影响基准测试结果。使用 INFO 来查看服务器状态没问题，
但是使用 MONITOR 将大大影响测试准确度。</li>
</ul>
<h1 id="不同云主机和物理机器上的基准测试结果">不同云主机和物理机器上的基准测试结果</h1>
<ul>
<li>这些测试模拟了 50 客户端和 200w 请求。</li>
<li>使用了 Redis 2.6.14。</li>
<li>使用了 loopback 网卡。</li>
<li>key 的范围是 100 w。</li>
<li>同时测试了 有 pipelining 和没有的情况（16 条命令使用 pipelining）。</li>
</ul>
<p><strong>Intel(R) Xeon(R) CPU E5520  @ 2.27GHz (with pipelining)</strong></p>
<pre><code>$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -P 16 -q
SET: 552028.75 requests per second
GET: 707463.75 requests per second
LPUSH: 767459.75 requests per second
LPOP: 770119.38 requests per second
</code></pre>
<p><strong>Intel(R) Xeon(R) CPU E5520  @ 2.27GHz (without pipelining)</strong></p>
<pre><code>$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -q
SET: 122556.53 requests per second
GET: 123601.76 requests per second
LPUSH: 136752.14 requests per second
LPOP: 132424.03 requests per second
</code></pre>
<p><strong>Linode 2048 instance (with pipelining)</strong></p>
<pre><code>$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -q -P 16
SET: 195503.42 requests per second
GET: 250187.64 requests per second
LPUSH: 230547.55 requests per second
LPOP: 250815.16 requests per second
</code></pre>
<p><strong>Linode 2048 instance (without pipelining)</strong></p>
<pre><code>$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -q
SET: 35001.75 requests per second
GET: 37481.26 requests per second
LPUSH: 36968.58 requests per second
LPOP: 35186.49 requests per second
</code></pre>
<h2 id="更多使用-pipeline-的测试">更多使用 pipeline 的测试</h2>
<pre><code>$ redis-benchmark -n 100000

====== SET ======
  100007 requests completed in 0.88 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

58.50% &lt;= 0 milliseconds
99.17% &lt;= 1 milliseconds
99.58% &lt;= 2 milliseconds
99.85% &lt;= 3 milliseconds
99.90% &lt;= 6 milliseconds
100.00% &lt;= 9 milliseconds
114293.71 requests per second

====== GET ======
  100000 requests completed in 1.23 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

43.12% &lt;= 0 milliseconds
96.82% &lt;= 1 milliseconds
98.62% &lt;= 2 milliseconds
100.00% &lt;= 3 milliseconds
81234.77 requests per second

====== INCR ======
  100018 requests completed in 1.46 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

32.32% &lt;= 0 milliseconds
96.67% &lt;= 1 milliseconds
99.14% &lt;= 2 milliseconds
99.83% &lt;= 3 milliseconds
99.88% &lt;= 4 milliseconds
99.89% &lt;= 5 milliseconds
99.96% &lt;= 9 milliseconds
100.00% &lt;= 18 milliseconds
68458.59 requests per second

====== LPUSH ======
  100004 requests completed in 1.14 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

62.27% &lt;= 0 milliseconds
99.74% &lt;= 1 milliseconds
99.85% &lt;= 2 milliseconds
99.86% &lt;= 3 milliseconds
99.89% &lt;= 5 milliseconds
99.93% &lt;= 7 milliseconds
99.96% &lt;= 9 milliseconds
100.00% &lt;= 22 milliseconds
100.00% &lt;= 208 milliseconds
88109.25 requests per second

====== LPOP ======
  100001 requests completed in 1.39 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

54.83% &lt;= 0 milliseconds
97.34% &lt;= 1 milliseconds
99.95% &lt;= 2 milliseconds
99.96% &lt;= 3 milliseconds
99.96% &lt;= 4 milliseconds
100.00% &lt;= 9 milliseconds
100.00% &lt;= 208 milliseconds
71994.96 requests per second
</code></pre>
<p>注意：包大小从 256 到 1024 或者 4096 bytes 不会改变结果的量级
（但是到 1024 bytes 后，GETs 操作会变慢）。同样的，50 到 256 客户端的测试结果相同。
10 个客户端时候，吞吐量会变小（译者按：总量到不了最大吞吐量）。</p>
<p>不同机器可以获的不一样的结果，下面是 <em>Intel T5500 1.66 GHz 在 Linux 2.6</em>
下面的结果：</p>
<pre><code>$ ./redis-benchmark -q -n 100000
SET: 53684.38 requests per second
GET: 45497.73 requests per second
INCR: 39370.47 requests per second
LPUSH: 34803.41 requests per second
LPOP: 37367.20 requests per second
</code></pre>
<p>另外一个是 64 位 Xeon L5420 2.5 GHz 的结果：</p>
<pre><code>$ ./redis-benchmark -q -n 100000
PING: 111731.84 requests per second
SET: 108114.59 requests per second
GET: 98717.67 requests per second
INCR: 95241.91 requests per second
LPUSH: 104712.05 requests per second
LPOP: 93722.59 requests per second
</code></pre>
<h1 id="高性能硬件下面的基准测试">高性能硬件下面的基准测试</h1>
<ul>
<li>Redis <strong>2.4.2</strong>。</li>
<li>默认连接数，数据包大小 256 bytes。</li>
<li>Linux 是 <em>SLES10 SP3 2.6.16.60-0.54.5-smp</em>，CPU 是 2 x <em>Intel X5670 @ 2.93 GHz</em>。</li>
<li>固定 CPU，但是使用不同 CPU 内核。</li>
</ul>
<p>使用 unix domain socket：</p>
<pre><code>$ numactl -C 6 ./redis-benchmark -q -n 100000 -s /tmp/redis.sock -d 256
PING (inline): 200803.22 requests per second
PING: 200803.22 requests per second
MSET (10 keys): 78064.01 requests per second
SET: 198412.69 requests per second
GET: 198019.80 requests per second
INCR: 200400.80 requests per second
LPUSH: 200000.00 requests per second
LPOP: 198019.80 requests per second
SADD: 203665.98 requests per second
SPOP: 200803.22 requests per second
LPUSH (again, in order to bench LRANGE): 200000.00 requests per second
LRANGE (first 100 elements): 42123.00 requests per second
LRANGE (first 300 elements): 15015.02 requests per second
LRANGE (first 450 elements): 10159.50 requests per second
LRANGE (first 600 elements): 7548.31 requests per second
</code></pre>
<p>使用 TCP loopback：</p>
<pre><code>$ numactl -C 6 ./redis-benchmark -q -n 100000 -d 256
PING (inline): 145137.88 requests per second
PING: 144717.80 requests per second
MSET (10 keys): 65487.89 requests per second
SET: 142653.36 requests per second
GET: 142450.14 requests per second
INCR: 143061.52 requests per second
LPUSH: 144092.22 requests per second
LPOP: 142247.52 requests per second
SADD: 144717.80 requests per second
SPOP: 143678.17 requests per second
LPUSH (again, in order to bench LRANGE): 143061.52 requests per second
LRANGE (first 100 elements): 29577.05 requests per second
LRANGE (first 300 elements): 10431.88 requests per second
LRANGE (first 450 elements): 7010.66 requests per second
LRANGE (first 600 elements): 5296.61 requests per second
</code></pre>
]]></content:encoded>
    </item>
    <item>
      <title>Postfix 基本配置[译文]</title>
      <link>https://blog.alswl.com/2013/11/postfix-basic-configuration/</link>
      <pubDate>Sat, 09 Nov 2013 14:59:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2013/11/postfix-basic-configuration/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;http://www.postfix.org/BASIC_CONFIGURATION_README.html#syntax&#34;&gt;Postfix Basic Configuration &lt;/a&gt;。
有少许编译。&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Postfix 的配置文件 &lt;a href=&#34;http://www.postfix.org/postconf.5.html&#34;&gt;main.cf&lt;/a&gt; 有数百个配置参数，
幸运的是，所有参数都有合理的默认配置项。
大部分时候，只需要配置两三个参数即可。&lt;/p&gt;
&lt;p&gt;安装 Postfix 的方法可以参见 &lt;a href=&#34;http://www.postfix.org/INSTALL.html&#34;&gt;安装方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;特殊场景用途的配置方式，如邮件中枢，防火墙，拨号环境客户端的说明可以在
&lt;a href=&#34;http://www.postfix.org/STANDARD_CONFIGURATION_README.html&#34;&gt;标准配置说明&lt;/a&gt; 里面查看。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;postfix-配置语法&#34;&gt;Postfix 配置语法&lt;/h2&gt;
&lt;p&gt;Postfix 的配置文件默认在 &lt;code&gt;/etc/postfix&lt;/code&gt;。主力配置文件是 &lt;a href=&#34;http://www.postfix.org/postconf.5.html&#34;&gt;main.cf&lt;/a&gt; 和
&lt;a href=&#34;http://www.postfix.org/master.5.html&#34;&gt;master.cf&lt;/a&gt;。用户权限必须是 root 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/postfix/main.cf&lt;/code&gt; 配置语法有两个要点：不用引号，可以使用 &lt;code&gt;$&lt;/code&gt; 来引用参数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 定义一个参数
/etc/postfix/main.cf:
    parameter = value
# 引用一个已有参数
/etc/postfix/main.cf:
    other_parameter = $parameter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;引用参数时候，可以再定义之前先引用（Postfix 使用延迟计算技术）。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>原文地址：<a href="http://www.postfix.org/BASIC_CONFIGURATION_README.html#syntax">Postfix Basic Configuration </a>。
有少许编译。</p>
<h2 id="介绍">介绍</h2>
<p>Postfix 的配置文件 <a href="http://www.postfix.org/postconf.5.html">main.cf</a> 有数百个配置参数，
幸运的是，所有参数都有合理的默认配置项。
大部分时候，只需要配置两三个参数即可。</p>
<p>安装 Postfix 的方法可以参见 <a href="http://www.postfix.org/INSTALL.html">安装方法</a>。</p>
<p>特殊场景用途的配置方式，如邮件中枢，防火墙，拨号环境客户端的说明可以在
<a href="http://www.postfix.org/STANDARD_CONFIGURATION_README.html">标准配置说明</a> 里面查看。</p>
<!-- more -->
<h2 id="postfix-配置语法">Postfix 配置语法</h2>
<p>Postfix 的配置文件默认在 <code>/etc/postfix</code>。主力配置文件是 <a href="http://www.postfix.org/postconf.5.html">main.cf</a> 和
<a href="http://www.postfix.org/master.5.html">master.cf</a>。用户权限必须是 root 的。</p>
<p><code>/etc/postfix/main.cf</code> 配置语法有两个要点：不用引号，可以使用 <code>$</code> 来引用参数。</p>
<pre tabindex="0"><code># 定义一个参数
/etc/postfix/main.cf:
    parameter = value
# 引用一个已有参数
/etc/postfix/main.cf:
    other_parameter = $parameter
</code></pre><p>引用参数时候，可以再定义之前先引用（Postfix 使用延迟计算技术）。</p>
<p>Postfix 使用数据文件来控制接入权限。详情请看 <a href="http://www.postfix.org/DATABASE_README.html">DATABASE 介绍</a>，一般这样配置：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    virtual_alias_maps = hash:/etc/postfix/virtual
</code></pre><p>修改 <code>main.cf</code> 或者 <code>master.cf</code> 之后，需要 <code>postfix reload</code> 重新载入配置文件。</p>
<h2 id="配置对外发送域名">配置对外发送域名</h2>
<p><a href="http://www.postfix.org/postconf.5.html#myorigin">myorigin</a> 参数指定邮件中显示的发送域名，默认使用当前机器名 <code>$myhostname</code>。
一般来说，我们会把 <code>myorigin</code> 设置成顶级域名 <code>$mydomain</code>。</p>
<p>范例：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    myorigin = $myhostname (default: send mail as &#34;user@$myhostname&#34;)
    myorigin = $mydomain   (probably desirable: &#34;user@$mydomain&#34;)
</code></pre><h2 id="配置接收域名">配置接收域名</h2>
<p><a href="http://www.postfix.org/postconf.5.html#mynetworks">mydestination</a> 参数配置了本地直接接收的域名，而不会再对外发送。</p>
<p>这个参数可以使用文件配置，也可以使用 <code>type:table</code>，比如 hash / btree / ldap
/ mysql 等等。</p>
<p>范例：</p>
<pre tabindex="0"><code># 默认配置
/etc/postfix/main.cf:
    mydestination = $myhostname localhost.$mydomain localhost

# 对整个域名生效
/etc/postfix/main.cf:
    mydestination = $myhostname localhost.$mydomain localhost $mydomain

# 对多个 DNS 域名生效
/etc/postfix/main.cf:
    mydestination = $myhostname localhost.$mydomain localhost 
        www.$mydomain ftp.$mydomain
</code></pre><h2 id="配置允许从哪些地方接收">配置允许从哪些地方接收</h2>
<p>默认情况下面，Postfix 仅发送信任网络的邮件。信任网络配置在 <a href="http://www.postfix.org/postconf.5.html#mynetworks">mynetworks</a> 参数中。</p>
<p>范例（使用下列任意一个）：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    mynetworks_style = subnet  (default: authorize subnetworks)
    mynetworks_style = host    (safe: authorize local machine only)
    mynetworks = 127.0.0.0/8   (safe: authorize local machine only)
    mynetworks = 127.0.0.0/8 168.100.189.2/32 (authorize local machine) 
</code></pre><p>还可以这样配置：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    mynetworks = 168.100.189.0/28, 127.0.0.0/8
</code></pre><h2 id="配置允许发送到的域名">配置允许发送到的域名</h2>
<p>默认情况下，非信任网络仅仅被允许从发送邮件到特定域名。默认值是
<a href="http://www.postfix.org/postconf.5.html#mynetworks">mydestination</a> 下面的所有域名（包括子域名）。</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    relay_domains = $mydestination (default)
    relay_domains =           (safe: never forward mail from strangers)
    relay_domains = $mydomain (forward mail to my domain and subdomains)
</code></pre><h2 id="配置递送方式直接或间接">配置递送方式：直接或间接</h2>
<p>默认情况下，Postfix 会直接递送邮件到因特网。有时候你的服务器在防火墙后面或者
无法直接连接互联网，那就需要将邮件递送到另外一个 <a href="http://www.postfix.org/postconf.5.html#relayhost">relay host</a>。</p>
<p>范例：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    relayhost =                   (default: direct delivery to Internet)
    relayhost = $mydomain         (deliver via local mailhub)
    relayhost = [mail.$mydomain]  (deliver via local mailhub)
    relayhost = [mail.isp.tld]    (deliver via provider mailhub)
</code></pre><h2 id="配置报告错误">配置报告错误</h2>
<p>可以通过配置 <a href="http://www.postfix.org/aliases.5.html">aliases</a> 来将错误报告邮件转发给其他人。</p>
<p>范例：</p>
<pre tabindex="0"><code>/etc/aliases:
    postmaster: you
    root: you
</code></pre><p>默认情况下面，只会报告严重错误（资源错误和软件错误）：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    notify_classes = resource, software
</code></pre><p>其他错误还有：bounce 拒收 / 2bounce 错误报告拒收 / delay 延迟 / policy 策略未通过
/ protocol 协议错误 / resouce 资源错误 / software 软件错误</p>
<h2 id="代理nat-配置">代理/NAT 配置</h2>
<p>有时候需要通过代理或者 NAT 连接互联网。参考 <a href="http://www.postfix.org/postconf.5.html#proxy_interfaces">proxy_interfaces</a></p>
<p>范例：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    proxy_interfaces = 1.2.3.4 (the proxy/NAT external network address)
</code></pre><h2 id="postfix-日志分布情况">Postfix 日志分布情况</h2>
<p>日志路径配置在 <code>/etc/syslog.conf</code> 中：</p>
<pre tabindex="0"><code>etc/syslog.conf:
    mail.err                                    /dev/console
    mail.debug                                  /var/log/maillog
</code></pre><p>建议经常这样做日志审核：</p>
<pre tabindex="0"><code># postfix check
# egrep &#39;(reject|warning|error|fatal|panic):&#39; /some/log/file
</code></pre><h2 id="在-chorooted-状态下运行-postfix">在 chorooted 状态下运行 Postfix</h2>
<p>初学者就不用管这个了。</p>
<h2 id="配置机器名">配置机器名</h2>
<p><a href="http://www.postfix.org/postconf.5.html#myhostname">myhostname</a> 手工指定了 FQDN。它被其他好几个域名相关的地方引用。</p>
<p>一般来说，如果指定了 <code>mydomain</code>，就会自动通过它生成 <code>myhostname</code>。</p>
<p>范例：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    myhostname = host.local.domain (machine name is not FQDN)
    myhostname = host.virtual.domain (virtual interface)
    myhostname = virtual.domain (virtual interface)
</code></pre><h2 id="配置域名">配置域名</h2>
<p>使用 <a href="http://www.postfix.org/postconf.5.html#mydomain">mydomain</a> 配置，这个参数被很多地方引用。</p>
<p>范例：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    mydomain = local.domain
    mydomain = virtual.domain (virtual interface)
</code></pre><h2 id="配置网络地址">配置网络地址</h2>
<p><a href="http://www.postfix.org/postconf.5.html#inet_interfaces">inet_interfaces</a> 配置监听网络。</p>
<p>默认配置：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    inet_interfaces = all
</code></pre><p>多个虚拟邮件服务器配置：</p>
<pre tabindex="0"><code>/etc/postfix/main.cf:
    inet_interfaces = virtual.host.tld         (virtual Postfix)
    inet_interfaces = $myhostname localhost... (non-virtual Postfix)
</code></pre><p>注意，这项参数配置完之后需要重启。</p>
]]></content:encoded>
    </item>
    <item>
      <title>在 Python 中使用 GDB 来调试[译文]</title>
      <link>https://blog.alswl.com/2013/11/python-gdb/</link>
      <pubDate>Fri, 01 Nov 2013 01:11:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2013/11/python-gdb/</guid>
      <description>&lt;p&gt;大约一年前，我接触了 Java 中的 &lt;a href=&#34;http://kenai.com/projects/btrace&#34;&gt;Btrace&lt;/a&gt;
能够不停机查看线上 JVM 运行情况的特性让我艳羡不已。
另外还有强悍的 jStack 和 jConsole 来进行运行期侦测，JVM 的工业级强度果然不是盖的。&lt;/p&gt;
&lt;p&gt;当时公司技术方面也遇到了一些瓶颈，一部分原因是 CPython 本身的 IO 模型问题，
另一方面也和早期代码写的极不工整脱不了关系。万般无奈之下，我们用
Jython 推翻重做了主要业务，效果立竿见影，但同时也把真实问题给规避掉了。&lt;/p&gt;
&lt;p&gt;在这之后我们在 JVM 的领导下，走上了康庄大道。但我心中始终还有一个梗，
就是想对性能遇到瓶颈的 Python Process 进行线上侦测。
这篇文章就是开始的第一步。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>大约一年前，我接触了 Java 中的 <a href="http://kenai.com/projects/btrace">Btrace</a>
能够不停机查看线上 JVM 运行情况的特性让我艳羡不已。
另外还有强悍的 jStack 和 jConsole 来进行运行期侦测，JVM 的工业级强度果然不是盖的。</p>
<p>当时公司技术方面也遇到了一些瓶颈，一部分原因是 CPython 本身的 IO 模型问题，
另一方面也和早期代码写的极不工整脱不了关系。万般无奈之下，我们用
Jython 推翻重做了主要业务，效果立竿见影，但同时也把真实问题给规避掉了。</p>
<p>在这之后我们在 JVM 的领导下，走上了康庄大道。但我心中始终还有一个梗，
就是想对性能遇到瓶颈的 Python Process 进行线上侦测。
这篇文章就是开始的第一步。</p>
<p>PS:这篇文章理论上是可行的，但是在我机器（Ubuntu 12.04 / 系统自带 Python）
无法正常执行，会爆出 <code>unable to read python frame information</code>
的问题。解决方法我会在下篇文章中写出。这里只是单纯翻译一下原文。</p>
<p>原文可以移步 <a href="https://wiki.python.org/moin/DebuggingWithGdb">https://wiki.python.org/moin/DebuggingWithGdb</a>。</p>
<!-- more -->
<hr />
<p>有一些类型的 bugs 很难使用 Python 直接进行 debug，比如</p>
<ul>
<li>段错误（无法被捕捉的 Python 异常）</li>
<li>卡住的进程（这种情况下面没法使用 <code>pdb</code> 来进行跟踪）</li>
<li>控制之外的后台处理 daemon 进程</li>
</ul>
<p>这些情况下，你可以使用尝试使用 <code>gdb</code>。</p>
<h2 id="准备">准备</h2>
<p>需要在系统安装 <code>gdb</code> 和 Python debug 扩展。
Python debug 扩展包含了一些 debug 命令，并且添加了一些 Python 特定的命令到 <code>gdb</code>。
在主流的 Linux 发行版中，你可以轻松的安装他们：</p>
<p>Fedora:</p>
<pre tabindex="0"><code>sudo yum install gdb python-debuginfo
</code></pre><p>Ubunt:</p>
<pre tabindex="0"><code>sudo apt-get install gdb python2.7-dbg
</code></pre><p>在一些老系统上面，也一样可以使用 <code>gdb</code>，具体看文章末尾。</p>
<h2 id="使用-gdb">使用 <code>GDB</code></h2>
<p>有两种可行的方法：</p>
<ol>
<li>一开始就使用 <code>gdb</code> 来启动应用</li>
<li>连接到一个已经运行的 Python 进程</li>
</ol>
<p>在 <code>gdb</code> 下面启动 Python 同样有两种方式：</p>
<p>交互式：</p>
<pre tabindex="0"><code>$ gdb python
...
(gdb) run &lt;programname&gt;.py &lt;arguments&gt;
</code></pre><p>自动：</p>
<pre tabindex="0"><code>$ gdb -ex r --args python &lt;programname&gt;.py &lt;arguments&gt;
</code></pre><p>这样的话，它会一直运行直到退出、段错误、或者人为的停止（使用 <code>Ctrl+C</code>）。</p>
<p>如果进程已经开始运行，你可以通过 PID 来接入它：</p>
<pre tabindex="0"><code>$ gdb python &lt;pid of running process&gt;
</code></pre><h2 id="调试进程">调试进程</h2>
<p>如果你的程序段错误了， <code>gdb</code> 会自动暂停程序，这样你可以切换到 <code>gdb</code>
命令行来检查状态。你也可以人为地使用 <code>Ctrl+C</code> 来暂停程序运行。</p>
<p>查看 <a href="https://fedoraproject.org/wiki/Features/EasierPythonDebugging">EasierPythonDebugging</a>
获得 <code>gdb</code> 里面的 Python 命令列表。</p>
<h2 id="查看-c-调用栈">查看 C 调用栈</h2>
<p>如果你在 debug 段错误，你最想做的可能就是查看 C 调用栈。</p>
<p>在 <code>gdb</code> 的命令行里面，只要运行一下命令：</p>
<pre tabindex="0"><code>(gdb) bt
#0  0x0000002a95b3b705 in raise () from /lib/libc.so.6
#1  0x0000002a95b3ce8e in abort () from /lib/libc.so.6
#2  0x00000000004c164f in posix_abort (self=0x0, noargs=0x0)
    at ../Modules/posixmodule.c:7158
#3  0x0000000000489fac in call_function (pp_stack=0x7fbffff110, oparg=0)
    at ../Python/ceval.c:3531
#4  0x0000000000485fc2 in PyEval_EvalFrame (f=0x66ccd8)
    at ../Python/ceval.c:2163
...
</code></pre><p>运气好的话，你可以直接看到问题出现在什么地方。如果它提供的信息不能直接帮你解决问题，
你可以尝试继续追踪调用栈。
调式的结果取决于 debug 信息的有效程度。</p>
<h2 id="查看-python-调用栈">查看 Python 调用栈</h2>
<p>如果你安装了 Python 扩展，你可以使用</p>
<pre tabindex="0"><code>(gdb) py-bt
</code></pre><p>可以获取熟悉的 Python 源代码。</p>
<h2 id="对挂住的进程开刀">对挂住的进程开刀</h2>
<p>如果一个进程看上去挂住了，他可能在等待什么东西（比如锁、IO 等等）。
也有可能在拼命的跑循环。连接上这个进程，然后检查调用栈也许可以帮上忙。</p>
<p>如果进程在疯狂循环，你可以先让它运行一会，使用 <code>cont</code> 命令，
然后使用 <code>Ctrl+C</code> 来暂停，并且打印出调用栈。</p>
<p>如果一些线程卡住了，下面的命令可能会帮上忙：</p>
<pre tabindex="0"><code>(gdb) info threads
  Id   Target Id         Frame
  37   Thread 0xa29feb40 (LWP 17914) &#34;NotificationThr&#34; 0xb7fdd424 in __kernel_vsyscall ()
  36   Thread 0xa03fcb40 (LWP 17913) &#34;python2.7&#34; 0xb7fdd424 in __kernel_vsyscall ()
  35   Thread 0xa0bfdb40 (LWP 17911) &#34;QProcessManager&#34; 0xb7fdd424 in __kernel_vsyscall ()
  34   Thread 0xa13feb40 (LWP 17910) &#34;python2.7&#34; 0xb7fdd424 in __kernel_vsyscall ()
  33   Thread 0xa1bffb40 (LWP 17909) &#34;python2.7&#34; 0xb7fdd424 in __kernel_vsyscall ()
  31   Thread 0xa31ffb40 (LWP 17907) &#34;QFileInfoGather&#34; 0xb7fdd424 in __kernel_vsyscall ()
  30   Thread 0xa3fdfb40 (LWP 17906) &#34;QInotifyFileSys&#34; 0xb7fdd424 in __kernel_vsyscall ()
  29   Thread 0xa481cb40 (LWP 17905) &#34;QFileInfoGather&#34; 0xb7fdd424 in __kernel_vsyscall ()
  7    Thread 0xa508db40 (LWP 17883) &#34;QThread&#34; 0xb7fdd424 in __kernel_vsyscall ()
  6    Thread 0xa5cebb40 (LWP 17882) &#34;python2.7&#34; 0xb7fdd424 in __kernel_vsyscall ()
  5    Thread 0xa660cb40 (LWP 17881) &#34;python2.7&#34; 0xb7fdd424 in __kernel_vsyscall ()
  3    Thread 0xabdffb40 (LWP 17876) &#34;gdbus&#34; 0xb7fdd424 in __kernel_vsyscall ()
  2    Thread 0xac7b7b40 (LWP 17875) &#34;dconf worker&#34; 0xb7fdd424 in __kernel_vsyscall ()
* 1    Thread 0xb7d876c0 (LWP 17863) &#34;python2.7&#34; 0xb7fdd424 in __kernel_vsyscall ()
</code></pre><p>当前运行的线程被标记为 <code>*</code>，要查看 Python 代码运行到哪里，使用 <code>py-list</code> 查看：</p>
<pre tabindex="0"><code>(gdb) py-list
2025        # Open external files with our Mac app
2026        if sys.platform == &#34;darwin&#34; and &#39;Spyder.app&#39; in __file__:
2027            main.connect(app, SIGNAL(&#39;open_external_file(QString)&#39;),
2028                         lambda fname: main.open_external_file(fname))
2029
&gt;2030        app.exec_()
2031        return main
2032
2033
2034    def __remove_temp_session():
2035        if osp.isfile(TEMP_SESSION_PATH):
</code></pre><p>查看所有进程的 Python 代码位置，可以使用：</p>
<pre tabindex="0"><code>(gdb) thread apply all py-list
...
 200
 201        def accept(self):
&gt;202            sock, addr = self._sock.accept()
 203            return _socketobject(_sock=sock), addr
 204        accept.__doc__ = _realsocket.accept.__doc__
 205
 206        def dup(self):
 207            &#34;&#34;&#34;dup() -&gt; socket object

Thread 35 (Thread 0xa0bfdb40 (LWP 17911)):
Unable to locate python frame

Thread 34 (Thread 0xa13feb40 (LWP 17910)):
 197            for method in _delegate_methods:
 198                setattr(self, method, dummy)
 199        close.__doc__ = _realsocket.close.__doc__
 200
 201        def accept(self):
&gt;202            sock, addr = self._sock.accept()
 203            return _socketobject(_sock=sock), addr
...
</code></pre><h2 id="引用">引用</h2>
<ul>
<li><a href="http://fedoraproject.org/wiki/Features/EasierPythonDebugging">http://fedoraproject.org/wiki/Features/EasierPythonDebugging</a></li>
<li><a href="https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock">https://code.google.com/p/spyderlib/wiki/HowToDebugDeadlock</a></li>
</ul>
<h2 id="老系统上的-gdb">老系统上的 GDB</h2>
<p>有时候你需要在老系统上面安装 <code>gdb</code>，这时候你可能需要下列信息：</p>
<h3 id="gdb-macros">GDB Macros</h3>
<p>一些随着 Python 发布的 GDB 脚本可以用来调试 Python 进程。
你可以把 Python 源码里面的 <code>Misc/gdbinit</code>  拷贝到 <code>~/.gdbinit</code>，
或者从 <a href="http://svn.python.org/view/python/branches/release27-maint/Misc/gdbinit?view=log">Subversion</a>
来拷贝他们。请注意你的 Python，确保使用正确的代码版本，否则有些功能可能无法工作。</p>
<p>请注意有些新的 GDB 命令只有在 debug 需要的库存在才能正常工作。</p>
<p>这个脚本在 Ubuntu 上面的 gcc 4.5.2 工作时，会爆出错误
<code>No symbol &quot;co&quot; in current context.</code>，是因为 <code>call_function</code> 在
<a href="https://wiki.python.org/moin/EvalFrameEx">PyEval_EvalFrameEx</a> 和
<a href="https://wiki.python.org/moin/EvalCodeEx">PyEval_EvalCodeEx</a> 之间。
重新使用 <code>make &quot;CFLAGS=-g -fno-inline -fno-strict-aliasing&quot;</code>
编译 Python 可以解决这个问题。</p>
<h3 id="使用-python-stack-traces-gdb-脚本">使用 Python Stack Traces GDB 脚本</h3>
<p>在 gdb 命令行里，可以这样查看 Python stack trace:</p>
<pre tabindex="0"><code>(gdb) pystack
</code></pre><p>同样的，可以获取一列 stack frame 的 Python 变量：</p>
<pre tabindex="0"><code>(gdb) pystackv
</code></pre><p>更多 gdbinit 里面没定义的有用的脚本可以在这里找到：</p>
<p><a href="http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros">http://web.archive.org/web/20070915134837/http://www.mashebali.com/?Python_GDB_macros:The_Macros</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>15 分钟学会 R 语言[译文]</title>
      <link>https://blog.alswl.com/2013/10/r-tutorial/</link>
      <pubDate>Tue, 29 Oct 2013 22:32:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2013/10/r-tutorial/</guid>
      <description>&lt;p&gt;仗着自己有几门语言的基础，我在学新语言时候，都会选择一些快速入门教程。
比如 &lt;a href=&#34;http://learnxinyminutes.com/&#34;&gt;Learn X in Y minuts&lt;/a&gt; 就是我经常光顾的站点。&lt;/p&gt;
&lt;p&gt;前段时间，小柒在用 R 写数据分析脚本，我就建议她把 Learn X in Y minuts 里面的
R 语言教程翻译出来。话说 Learn X in Y minuts 里面的中文贡献还是非常多的，赞。&lt;/p&gt;
&lt;p&gt;Learn X in Y minuts 的源码托管在 &lt;a href=&#34;https://github.com/adambard/learnxinyminutes-docs&#34;&gt;Github&lt;/a&gt;。
小柒被我逼着把这篇 &lt;a href=&#34;http://learnxinyminutes.com/docs/r/&#34;&gt;R 语言教程&lt;/a&gt;
翻译到 &lt;a href=&#34;http://learnxinyminutes.com/docs/zh-cn/r-cn/&#34;&gt;R 语言教程中文版&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是译文，有不妥的地方可以留言或者直接去 Github 上面 Pull request。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;R 是一门统计语言。它有很多数据分析和挖掘程序包。可以用来统计、分析和制图。
你也可以在 LaTeX 文档中运行 &lt;code&gt;R&lt;/code&gt; 命令。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>仗着自己有几门语言的基础，我在学新语言时候，都会选择一些快速入门教程。
比如 <a href="http://learnxinyminutes.com/">Learn X in Y minuts</a> 就是我经常光顾的站点。</p>
<p>前段时间，小柒在用 R 写数据分析脚本，我就建议她把 Learn X in Y minuts 里面的
R 语言教程翻译出来。话说 Learn X in Y minuts 里面的中文贡献还是非常多的，赞。</p>
<p>Learn X in Y minuts 的源码托管在 <a href="https://github.com/adambard/learnxinyminutes-docs">Github</a>。
小柒被我逼着把这篇 <a href="http://learnxinyminutes.com/docs/r/">R 语言教程</a>
翻译到 <a href="http://learnxinyminutes.com/docs/zh-cn/r-cn/">R 语言教程中文版</a>。</p>
<p>下面是译文，有不妥的地方可以留言或者直接去 Github 上面 Pull request。</p>
<hr />
<p>R 是一门统计语言。它有很多数据分析和挖掘程序包。可以用来统计、分析和制图。
你也可以在 LaTeX 文档中运行 <code>R</code> 命令。</p>
<!-- more -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 评论以 # 开始</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># R 语言原生不支持 多行注释</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 但是你可以像这样来多行注释</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在窗口里按回车键可以执行一条命令</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">###################################################################</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 不用懂编程就可以开始动手了</span>
</span></span><span class="line"><span class="cl"><span class="c1">###################################################################</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">()</span>	<span class="c1"># 浏览内建的数据集</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">(</span><span class="n">rivers</span><span class="p">)</span>	<span class="c1"># 北美主要河流的长度（数据集）</span>
</span></span><span class="line"><span class="cl"><span class="n">ls</span><span class="p">()</span>	<span class="c1"># 在工作空间中查看「河流」是否出现</span>
</span></span><span class="line"><span class="cl"><span class="n">head</span><span class="p">(</span><span class="n">rivers</span><span class="p">)</span>	<span class="c1"># 撇一眼数据集</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 735 320 325 392 524 450</span>
</span></span><span class="line"><span class="cl"><span class="n">length</span><span class="p">(</span><span class="n">rivers</span><span class="p">)</span>	<span class="c1"># 我们测量了多少条河流？</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 141</span>
</span></span><span class="line"><span class="cl"><span class="n">summary</span><span class="p">(</span><span class="n">rivers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  135.0   310.0   425.0   591.2   680.0  3710.0</span>
</span></span><span class="line"><span class="cl"><span class="n">stem</span><span class="p">(</span><span class="n">rivers</span><span class="p">)</span>	<span class="c1"># 茎叶图（一种类似于直方图的展现形式）</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  The decimal point is 2 digit(s) to the right of the |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   0 | 4</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   2 | 011223334555566667778888899900001111223333344455555666688888999</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   4 | 111222333445566779001233344567</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   6 | 000112233578012234468</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   8 | 045790018</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  10 | 04507</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  12 | 1471</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  14 | 56</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  16 | 7</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  18 | 9</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  20 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  22 | 25</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  24 | 3</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  26 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  28 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  30 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  32 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  34 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  36 | 1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stem</span><span class="p">(</span><span class="n">log</span><span class="p">(</span><span class="n">rivers</span><span class="p">))</span>	<span class="c1"># 查看数据集的方式既不是标准形式，也不是取log后的结果! 看起来，是钟形曲线形式的基本数据集</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#  The decimal point is 1 digit(s) to the left of the |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  48 | 1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  50 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  52 | 15578</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  54 | 44571222466689</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  56 | 023334677000124455789</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  58 | 00122366666999933445777</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  60 | 122445567800133459</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  62 | 112666799035</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  64 | 00011334581257889</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  66 | 003683579</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  68 | 0019156</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  70 | 079357</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  72 | 89</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  74 | 84</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  76 | 56</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  78 | 4</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  80 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  82 | 2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hist</span><span class="p">(</span><span class="n">rivers</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="s2">&#34;#333333&#34;</span><span class="p">,</span> <span class="n">border</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span> <span class="n">breaks</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>	<span class="c1"># 试试用这些参数画画 （译者注：给 river 做统计频数直方图，包含了这些参数：数据源，颜色，边框，空格）</span>
</span></span><span class="line"><span class="cl"><span class="n">hist</span><span class="p">(</span><span class="n">log</span><span class="p">(</span><span class="n">rivers</span><span class="p">),</span> <span class="n">col</span><span class="o">=</span><span class="s2">&#34;#333333&#34;</span><span class="p">,</span> <span class="n">border</span><span class="o">=</span><span class="s2">&#34;white&#34;</span><span class="p">,</span> <span class="n">breaks</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>	<span class="c1">#你还可以做更多式样的绘图</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 还有其他一些简单的数据集可以被用来加载。R 语言包括了大量这种 data()</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">(</span><span class="n">discoveries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">discoveries</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="s2">&#34;#333333&#34;</span><span class="p">,</span> <span class="n">lwd</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">xlab</span><span class="o">=</span><span class="s2">&#34;Year&#34;</span><span class="p">,</span> <span class="n">main</span><span class="o">=</span><span class="s2">&#34;Number of important discoveries per year&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 译者注：参数为（数据源，颜色，线条宽度，X 轴名称，标题）</span>
</span></span><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">discoveries</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="s2">&#34;#333333&#34;</span><span class="p">,</span> <span class="n">lwd</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="s2">&#34;h&#34;</span><span class="p">,</span> <span class="n">xlab</span><span class="o">=</span><span class="s2">&#34;Year&#34;</span><span class="p">,</span> <span class="n">main</span><span class="o">=</span><span class="s2">&#34;Number of important discoveries per year&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 除了按照默认的年份排序，我们还可以排序来发现特征</span>
</span></span><span class="line"><span class="cl"><span class="n">sort</span><span class="p">(</span><span class="n">discoveries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  [1]  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [26]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [51]  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  4  4  4  4  4  4  4</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [76]  4  4  4  4  5  5  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  8  9 10 12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stem</span><span class="p">(</span><span class="n">discoveries</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 译者注：茎叶图（数据，放大系数）</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  The decimal point is at the |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   0 | 000000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   1 | 000000000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   2 | 00000000000000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   3 | 00000000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   4 | 000000000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   5 | 0000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   6 | 000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   7 | 0000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   8 | 0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   9 | 0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  10 | 0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  11 |</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  12 | 0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">max</span><span class="p">(</span><span class="n">discoveries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">summary</span><span class="p">(</span><span class="n">discoveries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    0.0     2.0     3.0     3.1     4.0    12.0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#基本的统计学操作也不需要任何编程知识</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#随机生成数据</span>
</span></span><span class="line"><span class="cl"><span class="nb">round</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="nb">min</span><span class="o">=</span><span class="mf">.5</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mf">6.5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 译者注：runif 产生随机数，round 四舍五入</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 4 6 1 4 6 4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 你输出的结果会和我们给出的不同，除非我们设置了相同的随机种子 random.seed(31337)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#从标准高斯函数中随机生成 9 次</span>
</span></span><span class="line"><span class="cl"><span class="n">rnorm</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1]  0.07528471  1.03499859  1.34809556 -0.82356087  0.61638975 -1.88757271</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [7] -0.59975593  0.57629164  1.08455362</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 基础编程</span>
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数值</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#“数值”指的是双精度的浮点数</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span>	<span class="c1"># 5</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>	<span class="c1"># &#34;numeric&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">5e4</span>	<span class="c1"># 50000				# 用科学技术法方便的处理极大值、极小值或者可变的量级</span>
</span></span><span class="line"><span class="cl"><span class="mf">6.02e23</span>	<span class="c1"># 阿伏伽德罗常数#</span>
</span></span><span class="line"><span class="cl"><span class="mf">1.6e-35</span>	<span class="c1"># 布朗克长度</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 长整数并用 L 结尾</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span><span class="n">L</span>	<span class="c1"># 5</span>
</span></span><span class="line"><span class="cl"><span class="c1">#输出5L</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="mi">5</span><span class="n">L</span><span class="p">)</span>	<span class="c1"># &#34;integer&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以自己试一试？用 class() 函数获取更多信息</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 事实上，你可以找一些文件查阅 `xyz` 以及xyz的差别</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `xyz` 用来查看源码实现，?xyz 用来看帮助</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 算法</span>
</span></span><span class="line"><span class="cl"><span class="mi">10</span> <span class="o">+</span> <span class="mi">66</span>	<span class="c1"># 76</span>
</span></span><span class="line"><span class="cl"><span class="mf">53.2</span> <span class="o">-</span> <span class="mi">4</span>	<span class="c1"># 49.2</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="o">*</span> <span class="mf">2.0</span>	<span class="c1"># 4</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span><span class="n">L</span> <span class="o">/</span> <span class="mi">4</span>	<span class="c1"># 0.75</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span> <span class="o">%%</span> <span class="mi">2</span>	<span class="c1"># 1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 特殊数值类型</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">NaN</span><span class="p">)</span>	<span class="c1"># &#34;numeric&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">Inf</span><span class="p">)</span>	<span class="c1"># &#34;numeric&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="o">-</span><span class="n">Inf</span><span class="p">)</span>	<span class="c1"># &#34;numeric&#34;		# 在以下场景中会用到 integrate( dnorm(x), 3, Inf ) -- 消除 Z 轴数据</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 但要注意，NaN 并不是唯一的特殊数值类型……</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">NA</span><span class="p">)</span>	<span class="c1"># 看上面</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">NULL</span><span class="p">)</span>	<span class="c1"># NULL</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 简单列表</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>	<span class="c1"># 6 8 7 5 3 0 9</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="p">(</span><span class="s1">&#39;alef&#39;</span><span class="p">,</span> <span class="s1">&#39;bet&#39;</span><span class="p">,</span> <span class="s1">&#39;gimmel&#39;</span><span class="p">,</span> <span class="s1">&#39;dalet&#39;</span><span class="p">,</span> <span class="s1">&#39;he&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="p">(</span><span class="s1">&#39;Z&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;Zoro&#34;</span>	<span class="c1"># FALSE FALSE FALSE FALSE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 一些优雅的内置功能</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span><span class="p">:</span><span class="mi">15</span>	<span class="c1"># 5  6  7  8  9 10 11 12 13 14 15</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">seq</span><span class="p">(</span><span class="n">from</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">to</span><span class="o">=</span><span class="mi">31337</span><span class="p">,</span> <span class="n">by</span><span class="o">=</span><span class="mi">1337</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  [1]     0  1337  2674  4011  5348  6685  8022  9359 10696 12033 13370 14707</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [13] 16044 17381 18718 20055 21392 22729 24066 25403 26740 28077 29414 30751</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">letters</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  [1] &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34; &#34;e&#34; &#34;f&#34; &#34;g&#34; &#34;h&#34; &#34;i&#34; &#34;j&#34; &#34;k&#34; &#34;l&#34; &#34;m&#34; &#34;n&#34; &#34;o&#34; &#34;p&#34; &#34;q&#34; &#34;r&#34; &#34;s&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [20] &#34;t&#34; &#34;u&#34; &#34;v&#34; &#34;w&#34; &#34;x&#34; &#34;y&#34; &#34;z&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">month</span><span class="o">.</span><span class="n">abb</span>	<span class="c1"># &#34;Jan&#34; &#34;Feb&#34; &#34;Mar&#34; &#34;Apr&#34; &#34;May&#34; &#34;Jun&#34; &#34;Jul&#34; &#34;Aug&#34; &#34;Sep&#34; &#34;Oct&#34; &#34;Nov&#34; &#34;Dec&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Access the n&#39;th element of a list with list.name[n] or sometimes list.name[[n]]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 list.name[n] 来访问第 n 个列表元素，有时候需要使用 list.name[[n]]</span>
</span></span><span class="line"><span class="cl"><span class="n">letters</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span>	<span class="c1"># &#34;r&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">LETTERS</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span>	<span class="c1"># &#34;M&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">month</span><span class="o">.</span><span class="n">name</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>	<span class="c1"># &#34;September&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">)[</span><span class="mi">3</span><span class="p">]</span>	<span class="c1"># 7</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 字符串</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 字符串和字符在 R 语言中没有区别</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;Horatio&#34;</span>	<span class="c1"># &#34;Horatio&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="s2">&#34;Horatio&#34;</span><span class="p">)</span> <span class="c1"># &#34;character&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">substr</span><span class="p">(</span><span class="s2">&#34;Fortuna multis dat nimis, nulli satis.&#34;</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>	<span class="c1"># &#34;multis &#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;u&#39;</span><span class="p">,</span> <span class="s1">&#39;ø&#39;</span><span class="p">,</span> <span class="s2">&#34;Fortuna multis dat nimis, nulli satis.&#34;</span><span class="p">)</span>	<span class="c1"># &#34;Fortøna møltis dat nimis, nølli satis.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 逻辑值</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 布尔值</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">TRUE</span><span class="p">)</span>	<span class="c1"># &#34;logical&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">FALSE</span><span class="p">)</span>	<span class="c1"># &#34;logical&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 和我们预想的一样</span>
</span></span><span class="line"><span class="cl"><span class="n">TRUE</span> <span class="o">==</span> <span class="n">TRUE</span>	<span class="c1"># TRUE</span>
</span></span><span class="line"><span class="cl"><span class="n">TRUE</span> <span class="o">==</span> <span class="n">FALSE</span>	<span class="c1"># FALSE</span>
</span></span><span class="line"><span class="cl"><span class="n">FALSE</span> <span class="o">!=</span> <span class="n">FALSE</span>	<span class="c1"># FALSE</span>
</span></span><span class="line"><span class="cl"><span class="n">FALSE</span> <span class="o">!=</span> <span class="n">TRUE</span>	<span class="c1"># TRUE</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 缺失数据（NA）也是逻辑值</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">NA</span><span class="p">)</span>	<span class="c1"># &#34;logical&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#定义NA为逻辑型</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 因子</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 因子是为数据分类排序设计的（像是排序小朋友们的年级或性别）</span>
</span></span><span class="line"><span class="cl"><span class="n">levels</span><span class="p">(</span><span class="n">factor</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="s2">&#34;female&#34;</span><span class="p">,</span> <span class="s2">&#34;male&#34;</span><span class="p">,</span> <span class="s2">&#34;male&#34;</span><span class="p">,</span> <span class="s2">&#34;female&#34;</span><span class="p">,</span> <span class="s2">&#34;NA&#34;</span><span class="p">,</span> <span class="s2">&#34;female&#34;</span><span class="p">)))</span>	<span class="c1"># &#34;female&#34; &#34;male&#34;   &#34;NA&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">factor</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="s2">&#34;female&#34;</span><span class="p">,</span> <span class="s2">&#34;female&#34;</span><span class="p">,</span> <span class="s2">&#34;male&#34;</span><span class="p">,</span> <span class="s2">&#34;NA&#34;</span><span class="p">,</span> <span class="s2">&#34;female&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  female female male   NA     female</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Levels: female male NA</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">(</span><span class="n">infert</span><span class="p">)</span>	<span class="c1"># 自然以及引产导致的不育症</span>
</span></span><span class="line"><span class="cl"><span class="n">levels</span><span class="p">(</span><span class="n">infert</span><span class="err">$</span><span class="n">education</span><span class="p">)</span>	<span class="c1"># &#34;0-5yrs&#34;  &#34;6-11yrs&#34; &#34;12+ yrs&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 变量</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 有许多种方式用来赋值</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1"># 这样可以</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">&lt;-</span> <span class="s2">&#34;1&#34;</span> <span class="c1"># 更推荐这样</span>
</span></span><span class="line"><span class="cl"><span class="n">TRUE</span> <span class="o">-&gt;</span> <span class="n">z</span> <span class="c1"># 这样可行，但是很怪</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#我们还可以使用强制转型</span>
</span></span><span class="line"><span class="cl"><span class="k">as</span><span class="o">.</span><span class="n">numeric</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>	<span class="c1"># 1</span>
</span></span><span class="line"><span class="cl"><span class="k">as</span><span class="o">.</span><span class="n">character</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>	<span class="c1"># &#34;5&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 循环</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># for 循环语句</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="ow">in</span> <span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># while 循环</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">&lt;-</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">cat</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="s2">&#34;...&#34;</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span> <span class="o">&lt;-</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 记住，在 R 语言中 for / while 循环都很慢</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 建议使用 apply()（我们一会介绍）来错做一串数据（比如一列或者一行数据）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># IF/ELSE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 再来看这些优雅的标准</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Huzzah! It worked!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Noooo! This is blatantly illogical!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1] &#34;Huzzah! It worked!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 函数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 定义如下</span>
</span></span><span class="line"><span class="cl"><span class="n">jiggle</span> <span class="o">&lt;-</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">x</span> <span class="o">+</span> <span class="n">rnorm</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sd</span><span class="o">=</span><span class="mf">.1</span><span class="p">)</span>	<span class="c1">#add in a bit of (controlled) noise</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 和其他 R 语言函数一样调用</span>
</span></span><span class="line"><span class="cl"><span class="n">jiggle</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>	<span class="c1"># 5±ε. 使用 set.seed(2716057) 后， jiggle(5)==5.005043</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 数据容器：vectors, matrices, data frames, and arrays</span>
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 单维度</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 你可以将目前我们学习到的任何类型矢量化，只要它们拥有相同的类型</span>
</span></span><span class="line"><span class="cl"><span class="n">vec</span> <span class="o">&lt;-</span> <span class="n">c</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">vec</span>	<span class="c1">#  8  9 10 11</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 矢量的类型是这一组数据元素的类型</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># &#34;numeric&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># If you vectorize items of different classes, weird coercions happen</span>
</span></span><span class="line"><span class="cl"><span class="c1">#如果你强制的将不同类型数值矢量化，会出现特殊值</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="p">(</span><span class="n">TRUE</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>	<span class="c1"># 1 4</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="p">(</span><span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>	<span class="c1"># &#34;dog&#34;  &#34;TRUE&#34; &#34;4&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#我们这样来取内部数据，（R 的下标索引顺序 1 开始）</span>
</span></span><span class="line"><span class="cl"><span class="n">vec</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>	<span class="c1"># 8</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 我们可以根据条件查找特定数据</span>
</span></span><span class="line"><span class="cl"><span class="n">which</span><span class="p">(</span><span class="n">vec</span> <span class="o">%%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>	<span class="c1"># 1 3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 抓取矢量中第一个和最后一个字符</span>
</span></span><span class="line"><span class="cl"><span class="n">head</span><span class="p">(</span><span class="n">vec</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>	<span class="c1"># 8</span>
</span></span><span class="line"><span class="cl"><span class="n">tail</span><span class="p">(</span><span class="n">vec</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>	<span class="c1"># 11</span>
</span></span><span class="line"><span class="cl"><span class="c1">#如果下标溢出或不存会得到 NA</span>
</span></span><span class="line"><span class="cl"><span class="n">vec</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span>	<span class="c1"># NA</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 你可以使用 length() 获取矢量的长度</span>
</span></span><span class="line"><span class="cl"><span class="n">length</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># 4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 你可以直接操作矢量或者矢量的子集</span>
</span></span><span class="line"><span class="cl"><span class="n">vec</span> <span class="o">*</span> <span class="mi">4</span>	<span class="c1"># 16 20 24 28</span>
</span></span><span class="line"><span class="cl"><span class="n">vec</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="o">*</span> <span class="mi">5</span>	<span class="c1"># 25 30</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里有许多内置的函数，来表现向量</span>
</span></span><span class="line"><span class="cl"><span class="n">mean</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># 9.5</span>
</span></span><span class="line"><span class="cl"><span class="n">var</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># 1.666667</span>
</span></span><span class="line"><span class="cl"><span class="n">sd</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># 1.290994</span>
</span></span><span class="line"><span class="cl"><span class="nb">max</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># 11</span>
</span></span><span class="line"><span class="cl"><span class="nb">min</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># 8</span>
</span></span><span class="line"><span class="cl"><span class="nb">sum</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>	<span class="c1"># 38</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 二维（相同元素类型）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#你可以为同样类型的变量建立矩阵</span>
</span></span><span class="line"><span class="cl"><span class="n">mat</span> <span class="o">&lt;-</span> <span class="n">matrix</span><span class="p">(</span><span class="n">nrow</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">ncol</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">mat</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    1    4</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]    2    5</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [3,]    3    6</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 和 vector 不一样的是，一个矩阵的类型真的是 「matrix」，而不是内部元素的类型</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span> <span class="c1"># =&gt; &#34;matrix&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 访问第一行的字符</span>
</span></span><span class="line"><span class="cl"><span class="n">mat</span><span class="p">[</span><span class="mi">1</span><span class="p">,]</span>	<span class="c1"># 1 4</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 操作第一行数据</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span> <span class="o">*</span> <span class="n">mat</span><span class="p">[,</span><span class="mi">1</span><span class="p">]</span>	<span class="c1"># 3 6 9</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 访问一个特定数据</span>
</span></span><span class="line"><span class="cl"><span class="n">mat</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>	<span class="c1"># 6</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 转置整个矩阵（译者注：变成 2 行 3 列）</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2] [,3]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    1    2    3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]    4    5    6</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 cbind() 函数把两个矩阵按列合并，形成新的矩阵</span>
</span></span><span class="line"><span class="cl"><span class="n">mat2</span> <span class="o">&lt;-</span> <span class="n">cbind</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span> <span class="n">c</span><span class="p">(</span><span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;bird&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">mat2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,] &#34;1&#34;  &#34;dog&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,] &#34;2&#34;  &#34;cat&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [3,] &#34;3&#34;  &#34;bird&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [4,] &#34;4&#34;  &#34;dog&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">mat2</span><span class="p">)</span>	<span class="c1"># matrix</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Again, note what happened!</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 注意</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 因为矩阵内部元素必须包含同样的类型</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 所以现在每一个元素都转化成字符串</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span><span class="p">(</span><span class="n">class</span><span class="p">(</span><span class="n">mat2</span><span class="p">[,</span><span class="mi">1</span><span class="p">]),</span> <span class="n">class</span><span class="p">(</span><span class="n">mat2</span><span class="p">[,</span><span class="mi">2</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 按行合并两个向量，建立新的矩阵</span>
</span></span><span class="line"><span class="cl"><span class="n">mat3</span> <span class="o">&lt;-</span> <span class="n">rbind</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span> <span class="n">c</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">mat3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2] [,3] [,4]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    1    2    4    5</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]    6    7    0    4</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 哈哈，数据类型都一样的，没有发生强制转换，生活真美好</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 二维(不同的元素类型)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 利用 data frame 可以将不同类型数据放在一起</span>
</span></span><span class="line"><span class="cl"><span class="n">dat</span> <span class="o">&lt;-</span> <span class="n">data</span><span class="o">.</span><span class="n">frame</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">c</span><span class="p">(</span><span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="s2">&#34;bird&#34;</span><span class="p">,</span> <span class="s2">&#34;dog&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">names</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="n">c</span><span class="p">(</span><span class="s2">&#34;number&#34;</span><span class="p">,</span> <span class="s2">&#34;species&#34;</span><span class="p">)</span> <span class="c1"># 给数据列命名</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span>	<span class="c1"># &#34;data.frame&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">dat</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   number species</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1      5     dog</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2      2     cat</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3      1    bird</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 4      4     dog</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">dat</span><span class="err">$</span><span class="n">number</span><span class="p">)</span>	<span class="c1"># &#34;numeric&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">class</span><span class="p">(</span><span class="n">dat</span><span class="p">[,</span><span class="mi">2</span><span class="p">])</span>	<span class="c1"># &#34;factor&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># data.frame() 会将字符向量转换为 factor 向量</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 有很多精妙的方法来获取 data frame 的子数据集</span>
</span></span><span class="line"><span class="cl"><span class="n">dat</span><span class="err">$</span><span class="n">number</span>	<span class="c1"># 5 2 1 4</span>
</span></span><span class="line"><span class="cl"><span class="n">dat</span><span class="p">[,</span><span class="mi">1</span><span class="p">]</span>	<span class="c1"># 5 2 1 4</span>
</span></span><span class="line"><span class="cl"><span class="n">dat</span><span class="p">[,</span><span class="s2">&#34;number&#34;</span><span class="p">]</span>	<span class="c1"># 5 2 1 4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 多维（相同元素类型）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 arry 创造一个 n 维的表格</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You can make a two-dimensional table (sort of like a matrix)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 你可以建立一个 2 维表格（有点像矩阵）</span>
</span></span><span class="line"><span class="cl"><span class="n">array</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span><span class="n">c</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)),</span> <span class="n">dim</span><span class="o">=</span><span class="n">c</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2] [,3] [,4]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    1    4    8    3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]    2    5    9    6</span>
</span></span><span class="line"><span class="cl"><span class="c1">#你也可以利用数组建立一个三维的矩阵</span>
</span></span><span class="line"><span class="cl"><span class="n">array</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">300</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">c</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span><span class="n">c</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">c</span><span class="p">(</span><span class="mi">66</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">847</span><span class="p">))),</span> <span class="n">dim</span><span class="o">=</span><span class="n">c</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># , , 1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    2    8</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]  300    9</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [3,]    4    0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># , , 2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    5   66</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]   60    7</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [3,]    0  847</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#列表（多维的，不同类型的）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># R语言有列表的形式</span>
</span></span><span class="line"><span class="cl"><span class="n">list1</span> <span class="o">&lt;-</span> <span class="nb">list</span><span class="p">(</span><span class="n">time</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="mi">40</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">list1</span><span class="err">$</span><span class="n">price</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="n">rnorm</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span><span class="mf">.5</span><span class="o">*</span><span class="n">list1</span><span class="err">$</span><span class="n">time</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># 随机</span>
</span></span><span class="line"><span class="cl"><span class="n">list1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># You can get items in the list like so</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 你可以这样获得列表的元素</span>
</span></span><span class="line"><span class="cl"><span class="n">list1</span><span class="err">$</span><span class="n">time</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You can subset list items like vectors</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 你也可以和矢量一样获取他们的子集</span>
</span></span><span class="line"><span class="cl"><span class="n">list1</span><span class="err">$</span><span class="n">price</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl"><span class="c1"># apply()函数家族</span>
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 还记得 mat 么？</span>
</span></span><span class="line"><span class="cl"><span class="n">mat</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    1    4</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]    2    5</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [3,]    3    6</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Use apply(X, MARGIN, FUN) to apply function FUN to a matrix X</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用(X, MARGIN, FUN)将函数 FUN 应用到矩阵 X 的行 (MAR = 1) 或者 列 (MAR = 2)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># That is, R does FUN to each row (or column) of X, much faster than a</span>
</span></span><span class="line"><span class="cl"><span class="c1"># R 在 X 的每一行/列使用 FUN，比循环要快很多</span>
</span></span><span class="line"><span class="cl"><span class="n">apply</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">MAR</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">myFunc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      [,1] [,2]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [1,]    3   15</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [2,]    7   19</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [3,]   11   23</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 还有其他家族函数 ?lapply, ?sapply</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 不要被吓到，虽然许多人在此都被搞混</span>
</span></span><span class="line"><span class="cl"><span class="c1"># plyr 程序包的作用是用来改进 apply() 函数家族</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="o">.</span><span class="n">packages</span><span class="p">(</span><span class="s2">&#34;plyr&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="n">plyr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="err">?</span><span class="n">plyr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 载入数据</span>
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;pets.csv&#34; 是网上的一个文本</span>
</span></span><span class="line"><span class="cl"><span class="n">pets</span> <span class="o">&lt;-</span> <span class="n">read</span><span class="o">.</span><span class="n">csv</span><span class="p">(</span><span class="s2">&#34;http://learnxinyminutes.com/docs/pets.csv&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">pets</span>
</span></span><span class="line"><span class="cl"><span class="n">head</span><span class="p">(</span><span class="n">pets</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># 前两行</span>
</span></span><span class="line"><span class="cl"><span class="n">tail</span><span class="p">(</span><span class="n">pets</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># 最后一行</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 以 .csv 格式来保存数据集或者矩阵</span>
</span></span><span class="line"><span class="cl"><span class="n">write</span><span class="o">.</span><span class="n">csv</span><span class="p">(</span><span class="n">pets</span><span class="p">,</span> <span class="s2">&#34;pets2.csv&#34;</span><span class="p">)</span> <span class="c1"># 保存到新的文件 pets2.csv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># set working directory with setwd(), look it up with getwd()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 setwd() 改变工作目录，使用 getwd() 查看当前工作目录</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 尝试使用 ?read.csv 和 ?write.csv 来查看更多信息</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 画图</span>
</span></span><span class="line"><span class="cl"><span class="c1">#########################</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 散点图</span>
</span></span><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">list1</span><span class="err">$</span><span class="n">time</span><span class="p">,</span> <span class="n">list1</span><span class="err">$</span><span class="n">price</span><span class="p">,</span> <span class="n">main</span> <span class="o">=</span> <span class="s2">&#34;fake data&#34;</span><span class="p">)</span> <span class="c1"># 译者注：横轴 list1$time，纵轴 wlist1$price，标题 fake data</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 回归图</span>
</span></span><span class="line"><span class="cl"><span class="n">linearModel</span> <span class="o">&lt;-</span> <span class="n">lm</span><span class="p">(</span><span class="n">price</span>  <span class="o">~</span> <span class="n">time</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">list1</span><span class="p">)</span> <span class="c1"># 译者注：线性模型，数据集为list1，以价格对时间做相关分析模型</span>
</span></span><span class="line"><span class="cl"><span class="n">linearModel</span> <span class="c1"># 拟合结果</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将拟合结果展示在图上，颜色设为红色</span>
</span></span><span class="line"><span class="cl"><span class="n">abline</span><span class="p">(</span><span class="n">linearModel</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;red&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 也可以获取各种各样漂亮的分析图</span>
</span></span><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">linearModel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 直方图</span>
</span></span><span class="line"><span class="cl"><span class="n">hist</span><span class="p">(</span><span class="n">rpois</span><span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">,</span> <span class="k">lambda</span> <span class="o">=</span> <span class="mi">5</span><span class="p">),</span> <span class="n">col</span> <span class="o">=</span> <span class="s2">&#34;thistle&#34;</span><span class="p">)</span> <span class="c1"># 译者注：统计频数直方图</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 柱状图</span>
</span></span><span class="line"><span class="cl"><span class="n">barplot</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">names</span><span class="o">.</span><span class="n">arg</span> <span class="o">=</span> <span class="n">c</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">,</span><span class="s2">&#34;blue&#34;</span><span class="p">,</span><span class="s2">&#34;purple&#34;</span><span class="p">,</span><span class="s2">&#34;green&#34;</span><span class="p">,</span><span class="s2">&#34;yellow&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以尝试着使用 ggplot2 程序包来美化图片</span>
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="o">.</span><span class="n">packages</span><span class="p">(</span><span class="s2">&#34;ggplot2&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="err">?</span><span class="n">ggplot2</span>
</span></span></code></pre></div><h2 id="获得-r">获得 R</h2>
<ul>
<li>从 <a href="http://www.r-project.org/">http://www.r-project.org/</a> 获得安装包和图形化界面</li>
<li><a href="http://www.rstudio.com/ide/">RStudio</a> 是另一个图形化界面</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>在 Python 中使用 epoll[译文]</title>
      <link>https://blog.alswl.com/2013/01/python-epoll/</link>
      <pubDate>Sat, 12 Jan 2013 00:01:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2013/01/python-epoll/</guid>
      <description>&lt;p&gt;原文地址： &lt;a href=&#34;http://scotdoyle.com/python-epoll-howto.html&#34;&gt;http://scotdoyle.com/python-epoll-howto.html&lt;/a&gt; ，
我这里取精简内容翻译过来。&lt;/p&gt;
&lt;p&gt;============ 正文开始 ============&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Python 从 2.6 开始支持 &lt;a href=&#34;http://linux.die.net/man/4/epoll&#34;&gt;epoll&lt;/a&gt;。现在我们用 Python3 来写基于这些 API
的 epoll 范例。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;阻塞的-socket-通信范例&#34;&gt;阻塞的 Socket 通信范例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;EOL1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;EOL2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\r\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;HTTP/1.0 200 OK&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\r\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;date: &amp;#34;2013-01-12T00:01:00+08:00&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type: text/plain&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\r\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Content-Length: 13&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;serversocket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;serversocket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setsockopt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;serversocket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;serversocket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;connectiontoclient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serversocket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOL1&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EOL2&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connectiontoclient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;connectiontoclient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;connectiontoclient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;serversocket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个范例中的代码在 &lt;code&gt;accept()&lt;/code&gt; 、 &lt;code&gt;recv()&lt;/code&gt; 和 &lt;code&gt;send()&lt;/code&gt; 时候会发生阻塞，
导致其他连接无法完成。&lt;/p&gt;
&lt;p&gt;通常情况下，在我们使用阻塞模型时候，会专门建立一个主线程来进行监听，
将建立成功的连接交给其他线程操作，然后继续在主线程上面监听。
这样一来，就不会受单次请求阻塞的限制。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kegel.com/c10k.html&#34;&gt;C10K&lt;/a&gt; 问题描述了其他处理高并发方法，比如异步 Socket，
通过监听事件来触发预设的响应。异步 Socket 可以是单线程，也可以是多线程。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>原文地址： <a href="http://scotdoyle.com/python-epoll-howto.html">http://scotdoyle.com/python-epoll-howto.html</a> ，
我这里取精简内容翻译过来。</p>
<p>============ 正文开始 ============</p>
<h2 id="介绍">介绍</h2>
<p>Python 从 2.6 开始支持 <a href="http://linux.die.net/man/4/epoll">epoll</a>。现在我们用 Python3 来写基于这些 API
的 epoll 范例。</p>
<!-- more -->
<h2 id="阻塞的-socket-通信范例">阻塞的 Socket 通信范例</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">socket</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EOL1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">EOL2</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\n\r\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span>  <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;HTTP/1.0 200 OK</span><span class="se">\r\n</span><span class="s1">date: &#34;2013-01-12T00:01:00+08:00&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">+=</span> <span class="sa">b</span><span class="s1">&#39;Content-Type: text/plain</span><span class="se">\r\n</span><span class="s1">Content-Length: 13</span><span class="se">\r\n\r\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">+=</span> <span class="sa">b</span><span class="s1">&#39;Hello, world!&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">connectiontoclient</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">serversocket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">request</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="n">EOL1</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span> <span class="ow">and</span> <span class="n">EOL2</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">request</span> <span class="o">+=</span> <span class="n">connectiontoclient</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="o">*</span><span class="mi">40</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="n">decode</span><span class="p">()[:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">      <span class="n">connectiontoclient</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">connectiontoclient</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">serversocket</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>这个范例中的代码在 <code>accept()</code> 、 <code>recv()</code> 和 <code>send()</code> 时候会发生阻塞，
导致其他连接无法完成。</p>
<p>通常情况下，在我们使用阻塞模型时候，会专门建立一个主线程来进行监听，
将建立成功的连接交给其他线程操作，然后继续在主线程上面监听。
这样一来，就不会受单次请求阻塞的限制。</p>
<p><a href="http://www.kegel.com/c10k.html">C10K</a> 问题描述了其他处理高并发方法，比如异步 Socket，
通过监听事件来触发预设的响应。异步 Socket 可以是单线程，也可以是多线程。</p>
<p>Python 的 API 中包含了 select / poll / epoll，具体的可用性依赖于操作系统。
他们的效率是 epoll &gt; poll &gt; select，从这个 <a href="http://lse.sourceforge.net/epoll/index.html">性能测试文章</a> 就可以看出来。</p>
<h2 id="epoll-异步编程范例">epoll 异步编程范例</h2>
<p>epoll 的流程是这样的：</p>
<ol>
<li>创建 epoll 实例</li>
<li>告诉 epoll 去监听哪几种类型事件</li>
<li>向 epoll 查询最近已监听事件的变化</li>
<li>根据不同的类型做不同的处理</li>
<li>让 epoll 修改监听列表</li>
<li>重复 3-5 直到结束</li>
<li>消灭 epoll 实例</li>
</ol>
<p>范例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span> <span class="nn">select</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EOL1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">EOL2</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\n\r\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span>  <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;HTTP/1.0 200 OK</span><span class="se">\r\n</span><span class="s1">date: &#34;2013-01-12T00:01:00+08:00&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">+=</span> <span class="sa">b</span><span class="s1">&#39;Content-Type: text/plain</span><span class="se">\r\n</span><span class="s1">Content-Length: 13</span><span class="se">\r\n\r\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">+=</span> <span class="sa">b</span><span class="s1">&#39;Hello, world!&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">serversocket</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">epoll</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="n">epoll</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">epoll</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">serversocket</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">select</span><span class="o">.</span><span class="n">EPOLLIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">connections</span> <span class="o">=</span> <span class="p">{};</span> <span class="n">requests</span> <span class="o">=</span> <span class="p">{};</span> <span class="n">responses</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">   <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">events</span> <span class="o">=</span> <span class="n">epoll</span><span class="o">.</span><span class="n">poll</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="n">fileno</span><span class="p">,</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="n">fileno</span> <span class="o">==</span> <span class="n">serversocket</span><span class="o">.</span><span class="n">fileno</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">connection</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">serversocket</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">connection</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">epoll</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">connection</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">select</span><span class="o">.</span><span class="n">EPOLLIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">connections</span><span class="p">[</span><span class="n">connection</span><span class="o">.</span><span class="n">fileno</span><span class="p">()]</span> <span class="o">=</span> <span class="n">connection</span>
</span></span><span class="line"><span class="cl">            <span class="n">requests</span><span class="p">[</span><span class="n">connection</span><span class="o">.</span><span class="n">fileno</span><span class="p">()]</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="n">responses</span><span class="p">[</span><span class="n">connection</span><span class="o">.</span><span class="n">fileno</span><span class="p">()]</span> <span class="o">=</span> <span class="n">response</span>
</span></span><span class="line"><span class="cl">         <span class="k">elif</span> <span class="n">event</span> <span class="o">&amp;</span> <span class="n">select</span><span class="o">.</span><span class="n">EPOLLIN</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">requests</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span> <span class="o">+=</span> <span class="n">connections</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">EOL1</span> <span class="ow">in</span> <span class="n">requests</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span> <span class="ow">or</span> <span class="n">EOL2</span> <span class="ow">in</span> <span class="n">requests</span><span class="p">[</span><span class="n">fileno</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">               <span class="n">epoll</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">fileno</span><span class="p">,</span> <span class="n">select</span><span class="o">.</span><span class="n">EPOLLOUT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="o">*</span><span class="mi">40</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">requests</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">()[:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">         <span class="k">elif</span> <span class="n">event</span> <span class="o">&amp;</span> <span class="n">select</span><span class="o">.</span><span class="n">EPOLLOUT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">byteswritten</span> <span class="o">=</span> <span class="n">connections</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">responses</span><span class="p">[</span><span class="n">fileno</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">responses</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span> <span class="o">=</span> <span class="n">responses</span><span class="p">[</span><span class="n">fileno</span><span class="p">][</span><span class="n">byteswritten</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">responses</span><span class="p">[</span><span class="n">fileno</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">               <span class="n">epoll</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">fileno</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="n">connections</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span><span class="o">.</span><span class="n">shutdown</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SHUT_RDWR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="k">elif</span> <span class="n">event</span> <span class="o">&amp;</span> <span class="n">select</span><span class="o">.</span><span class="n">EPOLLHUP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">epoll</span><span class="o">.</span><span class="n">unregister</span><span class="p">(</span><span class="n">fileno</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">connections</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">connections</span><span class="p">[</span><span class="n">fileno</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">epoll</span><span class="o">.</span><span class="n">unregister</span><span class="p">(</span><span class="n">serversocket</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">   <span class="n">epoll</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="n">serversocket</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>最关键的几行如下：</p>
<ul>
<li>16：注册感兴趣的事件</li>
<li>23：如果发现是监听 socket，则创建连接</li>
<li>30：读事件处理</li>
<li>33：读事件完成后，修改 epoll 对应的状态到写事件</li>
<li>35：写事件</li>
<li>41：释放对应的连接</li>
</ul>
<p>Epoll 分边缘触发（edge-triggered）和水平触发（level-triggered）两种，
前者只被内核触发一次通知（除非状态被改变为未就绪），后者在触发后如果不做操作，
以后仍然会收到内核的触发通知。</p>
<h2 id="更多优化">更多优化</h2>
<h3 id="连接等待池大小">连接等待池大小</h3>
<p>我们之前的代码直接使用 <code>listen()</code> 建立连接，可以通过设定一个队列大小，
在队列满了时候，就不再接受新的连接，从而保证已经接受的连接顺利完成。</p>
<h3 id="tcp-选项">TCP 选项</h3>
<p>使用 <a href="http://www.baus.net/on-tcp_cork">TCP_CORK</a> 功能，可以将小数据包封装成大包传输，提高效率。</p>
<p><a href="http://www.techrepublic.com/article/tcpip-options-for-high-performance-data-transmission/1050878">TCP_NODELAY</a> 则作用相反，将大包分成小包发送出去。比较适合实时应用比如 SSH。</p>
<p>（译者：<a href="http://www.uplook.cn/blog/8/81276/">Linux下高性能网络编程中的几个TCP/IP选项</a>介绍这几个 HTTP，写的不错。</p>
<p>范例中的源码在 <a href="http://scotdoyle.com/python-epoll-examples.tar.gz">source code</a> 下载。</p>
]]></content:encoded>
    </item>
    <item>
      <title>如何让 Instagram 在一百多万用户爆炸后稳定运行</title>
      <link>https://blog.alswl.com/2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/</link>
      <pubDate>Mon, 19 Nov 2012 00:06:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;http://instagram-engineering.tumblr.com/post/20541814340/keeping-instagram-up-with-over-a-million-new-users-in&#34;&gt;Keeping Instagram up with over a million new users in twelve hours&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这周二我们发布了 &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.instagram.android&#34;&gt;Instagram for Android&lt;/a&gt;，反响空前强烈。
最近这几周我们一直（在基础设施方面）做负载计划，为所有可能发生的事故做准备。
尽管如此，在发布那天，最大的挑战仍然是如何快速定位问题，找到瓶颈并尽快修复他们。
在这里我们将分享一些帮助我们解决问题的工具和技术。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;##statsd##&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://github.com/etsy/statsd/&#34;&gt;statsd&lt;/a&gt; 在 Instagram 很受欢迎。这是 &lt;a href=&#34;http://github.com/etsy/&#34;&gt;Etsy&lt;/a&gt; 写的一个网络监控器，
能够统计并图形化数据。它有两种核心的统计方式：计数器和计时器。
我们用计数器来跟踪许多信息，从每秒钟注册数到喜欢数量统计。
同时我们使用计时器来跟踪 feeds 变化，用户停留在 feeds 多久，和其他的主要操作。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>原文链接：<a href="http://instagram-engineering.tumblr.com/post/20541814340/keeping-instagram-up-with-over-a-million-new-users-in">Keeping Instagram up with over a million new users in twelve hours</a></p>
<hr />
<p>这周二我们发布了 <a href="https://play.google.com/store/apps/details?id=com.instagram.android">Instagram for Android</a>，反响空前强烈。
最近这几周我们一直（在基础设施方面）做负载计划，为所有可能发生的事故做准备。
尽管如此，在发布那天，最大的挑战仍然是如何快速定位问题，找到瓶颈并尽快修复他们。
在这里我们将分享一些帮助我们解决问题的工具和技术。</p>
<!-- more -->
<p>##statsd##</p>
<p><a href="http://github.com/etsy/statsd/">statsd</a> 在 Instagram 很受欢迎。这是 <a href="http://github.com/etsy/">Etsy</a> 写的一个网络监控器，
能够统计并图形化数据。它有两种核心的统计方式：计数器和计时器。
我们用计数器来跟踪许多信息，从每秒钟注册数到喜欢数量统计。
同时我们使用计时器来跟踪 feeds 变化，用户停留在 feeds 多久，和其他的主要操作。</p>
<p>我们喜欢 statsd 的最大原因是它能迅速将状态显示并图形化出来。
Stats 几乎是实时的（在我们系统中有 10 秒钟的延时）
帮助我们评估系统状况和代码变化情况。
Stats 可以随意启用，当我们需要跟踪时，能够快速启用它。
你可以指定一个取样密度，来均匀的查看 web 应用概况，
而不会影响它运行效率。</p>
<p>总结：实时统计可以动态添加，帮助你线上诊断而无须等待问题重现。</p>
<p>##Dogslow##</p>
<p><a href="http://blog.bitbucket.org/2011/05/17/tracking-slow-requests-with-dogslow/">Bitbucket</a> 出品，Dogslow 是一个 Django middleware，它能监视运行的进程，
当发现有进程运行时间超过 <em>N</em> 秒时，会保存当前进程信息的快照到磁盘。
一直开着它很耗性能，但当去定位突发问题的瓶颈时，就会非常有用（我们在 web
服务器上加了一个开关控制）。</p>
<p>在发布那天，我们发现很多运行时间超过 1.5s 的进程都卡在 memcached 的 set()
和 get_many() 方法上。我们使用 Munin 跟踪我们的机器状态，发现 memcached
每秒有 5 万次请求，因此，尽管还没到达 CPU 上限，却被 memcached
拖慢了应用服务器速度。</p>
<p>总结：瓶颈往往是后台的一个短板造成的，定位到底哪里卡下来能帮助找出问题根源。</p>
<p>##Replication &amp; Read-slaves##</p>
<p>我们主要的两个数据源 <a href="http://redis.io">Redis</a> 和 <a href="http://postgresql.org/">PostgreSQL</a> 都可以方便地主从分离。
当我们的 Redis 数据库到达每秒 4 万请求时候，开始成为瓶颈。我们在另外一台服务器
打开 <a href="http://redis.io/topics/replication">SYNCing to the master</a>，然后将读请求发送到这台服务器，
这些操作仅耗时 20 分钟。根据几个案例，有些机器的负载会偏离了我们预期，
所以我们会提前准备好从服务器，从而快速地分离出读请求。</p>
<p>比方说 Postgres，我们混合使用 <a href="http://wiki.postgresql.org/wiki/Streaming_Replication">Streaming Replication</a> 和 Amazon EBS
快照来快速启动从服务器。所有从主 DB 到从服务器的数据不定时会有 EBS 快照。
根据这些快照，我们可以在 20 分钟内启动新的从服务器并通知主服务器。
在 AWS 这样的环境中，我们使用脚本和命令来很快的预判并部署新的从服务器。</p>
<p>总结：如果读能力会变成瓶颈，那就预先准备好从服务器，并让他们轮询服务。
一旦出现了新的读问题，要做的仅仅是加更多的读服务器到轮询中去。</p>
<h2 id="pgfouine">##PGFouine##</h2>
<p><a href="http://pgfouine.projects.postgresql.org/">PGFouine</a> 是一个分析 PostgreSQL 查询日志并生成查询结果的工具。
将最重、最常用、最慢的查询拆分出来。我们写了一个 Fabric 脚本来方便的使用它，
连接到一个数据库，然后等待 30 秒并记录下其中每条查询，把结果保存到本地再用
pgfouine 来分析，这里可以看到 <a href="https://gist.github.com/2307647">as a gist</a>。PGFouine
是我们用来分析数据库性能的核心工具。帮我们找出哪些查询应该被 memcached 缓存，
哪些查询了过度的数据等等。发布那天数据库出现了一点压力，我们就跑 PGFouine，
然后部署一些提升性能的代码来缓解压力，然后再跑一次 PGFouine 来确认效果。</p>
<p>知道平日里数据库表现性能很重要，因此我们也定期在无压力的服务器上统计信息。</p>
<p>总结：数据库日志分析（尤其注意迭代循环查询和缓存经常使用的数据）</p>
<h2 id="one-more-thing">One more thing</h2>
<p>另一个帮助我们顺利通过发布第一天的工具是我们自己写的一个 node.js 服务，node2dm，
用来推送通知消息到 Android C2DM 服务。它至今已经发送了 500 万条推送。</p>
<p>我们调查了一些支持 C2DM 的可用服务，但要么是开源包不那么被积极维护，
要么是不支持 Google 所有的功能。我们现在用 <a href="http://github.com/Instagram/node2dm">open sourcing node2dm</a>，
你可以随意 forlk / pull-request 来帮助我们改进。</p>
<h2 id="interested">Interested?</h2>
<p>如果你对这些很感兴趣，你可以跟我们联系来获得工作机会，<a href="http://instagram.jobscore.com/jobs/instagram/engineer/bXctey0Oir4kCZeJe4bk1X">drop us a note</a>，
我们需要知道你的想法。</p>
<p>你可以在 Hacker News 来 <a href="http://news.ycombinator.com/item?id=3804351">discuss this post</a>。</p>
<p>—</p>
<p><em>Mike Krieger, co-founder</em></p>
]]></content:encoded>
    </item>
    <item>
      <title>Working with Python subprocess[译文]</title>
      <link>https://blog.alswl.com/2012/10/working-with-python-subprocess/</link>
      <pubDate>Tue, 16 Oct 2012 00:42:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/10/working-with-python-subprocess/</guid>
      <description>&lt;p&gt;8月底到魔都开始新工作，头一个月当然各种忙，都没时间来更新博客。&lt;/p&gt;
&lt;p&gt;这篇文章是在写 &lt;a href=&#34;http://kenai.com/projects/btrace/pages/Home&#34;&gt;Btrace&lt;/a&gt; 脚本时候查资料看到的，
看着不错就顺手翻译，没想到差点烂在草稿箱出不来啊出不来。
熬了一个月才磨出来，媳妇都快成婆了有木有。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;http://jimmyg.org/blog/2009/working-with-python-subprocess.html&#34;&gt;Working with Python subprocess - Shells, Processes, Streams, Pipes, Redirects and More&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于「执行命令时候发生了什么」这个问题，可以在
&lt;a href=&#34;http://en.wikipedia.org/wiki/Redirection_(computing)&#34;&gt;http://en.wikipedia.org/wiki/Redirection_(computing)&lt;/a&gt;
找到更多最新信息。这篇文章遵循 &lt;a href=&#34;http://www.gnu.org/copyleft/fdl.html&#34;&gt;GFDL&lt;/a&gt; 协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我的上一篇日志中，我写到如何
&lt;a href=&#34;http://jimmyg.org/blog/2009/python-command-line-interface-%28cli%29-with-sub-commands.html&#34;&gt;build a command line interface with sub-commands in Python&lt;/a&gt;。
这次我来尝试如何通过 Python 的 &lt;code&gt;subprocess&lt;/code&gt; 模块来和命令行指令进行交互。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>8月底到魔都开始新工作，头一个月当然各种忙，都没时间来更新博客。</p>
<p>这篇文章是在写 <a href="http://kenai.com/projects/btrace/pages/Home">Btrace</a> 脚本时候查资料看到的，
看着不错就顺手翻译，没想到差点烂在草稿箱出不来啊出不来。
熬了一个月才磨出来，媳妇都快成婆了有木有。</p>
<p>原文链接：<a href="http://jimmyg.org/blog/2009/working-with-python-subprocess.html">Working with Python subprocess - Shells, Processes, Streams, Pipes, Redirects and More</a></p>
<hr />
<p>注意</p>
<blockquote>
<p>关于「执行命令时候发生了什么」这个问题，可以在
<a href="http://en.wikipedia.org/wiki/Redirection_(computing)">http://en.wikipedia.org/wiki/Redirection_(computing)</a>
找到更多最新信息。这篇文章遵循 <a href="http://www.gnu.org/copyleft/fdl.html">GFDL</a> 协议。</p>
</blockquote>
<p>在我的上一篇日志中，我写到如何
<a href="http://jimmyg.org/blog/2009/python-command-line-interface-%28cli%29-with-sub-commands.html">build a command line interface with sub-commands in Python</a>。
这次我来尝试如何通过 Python 的 <code>subprocess</code> 模块来和命令行指令进行交互。</p>
<p>我想达到的目标是：</p>
<ul>
<li>查看当你键入命令时究竟发生了什么</li>
<li>如何确认一个命令是否存在并找出到底在哪</li>
<li>通过 Python 或 shell 执行命令</li>
<li>向一个运行中的进程读取 STDOUT 或写入 STDIN</li>
<li>检查进程的退出返回状态</li>
<li>理解 Bash 在命令中断中扮演的角色，并如何将它们发送给程序</li>
</ul>
<!-- more -->
<h2 id="执行程序时发生了什么">执行程序时发生了什么</h2>
<p>当你双击桌面上的终端程序图标时，就会打开一个载入 <code>shell</code> 的程序。
你键入的命令不会直接在内核执行，而是先和 shell 进行交互。</p>
<pre tabindex="0"><code>    Command      (eg. `ls -l&#39;)
       ↓
Terminal Program (eg. `gnome-terminal&#39;)
       ↓
     Shell       (eg Bash)
       ↓
     Kernel      (eg. Linux 2.6.24)
</code></pre><p>更多关于 shell 的信息：</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Unix_shell">http://en.wikipedia.org/wiki/Unix_shell</a></li>
</ul>
<p>更多关于进程如何运行的信息：</p>
<ul>
<li><a href="http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html">http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html</a></li>
</ul>
<p>当你通过 Python 执行程序时候，你可以选择直接从内核执行或者通过 shell。
如果你选择直接执行，你就没办法和 bash 同样方式执行命令。</p>
<p>我们先看看怎么使用 shell 和那些好玩的特性功能，
然后再通过 <code>subprocess</code> 来实现同样的功能，</p>
<h3 id="数据流">数据流</h3>
<p>在 UNIX 和 Linux 下，有三个被称作 <em>流</em> 的 I/O 通道，它们通过文本终端
（比如用 gnome-terminal 运行 Bash）和其他应用程序（比如通过 Python 的
<code>subprocess</code> ）这类环境来连接程序。
这几个 I/O 通道分别称为 <em>标准输入</em>， <em>标准输出</em>，和 <em>标准错误输出</em> ,
它们的 <em>文件描述符</em> 分别为 0，1，2。</p>
<table>
  <thead>
    <tr>
      <th> 句柄 </th> <th> 名称 </th> <th> 描述 </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> 0 </td> <td> stdin </td> <td> 标准输入 </td>
    </tr>
    <tr>
      <td> 1 </td> <td> stdout </td> <td> 标准输出 </td>
    </tr>
    <tr>
      <td> 2 </td> <td> stderr </td> <td> 标准错误输出 </td>
    </tr>
  </tbody>
</table>
<p>这里你能看到标准输入叫做 <code>stdin</code>，标准输出称作 <code>stdout</code>，标准错误输出叫做
<code>stderr</code> 。</p>
<p>流是这样工作的：从终端输出获取输入并通过标准输入发送到程序，
程序返回的正常输出从标准输出输出，错误则返回到环境上下文的标准错误输出。
维基百科有幅图将描述这个过程：</p>
<p><a href="http://en.wikipedia.org/wiki/File:Stdstreams-notitle.svg">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201209/Stdstreams-notitle.svg.png" alt="Stdstreams-notitle.svg"  />



</a></p>
<p>如果你想将流从一个程序重定向到另一个地方，请看下文分解。</p>
<h2 id="使用-shell">使用 Shell</h2>
<h3 id="重定向标准输入和输出到文件">重定向标准输入和输出到文件</h3>
<p>你可以在 Bash 中使用 <code>&gt;</code> 操作符将一个程序的标准输出重定向到一个文件
（在其他 Shell 也许略有语法差异）。这里有个范例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &gt; file1
</span></span></code></pre></div><p><code>program1</code> 执行后的输出结果从标准输出流写入 <code>file1</code>，并将 <code>file1</code>
其中现有的内容所替换。如果你只是想追加内容，你可以使用 <code>&gt;&gt;</code> 操作符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &gt;&gt; file1
</span></span></code></pre></div><p><code>&lt;</code> 操作符可以被用来从文件中读取数据并传输到程序的标准输入流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &lt; file1
</span></span></code></pre></div><p>同样的，<code>program1</code> 会被执行，但是此时 <code>file1</code> 取代了键盘，
成为了标准输入的数据源。</p>
<p>你可以组合 shell 操作符以完成更复杂的操作。
下面这个范例中，<code>program1</code> 从 <code>file1</code> 获取数据并发送到标准输入。标准输出则从
<code>program1</code> 输出到 <code>file2</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &lt; file1 &gt; file2
</span></span></code></pre></div><p>也许有时候你需要从一个程序获取输出并将其作为另一个程序的输入。
你可以通过一个临时文件来实现这个操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &gt; tempfile1
</span></span><span class="line"><span class="cl">program2 &lt; tempfile1
</span></span><span class="line"><span class="cl">rm tempfile1
</span></span></code></pre></div><p>这种方法有点累赘，因此 shell 提供了方便的机制，称为 <em>管道</em></p>
<h3 id="管道">管道</h3>
<p>管道允许一个程序的标准输出直接输入到另一个程序的标准输入流中，
而无须创建临时文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 <span class="p">|</span> program2
</span></span></code></pre></div><p>操作符 <code>|</code> 被称作 <em>管道</em> 符号，因此这种操作就被称为 <em>管道</em>。</p>
<p>这里有一幅来自维基百科的图片来描述管道：</p>
<p><a href="http://en.wikipedia.org/wiki/File:Pipeline.svg">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201209/Pipeline.svg.png" alt="Pipeline.svg"  />



</a></p>
<p>这里有个使用 <code>find .</code>（遍历当前目录下的文件和目录）的例子，将输出定向到 <code>grep</code>
程序来查找特定文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find . <span class="p">|</span> grep <span class="s2">&#34;The file I&#39;m after.txt&#34;</span>
</span></span></code></pre></div><p>第一个程序产生的数据是一行一行地导向第二个程序的，所以在第一个程序运行结束之前，
第二个程序就可以开始使用它们。</p>
<h3 id="从文件重定向标准输入和输出">从文件重定向标准输入和输出</h3>
<p>在重定向标准输出的同时，你也可以重定向其他流，
比如重定向标准错误输出到标准输出。我们已经讨论过在 Bash 中，
可以在文件描述符之前使用 <code>&gt;</code>，<code>&lt;</code> 和 <code>&gt;&gt;</code> 操作符来重定向数据流
（还记得之前讨论的数字 0，1，2 么）。如果把标准输出代表的数字 1 省略掉看，
会发现我们一直在使用标准输出。</p>
<p>下面这条命令执行 <code>program1</code> 并将所有标准 <em>错误</em> 数据输出到 <code>file1</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 2&gt; file1
</span></span></code></pre></div><p>执行 <code>program1</code>，错误信息就被重定向到 <code>file</code> 了。</p>
<p>这里有个范例程序让你来测试，将它保存成 <code>redirect1.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">input</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Echo to stdout: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Echo to stderr: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">KeyboardError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span></code></pre></div><p>这个程序始终将接受到的输入数据并同时输出到 stdout 和 stderr 。</p>
<p>在 csh 衍生出来的 shell 中，语法则是在重定向符号之后加上 <code>&amp;</code> 符号，
可以达到同样的效果。（译者注：即 <code>|&amp;</code>）</p>
<p>另一个常用的特性是将一个输出流重定向到定一个。
最常见的用法是将标准错误输出重定向到标准输出，
这样就可以把错误信息和正确信息合并在一起，比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find / -name .profile &gt; results 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span></code></pre></div><p>命令将会找出所有名叫 <code>.profile</code> 的文件。
如果没有重定向，它将输出命中信息到 stdout，错误信息到 stderr
（比如有些目录无权限访问）。如果标准输出定向到文件，错误信息则会显示在命令行上。
为了在结果文件中可以同时看到命中信息和错误信息，我们需要使用 <code>2&gt;&amp;1</code>
将标准错误输出（2）输出到标准输出（1）。（这次即使在 Bash 中也需要 <code>&amp;</code> 符。）</p>
<p>虽然语法上可以将 <code>2&gt;&amp;1</code> 放到 <code>&gt;</code> 前面，但这样不能正常工作。
事实上，当解析器读取 <code>2&gt;&amp;1</code> 时候，它还不知道标准输出将重定向到哪里，
所以标准错误输出就不会被合并。</p>
<p>如果使用管道合并输出流，那么合并符号 <code>2&gt;&amp;1</code> 需要在管道符号 <code>|</code> 之前。比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find / -name .profile 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> less
</span></span></code></pre></div><p>Bash 中的合并输出简写形式是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">command</span> &gt; file 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span></code></pre></div><p>为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">command</span> <span class="p">&amp;</span>&gt;file
</span></span></code></pre></div><p>或者：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">command</span> &gt;<span class="p">&amp;</span>file
</span></span></code></pre></div><p>但是最好别用简写形式，否则你会弄糊涂。我提倡宁愿麻烦但是要清晰。</p>
<p><code>&amp;&gt;</code> 操作符同时重定向标准输出和标准错误输出。
它的作用和在 Bourne Shell 中的 <code>command &gt; file 2&gt;&amp;1</code> 一样。</p>
<h3 id="管道链">管道链</h3>
<p>重定向可以和管道连接起来组成复杂的命令，比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls <span class="p">|</span> grep <span class="s1">&#39;\.sh&#39;</span> <span class="p">|</span> sort &gt; shlist
</span></span></code></pre></div><p>列出当前目录下所有文件，然后过滤剩下仅包含 .sh 的内容，根据文字编码排序，
然后将最终结果输出到 shlist。这种类型的命令经常在 shell 脚本和批处理文件中使用。</p>
<h3 id="多重输出重定向">多重输出重定向</h3>
<p>标准命令 <code>tee</code> 可以重定向一个命令到多个地方。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls -lrt <span class="p">|</span> tee xyz
</span></span></code></pre></div><p>这将文件列表同时输出到标准输出和文件 <code>xyz</code> 中。</p>
<h3 id="here-文档">Here 文档</h3>
<p>大部分 Shell，包括 Bash 都支持 <em>Here 文档</em>，它允许你使用 <code>&lt;&lt;</code>
操作符和一些文本作为分隔符将文本块嵌入到命令之中。</p>
<p>在下面的范例中，文本块被传送给 <code>tr</code> 命令，同时使用 <code>END_TEXT</code> 作为 Here
文档分隔符来指明文本的开始和结束。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tr a-z A-Z <span class="s">&lt;&lt;END_TEXT
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; one two three
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; uno dos tres
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; END_TEXT</span>
</span></span><span class="line"><span class="cl">ONE TWO THREE
</span></span><span class="line"><span class="cl">UNO DOS TRES
</span></span></code></pre></div><p>经过 <code>tr</code> 处理后，输出的结果是 <code>ONE TWO THREE</code> 和 <code>UNO DOS TRES</code>。</p>
<p>一种常用用法是用 Here 文档向文件添加文本。
默认情况下，文本中的变量是会被替换成真实值的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat <span class="s">&lt;&lt; EOF
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; Working dir $PWD
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; EOF</span>
</span></span><span class="line"><span class="cl">Working dir /home/user
</span></span></code></pre></div><p>通过在 Here 文档标签引上单引号或者双引号，就可以避免这种转义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat &lt;&lt; <span class="s2">&#34;EOF&#34;</span>
</span></span><span class="line"><span class="cl">&gt; Working dir <span class="nv">$PWD</span>
</span></span><span class="line"><span class="cl">&gt; EOF
</span></span><span class="line"><span class="cl">Working dir <span class="nv">$PWD</span>
</span></span></code></pre></div><h2 id="介绍-subprocess">介绍 <code>subprocess</code></h2>
<p>刚才我们讨论过了一些命令行提供的功能，现在让我们体验一下 <code>subprocess</code> 模块。
你可以在命令行中运行下面这条简单的命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;Hello world!&#34;</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span></code></pre></div><p>让我们试着在 Python 中运行它。</p>
<p>以前我们需要使用一堆各异的标准库来实现进程管理。
从 Python 2.4 开始，所有功能都被精心地整理到 <code>subprocess</code> 这个模块，
其中的 <code>Popen</code> 类可以提供所有我们需要的。</p>
<p>注意</p>
<blockquote>
<p>如果你对新的 <code>Popen</code> 如何替换旧模块，[subprocess-doc][subprocess-documentation]
有一个章节解释过去是如何作用以及当前是如何作用。</p>
</blockquote>
<p><code>Popen</code> 可以接受一下参数，详情可以在 [using-the-subprocess-module][http://docs.python.org/library/subprocess.html#using-the-subprocess-module]：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">subprocess.Popen<span class="o">(</span>args, <span class="nv">bufsize</span><span class="o">=</span>0, <span class="nv">executable</span><span class="o">=</span>None, <span class="nv">stdin</span><span class="o">=</span>None,
</span></span><span class="line"><span class="cl">    <span class="nv">stdout</span><span class="o">=</span>None, <span class="nv">stderr</span><span class="o">=</span>None, <span class="nv">preexec_fn</span><span class="o">=</span>None, <span class="nv">close_fds</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">    <span class="nv">shell</span><span class="o">=</span>False, <span class="nv">cwd</span><span class="o">=</span>None, <span class="nv">env</span><span class="o">=</span>None, <span class="nv">universal_newlines</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">    <span class="nv">startupinfo</span><span class="o">=</span>None, <span class="nv">creationflags</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><h2 id="使用-shell-1">使用 Shell</h2>
<p>让我们以 Hello World! 这个例子开始。和之前类似，通过
Python shell 执行下列命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import subprocess
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo &#34;Hello world!&#34;&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span></code></pre></div><p>如你所见，标准输出和同样打印出 <code>Hello world!</code> ，
区别在于命令行显示了一个我们创建的 <code>subprocess.Popen</code> 实例。</p>
<p>如果你将代码保存为 <code>process_test.py</code> ，然后在命令行执行，你会得到一样的结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python process_test.py
</span></span><span class="line"><span class="cl">Hello world!
</span></span></code></pre></div><p>看上去运行 OK。</p>
<p>你可能在琢磨我们到底使用了哪个 shell。Unix 的默认 shell 是 <code>/bin/sh</code> ，
而 Windows 下面则取决于 <code>COMSPEC</code> 这个环境变量。
如果你设置 <code>shell=True</code> ，则可以通过 <code>executable</code> 参数来自定义 shell。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo &#34;Hello world!&#34;&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True, <span class="nv">executable</span><span class="o">=</span><span class="s2">&#34;/bin/bash&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span></code></pre></div><p>和我们之前看到的一样，但是如果你使用特定的 shell ，
你也许会发现不同的地方。</p>
<p>让我们探索一下通过 Python 使用 shell 的其他特性：</p>
<p>变量解析：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo $PWD&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">/home/james/Desktop
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span></code></pre></div><p>管道和重定向：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo &#34;Hello world!&#34; | tr a-z A-Z 2&gt; errors.txt&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; HELLO WORLD!
</span></span></code></pre></div><p><code>errors.txt</code> 应该是空的，因为没有任何错误产生。
有趣的是在我电脑上，<code>Popen</code> 实例在 <code>HELLO WORLD!</code> 被打印到标准输出
<em>之前</em> 出现。
恩，管道和重定向都可以正常工作。</p>
<p>Here 文档：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">... cat &lt;&lt; EOF &gt; new.txt
</span></span></span><span class="line"><span class="cl"><span class="s2">... Hello World!
</span></span></span><span class="line"><span class="cl"><span class="s2">... EOF
</span></span></span><span class="line"><span class="cl"><span class="s2">... &#34;&#34;&#34;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0xb7dbbe2c&gt;
</span></span></code></pre></div><p><code>new.txt</code> 文件正常生成，并且包含内容 <code>Hello World!</code> 。</p>
<p>如我们预料，在 shell 中正常运行的命令同样可以在 Python shell 中运行。</p>
<h2 id="字符串和参数列表">字符串和参数列表</h2>
<p>现在可以轻松地在 Python 中执行命令行了，你也许会需要传递变量过去。
假设我们要用 <code>echo</code> 重写刚才那个函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_string</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span> <span class="n">string</span>
</span></span></code></pre></div><p>你也许想当然这样写：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_string</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="s1">&#39;echo &#34;</span><span class="si">%s</span><span class="s1">&#34;&#39;</span><span class="o">%</span><span class="n">string</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>这种写法，当字符串是 <code>Hello World!</code> 时候没问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span></code></pre></div><p>但这样就有问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;nasty &#34; example&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">/bin/sh: Syntax error: Unterminated quoted string
</span></span></code></pre></div><p>这个命令会被执行成 <code>echo &quot;nasty&quot; example&quot;</code> ，唔，这里的转义有问题。</p>
<p>一种解决方式是在代码里面做好转义，但这样会很麻烦，
你需要处理所有可能出现的转义字符和空格等等。</p>
<p>Python 可以帮你处理好，条件是你不能直接操作 shell，
如何操作看下文。</p>
<h2 id="shell-之外">Shell 之外</h2>
<p>现在让我们试试不操作 shell 来实现同样的效果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">def print_string<span class="o">(</span>string<span class="o">)</span>:
</span></span><span class="line"><span class="cl">	subprocess.Popen<span class="o">([</span><span class="s1">&#39;echo&#39;</span>, string<span class="o">]</span>, <span class="nv">shell</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;nasty &#34; example&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">nasty <span class="s2">&#34; example
</span></span></span></code></pre></div><p>现在你可以看到它正常地处理了转义。</p>
<p>注意</p>
<blockquote>
<p>实际上你也可以在 <code>shell=False</code> 那里直接使用一个单独的字符串作为参数，
但是它必须是命令程序本身，这种做法和在一个列表中定义一个 <code>args</code>
没什么区别。而如果当 <code>shell=False</code> 时候直接执行字符串命令，则会报错：</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="s1">&#39;echo &#34;Hello world!&#34;&#39;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">594</span><span class="p">,</span> <span class="ow">in</span> <span class="fm">__init__</span>
</span></span><span class="line"><span class="cl">	<span class="n">errread</span><span class="p">,</span> <span class="n">errwrite</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1147</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_execute_child</span>
</span></span><span class="line"><span class="cl">	<span class="k">raise</span> <span class="n">child_exception</span>
</span></span><span class="line"><span class="cl"><span class="ne">OSError</span><span class="p">:</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">2</span><span class="p">]</span> <span class="n">No</span> <span class="n">such</span> <span class="n">file</span> <span class="ow">or</span> <span class="n">directory</span>
</span></span></code></pre></div><p>如果我们还是坚持使用一个字符串，Python 会认为这个 <em>完整的字符串</em>
是一个可执行的程序名，而实际上没有一个叫做 <code>echo &quot;Hello world!&quot;</code>
的程序，所以报错了。正确的做法要用 list 分开传送参数。</p>
<h3 id="检查-path-中的程序">检查 PATH 中的程序</h3>
<p>这里有个方法可以找出程序真正的位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">whereis</span><span class="p">(</span><span class="n">program</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">program</span><span class="p">))</span> <span class="ow">and</span> \
</span></span><span class="line"><span class="cl">		   <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">program</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">program</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><p>让我们用它来找出 <code>echo</code> 程序在哪里：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">location</span> <span class="o">=</span> <span class="n">whereis</span><span class="p">(</span><span class="s1">&#39;echo&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">if</span> <span class="n">location</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span> <span class="n">location</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">echo</span>
</span></span></code></pre></div><p>这个方法同样可以检查用户的 <code>PATH</code> 里面是否有 Python 需要的程序。</p>
<p>当然你也可以使用命令行中的程序 <code>whereis</code> 来找出程序的路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ whereis <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">echo: /bin/echo /usr/share/man/man1/echo.1.gz
</span></span></code></pre></div><p>注意</p>
<blockquote>
<p>无论我们使用 <code>shell</code> 为 <code>True</code> 或者 <code>False</code> ，
我们都没有指定执行程序的全路径。
如果这个程序在上下文环境的 <code>PATH</code> 变量中，我们才可以执行。
当然如果你愿意，指定全路径也没问题。</p>
</blockquote>
<p>你也可以坚持指定 <code>executable</code> 为想要执行的程序，
然后 <code>args</code> 就不设定程序。虽然没看到明确的文档，不过我电脑上面可以这么执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">executable</span><span class="o">=</span><span class="s1">&#39;echo&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb776f56c</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>不直接使用 shell 会导致不能直观地使用重定向、管道、here 文档、shell
参数或其他那些可以在命令行使用的技巧。接下来我们会看看怎么使用这些功能。</p>
<h2 id="从标准输出和错误重定向">从标准输出和错误重定向</h2>
<p>当你使用 <code>Popen</code> 执行程序时候，输出内容通常被发送到 stdout，
这也是为什么你能看到这些内容。</p>
<p>当你想尝试从某个程序读取标准输出信息时候，则需要在调用 <code>Popen</code> 之前设定
<code>stdout</code> 参数。要设定的值是 <code>subprocess.PIPE</code>：</p>
<p><code>subprocess.PIPE</code></p>
<blockquote>
<p>可以为 <code>Popen</code> 指定标准输入、标准输出和标准错误输出的参数，
需要注意的是标准输出流需要打开可写。</p>
</blockquote>
<p>这里有个范例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;echo&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello World!&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span></code></pre></div><p>To read the output from the pipe you use the <code>communicate()</code> method:</p>
<p>为了从管道获取输出，你可以使用 <code>communicate()</code> 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Hello World!</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></div><p><code>communicate()</code> 的返回值是一个 tuple，第一个值是标准输出的数据，
第二个输出是标准错误输出的内容。</p>
<p>这里有段脚本能让我们测试标准输出和标准错误输出的表现行为，
将它存为 <code>test1.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Message to stdout</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Message to stderr</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>执行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test1.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Message</span> <span class="n">to</span> <span class="n">stderr</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Message to stdout</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></div><p>注意标准错误输出在被生成后就打印了，而标准输出则被管道传输了。
这是因为我们只设定了标准输出的管道，让我们同时也设定标准错误输出。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test1.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Message to stdout</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;Message to stderr</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>这次标准输出和标准错误输出都被 Python 获取到了。</p>
<p>现在所有的消息能被打印出来了，如果我们再次调用 <code>communicate()</code>，
则会得到一个错误信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">668</span><span class="p">,</span> <span class="ow">in</span> <span class="n">communicate</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_communicate</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1207</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_communicate</span>
</span></span><span class="line"><span class="cl">	<span class="n">rlist</span><span class="p">,</span> <span class="n">wlist</span><span class="p">,</span> <span class="n">xlist</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">read_set</span><span class="p">,</span> <span class="n">write_set</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="ne">ValueError</span><span class="p">:</span> <span class="n">I</span><span class="o">/</span><span class="n">O</span> <span class="n">operation</span> <span class="n">on</span> <span class="n">closed</span> <span class="n">file</span>
</span></span></code></pre></div><p><code>communicate()</code> 方法读取标准输出和标准错误输出时候，遇到结束符（EOF）
就会结束。</p>
<h3 id="重定向-stderr-到-stdout">重定向 stderr 到 stdout</h3>
<p>如果你想将错误信息重定向到标准输出，只需要给 <code>stderr</code>
参数指定一个特殊值： <code>stderr=subprocess.STDOUT</code> 即可。</p>
<h2 id="写入标准输入">写入标准输入</h2>
<p>写数据入一个进程和之前所述比较类似。为了要写入数据，需要先打开一个管道到标准输入。
通过设定 <code>Popen</code> 参数 <code>stdin=subproces.PIPE</code> 可以实现。</p>
<p>为了测试，让我们另外写一个仅输出 <code>Received:</code> 和输入数据的程序。
它在退出之前会输出消息。调用这个 <code>test2.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Received: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span></code></pre></div><p>为了发送消息到标准输入，把你想发送的信息作为 <code>communicate()</code> 的参数 <code>input</code> 。让我们跑起来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test2.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="s1">&#39;How are you?&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="n">How</span> <span class="n">are</span> <span class="n">you</span><span class="err">?</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></div><p>注意 <code>test2.py</code> 发送的信息被打印到标准输出，随后的是 <code>(None, None)</code> ，
这是因为标准输出和标准错误输出没有设定输出管道。</p>
<p>你可以和之前那样指定 <code>stdout=subprocess.PIPE</code>
和 <code>stderr=subprocess.PIPE</code> 来设定输出管道。</p>
<h3 id="类文件属性">类文件属性</h3>
<p><code>Popen</code> 拥有 <code>stdout</code> 和 <code>stderr</code> 属性，从而可以当作文件一样写出数据，同时 <code>stdin</code> 属性可以像文件一样读取数据。
你可以使用他们来替换 <code>communicate()</code>。下面我们将看如何用它们。</p>
<h3 id="读写同一个进程">读写同一个进程</h3>
<p>这里有个例子，将它保存为 <code>test3.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Received: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span></code></pre></div><p>这个程序也是简单的响应接受到的数据，让我们把它跑起来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test3.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">process</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%d</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">output</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span> <span class="n">output</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span></code></pre></div><p>每隔一秒钟会输出一行。</p>
<p>现在你应该掌握了所有需要通过 Python 来跟 Shell 交互需要的知识。</p>
<h2 id="获取返回值-poll-和-wait">获取返回值， <code>poll()</code> 和 <code>wait()</code></h2>
<p>当一个程序退出时候，他会返回一个正整数来表明它的退出状态。
0 代表「成功地结束」，非零则表示「非正常结束」。
大部分系统要求返回值在 0-127 之间，其他都是未定义的结果。
一些系统会有事先定义好的错误对应关系，但一般不被拿出来用。
Unix 程序通常使用 2 作为命令语法错误，1 作为其他错误。</p>
<p>你可以通过 <code>Popen</code> 的 <code>.returncode</code> 属性获取程序返回值。这儿有个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;echo&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello world!&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span><span class="o">.</span><span class="n">poll</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">returncode</span>
</span></span><span class="line"><span class="cl"><span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span><span class="o">.</span><span class="n">poll</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">returncode</span>
</span></span><span class="line"><span class="cl"><span class="mi">0</span>
</span></span></code></pre></div><p>这个 <code>returncode</code> 并不是一开始就设定好的，最初是默认值 <code>None</code>，
它会一直是 <code>None</code> 知道你调用 <code>subprocess</code> 的方法比如 <code>poll()</code> 和 <code>wait()</code>。
这些方法会设定 <code>returncode</code>。因此，如果你想知道返回值，那就调用 <code>poll()</code>
和 <code>wait()</code>。</p>
<p><code>poll()</code> 和 <code>wait()</code> 方法区别很小：</p>
<dl>
<dt><code>Popen.poll()</code></dt>
<dd>检查子进程是否结束。并设置和返回 <code>.returncode</code> 属性。
<code>Popen.wait()</code></dd>
<dd>等待子进程结束。并设置和返回 <code>.returncode</code> 属性。</dd>
</dl>
<h2 id="便捷的方法">便捷的方法</h2>
<p><code>subprocess</code> 模块还提供了很多方便的方法来使得执行 shell 命令更方便。
我没有全部试试。（译者：意思是让读者自己挖掘？）</p>
<h2 id="理解-sysargv">理解 <code>sys.argv</code></h2>
<p>如果你想写一个 Python 脚本来接受命令行参数，
那么命令行的参数会被传送并成参数 <code>sys.argv</code>。
这里有个小范例，将它保存成 <code>command.py</code> 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;Executable: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Arg: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">arg</span>
</span></span></code></pre></div><p><code>if __name__ == '__main__'</code> 这行确保代码在被执行是才运行，
而不是被引入时候运行。给这个文件执行权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ chmod <span class="m">755</span> command.py
</span></span></code></pre></div><p>这里是一些运行时的范例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python command.py
</span></span><span class="line"><span class="cl">Executable: command.py
</span></span><span class="line"><span class="cl">$ python command.py arg1
</span></span><span class="line"><span class="cl">Executable: command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">$ python command.py arg1 arg2
</span></span><span class="line"><span class="cl">Executable: command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">Arg: arg2
</span></span></code></pre></div><p>注意无论 Python 脚本怎么执行， <code>sys.argv[0]</code> 始终是脚本的名称。
<code>sys.argv[1]</code> 和之后的参数是命令行接受的参数。
你可以通过使用参数 <code>-m</code> 来强制 Python 脚本作为模块导入使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m <span class="nb">command</span>
</span></span><span class="line"><span class="cl">Executable: /home/james/Desktop/command.py
</span></span><span class="line"><span class="cl">$ python -m <span class="nb">command</span> arg1
</span></span><span class="line"><span class="cl">Executable: /home/james/Desktop/command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">$ python -m <span class="nb">command</span> arg1 arg2
</span></span><span class="line"><span class="cl">Executable: /home/james/Desktop/command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">Arg: arg2
</span></span></code></pre></div><p>如你所见，Python 将 <code>-m</code> 作为命令的一部分，因此 `sys.srgv[0] 包含了脚本的全路径。
现在我们来直接执行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./command.py
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">$ ./command.py arg1
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">$ ./command.py arg1 arg2
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">Arg: arg2
</span></span></code></pre></div><p>看吧，<code>sys.argv[0]</code> 包含 Python 脚本的名称， <code>sys.argv[1]</code>
以及他的兄弟们还是老样子，包含各类参数。</p>
<h3 id="展开-shell">展开 Shell</h3>
<p>有时候，我们会在 shell 中使用通配符来设定一组参数，比如，
我们在 Bash 中运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./command.py *.txt
</span></span></code></pre></div><p>你可能觉得输出应该是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: *.txt
</span></span></code></pre></div><p>这不是你想要的结果。输出结果应该依赖当前文件夹中 <code>.txt</code> 文件的数目。执行效果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: errors.txt
</span></span><span class="line"><span class="cl">Arg: new.txt
</span></span><span class="line"><span class="cl">Arg: output.txt
</span></span></code></pre></div><p>Bash 会将 <code>\*.txt</code> 自动展开成所有符合 <code>.txt</code> 的参数。所以接受到的参数会超过你预期。</p>
<p>你可以通过将参数用引号抱起来来关闭 Shell 解释特性，
但是只要你用过，就会意识到在大多数情况下面这是非常有用的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./command.py <span class="s2">&#34;*.txt&#34;</span>
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: *.txt
</span></span></code></pre></div><p>更多关于 Bash 解释信息，可以看 <a href="http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion">http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion</a></p>
<h2 id="拓展阅读">拓展阅读</h2>
<p>可以参考：</p>
<ul>
<li><a href="http://www.doughellmann.com/PyMOTW/subprocess/">http://www.doughellmann.com/PyMOTW/subprocess/</a> (and its O&rsquo;Reilly copy here)</li>
<li><a href="http://docs.python.org/library/subprocess.html">http://docs.python.org/library/subprocess.html</a></li>
<li><a href="http://webpython.codepoint.net/cgi_shell_command">http://webpython.codepoint.net/cgi_shell_command</a></li>
<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=4829">http://www.artima.com/weblogs/viewpost.jsp?thread=4829</a> (About writing main() functions)</li>
</ul>
<p>未来相关的文章：</p>
<ul>
<li>进程间信号通信</li>
<li>后台执行程序</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Flotr2 - 我最喜欢的 Javascript 图形库[译文]</title>
      <link>https://blog.alswl.com/2012/06/flotr2/</link>
      <pubDate>Tue, 19 Jun 2012 07:03:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/06/flotr2/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;http://swizec.com/blog/flotr2-my-favorite-javascript-graph-library&#34;&gt;Flotr2 - my favorite javascript graph library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译者：&lt;a href=&#34;http://log4d.com/2012/06/flotr2/&#34;&gt;alswl&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我研究了很久，得到的终极数据可视化方案是 javascript + html ，这是唯一像样又好用的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.gnuplot.info/&#34;&gt;Gnuplot&lt;/a&gt; 虽然看上去不错，但是不太漂亮。
一些基于 Python 的图形化工具也有同样的问题。
&lt;a href=&#34;http://www.wolfram.com/products/mathematica/&#34;&gt;Mathematica&lt;/a&gt; 在我看来则太正式了，所以我不怎么用它。&lt;/p&gt;
&lt;p&gt;基于 javascript 的图形化工具其中一个巨大优势是易于共享。
通过设置 Github Page、分享链接等方法，我们都可以很方便的获取最新图表数据，
甚至可以进行交互。&lt;/p&gt;
&lt;h2 id=&#34;那些基于-javascript-的图形化工具&#34;&gt;那些基于 javascript 的图形化工具&lt;/h2&gt;
&lt;p&gt;有很多 javascript 图形化库，从极简到复杂绚丽的风格，都极为丰富。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>原文地址：<a href="http://swizec.com/blog/flotr2-my-favorite-javascript-graph-library">Flotr2 - my favorite javascript graph library</a></p>
<p>译者：<a href="http://log4d.com/2012/06/flotr2/">alswl</a></p>
<hr />
<p>我研究了很久，得到的终极数据可视化方案是 javascript + html ，这是唯一像样又好用的。</p>
<p><a href="http://www.gnuplot.info/">Gnuplot</a> 虽然看上去不错，但是不太漂亮。
一些基于 Python 的图形化工具也有同样的问题。
<a href="http://www.wolfram.com/products/mathematica/">Mathematica</a> 在我看来则太正式了，所以我不怎么用它。</p>
<p>基于 javascript 的图形化工具其中一个巨大优势是易于共享。
通过设置 Github Page、分享链接等方法，我们都可以很方便的获取最新图表数据，
甚至可以进行交互。</p>
<h2 id="那些基于-javascript-的图形化工具">那些基于 javascript 的图形化工具</h2>
<p>有很多 javascript 图形化库，从极简到复杂绚丽的风格，都极为丰富。</p>
<p>最流行的可能就是 <a href="http://d3js.org/">d3.js</a> 和 <a href="http://raphaeljs.com/">Raphael</a> 了。
他们用起来<em>相当</em>麻烦，但却能实现绚丽到超越你想象的可视化效果。</p>
<!-- more -->
<p>Raphael 还一个 web 矢量库，外观同样很漂亮。</p>
<p><a href="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.41.59-PM.png">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.41.59-PM.png" alt="An analytics graph in Raphael"  />



</a></p>
<p>Raphael 中的分析图表</p>
<p><a href="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.42.12-PM.png">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.42.12-PM.png" alt="Bubble graph in Raphael"  />



</a></p>
<p>Raphael 中的气泡图</p>
<p><a href="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.42.31-PM.png">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.42.31-PM.png" alt="A clock made with Raphael"  />



</a></p>
<p>Raphael 中的钟表时间图</p>
<p>D3.js 的愿景是帮助人们轻松的完成数据可视化，可惜事与愿违，
它弄得太复杂了。</p>
<p><a href="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-3.03.35-PM.png">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-3.03.35-PM.png" alt="HN top titles visualisation in d3.js"  />



</a></p>
<p>Hacker News 文章标题的可视化数据</p>
<p><a href="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.46.31-PM.png">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.46.31-PM.png" alt="House hunting in d3.js"  />



</a></p>
<p>用 d3.js 绘制购房信息</p>
<p><a href="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.46.53-PM.png">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.46.53-PM.png" alt="Scatterplots made with d3.js"  />



</a></p>
<p>用 d3.js 制作的散布图</p>
<h2 id="flotr2">Flotr2</h2>
<p>这些可视化工具，虽然看上去很华丽，但是<em>难以</em>使用。
他们会很浪费时间，让人捣鼓到最后却发现什么都没弄出来。
大部分 Raphael 和 d3 的功能矫正过枉了，有时我们只想要一个简单的绘图工具而已。</p>
<p>为了将<a href="http://swizec.com/blog/a-year-of-750words-com-with-shiny-graphs/swizec/4378">我去年的 750 个关键字</a>数据可视化，我使用了 <a href="http://humblesoftware.com/flotr2/">Flotr2</a>。
只花费我数分钟，就能通过操作 javascript 将数据转化成 Flotr2 能理解的函数，
然后 Flotr2 就将数据转化成漂亮的图表。</p>
<p>Flotr2 最大的优点是他没有过度设计，当你只想要一个简单图表时候，
它不会让你去操作过多东西。</p>
<p>往往只需要你设定必要的数据和一两个标签，比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">draw_time</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">title</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span>
</span></span><span class="line"><span class="cl">	<span class="nx">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">DATA</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">options</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">graph</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">o</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">xaxis</span> <span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">mode</span> <span class="o">:</span> <span class="s1">&#39;time&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">labelsAngle</span> <span class="o">:</span> <span class="mi">45</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">selection</span> <span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">mode</span> <span class="o">:</span> <span class="s1">&#39;x&#39;</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">legend</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;se&#39;</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">HtmlText</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">title</span> <span class="o">:</span> <span class="nx">title</span>
</span></span><span class="line"><span class="cl">	<span class="p">};</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">	<span class="c1">// Draw graph with default options, overwriting with passed options
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">function</span> <span class="nx">drawGraph</span> <span class="p">(</span><span class="nx">opts</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">		<span class="c1">// Clone the options, so the &#39;options&#39; variable always keeps intact.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">o</span> <span class="o">=</span> <span class="nx">Flotr</span><span class="p">.</span><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Flotr</span><span class="p">.</span><span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">options</span><span class="p">),</span> <span class="nx">opts</span> <span class="o">||</span> <span class="p">{});</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">		<span class="c1">// Return a new graph.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">Flotr</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">			<span class="nx">container</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">options</span>
</span></span><span class="line"><span class="cl">		<span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">	<span class="nx">graph</span> <span class="o">=</span> <span class="nx">drawGraph</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">	<span class="nx">Flotr</span><span class="p">.</span><span class="nx">EventAdapter</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="s1">&#39;flotr:select&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">area</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Draw selected area
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">graph</span> <span class="o">=</span> <span class="nx">drawGraph</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">			<span class="nx">xaxis</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">min</span> <span class="o">:</span> <span class="nx">area</span><span class="p">.</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">max</span> <span class="o">:</span> <span class="nx">area</span><span class="p">.</span><span class="nx">x2</span><span class="p">,</span> <span class="nx">mode</span> <span class="o">:</span> <span class="s1">&#39;time&#39;</span><span class="p">,</span> <span class="nx">labelsAngle</span> <span class="o">:</span> <span class="mi">45</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">yaxis</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">min</span> <span class="o">:</span> <span class="nx">area</span><span class="p">.</span><span class="nx">y1</span><span class="p">,</span> <span class="nx">max</span> <span class="o">:</span> <span class="nx">area</span><span class="p">.</span><span class="nx">y2</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">	<span class="c1">// When graph is clicked, draw the graph with default area.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Flotr</span><span class="p">.</span><span class="nx">EventAdapter</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">container</span><span class="p">,</span> <span class="s1">&#39;flotr:click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">graph</span> <span class="o">=</span> <span class="nx">drawGraph</span><span class="p">();});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后你就能获得下面这张图表：</p>
<p><a href="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.58.02-PM.png">


<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201206/Screen-Shot-2012-06-01-at-2.58.02-PM.png" alt="A graph in Flotr2"  />



</a></p>
<p>好用吧。</p>
<p>看上去蛮漂亮，符合它简洁易用的特点。</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用pptpclient连接vpn网络[译文]</title>
      <link>https://blog.alswl.com/2011/09/pptpclient/</link>
      <pubDate>Sun, 04 Sep 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/09/pptpclient/</guid>
      <description>&lt;p&gt;最近在ddwrt配置vpn，参考了arch的pptpclient配置文档[Microsoft VPN client setup with pptpclien
t](&lt;a href=&#34;https://wiki.archlinux.org/index.php/Microsoft_VPN_client_setup_with_pptpcl&#34;&gt;https://wiki.archlinux.org/index.php/Microsoft_VPN_client_setup_with_pptpcl&lt;/a&gt;
ient)，同时顺便花了一点时间翻译成中文，正文如下（使用&lt;a href=&#34;https://github.com/tanin47/wiky.js&#34;&gt;wiky.js&lt;/a&gt;转换pe
diawiki到html，原文会有更多的wiki模板样式便于查看，有问题请参照原文）。&lt;/p&gt;
&lt;p&gt;pptpclient是一个实现Microsoft PPTP协议的程序。因此它能够被用来接入另一个Microsoft VPN网络，比如学校和单位。&lt;/p&gt;
&lt;h3 id=&#34;安装pptpclient&#34;&gt;安装PPTPClient&lt;/h3&gt;
&lt;p&gt;pptpclient由安装包pptpclient提供，运行下列命令可以安装：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近在ddwrt配置vpn，参考了arch的pptpclient配置文档[Microsoft VPN client setup with pptpclien
t](<a href="https://wiki.archlinux.org/index.php/Microsoft_VPN_client_setup_with_pptpcl">https://wiki.archlinux.org/index.php/Microsoft_VPN_client_setup_with_pptpcl</a>
ient)，同时顺便花了一点时间翻译成中文，正文如下（使用<a href="https://github.com/tanin47/wiky.js">wiky.js</a>转换pe
diawiki到html，原文会有更多的wiki模板样式便于查看，有问题请参照原文）。</p>
<p>pptpclient是一个实现Microsoft PPTP协议的程序。因此它能够被用来接入另一个Microsoft VPN网络，比如学校和单位。</p>
<h3 id="安装pptpclient">安装PPTPClient</h3>
<p>pptpclient由安装包pptpclient提供，运行下列命令可以安装：</p>
<h1 id="pacman--s-pptpclient">pacman -S pptpclient</h1>
<h3 id="配置">配置</h3>
<p>你需要从网络管理员获取以下信息来配置pptpclient:</p>
<ul>
<li>VPN服务器的ip或者域名</li>
<li>VPN隧道名称</li>
<li>Windows域（不是所有网络都需要）</li>
<li>VPN用户名</li>
<li>VPN密码</li>
</ul>
<h2 id="编辑配置文件">编辑配置文件</h2>
<p>用你称手的编辑器打开/etc/ppp/options.pptp。这个文件为你的VPN连接启用了一系列默认安全设置。如果你连接时候出现问题，你可以自定义配置。
你的options.pptp文件最少需要包含以下内容：</p>
<pre><code>lock
noauth
nobsdcomp
nodeflate
</code></pre>
<h2 id="编辑密码文件">编辑密码文件</h2>
<p>下一步，打开或者创建/etc/ppp/chap-
secrets。我们将在这个文件里面存储你的密码，记得修改权限让除root之外所有用户不能访问它。这个文件的格式如下：</p>
<pre><code>&lt;DOMAIN&gt;\&lt;USERNAME&gt; PPTP &lt;PASSWORD&gt; *
</code></pre>
<p>如果你的服务器不要求域，则配置如下：</p>
<pre><code>&lt;USERNAME&gt; PPTP &lt;PASSWORD&gt; *
</code></pre>
<p>替换掉上文中范例中的占位符。注意，如果你的密码包含特殊字符，比如&quot;$&quot;，你需要用双引号把它们包起来。</p>
<h2 id="命名你的vpn隧道">命名你的VPN隧道</h2>
<p>用你称手的编辑器创建类似/etc/ppp/peers/的文件，把这里替换成你的VPN连接名。这个文件设置之后看起来如下：</p>
<pre><code>pty &quot;pptp &lt;SERVER&gt; --nolaunchpppd&quot;
name &lt;DOMAIN&gt;\&lt;USERNAME&gt;
remotename PPTP
require-mppe-128
file /etc/ppp/options.pptp
ipparam &lt;TUNNEL&gt;
</code></pre>
<p>{{Note|跟刚才一样，如果你的连接不要求域，忽略范例中的&quot;&quot;}} {{Note|PPTP远程主机使用Chap-Secrets文件中的}}</p>
<p>是VPN服务器的地址，是你所属的域，是你将要用来连接服务器的用户名，是连接的名称。</p>
<p>{{Note|如果你不需要使用MPPE，你应当从/etc/ppp/options.pptp中移除require-mppe-128这个选项}}</p>
<p>创建你的连接</p>
<p>用root执行以下命令来确保配置是正确的： # pon $TUNNEL debug dump logfd 2 nodetach
如果一切都配置好了，pon命令应当不会自动结束。一旦你感觉差不多OK了，就可以终止这个命令。 {{Note|另一个用来确保配置正确的命令是ifconfig
-a，看看里面时候有一个名叫ppp0的新驱动，并且还是可用的}} 执行以下命令来连接VPN隧道： # pon
是你之前命名过的VPN隧道名称。注意使用root命令执行。</p>
<h2 id="配置路由">配置路由</h2>
<p>一旦你成功连接上VPN，你就可以和VPN服务器交互了。当然在此之前，咱们需要添加一个新的路由到你的路由表，从而可以接入远程网络。</p>
<p>{{Note|根据你的环境配置，你可能需要每次都重复添加路由信息}}</p>
<p>你可以阅读<a href="http://pptpclient.sourceforge.net/routing.phtml">PPTP Routing Howto</a>来获得更
多如何添加路由的信息，里面还有很多范例。</p>
<h2 id="选择路由">选择路由</h2>
<p>对我来说，只有传输到VPN网络的数据包才应该走VPN连接，所以我添加如下路由条目： # route add -net 192.168.10.0
netmask 255.255.255.0 dev ppp0 这将路由所有目的地址为191.168.10.xxx的数据到VPN连接。</p>
<h2 id="配置为默认路由">配置为默认路由</h2>
<p>如果你想要所有数据从VPN连接走，下面这条命令包你爽： # route add default dev ppp0
{{Note|所有数据从VPN连接走的话会比正常连接慢一些}}</p>
<h3 id="断开连接">断开连接</h3>
<p>下面这条命令用来断开VPN连接： # poff  是你VPN连接的名称。</p>
<h3 id="把一个vpn连接配为默认启动">把一个VPN连接配为默认启动</h3>
<p>你可以在rc.d创建一个快捷命令来实现自动在后台连接VPN网络。</p>
<p>{{Note|和平常一样，是你隧道的名字，是你加入路由表的命令。}}</p>
<pre><code>#!/bin/bash
</code></pre>
<p>. /etc/rc.conf</p>
<p>. /etc/rc.d/functions</p>
<p>DAEMON=<TUNNEL>-vpn</p>
<p>ARGS=</p>
<p>[ -r /etc/conf.d/$DAEMON ] &amp;&amp; . /etc/conf.d/$DAEMON</p>
<p>case &ldquo;$1&rdquo; in</p>
<p>start)</p>
<p>stat_busy &ldquo;Starting $DAEMON&rdquo;</p>
<p>pon <TUNNEL> updetach persist &amp;&gt; /dev/null &amp;&amp; <ROUTING COMMAND> &amp;&gt;/dev/null</p>
<p>if [ $? = 0 ]; then</p>
<p>add_daemon $DAEMON</p>
<p>stat_done</p>
<p>else</p>
<p>stat_fail</p>
<p>exit 1</p>
<p>fi</p>
<p>;;</p>
<p>stop)</p>
<p>stat_busy &ldquo;Stopping $DAEMON&rdquo;</p>
<p>poff MST &amp;&gt;/dev/null</p>
<p>if [ $? = 0 ]; then</p>
<p>rm_daemon $DAEMON</p>
<p>stat_done</p>
<p>else</p>
<p>stat_fail</p>
<p>exit 1</p>
<p>fi</p>
<p>;;</p>
<p>restart)</p>
<p>$0 stop</p>
<p>sleep 1</p>
<p>$0 start</p>
<p>;;</p>
<p>*)<br />
echo &ldquo;usage: $0 {start|stop|restart}&rdquo;</p>
<p>esac</p>
<p>注意，我们可以使用updetach和persist这两个附加命令在pon上。updetach保证pon阻塞知道连接被建立。另外一个命令persist保证网络
自动重练。如果需要开机自动启动，则添加@-vpn到rc.conf的DAEMONS中去。</p>
<h3 id="注意">注意</h3>
<p>你可以在<a href="http://pptpclient.sourceforge.net/">pptpclient website</a>查到更多关于pptpclient的配
置信息。Ubuntu的帮助手册也有一些帮助你配置的信息。这些范例能够很轻松的稍加变换从而添加到daemons中去，从而帮助你自动化运行。</p>
]]></content:encoded>
    </item>
    <item>
      <title>7条大型网站设计和维护的关键技巧[译文]</title>
      <link>https://blog.alswl.com/2010/07/7-crucial-tips-for-designing-and-maintaining-a-large-site/</link>
      <pubDate>Sat, 17 Jul 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/07/7-crucial-tips-for-designing-and-maintaining-a-large-site/</guid>
      <description>&lt;p&gt;原文出处：[7 Crucial Tips for Designing and Maintaining a Large Site | Nettuts+](&lt;a href=&#34;http://net.tutsplus.com/articles/general/7-crucial-tips-for-&#34;&gt;http://net.tutsplus.com/articles/general/7-crucial-tips-for-&lt;/a&gt;
designing-and-maintaining-a-large-site/)&lt;/p&gt;
&lt;p&gt;译者：&lt;a href=&#34;http://log4d.com&#34;&gt;alswl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下为译文&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;项目范围和规模各不相同，他们带来的挑战各不相同一样。作为一个独立的网页设计师，我最大的职责就是负责FlashDen。随着成千上万的活动用户聊天，上传和购物，
网站处理着大额的金钱和巨大的流量。&lt;/p&gt;
&lt;p&gt;设计，重构，维护和开发团队的工作给了我一些能使事情变得更容易的用用的见解和技巧。而且，就在昨天，我们开始了对网站最大的一次重构，着看上去是一次很好的机会来记
录我最有用的7个秘诀。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>原文出处：[7 Crucial Tips for Designing and Maintaining a Large Site | Nettuts+](<a href="http://net.tutsplus.com/articles/general/7-crucial-tips-for-">http://net.tutsplus.com/articles/general/7-crucial-tips-for-</a>
designing-and-maintaining-a-large-site/)</p>
<p>译者：<a href="http://log4d.com">alswl</a></p>
<p>以下为译文</p>
<hr />
<p>项目范围和规模各不相同，他们带来的挑战各不相同一样。作为一个独立的网页设计师，我最大的职责就是负责FlashDen。随着成千上万的活动用户聊天，上传和购物，
网站处理着大额的金钱和巨大的流量。</p>
<p>设计，重构，维护和开发团队的工作给了我一些能使事情变得更容易的用用的见解和技巧。而且，就在昨天，我们开始了对网站最大的一次重构，着看上去是一次很好的机会来记
录我最有用的7个秘诀。</p>
<h3 id="1-可维护的设计和代码">1. 可维护的设计和代码</h3>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201007/button.jpg" alt="image"  />


</p>
<p>我给的第一条也是最条一条秘诀是设计站点保证可以轻松维护。很多时候，当你设计一个站点，你可能为了美学牺牲一些东西。例如，你可能使用一个图片而文字或者样式就可以
应付。或者你可能故意使用一个没有空间缩放的菜单结构。当网站变大时，这将将成为一个非常糟糕的设计。</p>
<p>当我两年前建成FlashDen的第一个版本时，我使用图片按钮。他们看起来很漂亮，但同时我被100多个不同的按钮图片库拖累着，更谈不上修改图片了。之后在接下来
的几个月中，当一个开发者需要一个新按钮时候他们向我要一个新图片。不用说，我学到这个教训很快，我们切换到一个单独的按钮类，虽然看上去不是很好，但是这种情况更能
安心。</p>
<p>可维护性的另一面是考虑站点将会怎样成长和变化。比如，当一个新页面增加时，它到哪里去？我一直想要一个横向的导航栏，但是经过一些尝试，我们限制地使用了加入子栏目
的垂直的导航栏，从而加入一个标签结构到页面来保证相关的页面能被归类到一起。我不敢说这是世界上最好的导航栏，但是它肯定能够让我们不用重新设计在一个新的节点加入
网站的时候。</p>
<p>所以当你在设计大型站点时候，设法让它变得简单，你会为此而感到高兴的！</p>
<h3 id="2-找出你的用户群和任务">2. 找出你的用户群和任务</h3>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201007/users.jpg" alt="image"  />


</p>
<p>大型网站网站和小型站点的最大一个区别就是使用网站的不同用户类型的数量。例如在FlashDen上，有买家、作家、访客、管理员和会员。每个用户组都有他们各自不同
的目标和任务。有时候他们的任务重叠，但是他们有很大的不同。</p>
<p>一个地方的用户任务在相互对立的观点最好的例子是在一个网页。网站上没有任何一个地方不衔接的每个用户组，并在其他地方是如此的重要，以确保每个人都会有他们想要的。
当然，你要小心，在服务一个用户组你不忽略另一个。</p>
<p>在这次最新一次FlashDen重新设计时候，我所作工作最大的地方是主页。我做的第一件事情是给自己列出每个用户组需要做的事情：</p>
<ol>
<li><strong>买家 - 在FlashDen上购买文件的人</strong>
浏览项目，搜索，访问他们的个人主页，存款，学习使用网站（新买家）</li>
<li><strong>作者 - 在FlashDen上卖商品的人</strong>
与其他会员聊天，在主页上展示他们项目的功能，了解网站的新闻，快速的获取他们的投资搭配和收益</li>
<li><strong>新访客 - 潜在的买家/作者/会员，刚到站点的人</strong>
快速了解到站点是干嘛的，起步教程，查看不同类别的文件和价格</li>
<li><strong>会员 - 不是真正的买家或作者，而是在社区中活跃</strong>
和其他会员聊天，查看站点新闻，浏览文件</li>
<li><strong>管理员/审稿人 - 我们的工作人员，管理文件的批准，主持论坛，参与大部分活动</strong>
快速批准文件，查看最新论坛主题，添加站点新闻</li>
</ol>
<p>当你知道不同的用户群体想要做什么，那么你可以设计一个网页，解决了他们所有的需要。不用说，这是随着用户组和任务数量指数级增加的困难的任务。在该网站的其他网页，
你会经常为部分用户组而苦恼，而在主页上，他们却又都集中在一起。不用怀疑，主页是你设计一个网站时候最重要的一项工作。</p>
<p>在你解决不同需求之前，你需要先考虑用户群。为了做到这个，你需要了解该网站是要实现的目标。</p>
<h3 id="3-了解网站目标">3. 了解网站目标</h3>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201007/discuss.jpg" alt="image"  />


</p>
<p>虽然每个用户组会很自然地认为他们是最重要的，但是你应该根据他们的优先度来判别站点要实现的目标。比如在FlashDen上，我们给候补人员列出下面几条结论：</p>
<ul>
<li>该网站的首要任务是为买家服务。为买家服务可以带来不断的收入，同时也可以为作者群服务。</li>
<li>让游客更快的了解网站进而成为会员也是至关重要的。FlashDen还处在一个比较新兴的市场，不断有新竞争对手出现，如何将注册会员变成买家或者作者是相当重要的。</li>
<li>创作者是FlashDen的核心部分，他们也是非常重要，和其他用户群不同的是，他们是网站坚定的拥护者。</li>
<li>注册会员虽然没有创作者或者买家这么重要，但是他们也在为周边的社群作出贡献。</li>
<li>作为雇员，管理员/审稿人是相对最不重要的。</li>
</ul>
<p>因此，从以上所说可以得出结论，网站服务的的用户需求优先顺序：访客&gt;买家&gt;作者&gt;成员&quot;&gt;管理员。</p>
<p>认识你的网站正在努力实现的却是最终用户线程的缝制任务一起，并告诉你什么你应该尝试把页面上。</p>
<p>理解你的网站目的可以把你的所要作的任务贯穿在一起，并且能告诉你应该在页面上放些什么东西。在每个关键性页面你要能区分识别出用户组、任务和优先级别。对于重要的页
面比如主页我慎重的在纸上设计，而一些小的页面则是在脑子里面思考一下。</p>
<h3 id="4-设计精炼精炼精炼-">4. 设计，精炼，精炼，精炼 …</h3>
<p><a href="../../static/images/2010/07/step4_nm.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201007/step4_nm.jpg" alt="image"  />


</a></p>
<p>在你找到你的用户组别，任务，网站目标，优先级别等等之后，到了设计的时间了！这是至关重要的步骤，因为在实际操作中，这一步可以大幅降低一些将必要的返工设计工作量
。每当我刚开始设计并没有真正分析第一大网站，我已不可避免地要大量的返工，甚至整个屏幕交互界面。</p>
<p>很多设计师喜欢在这点用线框，这可以简单地用线条和框勾勒大约内容应该显示的地方。我个人更喜欢一开始用Photoshop，因为我速度不够快，这样能让我细致地看到
细节的改变。我也认为详细细节信息设计比在纸上显示更直观。简单地改变颜色和背景颜色可以使整个网页页面元素立马看上去更为重要。</p>
<p>一旦你有一个怎样的信息需要共同努力粗略的想法，你应该拿出一个工作的设计，一般是确定，然后再精炼，精炼，精炼。我经常会起草5到6相同的外观，然后在之上尝试不同
类型、大小、图像，布局的改动，背景等等，看看你对它的直观感受。</p>
<p>不管你觉得第一个布局有多好，我可以保证，在花费一段时间进行数次版本升级之后，你会发现了你原来的版本不是和你最初想到的那么好。有时你甚至抛弃整个设计并重新开始
。而如果你有一个良好的基础，然后精炼细化能让你有一个漂亮的成果。</p>
<h3 id="5-听取别人的意见自己下最后的主意">5. 听取别人的意见，自己下最后的主意</h3>
<p>任何一个大型的工作中，你都会被其他很多意见所影响。在开始FlashDen工作之前，我曾经与各种网站设计公司合作。期间我也有不幸设计一些大型保险公司和一些政府
组织。我说不幸，因为当你到该客户和牵扯很多利益的人打交道，同时在许多当时还不清楚真正的决策权的情况下作出错误决策。这会导致无休止的会议，无穷无尽的变化，并极
大的混淆你的眼光。</p>
<p>不管是什么用户，真正重要的只是得到他们的意见。在大多数情况下，他们比你更知道了很多与业务有关的事。但愿他们比你还了解用户，这些知识将能够向你提供建设性的意见
。</p>
<p>得到与你一起工作的开发团队的意见也同样重要。在FlashDen我们很幸运，因为有两个开发者在用户界面和可用性设计方面经验丰富。随着他们的投入，和其他团队成员
，向最终的产品提出了很多不同的想法。</p>
<p>但到最后，就是你这个设计专家作出最后决定的时候了。如果你有一个难对付的客户这可能会非常棘手，因为这些客户往往认为他们应该作最后的决策。如果是这样的话，你需要
想办法向他们解释，灌输并且展示出你的选择会带来最好的收益。;有时候硬着头皮把客户的意见接受，并作为项目中的一个长期建设性功能。</p>
<h3 id="6-为将来做组织">6. 为将来做组织</h3>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201007/subversion.jpg" alt="image"  />


</p>
<p>当您为一个大网站编码设计时，它是真正重要的是反复思考未来的变化。如何管理您的文件和文件夹将极大地影响之后的工作。例如最近我们决定建立一个着重音乐的Flash
Den的姊妹网站，即AudioJungle。为了简化，这个网站是将使用相同的HTML，只是改变样式来使它看起来像一个不同的网站。这里有一些事情要记住：</p>
<ol>
<li><strong>整理一个良好的文件夹结构</strong>
脚本，样式表，界面的图片，图片内容，等等，都需要分开存放。如果一个小网站，你也许可以把这些东西杂糅到一起，但在大型站点中，找到你需要的内容变得更为重要。</li>
<li><strong>给你的文件使用有规则、良好的命名规范</strong>
没有什么比按名字&quot;gd_l3.jpg&quot;寻找一块图片更为糟糕。你怎样做即基本是个人的事，但我觉得使用通用命名描述性文件名的前缀会有更大的帮助。比如：我可能会给
头部的每张图片加上前缀&rsquo;header_&rsquo;，每一个背景加上&rsquo;bg_&rsquo;，头部菜单中的背景可能称为&rsquo;header_bg_menu.jpg&rsquo;。前缀有一个好处，当您的
文件按名称排序，他们都出现在一起。</li>
<li><strong>使用Subversion</strong>
这是被我们的开发人员逼得，但幸亏我们用了它！Subversion可以跟踪文件和档案的变更，同时可以防止覆盖其他设计者/开发者在同一个项目中的文件。这需要一些
时间来适应，但即使没有开发者使用它的原因，在HTML / CSS的设计上用它也是值得的。还不知道Subversion？赶紧去使用吧。</li>
<li><strong>在你写HTML和CSS深入思考写法</strong>
很容易写出垃圾HTML和CSS代码，而且很难清除它们来获得原先版本。经过4个重设计，我仍然使用很多相同的CSS文件，必须规划地清理不再使用的或者带来混淆布局
定义CSS类。通过大量的意见，甚至可能是多个样式表，并确保你有良好的命名风格！</li>
<li><strong>早点开始浏览器差异兼容工作</strong>
我在FlashDen这方面的工作听失误的，至今我们已经为此付出了很大的代价。我最初的布局设计在IE7上，直到我们完成整个网站才发现忽略了IE6。之后我们已经
加入IE浏览器条件式，和CSS Hack和其他解决方法。在你建立一个庞大的站点时候，在页面上只有少量元素时候可以更轻松的处理浏览器兼容性，，所以不要重蹈覆辙！</li>
</ol>
<h3 id="7-确保可以简单的扩展你的样式表">7. 确保可以简单的扩展你的样式表</h3>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201007/future.jpg" alt="image"  />


</p>
<p>网站越大，设计师就越有可能看到或修改每一个单独页面。如果你是一个大型网站上唯一设计师 - 比如我 -
你可能不想在每个页面上重定义。因此，多花精力在样式表上，可以通过默认的属性让页面看起来不错。</p>
<ul>
<li><strong>确保你定义了<code>&lt;input&gt;</code>，<code>&lt;strong&gt;</code> 等元素的默认样式。</strong>
这样的页面可以自动呈现的不错。如果你想指望别人做<code>&lt;strong class=&quot;my_bold&quot;&gt;</code> 这样的事情，那么不可避免的会和其他页面产生差异</li>
<li><strong>创建可让开发人员重复使用的元素</strong>
比如在FlashDen上我们有一个CSS表类称为&quot;general_table&quot;，可以确保一个不错的填充数据时候使用的样式。当我有机会设计网页样式时候，我可以
使用个性的表和数据高亮呈现的类型，但是很少会有开发人员吧页面制作成全能的样式去使用。</li>
<li><strong>请确保您的网页布局有一个不错的结构，即使他里面只有文字。</strong>
总是会有些网页还没能往里面添加图像，可能看起来有点沉闷。通过使用诸如标题样式，工具条等等，你可以确保他们也很美观，并且有一定的视觉风格。有关FlashDen
在大多数例子中，我们文本块总结如下：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">fieldset</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">legend</span><span class="p">&gt;</span>Heading<span class="p">&lt;/</span><span class="nt">legend</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Content
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">fieldset</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>默认情况下，文字外面包围着一个漂亮的边框和标题。这样很容易和开发人员协调工作，文字和表现有了不错的分离，使之看起来更具可读性。我们同时也有一个侧边栏组件，仅
仅把文字内容额外包起来，但是这能使网页看起来更加直观。</p>
<p>经过设计师的设计，每一个页面基本都是优化过的，但是他们可能不是那么健壮，它仍然看起来很专业和统一。</p>
<h3 id="你的观点呢">你的观点呢</h3>
<p>所以这些都是我的秘诀，如果你在更大的站点从事你的工作，发表你的评论吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>WordPress代码高亮插件指南[译文]</title>
      <link>https://blog.alswl.com/2010/03/guide-to-find-a-wordpress-syntax-highlighter-that-works-translation/</link>
      <pubDate>Fri, 19 Mar 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/03/guide-to-find-a-wordpress-syntax-highlighter-that-works-translation/</guid>
      <description>&lt;p&gt;这是我第二篇译文，第一篇见这里 &lt;a href=&#34;http://log4d.com/2010/03/use-firebug-and-firephp-debugging-php&#34;&gt;使用Firebug和 FirePHP调试PHP[译文]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关注我博客的作者可能知道，我在年前就在做自己的主题，但是因为种种原因，一直到现在才完成beta1.0，不仅仅是主题的原因，还有各种插件的匹配，最让我头疼的两
个&amp;quot;回复插件&amp;quot;和&amp;quot;代码着色插件&amp;quot;。&lt;/p&gt;
&lt;p&gt;这篇文章做了一个很好的评测，自此我找到了真正好用的代码着色软件。&lt;/p&gt;
&lt;p&gt;关于博客改版的一些经验，我会在稍后的日志中总结出来。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>这是我第二篇译文，第一篇见这里 <a href="http://log4d.com/2010/03/use-firebug-and-firephp-debugging-php">使用Firebug和 FirePHP调试PHP[译文]</a></p>
<p>关注我博客的作者可能知道，我在年前就在做自己的主题，但是因为种种原因，一直到现在才完成beta1.0，不仅仅是主题的原因，还有各种插件的匹配，最让我头疼的两
个&quot;回复插件&quot;和&quot;代码着色插件&quot;。</p>
<p>这篇文章做了一个很好的评测，自此我找到了真正好用的代码着色软件。</p>
<p>关于博客改版的一些经验，我会在稍后的日志中总结出来。</p>
<p>原文链接：<a href="http://geekout.travislin.com/guide-to-find-a-wordpress-syntax-highlighter-that-works/">Guide to find a WordPress syntax highlighter that works · Geek Out</a></p>
<p>原文作者：Travis</p>
<p>译者：<a href="http://log4d.com">alswl</a></p>
<hr />
<p><a href="http://www.travislin.com/2009/05/autonomy-of-syntax-highlighter/">之前</a>，我曾经抱怨过我
多么需要一个代码高亮插件但是却没有收到好的建议…我亲自测试审核了一些我在<a href="http://wordpress.org/extend/plugins/">插件目录</a>找到较为的流行插件。这些被我列出的插件满足下列的要求：</p>
<p>支持WordPress 2.7.1</p>
<p>在2009年有过更新</p>
<p>我寻找代码高亮插件的标准除了以上两点上还有：</p>
<p>代码在切换可视化模式和HTML代码模式后没有变化</p>
<p>下载后立即可以使用，不需要配置或者少量的配置即可</p>
<p><a href="http://wordpress.org/extend/plugins/syntaxhighlighter/">SyntaxHighlighterEvolved</a></p>
<p>上次更新: 2009-5-4 (Version 2.1.0)</p>
<p>标记: 可视化的. Eg/ <code>[php]</code>, <code>[javascript]</code></p>
<p>SyntaxHighlighter Evolved 的一个功能是它有一个漂亮的工具栏在代码快的转角处，允许你使用下列功能：在一个弹出窗体内查看代码、复制代码
到剪贴板和打印代码。出于某些原因Syntaxhighter Evolved喜欢去掉我的代码里缩进（空格）（译者按：这可能是WordPress自带TinyMC
E在FireFox下的Bug）。如果我尝试在HTML模式保存，我会收到PHP警告同时我的代码在我的文章中消失。总之，这个插件不是我想要的。</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-syntax-highlighter-evolved.gif">


<img loading="lazy" src="http://www.travislin.com/wp-content/uploads/2009/05/p06-syntax-highlighter-evolved-300x269.gif" alt="p06-syntax-highlighter-evolved"  />



</a></p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-syntax-highlighter-evolved-02.gif">


<img loading="lazy" src="http://www.travislin.com/wp-content/uploads/2009/05/p06-syntax-highlighter-evolved-02-300x157.gif" alt="p06-syntax-highlighter-evolved-02"  />



</a></p>
<h3 id="syntax-highlighter-plus">Syntax Highlighter Plus</h3>
<p><a href="http://wordpress.org/extend/plugins/syntaxhighlighter-plus/">Syntax Highlighter Plus</a></p>
<p>上次更新: 2009-2-11 (Version 1.0b2)</p>
<p>标记: 可视化的. Eg/ <code>[sourcecode language='css']</code></p>
<p>就像_Syntax Highlighter_家庭的其他插件，这款插件也有一个工具条，并且和Syntax Highlighter
Evolved一样，它也因为在我尝试保存到HTML模式时候丢失了我代码的缩进而失败。</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-syntax-highlighter-plus.gif">


<img loading="lazy" src="http://www.travislin.com/wp-content/uploads/2009/05/p06-syntax-highlighter-plus-287x300.gif" alt="p06-syntax-highlighter-plus"  />



</a></p>
<h3 id="google-syntax-highlighter-for-wordpress">Google Syntax Highlighter for WordPress</h3>
<p><a href="http://wordpress.org/extend/plugins/google-syntax-highlighter/">Google Syntax Highlighter for WordPress</a></p>
<p>上次更新: 2007-8-14 (Version 1.5.1)</p>
<p>标记: HTML. Eg/ <code>&lt;pre name=&quot;code&quot; class=&quot;php&quot;&gt;</code></p>
<p>尽管它已经快2年没有更新了，Google Syntax Highlighter似乎还是博主们的流行选择，所以我决定把它放到测试中来。Google
Syntax Highlighter 有一个文本化的工具栏，没有Syntax Highlighter家族那么花俏但是却功能一样。这个插件在代码行比较长时候会
遇到样式的问题，不过没什么大关系。直到我在切换可视模式和HTML模式时候失败了，又是一位让人失望的候选者。</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-google-syntax-lighlighter.gif">


<img loading="lazy" src="http://www.travislin.com/wp-content/uploads/2009/05/p06-google-syntax-lighlighter-275x300.gif" alt="p06-google-syntax-lighlighter"  />



</a></p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-google-syntax-lighlighter-02.gif">


<img loading="lazy" src="http://www.travislin.com/wp-content/uploads/2009/05/p06-google-syntax-lighlighter-02-300x162.gif" alt="p06-google-syntax-lighlighter-02"  />



</a></p>
<h3 id="wp-chili">WP-Chili</h3>
<p><a href="http://wordpress.org/extend/plugins/wp-chili/">WP-Chili</a></p>
<p>上次更新: 2008-7-24 (Version 1.1)</p>
<p>标记: HTML. Eg/ <code>&lt;code class=&quot;php&quot;&gt;</code></p>
<p>WP-Chili 是另外一位比较特殊的候选者，它在[another WordPress syntax highlighterreview](<a href="http://www.cagintranet.com/archive/the-definitive-guide-on-wordpress-syntax-highligher-">http://www.cagintranet.com/archive/the-definitive-guide-on-wordpress-syntax-highligher-</a> plugins/)进行过评测，我依然给它一个测试机会。和之前的几位候选者不同的是，它需要手动字符转义。我使用<a href="http://www.elliotswan.com/postable/">Elliot&rsquo;s postablescript</a>
(推荐)来完成这个工作。它的样式有些简单，可能需要一些调整（比如说修正长换行、附加背景和边框颜色以便从正常的段落中区分出来）。WP-
Chili可以可视模式和HTML模式切换下工作，遗憾的是代码缩进在数次保存之后丢失了……难道没有一个插件接受我的空格缩进？！</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-wp-chili.gif">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="p06-wp-chili"  />


</a></p>
<h3 id="code-colorer">Code Colorer</h3>
<p><a href="http://wordpress.org/extend/plugins/codecolorer/">Code Colorer</a></p>
<p>上次更新: 2009-1-27 (Version 0.7.3)</p>
<p>标记:可视化的&amp;HTML . Eg/ <code>&lt;code lang=&quot;php&quot;&gt;</code>, <code>[cc lang=&quot;php&quot;]</code>。</p>
<p>我在插件目录找到了一个新的插件。由于某些原因，我不能正确获取代码，尽管使用Firebug能查看到HTML代码。（译者按：我之前有使用过Code
Colorer，在切换也存在问题，但能正常显示）</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-code-colorer.gif">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="p06-code-colorer"  />


</a></p>
<h3 id="dojox-wordpress-syntax-highlighter">Dojox Wordpress Syntax Highlighter</h3>
<p><a href="http://wordpress.org/extend/plugins/wp-dojox-syntax-highlighter/">Dojox Wordpress Syntax Highlighter</a></p>
<p>上次更新: 2009-1-27 (Version 0.7.3)</p>
<p>标记: HTML. Eg/ <code>&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;</code></p>
<p>Dojox 是第一个通过测试的插件：代码在数次不同模式切换下仍然保存。Dojox使用双重标记并且需要手动编码转义。虽然背景颜色也许需要修改一下来适应博客的主
题，但除此之外，最终这是一个可以工作的插件。</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-dojox.gif">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="p06-dojox"  />


</a></p>
<h3 id="syntax-highlighter-and-code-colorizer-for-wordpress">Syntax Highlighter and Code Colorizer for Wordpress</h3>
<p><a href="http://wordpress.org/extend/plugins/syntax-highlighter-and-code-prettifier/">Syntax Highlighter and Code Colorizer for Wordpress</a></p>
<p>上次更新: 2009-5-5 (Version 2.0.296)</p>
<p>标记: HTML. Eg/ <code>&lt;pre class=&quot;brush:php&quot;&gt;</code></p>
<p>很显然这款插件也称作代码美化插件。代码美化默认自动执行，同时作为Syntax Highlighter家族的成员它也会会有一个工具栏在右上角。不同于这个家族其
他成员，它的确能够正常使用！无论在切换可视化或者HTML模式时候都没有问题。当然，你得自己手动转义你的代码。</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-code-colorizer.gif">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="p06-code-colorizer"  />


</a></p>
<h3 id="wp-synhighlight">WP-SynHighlight</h3>
<p><a href="http://wordpress.org/extend/plugins/wp-synhighlight/">WP-SynHighlight</a></p>
<p>上次更新: 2009-1-27 (Version 0.91)</p>
<p>标记: 可视化的. Eg/ <code>[codesyntax lang=&quot;php&quot;]</code></p>
<p>这是我能找到的唯一一个使用可视化标记并且在不同模式之间切换还能工作的插件。一旦你在可视化模式粘贴代码，不需要加上转义字符，这是在可视化编辑模式下的优势。但是
当我使用它自带的例子时，不管我怎么做，我都没有办法通过WP-SynHightlight为代码着色。</p>
<p><a href="http://www.travislin.com/wp-content/uploads/2009/05/p06-wp-synhighlight.gif">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="p06-wp-synhighlight"  />


</a></p>
<h3 id="结论">结论</h3>
<p><strong>Syntax Highlighter and Code Colorizer for Wordpress</strong>
赢的了我的评选，它简单强大而且确实在工作。这个插件是现成的，意味着我不需要在CSS中修改为他重新着色以保证和我主题匹配。我知道我会享受我的选择的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用Firebug和FirePHP调试PHP[译文]</title>
      <link>https://blog.alswl.com/2010/03/use-firebug-and-firephp-debugging-php/</link>
      <pubDate>Mon, 15 Mar 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/03/use-firebug-and-firephp-debugging-php/</guid>
      <description>&lt;p&gt;这是我第一篇译文，在写WordPress 主题时候偶尔看到的FirePHP插件，看都这篇文章，不知道为什么，动了翻译的念头。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;http://www.sitepoint.com/blogs/2010/02/09/debug-php-firebug-firephp/&#34;&gt;Debug PHP with Firebug and FirePHP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译言的链接：&lt;a href=&#34;http://article.yeeyan.org/view/119553/94520&#34;&gt;译言网 | 使用Firebug和FirePHP调试PHP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;×××××以下译文××××××&lt;/p&gt;
&lt;p&gt;




&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.alswl.com/images/upload_dropbox/201612/404.png&#34; alt=&#34;image&#34;  /&gt;


&lt;/p&gt;
&lt;p&gt;如果你和我一样，你会在开发网页项目时候完全无法离开&lt;a href=&#34;http://getfirebug.com/&#34;&gt;FireBug&lt;/a&gt;。这个小巧的&amp;quot;臭虫&amp;quot;是一个神奇而有用的H
TML/CSS/JavaScript/Ajax调试器。但是你也许不知道这个还可以用来调试PHP，没错，它可以，感谢一款名为FirePHP的FireFox插件
。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>这是我第一篇译文，在写WordPress 主题时候偶尔看到的FirePHP插件，看都这篇文章，不知道为什么，动了翻译的念头。</p>
<p>原文链接：<a href="http://www.sitepoint.com/blogs/2010/02/09/debug-php-firebug-firephp/">Debug PHP with Firebug and FirePHP</a></p>
<p>译言的链接：<a href="http://article.yeeyan.org/view/119553/94520">译言网 | 使用Firebug和FirePHP调试PHP</a></p>
<p>×××××以下译文××××××</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="image"  />


</p>
<p>如果你和我一样，你会在开发网页项目时候完全无法离开<a href="http://getfirebug.com/">FireBug</a>。这个小巧的&quot;臭虫&quot;是一个神奇而有用的H
TML/CSS/JavaScript/Ajax调试器。但是你也许不知道这个还可以用来调试PHP，没错，它可以，感谢一款名为FirePHP的FireFox插件
。</p>
<p>通过一个小小的服务端库，和这款在Firebug上的插件，你的PHP脚本能够发送调试信息到浏览器，轻易的通过HTTP相应头编码。一旦你设置，你可以在Fiire
bug的控制台获得PHP脚本警告和错误，就感觉像直接调试JavaScript一样</p>
<p>使用这个工具，首先你需要安装<a href="https://addons.mozilla.org/en-US/firefox/addon/6149">FirePHP插件</a>
。这个插件需要你已经安装FireBug。装好FirePHP之后，重新打开Firebug面板时候，你会看到新加了一个蓝色的臭虫图标。点击这个图标会出现一个开启
或者关闭FirePHP的菜单。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="FirePHP Menu"  />


</p>
<p>当然，这时候我们还无法做任何事，你还需要安装FirePHP的服务端，点击<a href="http://www.firephp.org/HQ/Install.htm">这里</a>下载。这是一个独立的版本，你可以手动下载或者使用PEAR。装后之后，你可是轻松的将这个库加入你的代码。它被设计了很多版本来整合入多个框架或者管理系统，比如
<a href="http://wordpress.org/extend/plugins/wp-firephp/">WP-FirePHP plugin for WordPress</a> 和 <a href="http://joomlacode.org/gf/project/kunena/frs/?action=FrsReleaseView&amp;release_id=11823">JFirePHP plugin for Joomla</a>。暂时不管这些，我们将把精力集中在独立的功能上。</p>
<p>一旦你在你服务器上部署了FirePHP库，你还需要在你的代码中加入以下的代码：</p>
<p><code>require_once('FirePHPCore/fb.php');</code></p>
<p>这是因为FirePHP通过HTTP头发送记录的数据，你需要缓存你的代码产生的输出，从而来响应头信息从这里获取代码生成的内容。这个可以通过在代码头部的<code>ob_ start</code>来实现。</p>
<p><code>ob_start();</code></p>
<p>当这些步骤完成后，你可以开始使用FirePHP了。你需要做的只是调用<code>fb</code>函数在任何你想要记录的地方。同时你也可以使用一个可选的标签和常量去定义预定义信息
，一个错误，一个警告，或者一条信息。</p>
<pre tabindex="0"><code>$var=array(&#39;a&#39;=&gt;&#39;pizza&#39;,&amp;nbsp_place_hold
er;&#39;b&#39;=&gt;&#39;cookies&#39;,&#39;c&#39;=&gt;&#39;celery&#39;);

fb($var);

fb($var,&#34;Anarray&#34;);

fb($var,FirePHP::WARN);

fb($var,FirePHP::INFO);

fb($var,&#39;Anarraywith&amp;
nbsp_place_holder;anErrortype&#39;,&amp;nbsp_pla
ce_holder;FirePHP::ERROR);

    
    $var = array(&#39;a&#39;=&gt;&#39;pizza&#39;, &#39;b&#39;=&gt;&#39;cookies&#39;, &#39;c&#39;=&gt;&#39;celery&#39;);fb($var);fb($var, &#34;An array&#34;);fb($var, FirePHP::WARN);fb($var, FirePHP::INFO);fb($var, &#39;An array with an Error type&#39;, FirePHP::ERROR);
</code></pre><p>这些代码将在Firebug控制台输出如下所示</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="FirePHP Console Output"  />


</p>
<p>你也可以使用FirePHP来跟踪你程序的执行情况：通过使用<code>FirePHP::TRACE常量，你可以在</code> <code>fb被调用的地方查看``行数、类名和方法名</code></p>
<pre tabindex="0"><code>1

functionhello(){

2

fb(&#39;HelloWorld!&#39;,&amp;nbs
p_place_holder;FirePHP::TRACE);

3

}

4

functiongreet(){

5

hello();

6

}

7

greet();

    
    function hello() { fb(&#39;Hello World!&#39;, FirePHP::TRACE);}function greet() { hello();}greet();
</code></pre><p>产生的输出如下</p>
<p>


<img loading="lazy" src="http://www.sitepoint.com/blogs/wp-content/uploads/2010/02/Screen-shot-2010-02-09-at-3.00.40-PM.png" alt="FirePHP Trace Output"  />



</p>
<p>这个跟踪功能可以完美的调试更复杂的代码，让你精确的知道你的方法是在哪里被调用的。</p>
<p>当然，别忘了你需要在你代码发布之前移除你的调试语句。</p>
<p>这里还有很多FirePHP的内容没有涉及到。我只是向你简单展示一下FirePHP的API，还有很多高级的面向对象API。你可以获得更多相关内容在
<a href="http://www.firephp.org/HQ/Use.htm">FirePHP site</a>，要记得看它哦～</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
