<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>log4j on Log4D</title>
    <link>https://blog.alswl.com/tags/log4j/</link>
    <description>Recent content in log4j on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 07 May 2009 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/log4j/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学习使用log4j</title>
      <link>https://blog.alswl.com/2009/05/learning-to-use-log4j/</link>
      <pubDate>Thu, 07 May 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/05/learning-to-use-log4j/</guid>
      <description>今天用Log4j时候，感觉只显示message讯息太少了，直觉上这些流行的工具应该会提供更强大的定制功能，就去google了一下 果不其然：相关配置参数如下 Pattern to output the caller&amp;rsquo;s file name and line number. %m 输出代码中指定的消息 %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL %r 输出自应用启动到输出该log信息耗费的毫秒数 %c 输出所属的类目，通常就是所在类的全名 %t 输出产生该日志事件的线程名 %n 输出一个回车换行符，</description>
      <content:encoded><![CDATA[<p>今天用Log4j时候，感觉只显示message讯息太少了，直觉上这些流行的工具应该会提供更强大的定制功能，就去google了一下</p>
<p>果不其然：相关配置参数如下</p>
<h1 id="pattern-to-output-the-callers-file-name-and-line-number">Pattern to output the caller&rsquo;s file name and line number.</h1>
<h1 id="m-输出代码中指定的消息">%m 输出代码中指定的消息</h1>
<h1 id="p-输出优先级即debuginfowarnerrorfatal">%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</h1>
<h1 id="r-输出自应用启动到输出该log信息耗费的毫秒数">%r 输出自应用启动到输出该log信息耗费的毫秒数</h1>
<h1 id="c-输出所属的类目通常就是所在类的全名">%c 输出所属的类目，通常就是所在类的全名</h1>
<h1 id="t-输出产生该日志事件的线程名">%t 输出产生该日志事件的线程名</h1>
<h1 id="n-输出一个回车换行符windows平台为rnunix平台为n">%n 输出一个回车换行符，Windows平台为「rn」，Unix平台为「n」</h1>
<h1 id="d-输出日志时间点的日期或时间默认格式为iso8601也可以在其后指定格式比如dyyy-mmm-dd">%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd</h1>
<p>HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921</p>
<h1 id="l-输出日志事件的发生位置包括类目名发生的线程以及在代码中的行数">%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。</h1>
<p>通过配置这些参数可以定制自己想要的记录。</p>
<p>我修改 log4j.properties 文件后却没有得到我预想的效果，经过检查，发现在 appender
的定义名与下面使用的不一致，唉，也不知道当初哪里拷贝来的代码</p>
<p>并且如果想使用定制模式，应该设定log4j.appender.A1.layout=org.apache.log4j.PatternLayout
（其中A1为上面设定的输出位置，我使用的是ConsoleAppender）</p>
<p>下面是我完整的 log4j.properties</p>
<h1 id="set-root-logger-level-to-debug-and-its-only-appender-to-a1">Set root logger level to DEBUG and its only appender to A1.</h1>
<p>log4j.rootLogger=INFO,A1</p>
<h1 id="a1-is-set-to-be-a-consoleappender">A1 is set to be a ConsoleAppender.</h1>
<p>log4j.appender.A1=org.apache.log4j.ConsoleAppender</p>
<h1 id="a1-uses-patternlayout">A1 uses PatternLayout.</h1>
<p>log4j.appender.A1.layout=org.apache.log4j.PatternLayout</p>
<p>log4j.appender.A1.layout.ConversionPattern=%d{yy-MM-dd hh:mm} %p [%c] - %m%n</p>
<p>输出的样式如下</p>
<p>09-05-07 10:23 INFO message</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Log4j 遇到的问题</title>
      <link>https://blog.alswl.com/2009/05/log4j-problems/</link>
      <pubDate>Tue, 05 May 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/05/log4j-problems/</guid>
      <description>今天使用 Log4j 遇到问题是只能打印ERROR级别 最简单的 Log4j.properties 设置 Set root logger level to DEBUG and its only appender to A1. log4j.rootLogger=INFO,A1 A1 is set to be a ConsoleAppender. log4j.appender.A1=org.apache.log4j.ConsoleAppender A1 uses PatternLayout. log4j.appender.A1.layout=org.apache.log4j.PatternLayout log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n 我老是只能答应ERROR级别，最后发现自己这个工程里面两个设置文件，只有在src文件夹下的才起作用，删除多余的，重新修改src下的就可以起作用了</description>
      <content:encoded><![CDATA[<p>今天使用 Log4j 遇到问题是只能打印ERROR级别</p>
<p>最简单的 Log4j.properties 设置</p>
<h1 id="set-root-logger-level-to-debug-and-its-only-appender-to-a1">Set root logger level to DEBUG and its only appender to A1.</h1>
<p>log4j.rootLogger=INFO,A1</p>
<h1 id="a1-is-set-to-be-a-consoleappender">A1 is set to be a ConsoleAppender.</h1>
<p>log4j.appender.A1=org.apache.log4j.ConsoleAppender</p>
<h1 id="a1-uses-patternlayout">A1 uses PatternLayout.</h1>
<p>log4j.appender.A1.layout=org.apache.log4j.PatternLayout</p>
<p>log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</p>
<p>我老是只能答应ERROR级别，最后发现自己这个工程里面两个设置文件，只有在src文件夹下的才起作用，删除多余的，重新修改src下的就可以起作用了</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
