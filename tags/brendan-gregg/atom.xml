<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>brendan gregg on Log4D</title>
    <link>https://blog.alswl.com/tags/brendan-gregg/</link>
    <description>Recent content in brendan gregg on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 12 Nov 2017 15:30:12 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/brendan-gregg/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务性能监控：USE 方法（The USE Method）</title>
      <link>https://blog.alswl.com/2017/11/use-method/</link>
      <pubDate>Sun, 12 Nov 2017 15:30:12 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2017/11/use-method/</guid>
      <description>本文首发在沪江技术学院公众号，小莞翻译，我做了校对。 由于微信公众号的封闭性，我担心未来文章不容易被发现。 为了避免沧海遗珠，特意转到这里。
英文原文：The USE Method。
USE 方法是一种能分析任何系统性能的方法论。 我们可以根据能帮助系统分析的结构化清单，来迅速的定位资源的瓶颈和错误所在。 它通常会先以列出问题为开始，然后再寻找适合的指标，而不是给你制定一些固定的指标， 然后让你按部就班的执行下去。
本页左侧下方，是我列出的，根据不同的操作系统（Linux、 Solaris 等） 衍生的 USE 方法列表。（译者注：可以参考原文链接）
我列出了为不同的操作系统而衍生的 USE 方法列表供大家参考， 你们可以根据你的环境来为你的站点服务，选择适合的附加监控指标。
通过这个工具，可以很方便的筛选出适合不同的系统的建议 metrics：USE Method: Rosetta Stone of Performance Checklists
Intro（Introduction） 如果你遇到一个很严重的性能问题升级的时候，并且你不能确定它是否由服务导致的， 这时候你该怎么办？
我们都说万事开头难。所以我开发出了 USE 方法，来帮助大家，如何去快速的解决常见的性能问题，而同时又不容易忽略重要的地方。
USE 方法在设计之初就定位了简洁、明了、完整、快速的特性， 就好像一本航天手册的紧急事项列表那样。 （译者注：航天手册，介绍包括不限于飞机的各种特性、指标、性能等， 用于帮助飞行学员学习驾驶飞机，或者是帮助那些希望提高他们的飞行潜能和航空知识的人了解的更全面）。
USE 方法已经在不同的企业、课堂（作为学习工具）以及最近的云计算等场景中，被成功应用了无数次。
USE 方法基于 3+1 模型（三种指标类型+一种策略），来切入一个复杂的系统。我发现它仅仅发挥了 5% 的力量，就解决了大概 80% 的服务器问题，并且正如我将证明的，它除了服务器以外，也同样适应于各种系统。
它应当被理解为一种工具，一种很大的方法工具箱里面的工具。不过，它目前仍然还有很多问题类型以待解决，还需要点其他方法和更多的时间。
Summary USE 方法可以概括为：检查所有的资源的利用率，饱和度，和错误信息。
我们期望大家能尽早使用 USE 方法去做性能检查，或者是用它确定系统的瓶颈。
名词定义：
资源： 服务器功能性的物理组成硬件（CPU， 硬盘, 总线） 利用率： 资源执行某工作的平均时间 饱和：衡量资源超载工作的程度，往往会被塞入队列 错误： 错误事件的数量 分析软件资源，或者是软件的强制性限制（资源控制）也是很有用的，同时要关注哪些指标是处于正常的可接受范围之内的。这些指标通常用以下术语表示：
利用率： 以一个时间段内的百分比来表示，例如：一个硬盘以 90% 的利用率运行 饱和度： 一个队列的长度，例如：CPUs 平均的运行时队列长度是4 错误（数）： 可度量的数量，例如：这个网络接口有 50 次（超时？） 我们应该要调查那些错误，因为它们会降低系统的性能，并且当故障模型处于可回复模式的时候，它可能不会立刻被发现。</description>
    </item>
    
  </channel>
</rss>
