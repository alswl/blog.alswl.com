<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>infrastructure on Log4D</title>
    <link>https://blog.alswl.com/tags/infrastructure/</link>
    <description>Recent content in infrastructure on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Jan 2017 23:20:50 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/infrastructure/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>👷如何做年前大扫除</title>
      <link>https://blog.alswl.com/2017/01/spring-cleaning/</link>
      <pubDate>Tue, 03 Jan 2017 23:20:50 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2017/01/spring-cleaning/</guid>
      <description>今年过年特别早，离春节只剩下二十多天了。
为期 7 天的春节里，工程师们不上班，那万一线上业务出现了故障怎么办？
大公司的朋友们会安排专门的人进行值班（此处心疼一下那些需要大年三十还要值班保证高峰的工程师们），
而作为创业团队人少，难做到在线值守，就需要对线上进行一些整理盘点，找出潜在问题，为春节长假做一些准备。
我们称之为年前大扫除。
大扫除需要做些什么呢，且听我一一道来。
PS: 冷知识，大扫除英文是 spring cleaning，所以春节大扫除是 Spring Festival spring cleaning。
大扫除的内容 大扫除其实是一个查漏补缺+囤积粮草的事情。
查漏补缺，即找出潜在的问题。这些问题平时可能不会特意去查看，
借助大扫除这个运动，恰好进行盘点。
计算机的世界里，有一个方法论非常好使，在极多场景可以见到其身影：分层。
TCP 的七层模型，架构设计的 N 层 模型，都是对分层思想的使用。
查漏补缺也不例外，我们可以按照业务访问流程，将需要排查的问题拆分为：业务、应用、中间件、网络、物理、存储 etc。
通过分层，不仅仅完成了自上而下地遍历整个技术栈，也同时将不同模块的内容交给不同的责任方，
确保任务的分割。
分完模块，还要告知大家如何具体查找问题。
这里我介绍一个通用的方法：USE1：
For every resource, check Utilization, Saturation, and Errors.
USE 方法是从 Brend Gregg 那里学来的。
在技术设施的领域里，Resource 即是指各种类型的资源，比如 CPU、磁盘、网络、内存，
Utilization 指的是使用率，可以简单分为百分制和非百分制。
Saturation 是指饱和率，支持 queue 的资源，就会有这个指标。
Error 即错误，可以从错误统计和日志得知。2
业务领域里面，USE 也有相对应的含义。以审核系统举例，
对应的 USE 可以理解为「审核应用实例跑的 CPU 占用如何，任务队列是否塞满，业务日志是否有异常」。
除了 USE 里面提到的指标，还有几个指标特别重要：
TPS 、Latency 和 Capacity。</description>
    </item>
    
  </channel>
</rss>
