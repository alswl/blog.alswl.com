<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>shell on Log4D</title>
    <link>https://blog.alswl.com/tags/shell/</link>
    <description>Recent content in shell on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Oct 2012 00:42:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/shell/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with Python subprocess[译文]</title>
      <link>https://blog.alswl.com/2012/10/working-with-python-subprocess/</link>
      <pubDate>Tue, 16 Oct 2012 00:42:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/10/working-with-python-subprocess/</guid>
      <description>8月底到魔都开始新工作，头一个月当然各种忙，都没时间来更新博客。
这篇文章是在写 Btrace 脚本时候查资料看到的， 看着不错就顺手翻译，没想到差点烂在草稿箱出不来啊出不来。 熬了一个月才磨出来，媳妇都快成婆了有木有。
原文链接：Working with Python subprocess - Shells, Processes, Streams, Pipes, Redirects and More
注意
关于「执行命令时候发生了什么」这个问题，可以在 http://en.wikipedia.org/wiki/Redirection_(computing) 找到更多最新信息。这篇文章遵循 GFDL 协议。
在我的上一篇日志中，我写到如何 build a command line interface with sub-commands in Python。 这次我来尝试如何通过 Python 的 subprocess 模块来和命令行指令进行交互。
我想达到的目标是：
查看当你键入命令时究竟发生了什么 如何确认一个命令是否存在并找出到底在哪 通过 Python 或 shell 执行命令 向一个运行中的进程读取 STDOUT 或写入 STDIN 检查进程的退出返回状态 理解 Bash 在命令中断中扮演的角色，并如何将它们发送给程序 执行程序时发生了什么 当你双击桌面上的终端程序图标时，就会打开一个载入 shell 的程序。 你键入的命令不会直接在内核执行，而是先和 shell 进行交互。
Command (eg. `ls -l&amp;#39;) ↓ Terminal Program (eg. `gnome-terminal&amp;#39;) ↓ Shell (eg Bash) ↓ Kernel (eg.</description>
    </item>
    
    <item>
      <title>Vim 下模拟 Emacs 键绑定</title>
      <link>https://blog.alswl.com/2012/04/vim-emacs-key-binding/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/04/vim-emacs-key-binding/</guid>
      <description>Vimer 需要 Emacs 键绑定？看上去很蛋疼的需求吧。其实不然，大部分的 Shell / Readline 默认绑定的是 Emacs 键位绑定（处于输入状态下，Emacs 的键位很好用）。Vim 的模式切换很牛逼，但是 Insert 模式下面，只有寥寥几个快捷键，我修改了配置文件，绑定需要的 Emcas 按键到 Vim 中来。
Github 中搜索关键字 Vim Emcas key bind，出来一些结果，不是很完美，我又慢慢调教了几个星期，放出我的 .vimrc。
&amp;#34; 模拟 Emacs 键绑定 &amp;#34; Move inoremap &amp;lt;C-a&amp;gt; &amp;lt;Home&amp;gt; inoremap &amp;lt;C-e&amp;gt; &amp;lt;End&amp;gt; &amp;#34;inoremap &amp;lt;C-p&amp;gt; &amp;lt;Up&amp;gt; &amp;#34;inoremap &amp;lt;C-n&amp;gt; &amp;lt;Down&amp;gt; inoremap &amp;lt;C-b&amp;gt; &amp;lt;Left&amp;gt; inoremap &amp;lt;C-f&amp;gt; &amp;lt;Right&amp;gt; inoremap &amp;lt;M-b&amp;gt; &amp;lt;C-o&amp;gt;b inoremap &amp;lt;M-f&amp;gt; &amp;lt;C-o&amp;gt;w &amp;#34; Rubout word / line and enter insert mode &amp;#34; use &amp;lt;Esc&amp;gt;&amp;lt;Right&amp;gt; instead of &amp;lt;C-o&amp;gt; inoremap &amp;lt;C-w&amp;gt; &amp;lt;Esc&amp;gt;dbcl &amp;#34; delete inoremap &amp;lt;C-u&amp;gt; &amp;lt;Esc&amp;gt;d0cl inoremap &amp;lt;C-k&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;Right&amp;gt;C inoremap &amp;lt;C-d&amp;gt; &amp;lt;Esc&amp;gt;&amp;lt;Right&amp;gt;s inoremap &amp;lt;M-d&amp;gt; &amp;lt;C-o&amp;gt;de 需要的朋友请取用，我的 Vim 配置文件和插件在 https://github.</description>
    </item>
    
  </channel>
</rss>
