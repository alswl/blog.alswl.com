<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>创业 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E5%88%9B%E4%B8%9A/</link>
    <description>Recent content in 创业 on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 10 Apr 2013 23:35:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/%E5%88%9B%E4%B8%9A/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读《人件》</title>
      <link>https://blog.alswl.com/2013/04/peopleware/</link>
      <pubDate>Wed, 10 Apr 2013 23:35:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/04/peopleware/</guid>
      <description>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要， 还是通过语言/工具来约束人重要」。 我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。 如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。 并不是静态编译和工具检查就能搞定了。 我愤愤的在 QQ 对话框中写道： 我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学 后来痛苦与代码质量</description>
      <content:encoded><![CDATA[<p>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要，
还是通过语言/工具来约束人重要」。
我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。
如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。
并不是静态编译和工具检查就能搞定了。</p>
<p>我愤愤的在 QQ 对话框中写道：</p>
<blockquote>
<p>我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学
后来痛苦与代码质量，阅读了《重构》，开始坚信代码质量决定产品质量
现在痛苦于人和语言的冲突，动态和静态的冲突，我想读《人件》了</p>
</blockquote>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201304/s1299961.jpg" alt="人件"  />

</p>
<p>人件已经绝版，只能在找线上版，我花了两个星期把它读完。
书中给了我一部分答案，另外还有一些意外的收获。</p>
<!-- more -->
<p>《人件》其实讲了一件事情：怎样将脑力劳动者管理好，打造出一个高效的团队。</p>
<p>《人件》@豆瓣： <a href="http://book.douban.com/subject/1108725/">http://book.douban.com/subject/1108725/</a></p>
<p>《人件》在线阅读地址： <a href="http://book.zi5.me/books/read/2206">http://book.zi5.me/books/read/2206</a></p>
<p>吐槽：翻译太烂太烂太烂了，下次要看直接去看翻译版。</p>
<h2 id="以人为本">以人为本</h2>
<blockquote>
<p>我们工作的主要挑战，与其说来源于技术，不如说来源于团队成员本身</p>
</blockquote>
<p>技术人员转成项目经理经理之后，往往继续用工程化思维管理人员，
认为人是可以设计成标准化接口，是可以替换的。很可惜，这种想法不是那么 <strong>有效</strong>。</p>
<p>因为脑力劳动和体力重复劳动不一样，不是在卖汉堡这种重复工作，
而是需要创造、思考和发明的工作。软件经理需要提供有限额的错误机会。
错误无法完全避免，并且是工作内容的健康组成部分。一旦硬性阻止犯错，
会让团队成员失去创造的勇气。
我相信这也是为什么 Facebook 早期会践行「Break it Down」。</p>
<h2 id="何不双赢">何不双赢</h2>
<blockquote>
<p>西班牙人的理论坚持认为地球上只有一个固定数量的价值，
因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富。
而英国人的理论认为价值可以通过天才和技术创造出来。因此英国就产生了工业革命，
而西班牙人就转动起了车轮，开始开拓疆土和剥削在新大陆的印第安人。
他们从海上运回大量的黄金，
他们所有努力带来的却是通货膨胀（太多的金钱追逐太少的有用货物）。</p>
</blockquote>
<p>我坚信公司和员工并不是对立面的，双赢才是正确的路线。
大部分情况下，我愿意牺牲个人时间和精力来完成公司的任务。
前提就是对产品有认同感，对公司有归属感。</p>
<h2 id="最好和最坏">最好和最坏</h2>
<p>作者通过一个持续两年，有来自 92 个公司的 600 多名开发程序员参加的比赛，
分析出以下数据：</p>
<ul>
<li>成绩最好与成绩最差的人之间的绩效比率是10 : 1。</li>
<li>最好选手成绩大约是中等成绩选手成绩的2.5倍。</li>
<li>成绩中等以上的一半选手与另外一半选手的绩效比是2 : 1</li>
</ul>
<p><a href="http://www.aqee.net/">外刊 IT 评论</a>的
<a href="http://www.aqee.net/why-programmers-are-not-paid-in-proportion-to-their-productivity/">为什么程序员的工作效率跟他们的工资不成比例</a> 一文中也提供一些数据支持。</p>
<p>我离最好还有很长的距离，但是我相信个人能力是可以提升的，
并且在个人能力上面的投资汇报比极高。</p>
<h2 id="高效工作的秘诀">高效工作的秘诀</h2>
<blockquote>
<ul>
<li>进入顺流：咦？怎么时间过得这么快？！</li>
<li>邮件比电话更不容易打乱人的思绪</li>
</ul>
</blockquote>
<h2 id="团队的力量">团队的力量</h2>
<blockquote>
<ul>
<li>团结起来，工作的更高效更开心</li>
<li>有目标的团队，1 + 1 &gt; 2</li>
<li>为一个共同的目标走到一起</li>
<li>优秀的团队里的成员，不会因为钱、阶层、晋升的问题离开团队</li>
<li>优秀的团队往往是带有个性的</li>
</ul>
</blockquote>
<p>《人人都是产品经理》中当时讲了一个愿景（Vison）问题，
我相信一个好的愿景可以吸引更多高质量人才，为赚钱而创建的团队是不会长久的。</p>
<h2 id="烂团队的苗头">烂团队的苗头</h2>
<blockquote>
<ul>
<li>防范团队成员</li>
<li>官僚作风</li>
<li>不挨在一起工作（空间上）</li>
<li>某个成员的职责被分割多份</li>
<li>对产品质量要求降低</li>
<li>无意义的截止日期（不可能达到的目标）</li>
<li>结党营私</li>
<li>加班</li>
<li>绩效考核 / 目标奖励</li>
<li>早期时候人员超编</li>
</ul>
</blockquote>
<p>这里和上文的愿景问题是对应的，无论是强制加班还是通过考核回报激励，
都不是激发人的创造力和战斗力的好方法。老大们应该学会画饼，画大饼。
另外，管理团队果然好难：做的事情必须靠谱，才能吸引到人才；
需要能管理好有个性的人才（比如伞哥这样的）； 在中国大环境下，还要不错的物质回报。</p>
<h2 id="经营好团队">经营好团队</h2>
<blockquote>
<ul>
<li>崇拜高质量：因为市场和用户需要高质量的产品</li>
<li>通过里程碑的方式管理任务，提高士气</li>
<li>崇拜精英</li>
<li>允许和鼓励异端：异端代表创新和进化，没有异端就会种群灭亡</li>
<li>给予自由度：对成员信任，而不是纯粹服从权威工作</li>
<li>交流，唤醒那些有潜力的巨人（唤醒了才能将脑力劳动能力发挥到极限）</li>
<li>内部竞争和培养</li>
<li>管理层自身的学习，公司自身定位的不断改变</li>
<li>将公司内部建设出社区文化（我觉得就是公司团队文化建设嘛）</li>
</ul>
</blockquote>
<p>我有一个观点是工程质量决定产品质量，产品质量决定整个团队。
质量的一个标准是：<strong>我以此为荣</strong></p>
<h2 id="工作是一种乐趣">工作是一种乐趣</h2>
<blockquote>
<ul>
<li>将混乱重建成秩序是有趣的</li>
<li>敢于用小项目来做尝试</li>
<li>组织竞赛游戏</li>
<li>团队头脑风暴</li>
</ul>
</blockquote>
<p>这本这么老的书居然提到团队竞争游戏，和 Facebook 的 Hackday 异曲同工啊。
再为这种乐趣补充一点：将公司的成果分享到开源社区。</p>
<blockquote>
<p>团队成员需要做到：</p>
<ul>
<li>界定自己工作，成为主人翁</li>
<li>促使自己成长为多面手，而不是单纯某个职位</li>
</ul>
</blockquote>
<p>给了成员足够的自由度，那么就会有相应的风险，需要对他们进行监测，
另外招人时候就需要找靠谱的人，这也是为什么 Facebook / Google / 早期百度对招人要求极其严格。</p>
<h2 id="流程改进">流程改进</h2>
<blockquote>
<ul>
<li>CMM 是标准，是标准的话就一定不是对于个体的最优情况</li>
<li>CMM 自身也在改进，说明上一个版本的 CMM 不是最优</li>
<li>流程的目标是：提高质量 / 提高生产力 / 减少风险</li>
</ul>
</blockquote>
<h2 id="读后感">读后感</h2>
<p>发挥个人的能力才是最关键的，要点在于信任、自由、乐趣。原则是 Pull 而不是 Push。</p>
<p>我会继续学习和思考这些原则，因为总有一天我也会面临这样的挑战。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>读《打造 Facebook》</title>
      <link>https://blog.alswl.com/2013/02/facebook/</link>
      <pubDate>Mon, 25 Feb 2013 00:51:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/02/facebook/</guid>
      <description>感谢好基友 @daodao 送了我这本《打造 Facebook》， 年前一直忙，最近腾出两个晚上，把这本很火的书看完了。 第一次听见王淮这个名字，其实是在知乎上面， 当时有一个问题 Facebook 早期员工王淮在职期间有什么成就？。 之后陆陆续续看到他的几个回答，感觉他非常善于自我营销。再之后就读到他这本书。 书中最喜欢的章节是关于 Facebook 工程师文化和产品开发流程的描述。 ============================== 我是分割线 ============================== Facebook 招人标准 对公司的忠诚，是文化认同的附属品 技术面试 2.5 / 系统设计</description>
      <content:encoded><![CDATA[<p>感谢好基友 <a href="http://weibo.com/idao">@daodao</a> 送了我这本《<a href="http://book.douban.com/subject/20471120/">打造 Facebook</a>》，
年前一直忙，最近腾出两个晚上，把这本很火的书看完了。</p>
<p>


<img loading="lazy" src="http://img3.doubanio.com/lpic/s24581301.jpg" alt="cover"  />


</p>
<!-- more -->
<p>第一次听见王淮这个名字，其实是在知乎上面，
当时有一个问题 <a href="http://www.zhihu.com/question/20239975">Facebook 早期员工王淮在职期间有什么成就？</a>。
之后陆陆续续看到他的几个回答，感觉他非常善于自我营销。再之后就读到他这本书。</p>
<p>书中最喜欢的章节是关于 Facebook 工程师文化和产品开发流程的描述。</p>
<p>============================== 我是分割线 ==============================</p>
<ul>
<li>
<p>Facebook 招人标准</p>
<ul>
<li>对公司的忠诚，是文化认同的附属品</li>
<li>技术面试 2.5 / 系统设计 1 / 文化面试 0.5</li>
<li>5 个程度的面试打分</li>
<li>高标准人才，喜欢挑战和完成艰巨任务</li>
<li>慢招人，快炒鱿鱼</li>
</ul>
</li>
<li>
<p>新兵训练营</p>
</li>
<li>
<p>全局认识 / 工具和框架 / 运营商业模式 / 选组</p>
<ul>
<li>工程师入职不区分方向</li>
<li>导师</li>
</ul>
</li>
<li>
<p>黑客文化</p>
<ul>
<li>学习 / 再创造</li>
<li>Done is better than perfect / Code wins arguments</li>
<li>工程师参与构思、设计、实现</li>
<li>很少有「这样子一定成功」，「我们来试试吧」，通过数据反馈</li>
<li>工程师主导产品开发</li>
<li>跨部门回忆，由工程师汇报进度</li>
<li>开发准则：迅速开发、进行监测 / 坦然对待不确定性 / 不追求极致，不断发布到达目标</li>
<li>工具文化</li>
<li>换职位，Hack a month</li>
</ul>
</li>
<li>
<p>王淮转管理岗</p>
</li>
<li>
<p>Facebook 开发流程</p>
<ul>
<li>描绘远景、设置目标
<ul>
<li>SMART：详细、可度量、有难度、现实的、有期限</li>
</ul>
</li>
<li>优先级和时间分配（6-2-2：预期任务-品质改良-有风险任务）
<ul>
<li>120% 难度任务 / 任务段分片进行</li>
</ul>
</li>
<li>跨团队沟通 / 通知</li>
<li>设计产品
<ul>
<li>衡量指标：时间、预算、质量</li>
<li>3 倍目标经验</li>
<li>早期快速迭代变成多方面参与的流程控制</li>
<li>前期评估优缺点和风险</li>
<li>不重复造轮子，拥抱开源</li>
<li>一些理念：不要过度设计、越简单越好、自己就是用户、好用流畅、不追求完美、最基本质量线</li>
</ul>
</li>
<li>指定责任人，定期碰头，了解进度，汇总报告</li>
<li>发布产品，监测数据（系统状态，用户反馈，报警系统）
<ul>
<li>问题事件分析：发生了什么，影响多大，问题原因，发生过程，如何避免</li>
</ul>
</li>
</ul>
</li>
<li>
<p>考核激励</p>
</li>
<li>
<p>王淮做天使</p>
</li>
</ul>
<p>这本书谈不上经典，也不是全文干货，但仍然能从一些章节中获取有用的信息，
推荐一读。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
