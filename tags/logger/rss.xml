<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Logger on Log4D</title>
    <link>https://blog.alswl.com/tags/logger/</link>
    <description>Recent content in Logger on Log4D</description>
    <generator>Hugo -- 0.128.2</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 18 Oct 2015 14:25:28 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/logger/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>怎么打日志</title>
      <link>https://blog.alswl.com/2015/10/how-to-log/</link>
      <pubDate>Sun, 18 Oct 2015 14:25:28 +0800</pubDate>
      <guid>https://blog.alswl.com/2015/10/how-to-log/</guid>
      <description>需要解决的问题： 业务日志打太乱，没有位置和格式约束 什么情况打日志，如何避免滥用，提高日志作用 打日志最佳实践 Dropwizard 列出的打日志原则： Be human readable. Be machine parsable. Be easy for sleepy ops folks to figure out why things are pear-shaped at 3:30AM using standard UNIXy tools like tail and grep. eg.: TRACE [2010-04-06 06:42:35,271] com.example.dw.Thing: Contemplating doing a thing. DEBUG [2010-04-06 06:42:35,274] com.example.dw.Thing: About to do a thing. INFO [2010-04-06 06:42:35,274] com.example.dw.Thing: Doing a thing WARN [2010-04-06 06:42:35,275] com.example.dw.Thing: Doing a thing ERROR [2010-04-06 06:42:35,275] com.example.dw.Thing: This may get ugly. ! java.lang.RuntimeException: oh noes! ! at com.example.dw.Thing.run(Thing.java:16) ! splunk 的最佳实践： 使用清晰的键值对：key1=val1, key2=val2 对开发者易读 全部添加时间戳 使用唯一标记，比如 user_id, transaction_id 使用文本 使用开发者</description>
      <content:encoded><![CDATA[<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201510/logger.jpg" alt="logger"  />


</p>
<p>需要解决的问题：</p>
<ul>
<li>业务日志打太乱，没有位置和格式约束</li>
<li>什么情况打日志，如何避免滥用，提高日志作用</li>
</ul>
<h2 id="打日志最佳实践">打日志最佳实践</h2>
<p>Dropwizard 列出的打日志原则：</p>
<blockquote>
<p>Be human readable.</p>
<p>Be machine parsable.</p>
<p>Be easy for sleepy ops folks to figure out why things are pear-shaped at 3:30AM using standard UNIXy tools like tail and grep.</p>
</blockquote>
<p>eg.:</p>
<pre tabindex="0"><code>TRACE [2010-04-06 06:42:35,271] com.example.dw.Thing: Contemplating doing a thing.
DEBUG [2010-04-06 06:42:35,274] com.example.dw.Thing: About to do a thing.
INFO  [2010-04-06 06:42:35,274] com.example.dw.Thing: Doing a thing
WARN  [2010-04-06 06:42:35,275] com.example.dw.Thing: Doing a thing
ERROR [2010-04-06 06:42:35,275] com.example.dw.Thing: This may get ugly.
! java.lang.RuntimeException: oh noes!
! at com.example.dw.Thing.run(Thing.java:16)
!
</code></pre><p>splunk 的最佳实践：</p>
<ul>
<li>使用清晰的键值对：<code>key1=val1, key2=val2</code></li>
<li>对开发者易读</li>
<li>全部添加时间戳</li>
<li>使用唯一标记，比如 user_id, transaction_id</li>
<li>使用文本</li>
<li>使用开发者易用格式，比如 JSON</li>
<li>尽可能多加一下数据</li>
<li>标记调用来源，比如方法名，类名</li>
<li>将多行事件拆分</li>
</ul>
<p>除了一些浅显易懂的原则，还是 dropwizard 的三条原则和解决方案靠谱。
但是两篇文章都没有告诉如果在复杂系统里面记录有用的日志，打日志生命周期是怎样的。</p>
<p>既然找不到，我就就自行想想如何打有意义的日志。</p>
<p>日志不怕多，而是怕繁杂难搜索，产出的数据无意义难追踪问题。所以最关键是找到一个合理通用的方式组织起来即可：</p>
<ul>
<li>按照模块名 com.duitang.service.module.aaa 打日志，比如 <code>com.duitang.service.module.aaa.log</code></li>
<li>一个模块一个日志，模块复杂之后，可以拆分，<code>com.duitang.service.module.aaa.core.log</code> / <code>com.duitang.service.module.aaa.query.log</code>，其实在这个时侯，这个模块本身由于复杂性也会面临拆分。</li>
<li>不分离 error / info 日志，放到一个文件，通过 <code>grep</code> 或者日志工具分离</li>
<li>日志文件一定要 rotate，磁盘存储固定时间 N 天，远程文件存储固定时间 M 天，TTL 删除。</li>
</ul>
<p>补充一个日志常见使用场景：</p>
<ul>
<li>外部资源调用</li>
<li>状态变化</li>
<li>系统入口和出口</li>
<li>业务异常</li>
<li>非预期执行</li>
</ul>
<hr />
<p>参考文档：</p>
<ul>
<li><a href="https://dropwizard.github.io/dropwizard/manual/core.html#logging">Dropwizard Core | Dropwizard</a></li>
<li><a href="http://dev.splunk.com/view/logging-best-practices/SP-CAAADP6">Logging best practices | Splunk</a></li>
<li><a href="http://www.infoq.com/cn/articles/why-and-how-log">程序那些事：日志记录的作用和方法</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
