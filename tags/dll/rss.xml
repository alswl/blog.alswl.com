<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>dll on Log4D</title>
    <link>https://blog.alswl.com/tags/dll/</link>
    <description>Recent content in dll on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 23 Jan 2011 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/dll/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在.net中使用GAC</title>
      <link>https://blog.alswl.com/2011/01/gac/</link>
      <pubDate>Sun, 23 Jan 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/01/gac/</guid>
      <description>GAC GAC是什么？是用来干嘛的？GAC的全称叫做全局程序集缓存，通俗的理解就是存放各种.net平台下面需要使用的dll的地方。GAC的具体目录在windows/ assembly。 喜欢使用破解软件的朋友可能会经常使用替换DLL这招，这个DLL虽然和.net下面的DLL有所不同，但大致起的作用还是一样的：使用共同的动态链接库来提高库复用 ，减少文件体积。在.net平台之前，程序们都把可能用到的公共DLL存</description>
      <content:encoded><![CDATA[<h2 id="gac">GAC</h2>
<p>GAC是什么？是用来干嘛的？GAC的全称叫做全局程序集缓存，通俗的理解就是存放各种.net平台下面需要使用的dll的地方。GAC的具体目录在windows/
assembly。</p>
<p>喜欢使用破解软件的朋友可能会经常使用替换DLL这招，这个DLL虽然和.net下面的DLL有所不同，但大致起的作用还是一样的：使用共同的动态链接库来提高库复用
，减少文件体积。在.net平台之前，程序们都把可能用到的公共DLL存放到system32文件夹下。由于版本的不一致及其他原因（将控制信息存放到注册表），造成
了很有名的<a href="http://zh.wikipedia.org/zh-cn/DLL%E5%9C%B0%E7%8D%84">DLL Hell</a>。</p>
<p>最近在读俞甲子的《<a href="http://book.douban.com/subject/3652388/">程序员的自我修养</a>》，中间花了很大的篇幅描述程序编译中
的链接这个过程。而比较巧合的是，我的《<a href="http://book.douban.com/subject/3563971/">C#与.NET 3.5高级程序设计</a>》也正好读到程序集这一块。微软使用了GAC来避免DLL重蹈覆辙。现在，我就来部署一个简单的通用类库到GAC中。</p>
<h2 id="获取强名称签名">获取强名称（签名）</h2>
<p>并不是随便一个DLL都可以放到GAC中，如果这样的话，和之前的DLL Hell也没什么区别了。GAC使用一个强名称（签名）的方式来区分不同的DLL。每个签名
都是独一无二的公钥私钥对。现在我们使用SDK的sn工具为我的DUtil库生成一个snk签名。</p>
<p>打开SDK中的Visual Studio 2008 命令提示，键入sn -k DUtil.snk，结果如下：</p>
<pre tabindex="0"><code>F:WorkSpace.netDUtilbinDebug&gt;sn -k DUtil.snk
</code></pre><p>Microsoft (R) .NET Framework 强名称实用工具 版本 3.5.21022.8</p>
<p>Copyright (c) Microsoft Corporation. All rights reserved.</p>
<p>密钥对被写入 DUtil.snk</p>
<p>这样我们就得到了一个snk签名文件。</p>
<h2 id="为程序集设置签名">为程序集设置签名</h2>
<p>现在我们得到了一个签名文件，但是还没有把这个签名应用到程序中，在程序的assembly.cs文件中加入[assembly:
AssemblyKeyFile(&ldquo;dutil.snk&rdquo;)]，这个dutil.snk可以是绝对路径，我使用的是主目录中的snk文件。</p>
<p>编译解决方案，生成的.dll文件就包含了签名。</p>
<p>此时编译器会出现一个警告：</p>
<p>警告 1 使用命令行选项&quot;/keyfile&quot;或适当的项目设置代替&quot;AssemblyKeyFile&quot;
F:WorkSpace.netDUtilPropertiesAssemblyInfo.cs 38 12 DUtil</p>
<p>既然VS建议我们用选项设定，那我们就用项目选项页设定key。如下图所示：</p>
<p>


<img loading="lazy" src="https://4ocf5n.dijingchao.com/upload_dropbox/201101/snk.jpg" alt="image"  />


</p>
<p>PS：我测试过，生成DLL之后，就算删除签名使用的snk文件，依然可以正常使用。即snk文件只有在编译时候使用。</p>
<h2 id="安装到gac">安装到GAC</h2>
<p>安装到GAC有两种办法，一种是把DLL拖入windows/assembly目录下（不是复制粘贴，是拖动），另外一种是使用gacutil。</p>
<p>在Win7下，拖动的话会遇到权限问题，如下图所示</p>
<p>


<img loading="lazy" src="https://4ocf5n.dijingchao.com/upload_dropbox/201101/gac_setup_error.jpg" alt="image"  />


</p>
<p>在gacutil下面也会遇到如下错误</p>
<pre tabindex="0"><code>F:WorkSpace.netDUtilbinDebug&gt;gacutil -i DUtil.dll
Microsoft (R) .NET Global Assembly Cache Utility.  Version 3.5.21022.8
Copyright (c) Microsoft Corporation.  All rights reserved.
</code></pre><p>将程序集添加到缓存失败: 拒绝访问。您可能没有执行此任务的管理凭据。请与您的系统管</p>
<p>理员联系以获得帮助。</p>
<p>解决的办法就是进入命令行时候用管理员身份进入，执行之后显示如下</p>
<pre tabindex="0"><code>F:WorkSpace.netDUtilbinDebug&gt;gacutil -i DUtil.dll
Microsoft (R) .NET Global Assembly Cache Utility.  Version 3.5.21022.8
Copyright (c) Microsoft Corporation.  All rights reserved.
</code></pre><p>程序集已成功添加到缓存中</p>
<p>这时候查看windows/assembly目录，就会发现DUtil已经在里面了。</p>
<p>用TotalCommander打开windows/assembly，会发现里面有GAC/GAC_32/GAC_MSIL这几个文件夹，我的DUtil安装到c:
WindowsassemblyGAC_MSILDUtil�.1.0.0__35f4c1ba225b3cc6DUtil.dll，这个路径包含了版本，签名，通过
这种方式，就能避免版本和错误dll的问题了。</p>
<h2 id="使用gac的dll">使用GAC的dll</h2>
<p>打开任意一个项目，添加引用时候，选择编译出来的DUtil.dll即可。查看具体属性，就会发现，这个DLL并未复制到本地，因为它可以从GAC中获取了。</p>
<p>


<img loading="lazy" src="https://4ocf5n.dijingchao.com/upload_dropbox/201101/dll_property.jpg" alt="image"  />


</p>
<p>这时候如果我们删除引用地方的DLL，会发现程序依然可以正确跑起来，说明我们的DLL确实来自GAC。（Update：当引用DLL文件存在时候，优先引用此DLL
，不存在才引用GAC的DLL）</p>
<p>PS:不要尝试去打开windows/assembly目录来引用，你会发现你徒劳的。</p>
<h2 id="卸载gac中的dll">卸载GAC中的DLL</h2>
<p>一句话搞定</p>
<pre tabindex="0"><code>C:Windowssystem32&gt;gacutil -u DUtil
Microsoft (R) .NET Global Assembly Cache Utility.  Version 3.5.21022.8
Copyright (c) Microsoft Corporation.  All rights reserved.
</code></pre><p>程序集: DUtil, Version=0.1.0.0, Culture=neutral, PublicKeyToken=35f4c1ba225b3cc6</p>
<p>, processorArchitecture=MSIL</p>
<p>已卸载: DUtil, Version=0.1.0.0, Culture=neutral, PublicKeyToken=35f4c1ba225b3cc6</p>
<p>, processorArchitecture=MSIL</p>
<p>卸载的程序集数 = 1</p>
<p>失败次数 = 0</p>
<p>这样就把特定目标的DLL卸载了。</p>
<h2 id="参考文章">参考文章</h2>
<p>除了上文提到的两本书，还参考了MSDN中的815808文章，文章名<a href="http://support.microsoft.com/kb/815808/zh-cn">如何在 Visual C# .NET 中将程序集安装到全局程序集缓存中</a>。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
