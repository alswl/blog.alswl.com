<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>pylons on Log4D</title>
    <link>https://blog.alswl.com/tags/pylons/</link>
    <description>Recent content in pylons on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 20 Mar 2012 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/pylons/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Python中调试代码</title>
      <link>https://blog.alswl.com/2012/03/python-debug/</link>
      <pubDate>Tue, 20 Mar 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/03/python-debug/</guid>
      <description>撰写程序时候，需要在调试上面花费不少时间，好的调试工具可以让这个过程如虎添翼， 靠打 log 调试会是一种很痛苦的过程，我总结一下 Pylons 开发的调试技巧。 吐槽：团队开发时候，每个成员需要学习、总结和分享各自的开发技巧， 这样才能自我提升并提高开发效率。这属于团队文化建设，开发是一种艺术创造过程， 绝对不是简单的复制和粘帖。 在 Python 中调试 pdb 在代码中加入下列语句即可启用交互式调试。 import pdb;pdb.set_trace() 在 pdb 中，可以使用 h / l / b / n / s / c /</description>
      <content:encoded><![CDATA[<p>撰写程序时候，需要在调试上面花费不少时间，好的调试工具可以让这个过程如虎添翼， 靠打 log 调试会是一种很痛苦的过程，我总结一下 Pylons
开发的调试技巧。</p>
<p>吐槽：团队开发时候，每个成员需要学习、总结和分享各自的开发技巧， 这样才能自我提升并提高开发效率。这属于团队文化建设，开发是一种艺术创造过程，
绝对不是简单的复制和粘帖。</p>
<h2 id="在-python-中调试">在 Python 中调试</h2>
<h3 id="pdb">pdb</h3>
<p>在代码中加入下列语句即可启用交互式调试。</p>
<pre><code>import pdb;pdb.set_trace()
</code></pre>
<p>在 pdb 中，可以使用 <code>h / l / b / n / s / c / j / a / p / ! / q</code> 这些命令所代表的含义可以通过
<code>h(elp)</code> 打印出来。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://magustest.com/blog/python/use-pdb-debug-python/comment-page-1">用PDB库调试Python程序</a></li>
</ul>
<h3 id="ipdb">ipdb</h3>
<p>比 pdb 更好用的是 ipdb，需要预先安装 IPython，通过 IPython 可以提供更强的交互功能。</p>
<p>安装 ipdb: <code>easy_install ipdb</code> ， 使用方法依然是 <code>import ipdb;ipdb.set_trace()</code> 。</p>
<p>ps: 根据我的测试，ipdb 0.61 不能和 ipython 0.91 正常工作， 会报 <code>ImportError: No module named core.debugger</code> 错误，请尝试使用 ipython 0.10 或者更新版本。这个错误在 ipdb 官网有 issue 描述
（<a href="https://github.com/gotcha/ipdb/issues/9">link</a>）。</p>
<h3 id="使用-embed-python-shell">使用 embed python shell</h3>
<p>除了特定代码的调试，有时候我们还需要在开发一个功能之前进行尝试性代码撰写， 这点在 web 开发时候尤其有用。托 Python
动态语言特性的福，我们可以很方便的使用 Interactivate Shell 进行开发。</p>
<p>在项目的根目录建立一个 Python 脚本，比如 <code>shell.py</code> ，其中代码如下：</p>
<pre><code>#!/usr/bin/env python
#coding=utf-8
</code></pre>
<h1 id="desc-这个shell提供python上下文环境方便调试">desc: 这个shell提供Python上下文环境，方便调试</h1>
<h1 id="author-alswl">author: alswl</h1>
<h1 id="date-2012-03-20">date: 2012-03-20</h1>
<p>def main():</p>
<h1 id="do-something-for-init-here">Do something for init here.</h1>
<p>try:</p>
<p>from IPython.frontend.terminal.embed import InteractiveShellEmbed</p>
<p>ipshell = InteractiveShellEmbed()</p>
<p>ipshell()</p>
<p>except ImportError:</p>
<p>import code</p>
<p>pyshell = code.InteractiveConsole(locals=locals())</p>
<p>pyshell.interact()</p>
<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>
<p>main()</p>
<p>这段代码先尝试使用 IPython 作为交互 shell，如果没有安装就使用原生 Python 作为 交互 Shell。(强烈建议使用 IPython)。</p>
<p>请在 <code>main()</code> 方法开始时候做一些初始化动作，比如载入 webapp 的实例并初始化各路config，
这样就能实现即时代码测试功能，提高开发效率，不用一遍遍地跑流程。</p>
<p>参考链接</p>
<ul>
<li><a href="http://qixinglu.com/archives/embed_python_shell_in_code">http://qixinglu.com/archives/embed_python_shell_in_code</a> （注意， 这篇文章是2011年的，其中引入 IPython 的 <code>InteractiveShellEmbed</code> 的方法已经过期，请参考上面的代码）</li>
</ul>
<h3 id="gae-中的-pdb">GAE 中的 pdb</h3>
<p>有一些特定系统，比如 GAE 和 nosetests，他们会重定向 <code>std:in</code> 和 <code>std:out</code> ， 造成 pdb
无法正确输入和输出，在使用的使用，需要用以下代码做个 hack。</p>
<pre><code>import sys
import pdb
for attr in ('stdin', 'stdout', 'stderr'):
    setattr(sys, attr, getattr(sys, '__%s__' % attr))
pdb.set_trace()
</code></pre>
<h2 id="pylons-调试">Pylons 调试</h2>
<p>Paster 的 Shell 交互式调试更显犀利（官方所称杀手级功能）， 可以直接使用 <code>paster shell dev.ini</code>
命令启用交互界面，默认会先尝试载入 IPython，不存在就载入原生 Shell。</p>
<p>我当前使用的 Paster 版本为 1.7.5,无法正确识 IPython 0.11及以上版本， 请使用0.9.1或者0.10。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://wiki.pylonshq.com/pages/viewpage.action?pageId=9011323">How can I use &ldquo;paster shell&rdquo; to develop doctest tests?</a></li>
<li><a href="http://stackoverflow.com/questions/7389388/pylons-paster-shell-does-not-run-in-ipython">stackoverflow 上关于 IPython 版本的问题</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用nose做测试</title>
      <link>https://blog.alswl.com/2011/09/nose/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/09/nose/</guid>
      <description>不做单元测试的程序员不是好程序员。最近我在Pylons下面做开发， 使用 nose 做单元测试，颇有心得， 在这里分享一下。 1. Pylons中依赖包 先简单介绍一下Pylons, Pylons与其说是一个框架，不如说是一堆框架的组合， Pylons在其中做到一个胶水的作用。Pylons依赖的包如下。 breaker，缓存和Session FormEncode，用户输入检查 Mako，模板渲染 nose，自动化测试 Paste，服</description>
      <content:encoded><![CDATA[<p>不做单元测试的程序员不是好程序员。最近我在Pylons下面做开发， 使用
<a href="http://readthedocs.org/docs/nose/en/latest">nose</a> 做单元测试，颇有心得， 在这里分享一下。</p>
<h2 id="1-pylons中依赖包">1. Pylons中依赖包</h2>
<p>先简单介绍一下Pylons, Pylons与其说是一个框架，不如说是一堆框架的组合， Pylons在其中做到一个胶水的作用。Pylons依赖的包如下。</p>
<ul>
<li><a href="https://github.com/danielfm/pybreaker">breaker，缓存和Session</a></li>
<li><a href="http://formencode.org/">FormEncode，用户输入检查</a></li>
<li><a href="http://www.makotemplates.org/">Mako，模板渲染</a></li>
<li><a href="http://readthedocs.org/docs/nose/en/latest/">nose，自动化测试</a></li>
<li><a href="http://pythonpaste.org/script/">Paste，服务器</a></li>
<li><a href="http://routes.groovie.org/">Routes, 路由</a></li>
<li><a href="http://pythonpaste.org/tempita/">Tempita，Paste的模板</a></li>
<li><a href="http://packages.python.org/WebCore/modules/thirdparty/weberror.html">Weberror</a></li>
<li><a href="http://docs.webob.org/en/latest/index.html">WebOb，提供WSGI请求响应等对象</a></li>
<li><a href="http://pythonpaste.org/webtest/">WebTest，Paste自带的测试小框架， 提供TestResponse和TestRequest两个有用的小东西</a></li>
</ul>
<p>Pylons的测试主要使用的其中的 Paste / nose / WebOb / WebTest。 遇到问题的时候，可以去翻一翻上面的文档。</p>
<h2 id="2-pylons中测试目录结构">2. Pylons中测试目录结构</h2>
<p>目录结构如下</p>
<pre tabindex="0"><code>├─config
├─controllers
├─lib
├─model
├─public
├─templates
└─tests
    └─functional
</code></pre><p>目录中的 <code>config / controllers / lib / model / public</code>
在不同的web框架下面可能会略有差别，在这里我不关注他们，我关注 <code>tests / functional</code> 中存放相应的测试脚本，比如
<code>test_user.py</code></p>
<h2 id="3-第一个简单的测试用例">3. 第一个简单的测试用例</h2>
<h3 id="31-撰写单元测试文件">3.1. 撰写单元测试文件</h3>
<p>最简单的test脚本如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">myb.tests</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestIndexController</span><span class="p">(</span><span class="n">TestController</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_index</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Test response...</span>
</span></span></code></pre></div><p>这里我们从 <code>myb.tests</code> 这个目录下面引入了所有包 （其实起作用的是 <code>__init__.py</code> ）</p>
<p><code>__init__.py</code> 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl"><span class="c1">#coding: utf-8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">webob.headers</span> <span class="kn">import</span> <span class="n">ResponseHeaders</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">unittest</span> <span class="kn">import</span> <span class="n">TestCase</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">paste.deploy</span> <span class="kn">import</span> <span class="n">loadapp</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">paste.script.appinstall</span> <span class="kn">import</span> <span class="n">SetupCommand</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pylons</span> <span class="kn">import</span> <span class="n">url</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">routes.util</span> <span class="kn">import</span> <span class="n">URLGenerator</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">webtest</span> <span class="kn">import</span> <span class="n">TestApp</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pylons.test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;environ&#39;</span><span class="p">,</span> <span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="s1">&#39;TestController&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Invoke websetup with the current config file</span>
</span></span><span class="line"><span class="cl"><span class="n">SetupCommand</span><span class="p">(</span><span class="s1">&#39;setup-app&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="n">pylons</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">pylonsapp</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;__file__&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl"><span class="n">environ</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestController</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">wsgiapp</span> <span class="o">=</span> <span class="n">pylons</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">pylonsapp</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="n">wsgiapp</span><span class="o">.</span><span class="n">config</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">TestApp</span><span class="p">(</span><span class="n">wsgiapp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">url</span><span class="o">.</span><span class="n">_push_object</span><span class="p">(</span><span class="n">URLGenerator</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;routes.map&#39;</span><span class="p">],</span> <span class="n">environ</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TestCase</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span></code></pre></div><p>可以看到，这里使用了 <code>TestController</code> 继承了 <code>TestCase</code> 这个单元测试基类， 并且在里面进行了web应用的环境初始化。</p>
<h3 id="32-撰写测试配置文件">3.2. 撰写测试配置文件</h3>
<p>上文撰写了一个最简单的测试代码，我们接着做一些单元测试配置。</p>
<p>在app应用的同级文件里面，修改 <code>test.ini</code> 文件。</p>
<pre tabindex="0"><code>[DEFAULT]
debug = true
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = 127.0.0.1
port = 5000

[app:main]
use = config:development.ini
sqlalchemy.url = mysql://username:password@localhost/myb_test?charset=utf8&amp;use_unicode=1

# Logging configuration
[loggers]
keys = root, routes, myb, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware

# &#34;level = DEBUG&#34; logs the route matched and routing variables.
[logger_myb]
level = DEBUG
handlers =
qualname = myb

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine

# &#34;level = INFO&#34; logs SQL queries.
# &#34;level = DEBUG&#34; logs SQL queries and results.
# &#34;level = WARN&#34; logs neither. (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s
datefmt = %H:%M:%S
</code></pre><p>这个配置文件设定了基本调试信息，数据库（使用myb_test数据库来避免修改原始数据） ，log方式。</p>
<p>在 <code>[app:main]</code> 里面，我直接引用了 <code>development.ini</code> 的配置。</p>
<h3 id="33-运行nose">3.3. 运行nose</h3>
<p>在shell里面切换到app所在的目录（test.ini）所在的目录，运行 <code>nosetests myb/tests/functional/test_hello world.py</code> 。 之后会出现一些log内容，不出意外的话，应该出现 <code>OK</code> 。</p>
<p>如果遇到 <code>FAILED</code> ，那就根据错误提示的信息来查错。 nose会输出log的信息和print标准输出的信息。</p>
<h2 id="4-高级一点的测试方法">4. 高级一点的测试方法</h2>
<p>在开发过程中，我们需要判定单元测试是否正确，我罗列一些常见的用法</p>
<h3 id="41-测试返回类型为http-status的方法">4.1. 测试返回类型为HTTP STATUS的方法</h3>
<p>每次HTTP请求都会返回HTTP STATUS，正常是200，找不到是404，服务器错误是500， 我们可以根据这些返回状态值来判断测试是否跑通。</p>
<pre tabindex="0"><code>class TestQuestionController(TestController):

  def test_suggest_question(self):

    #正常返回200
    response = self.app.get(url=url(controller=&#39;question&#39;,
    action=&#39;suggest_question&#39;,
    ),

    params={
    },
    headers=self.headers,
    status=200,
    )
</code></pre><p>#不存在的id返回404</p>
<pre tabindex="0"><code>response = self.app.get(url=url(controller=&#39;question&#39;,

action=&#39;suggest_question&#39;,

),

params={

&#39;id&#39;: &#39;345&#39;,

},

headers=self.headers,

status=404,

)
</code></pre><p>我习惯使用 <code>url()</code> 方法来生成url，这样一方面不用记住冗长的url， 另外在url路由表发生变化之后，也不用去改变测试代码。</p>
<h3 id="42-测试返回类型为html的方法">4.2. 测试返回类型为html的方法</h3>
<pre tabindex="0"><code>        def test_register(self):
            response = self.app.post(url(controller = &#39;users&#39;,
                                         action = &#39;register&#39;,
                                         format = &#39;json&#39;),
                                     {
                                         &#39;login_name&#39;: &#39;nose_json&#39;,
                                         &#39;login_pass&#39;: &#39;123&#39;,
                                         &#39;user_name&#39;: &#39;测试机器人_json&#39;,
                                     },
                                     status=200
                                     )
            assert &#39;202cb962ac59075b964b07152d234b70&#39; in response.body #返回的加密密码
            #log.debug( u&#39;器&#39; in response.unicode_body) #无法测试中文
            #log.debug( u&#39;测试机器人_json&#39; in response.unicode_body) #无法测试中文
</code></pre><p>使用 <code>response.body</code> 来判定html里面的内容（这里对中文支持不太好）。</p>
<h3 id="43-测试返回类型为json的方法">4.3. 测试返回类型为json的方法</h3>
<p>AJAX请求正常返回的状态吗都是200，我们需要判定里面的内容进行assert</p>
<pre tabindex="0"><code>            response = self.app.post(url=url(controller=&#39;invitation&#39;,
                                             action=&#39;invite_by_mail&#39;),
                                     params={
                                         &#39;to_address&#39;: &#39;&#39;,
                                         &#39;to_user_name&#39;: &#39;大爷&#39;,
                                     },
                                     headers=self.headers,
                                     status=200
                                    )
            result = response.json
            assert(result[&#39;success&#39;] == False)
            assert(result[&#39;message&#39;] == u&#39;发送失败：你妹不漂亮&#39;)
</code></pre><h3 id="44-测试返回类型为重定向的方法">4.4. 测试返回类型为重定向的方法</h3>
<p>这是HTTP状态吗的特殊形式，比如登录之后做一次跳转之类的。</p>
<pre tabindex="0"><code>        def test_add(self):
            #成功之后返回302做跳转，同时判定返回内容中跳转路径
            response = self.app.post(url=url(controller=&#39;question&#39;,
                                             action=&#39;add&#39;,
                                             ),
                                     params={
                                         &#39;question_title&#39;: &#39;hwti1&#39;,
                                         &#39;question_content&#39;: &#39;wgtinzrs1&#39;,
                                     },
                                     headers=self.headers,
                                     status=302,
                                    )
            assert re.match(r&#39;^http://localhost/question/d*&#39;,
                            response.headers[&#39;Location&#39;])
</code></pre><h3 id="45-用户登录生成session">4.5. 用户登录生成Session</h3>
<p>有些方法需要登录后才能运行，这依赖于服务器和浏览器之间的Cookie。如果要对这类
方法进行测试，我们需要事先获取Cookie，再在每一次请求发出的时候附带这个Cookie。</p>
<p>在下面的方法中，我实现了用户登录操作。 在test目录下的 <code>__init.py__</code> 中 <code>TestController</code> 加入新方法 <code>login()</code></p>
<pre tabindex="0"><code>        def login(self, login_name, login_pass):
            &#34;&#34;&#34;
            用户登录操作，获取Cookie

&#34;&#34;&#34;

response = self.app.post(url=url(controller=&#39;users&#39;,

action=&#39;login&#39;),

params={

&#39;login_name&#39;: login_name,

&#39;login_pass&#39;: login_pass,

},

)

cookie = response.headers.getall(&#39;Set-cookie&#39;)[0]

self.headers = ResponseHeaders()

self.headers.add(&#39;Cookie&#39;, cookie)
</code></pre><p>这样就可以通过 <code>self.headers</code> 保存登录之后的cookie。</p>
<h3 id="46-批量测试">4.6. 批量测试</h3>
<p>除了制定 <code>test_xxx.py</code> 文件进行单元测试，我们还可以直接使用 <code>nosetests</code> 测试所有测试用例。</p>
<pre><code>nosetests
//该目录下需要存在 test.ini 配置文件
</code></pre>
<h2 id="5-遇到的问题">5. 遇到的问题</h2>
<h3 id="51-编码问题">5.1. 编码问题</h3>
<pre tabindex="0"><code>      File &#34;buildbdist.win32eggwebtest__init__.py&#34;, line 211, in post
        content_type=content_type)
      File &#34;buildbdist.win32eggwebtest__init__.py&#34;, line 191, in _gen_request
        expect_errors=expect_errors)
      File &#34;buildbdist.win32eggwebtest__init__.py&#34;, line 370, in do_request
        res = req.get_response(app, catch_exc_info=True)
      File &#34;buildbdist.win32eggwebobrequest.py&#34;, line 1004, in get_response
        application, catch_exc_info=True)
      File &#34;buildbdist.win32eggwebobrequest.py&#34;, line 977, in call_application
        app_iter = application(self.environ, start_response)
      File &#34;buildbdist.win32eggwebtestlint.py&#34;, line 170, in lint_app
        iterator = application(environ, start_response_wrapper)
      File &#34;d:programmingpython26libsite-packagespaste-1.7.5.1-py2.6.eggpastecascade.py&#34;, line 130, in __call__
        return self.apps[-1](environ, start_response)
      File &#34;d:programmingpython26libsite-packagespaste-1.7.5.1-py2.6.eggpasteregistry.py&#34;, line 379, in __call__
        app_iter = self.application(environ, start_response)
      File &#34;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonsmiddleware.py&#34;, line 150, in __call__
        self.app, environ, catch_exc_info=True)
      File &#34;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonsutil.py&#34;, line 48, in call_wsgi_application
        app_iter = application(environ, start_response)
      File &#34;d:programmingpython26libsite-packagesweberror-0.10.3-py2.6.eggweberrorevalexception.py&#34;, line 235, in __call__
        return self.respond(environ, start_response)
      File &#34;d:programmingpython26libsite-packagesweberror-0.10.3-py2.6.eggweberrorevalexception.py&#34;, line 418, in respond
        return self.application(environ, start_response)
      File &#34;d:programmingpython26libsite-packagesbeaker-1.5.4-py2.6.eggbeakermiddleware.py&#34;, line 152, in __call__
        return self.wrap_app(environ, session_start_response)
      File &#34;d:programmingpython26libsite-packagesroutes-1.12.3-py2.6.eggroutesmiddleware.py&#34;, line 131, in __call__
        response = self.app(environ, start_response)
      File &#34;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonswsgiapp.py&#34;, line 107, in __call__
        response = self.dispatch(controller, environ, start_response)
      File &#34;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonswsgiapp.py&#34;, line 312, in dispatch
        return controller(environ, start_response)
      File &#34;F:workxintongworkspaceMYB_WENDAmybmyblibbase.py&#34;, line 52, in __call__
        return WSGIController.__call__(self, environ, start_response)
      File &#34;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonscontrollerscore.py&#34;, line 266, in __call__
        return response(environ, self.start_response)
      File &#34;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&#34;, line 517, in __call__
        environ, start_response)
      File &#34;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&#34;, line 341, in __call__
        return self.generate_response(environ, start_response)
      File &#34;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&#34;, line 322, in generate_response
        body = self.plain_body(environ)
      File &#34;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&#34;, line 301, in plain_body
        body = self._make_body(environ, no_escape)
      File &#34;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&#34;, line 294, in _make_body
        args[k] = escape(v)
      File &#34;d:programmingpython26libsite-packageswebob-1.0.7-py2.6.eggwebobexc.py&#34;, line 182, in no_escape
        value = str(value)
      File &#34;d:programmingpython26libsite-packagespylons-1.0-py2.6.eggpylonsutil.py&#34;, line 112, in __repr__
        value_repr = repr(value)
    UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 8-18: ordinal not in range(128)
</code></pre><p>这是一个明显由编码引起的错误。</p>
<p>修改pylons-1.0-py2.6.eggPylonsutil.py中112行修改为</p>
<pre tabindex="0"><code>    try:
        value_repr = repr(value)
    except UnicodeEncodeError, e:
        log.error(&#39;encode error in pylons/utils.py&#39;)
        continue
</code></pre><p>这样虽然不能从根本上解决问题，但是至少规避了问题。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>go-pylons.py在Python2.7下错误解决</title>
      <link>https://blog.alswl.com/2011/08/go-pylons-py-in-python2-7/</link>
      <pubDate>Tue, 02 Aug 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/08/go-pylons-py-in-python2-7/</guid>
      <description>当使用 Python2.7 + go-pylons.py 创建 Pylons 运行环境的话，会报一下错误。 [alswl@arch-vm xingtong]$ python go-pylons.py myb_env New python executable in myb_env/bin/python Traceback (most recent call last): File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/site.py&amp;quot;, line 67, in &amp;lt;module&amp;gt; import os File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/os.py&amp;quot;, line 398, in &amp;lt;module&amp;gt; import UserDict File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/UserDict.py&amp;quot;, line 83, in &amp;lt;module&amp;gt; import _abcoll File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/_abcoll.py&amp;quot;, line 11, in &amp;lt;module&amp;gt; from abc import ABCMeta, abstractmethod File &amp;quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/abc.py&amp;quot;, line 8, in &amp;lt;module&amp;gt; from _weakrefset import WeakSet ImportError: No module named _weakrefset ERROR: The executable myb_env/bin/python is not functioning ERROR: It thinks sys.prefix is &#39;/home/alswl/work/xingtong&#39; (should be &#39;/home/alswl/work/xingtong/myb_env&#39;) ERROR: virtualenv is not compatible with this system or executable STFW 之后，找到了引发错误的根源virtualenv，这个 bug 在这里已经修复了。 #!diff --- a/virtualenv.py 2010-09-14 21:48:58.078562930 +0200 +++ b/virtualenv.py 2010-09-14 21:46:20.650769346 +0200 @@ -51,6 +51,8 @@ REQUIRED_FILES = [&#39;lib-dynload&#39;, &#39;config if sys.version_info[:2] &amp;gt;= (2, 6): REQUIRED_MODULES.extend([&amp;lsquo;warnings&amp;rsquo;, &amp;rsquo;linecache&amp;rsquo;, &amp;lsquo;_abcoll&amp;rsquo;, &amp;lsquo;abc&amp;rsquo;]) if sys.version_info[:2] &amp;gt;= (2, 7): REQUIRED_MODULES.extend([&amp;rsquo;_weakrefset&amp;rsquo;]) if sys.version_info[:2] &amp;lt;= (2, 3): REQUIRED_MODULES.extend([&amp;lsquo;sets&amp;rsquo;, &amp;lsquo;future&amp;rsquo;]) if is_pypy: 懒人可以点击</description>
      <content:encoded><![CDATA[<p>当使用 Python2.7 +<a href="http://pylonshq.com/download/1.0/go-pylons.py"> go-pylons.py</a>
创建 Pylons 运行环境的话，会报一下错误。</p>
<pre><code>[alswl@arch-vm xingtong]$ python go-pylons.py myb_env
New python executable in myb_env/bin/python
Traceback (most recent call last):
  File &quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/site.py&quot;, line 67, in &lt;module&gt;
    import os
  File &quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/os.py&quot;, line 398, in &lt;module&gt;
    import UserDict
  File &quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/UserDict.py&quot;, line 83, in &lt;module&gt;
    import _abcoll
  File &quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/_abcoll.py&quot;, line 11, in &lt;module&gt;
    from abc import ABCMeta, abstractmethod
  File &quot;/home/alswl/work/xingtong/myb_env/lib/python2.7/abc.py&quot;, line 8, in &lt;module&gt;
    from _weakrefset import WeakSet
ImportError: No module named _weakrefset
ERROR: The executable myb_env/bin/python is not functioning
ERROR: It thinks sys.prefix is '/home/alswl/work/xingtong' (should be '/home/alswl/work/xingtong/myb_env')
ERROR: virtualenv is not compatible with this system or executable
</code></pre>
<p>STFW 之后，找到了引发错误的根源<a href="https://github.com/pypa/virtualenv">virtualenv</a>，这个 bug
在<a href="https://github.com/pypa/virtualenv/issues/76">这里</a>已经修复了。</p>
<pre><code>#!diff
--- a/virtualenv.py        2010-09-14 21:48:58.078562930 +0200
+++ b/virtualenv.py        2010-09-14 21:46:20.650769346 +0200
@@ -51,6 +51,8 @@ REQUIRED_FILES = ['lib-dynload', 'config
</code></pre>
<p>if sys.version_info[:2] &gt;= (2, 6):</p>
<p>REQUIRED_MODULES.extend([&lsquo;warnings&rsquo;, &rsquo;linecache&rsquo;, &lsquo;_abcoll&rsquo;, &lsquo;abc&rsquo;])</p>
<ul>
<li>
<p>if sys.version_info[:2] &gt;= (2, 7):</p>
</li>
<li>
<p>REQUIRED_MODULES.extend([&rsquo;_weakrefset&rsquo;])</p>
</li>
</ul>
<p>if sys.version_info[:2] &lt;= (2, 3):</p>
<p>REQUIRED_MODULES.extend([&lsquo;sets&rsquo;, &lsquo;<strong>future</strong>&rsquo;])</p>
<p>if is_pypy:</p>
<p>懒人可以点击<a href="../../static/images/2011/08/go-pylons.py">go-pylons.py</a>下载。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Eclipse中运行Pylons</title>
      <link>https://blog.alswl.com/2011/05/run-pylons-in-eclipse/</link>
      <pubDate>Mon, 16 May 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/05/run-pylons-in-eclipse/</guid>
      <description>官方中pylons都是通过在shell中运行paster serve &amp;ndash;reload development.ini来运行应用实例。而整天在任务栏跑着一个黑乎乎的shell很碍眼，通过一下步骤可以在Eclipse中运行pylons。 配置Run Configuration - Python Run如下。 Main页签中Main Module指向paster-script.py，可以使用绝对路径。 配置Arguments页签的参数，添加serve &amp;ndash;reload development.i</description>
      <content:encoded><![CDATA[<p>官方中pylons都是通过在shell中运行paster serve &ndash;reload
development.ini来运行应用实例。而整天在任务栏跑着一个黑乎乎的shell很碍眼，通过一下步骤可以在Eclipse中运行pylons。</p>
<p>配置Run Configuration - Python Run如下。</p>
<p>Main页签中Main Module指向paster-script.py，可以使用绝对路径。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201105/eclipse-main.png" alt="image"  />

</p>
<p>配置Arguments页签的参数，添加serve &ndash;reload development.ini，后面的ini配置文件可以使用绝对路径。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201105/eclipse-arguments.png" alt="image"  />

</p>
<p>勾选Common下的Allocate Console来进行paster调试信息输出。</p>
<p>在Windows - Preference - Pydev - Interpreter - Python中的PYTHONPATH加入pylons目标环境
，报过site-packages目录和site-packages目录下面的egg文件（理解为jar包，称之为蟒蛇蛋）。</p>
<p>不出意外的话，就可以通过Run跑起整个应用了。</p>
<p>很可惜的是，这样做还是不能对应用进行Debug，pylons的debug依然依赖于pylons的&quot;交互调试页面&quot;。</p>
<p>参考[http://stackoverflow.com/questions/147650/debug-pylons-application-through-
eclipse](<a href="http://stackoverflow.com/questions/147650/debug-pylons-application-">http://stackoverflow.com/questions/147650/debug-pylons-application-</a>
through-eclipse)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Pylons使用小记</title>
      <link>https://blog.alswl.com/2011/05/pylons/</link>
      <pubDate>Mon, 16 May 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/05/pylons/</guid>
      <description>活着就是折腾，最近事情多的一塌糊涂，烦躁的很，导致log4d也荒废一个月了。今天趁着周五晚上，梳理一下最近学习的pylons知识。 关于Pylons Pylons是一个用pythons写的web框架，优点是配置灵活，默认使用[Mako](http: //www.makotemplates.org/)作为Template，SQLAlchemy作为 ORM映射。使用BSD作为授权协议。 托WSGI的福，pyth</description>
      <content:encoded><![CDATA[<p>活着就是折腾，最近事情多的一塌糊涂，烦躁的很，导致log4d也荒废一个月了。今天趁着周五晚上，梳理一下最近学习的pylons知识。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201105/pylons.png" alt="image"  />

</p>
<h2 id="关于pylons">关于Pylons</h2>
<p><a href="http://pylonsproject.org/">Pylons</a>是一个用pythons写的web框架，优点是配置灵活，默认使用[Mako](http:
//www.makotemplates.org/)作为Template，<a href="http://www.sqlalchemy.org/">SQLAlchemy</a>作为
ORM映射。使用BSD作为授权协议。</p>
<p>托WSGI的福，python的web框架超多，甚至高手5分钟可以自己手写一个web框架，这种情况也导致了Python
web框架的纷杂。我这里选择Pylons（其实是被选择），并不是说Pylons一定最好，而是比较适合当前项目。更多的Python
web框架对比建议看这篇[浅谈Python web框架](<a href="http://feilong.me/2011/01/talk-about-python-web-">http://feilong.me/2011/01/talk-about-python-web-</a>
framework)，另外，这个<a href="http://www.bestwebframeworks.com/python/">Best Web-
Framework</a>有直观的对比。</p>
<h2 id="pylons环境配置">Pylons环境配置</h2>
<p>因为开发机是刚到手的ThinkPad，没有冒险安装Linux，所以这里的安装环境是Win7 + Python 2.6 + MySQL5.1。</p>
<h3 id="1安装pylons">1、安装Pylons</h3>
<p>Pylons似乎没有方便的easy_install，原因是由于Pylons在安装过程中，会生成一个目标环境。这个环境包括完整的Python环境，从而与系统自
带Python环境独立开来，防止第三方库的相互污染。Pylons官方提供了一个Python <a href="http://www.pylonshq.com/download/1.0/go-pylons.py">go-
pylons.py</a>脚本进行安装。</p>
<p>通过在shell键入命令<code>python go-pylons.py myb_env</code>安装，其中myb_env代表目标环境，会在当前目录下面生成一个myb_en
v文件夹，myb_env也可以使用绝对路径代替。在生成完之后请不要随意移动这个目录，因为环境里生成的Python脚本硬编码了绝对路径。</p>
<h3 id="2安装mysql-python驱动">2、安装mysql-python驱动</h3>
<p>我使用的是MySQL数据库，使用mysql-python驱动，windows下具体安装过程可以参见[http://fendou.org/2010/06/17
/install-python26-mysql-python-on-windows/](<a href="http://fendou.org/2010/06/17">http://fendou.org/2010/06/17</a>
/install-python26-mysql-python-on-windows/) 需要修改一下源码和加入几个dll。</p>
<h3 id="3生成egg包下载第三方依赖">3、生成egg包，下载第三方依赖</h3>
<p>在目标项目下面，执行<code>python setup.py develop</code>，这将执行项目需要的三方依赖，设定依赖可以到<code>setup.py中install_req uires</code>进行配置。这个步骤用到了easy_install，所以请确保python/script下面有easy_install的可执行文件。windows
下安装easy_install可以参考这里[http://thinkhole.org/wp/2007/02/01/howto-install-
setuptools-in-windows/](<a href="http://thinkhole.org/wp/2007/02/01/howto-install-">http://thinkhole.org/wp/2007/02/01/howto-install-</a>
setuptools-in-windows/)。</p>
<p>呼啦啦一大串命令跑完之后，就ok了。</p>
<h3 id="4安装额外的三方依赖可选">4、安装额外的三方依赖（可选）</h3>
<p>根据实际情况操作吧，我这里使用了<code>easy_install python-memcached</code>和<code>easy_install pil</code>，前者是memcache的python驱动，后者是python图形库。</p>
<h3 id="5初始化数据库">5、初始化数据库</h3>
<p>托SQLAlchemy的福，我们可以让它自动给我们创建映射表。首先确保在model下面配置好model类。</p>
<pre><code>class Person(Base):
    __tablename__ = &quot;person&quot;
</code></pre>
<p>id = Column(Integer, primary_key=True)</p>
<p>name = Column(String(100))</p>
<p>email = Column(String(100))</p>
<p>def <strong>init</strong>(self, name=&rsquo;&rsquo;, email=&rsquo;&rsquo;):</p>
<p>self.name = name</p>
<p>self.email = email</p>
<p>然后在目标项目下面的development.ini中配置数据库连接字符串。</p>
<pre><code># SQLAlchemy database URL
#sqlalchemy.url = sqlite:///%(here)s/myb.db
sqlalchemy.url = mysql://test:test@localhost/myb?charset=utf8&amp;use_unicode=0
</code></pre>
<p>最后在shell中执行<code>paster setup-app development.ini</code>，即可初始化好数据库结构。</p>
<p>如果需要在初始化时候加入测试数据，可以在项目目录下的websetup.py中setup_app方法填充数据。</p>
<p>如果paster运行错误，则使用<code>easy_install Paste</code>安装一下paster。</p>
<h3 id="6运行app">6、运行app</h3>
<p>在shell中运行<code>paster serve --reload development.ini</code>即可启动网站，通过访问127.0.0.1:5000访问。</p>
<h2 id="pylons中常用的paster命令viahttpwwwcnblogscomjustrun1983archive200912">pylons中常用的paster命令([via](<a href="http://www.cnblogs.com/JustRun1983/archive/2009/12">http://www.cnblogs.com/JustRun1983/archive/2009/12</a></h2>
<p>/17/1626771.html))</p>
<p>paster create -t pylons helloworld</p>
<p>创建一个以pylons为模板的项目，项目名字是helloworld</p>
<p>paster create &ndash;list-templates</p>
<p>显示当前的pylons中有多少可以使用的模板</p>
<p>paster serve &ndash;reaload development.ini</p>
<p>最常用的命令了，启动调式程序的时候都会使用得到它。</p>
<p>paster controller helloworld</p>
<p>常见一个新的controller,名字是helloworld.会在项目目录controller中生成一个hellowolrd.py文件。这个是一个最基本的c
ontroller文件了，可以修改代码，完成我们的目的。</p>
<p>paster setup-app development.ini</p>
<p>安装数据库表。</p>
<p>当配置好了model的__init__.py文件，执行这个命令按照要求生成数据库结构。</p>
<p>数据库默认是sqlite的，如果要修改sqlite数据库路径或者更换成mysql数据库，需要修改development.ini文件。</p>
<h2 id="更多的文档">更多的文档</h2>
<p>[Pylons Reference Documentation</p>
<p>](<a href="http://docs.pylonsproject.org/projects/pylons_framework/dev/index.html">http://docs.pylonsproject.org/projects/pylons_framework/dev/index.html</a>)</p>
<p><a href="http://www.sqlalchemy.org/docs/index.html">SQLAlchemy 0.6.8 Documentation</a></p>
<p><a href="http://www.makotemplates.org/docs/index.html">Mako 0.4.1 Documentation</a></p>
<p><a href="http://pythonpaste.org/script/">Paste Script v1.7 documentation</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
