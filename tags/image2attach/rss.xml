<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Image2attach on Log4D</title>
    <link>https://blog.alswl.com/tags/image2attach/</link>
    <description>Recent content in Image2attach on Log4D</description>
    <generator>Hugo -- 0.125.3</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 10 Feb 2012 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/image2attach/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>给MoinMoin写插件</title>
      <link>https://blog.alswl.com/2012/02/the-write-the-plugins-for-moinmoin/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/02/the-write-the-plugins-for-moinmoin/</guid>
      <description>1. 使用 MoinMoin 前些日子，我写了一篇使用MoinMoin作为个人KMS 大赞MoinMoin的各种好处。MoinMoin的其中一个好处是基于GPL的开源， 我们可以方便的给MoinMoin撰写自己的插件（当然也可以去官方的wiki上获取大量现成插件）。 MoinMoin开发者wiki地址 MoinMoin开发API文档（这个官方wiki居然很少提及） MoinMoin的多国语翻译组wiki地址 我在使用MoinMoi</description>
      <content:encoded><![CDATA[<h2 id="1-使用-moinmoin">1. 使用 MoinMoin</h2>
<p>前些日子，我写了一篇<a href="../2011/12/moinmoin-kms">使用MoinMoin作为个人KMS</a>
大赞MoinMoin的各种好处。MoinMoin的其中一个好处是基于GPL的开源，
我们可以方便的给MoinMoin撰写自己的插件（当然也可以去官方的wiki上获取大量现成插件）。</p>
<ul>
<li><a href="http://moinmo.in/MoinDev">MoinMoin开发者wiki地址</a></li>
<li><a href="http://docs.moinmo.in/">MoinMoin开发API文档（这个官方wiki居然很少提及）</a></li>
<li><a href="http://moinmo.in/MoinDev/Translation">MoinMoin的多国语翻译组wiki地址</a></li>
</ul>
<p>我在使用MoinMoin过程中，有一个急迫需要的功能：</p>
<blockquote>
<p>保存一篇网页时候，要将里面的图片保存到本地，而不是使用外链接方式保存， 因为由于各种不可预测的原因，原始图片数据很有可能丢失或者无法连接。</p>
</blockquote>
<p>这个功能对于将Wiki产品转化为KMS应用非常需要，可惜MoinMoin官方并没有提供，
我也没在MoinMoin的开发者插件库中找到类似功能，就自己写了一个插件image2attach。</p>
<ul>
<li><a href="http://moinmo.in/MoinMoinExtensions">MoinMoin插件库</a></li>
<li><a href="http://moinmo.in/ActionMarket/Image2Attach">image2attach在MoinMoin官方Wiki的地址</a></li>
</ul>
<p>现在我分享一下如何写MoinMoin插件，技术大牛可以直接移步官方开发文档， 我这里只是写一些简单的内容，帮助像我一样的同学。</p>
<p>以下内容需要Python编程基础～</p>
<h2 id="2-moinmoin-系统结构">2. MoinMoin 系统结构</h2>
<p>MoinMoin的UML图：</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201202/MoinMoinArchitecture.png" alt="MoinMoin"  />


</p>
<h2 id="3-moinmoin-常用对象">3. MoinMoin 常用对象</h2>
<h3 id="31-request">3.1. request</h3>
<p>这个request和普通jsp/asp中request很类似（实际上这个request就是继承
<a href="http://werkzeug.pocoo.org/">werkzeug</a>的Request）。</p>
<p>除了正常的web request功能，Moin的request还带了Wiki自身的信息。</p>
<ul>
<li>request.getText # 多国语函数，经常使用 <code>_ = request.getText</code> 来简化代码</li>
<li>request.dicts # 获取定义在页面中的Dict，参见http://moinmo.in/HelpOnDictionaries</li>
<li>request.groups # 获取权限管理中的组别</li>
<li>request.user.may # 检查用户权限</li>
</ul>
<h3 id="32-page">3.2. Page</h3>
<p>Page是最常见的类，它代表某个Wiki页面，通过它可以获取某个页面所有信息。 age本身是只读的，如果需要编辑需要使用PageEditor。</p>
<ul>
<li>Page.exists() # 是否存在</li>
<li>Page.getRevList() # 版本列表</li>
<li>Page.current_rev() # 当前版本</li>
<li>Page.getPagePath() # 存储路径</li>
<li>Page.get_raw_body() # 获取存储的数据</li>
<li>Page.send_page() # 发送格式化好页面</li>
</ul>
<h3 id="33-pageeditor">3.3. PageEditor</h3>
<p>上面说到Page是只读的，那当我们需要编辑页面时候，就要用到PageEditor类了。</p>
<ul>
<li>PageEditor.saveText() # 保存内容</li>
<li>PageEditor.deletePage() # 删除页面</li>
</ul>
<h3 id="34-attachfile">3.4. AttachFile</h3>
<p>顾名思义，AttachFile用来管理页面附件。</p>
<ul>
<li>AttachFile.exists() # 检查附件是否存在</li>
<li>AttachFile.getAttachDir() # 获取附件存放的本地目录</li>
<li>AttachFile.getAttachUrl() # 获取附件url</li>
</ul>
<h3 id="35-wikiutil">3.5. wikiutil</h3>
<p>wikiutil 是MoinMoin提供的一个帮助类，包含一些常用的小功能。</p>
<ul>
<li>wikiutil.escape() # html转义</li>
<li>wikiutil.createTicket() # 生成一串唯一key，用来页面验证</li>
<li>wikiutil.checkTicket() # 检查ticket</li>
<li>wikiutil.invoke_extension_function() # 注入脚本类插件</li>
<li>wikiutil.version2timestamp() # 将MoinMoin时间转换成UNIX时间戳</li>
<li>wikiutil.timestamp2version() # 参考楼上</li>
<li>wikiutil.renderText() # 将wiki text转换成html来展现</li>
</ul>
<h3 id="36-user">3.6. user</h3>
<p>用户类，CRUD操作，不解释。</p>
<h3 id="37-formatter">3.7. formatter</h3>
<p>formatter将输出展现类，将wiki text转换为各种预定义的格式。 需要和parser配合使用（两者关系看上去像抽象工厂模式）。</p>
<ul>
<li>formatter.text() # 格式化为普通文本</li>
<li>formatter.img() # 格式化为图片</li>
<li>formatter.number_list() # 格式化为有序列表</li>
<li>formatter.bullet_list() # 格式化为无序列表</li>
<li>formatter.listitem() # 格式化为列表项</li>
</ul>
<h3 id="38-parser">3.8. parser</h3>
<p>formatter完成的工作是展现解析后的wiki内容，而负责解析的就是parser了。</p>
<p>流程是这样的：</p>
<pre><code>wiki -&gt; parser -&gt; formatter
</code></pre>
<p>每一个parser都对应一个或者多个formatter。系统内置的 parser/formatter 有：</p>
<ul>
<li>docbook</li>
<li>html</li>
<li>plain</li>
<li>python</li>
<li>rst</li>
<li>cvs</li>
</ul>
<h2 id="4-moinmoin-运行流程">4. MoinMoin 运行流程</h2>
<ol>
<li>cgi.py</li>
<li>通过url获取pagename和action，然后调用对应的Page方法和Action对象</li>
</ol>
<pre><code>1. Page().send_page()创建普通页面
2. MoinMoin.action.getHandler()用来获取对应action
</code></pre>
<h2 id="5-moinmoin-开发配置">5. MoinMoin 开发配置</h2>
<h3 id="51-禁用pyc缓存">5.1. 禁用pyc缓存</h3>
<p>MoinMoin 为了提高系统效率，会为 python 文件生成pyc缓存，如果放任它们的话。
每次修改python源码效果都得不到立即体现。所以我们要在开发阶段禁用系统缓存。</p>
<p>在文件 <code>/usr/lib/python2.7/site-packages/MoinMoin/config/multiconfig.py</code>
的第815行左右，修改 <code>options_no_group_name</code> 中的 <code>cache</code> 时间。</p>
<p>当改为0时候，就不使用 <code>pyc</code> 缓存，这样就不用重启服务器来清楚缓存了。</p>
<pre><code>options_no_group_name = {
        # ...
        #'cache': (600, 30), # cache action is very cheap/efficient
        'cache': (0, 0), # cache action is very cheap/efficient #XXX alswl
        # ...
}
</code></pre>
<h2 id="6-image2attach-范例">6. image2attach 范例</h2>
<p>image2attach这个插件功能很简单，就是读取wiki文本内容，找出所有图片，
然会将这些图片从互联网上下载到本地，并将文中的图片链接改为MoinMoin的附件链接。</p>
<h3 id="61-创建插件文件">6.1. 创建插件文件</h3>
<p>在 <code>data/plugin/action/</code> 目录下创建文件Image2Attach.py。
（请使用大写文件，Moin会自动识别大写开头的Python文件为插件）</p>
<h3 id="62-基本框架">6.2. 基本框架</h3>
<ol>
<li><code>execute()</code> ：hook函数，用来给上层调用，签名必须是 <code>def execute(pagename, request)</code></li>
<li><code>Class Image2Attach</code> ：主要类，处理逻辑。</li>
</ol>
<pre><code>1. `process() / process_line()` ：处理每行wiki text，会抓取&lt;a&gt;和&lt;img&gt;
2. `process_transclude() / process_link()` ：分别处理&lt;a&gt; / &lt;img&gt;
3. `fetch_image()` ：下载图片
4. `add_attachment()` ：将图片作为附件加入到wiki
5. `write_file()` ：写入wiki text
</code></pre>
<p>总的来说，开发Moin插件还是比较方便的，官方提供了详尽（但不够顺畅）的教程和
<a href="http://docs.moinmo.in/moin/1.9/">API文档</a>。 我大部分时间在看Moin的API文档，
Moin作为一款久经考研的Wiki系统，开放的代码也有很多地方可以学习。</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用MoinMoin作为个人KMS</title>
      <link>https://blog.alswl.com/2011/12/moinmoin-kms/</link>
      <pubDate>Mon, 26 Dec 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/12/moinmoin-kms/</guid>
      <description>去年9月份时候，我写过一篇《我所使用的知识管理系统》 来介绍我使用的KMS系统。当时经过我层层筛选之后，我选用了Wiz作为我的KMS。 一年多过去了，Wiz在Windows下面工作的非常不错，Wiz团队里陆续推出了iOS / Android / Web版本。我的Wiz收藏的内容也增加到近1000篇。 此时我遇到了KMS再选型的问题，原因很简单：我全线转换到Linux平台， Wiz不符合我的要求了。 我重新整理一下我要求KMS的</description>
      <content:encoded><![CDATA[<p>去年9月份时候，我写过一篇《<a href="http://log4d.com/2010/09/my-kms">我所使用的知识管理系统</a>》
来介绍我使用的KMS系统。当时经过我层层筛选之后，我选用了Wiz作为我的KMS。</p>
<p>一年多过去了，Wiz在Windows下面工作的非常不错，Wiz团队里陆续推出了iOS / Android /
<a href="http://service.wiz.cn/web/">Web</a>版本。我的Wiz收藏的内容也增加到近1000篇。</p>
<p>此时我遇到了KMS再选型的问题，原因很简单：我全线转换到Linux平台， Wiz不符合我的要求了。</p>
<p>我重新整理一下我要求KMS的特性：</p>
<ul>
<li>跨平台：Linux / Web / iOS / Android / Windows</li>
<li>数据保存格式：移植方便，将图片保存到本地</li>
<li>数据采集方式：支持网络直接拷贝复制</li>
<li>数据索引：支持分类 + tag</li>
<li>协同工作：方便的分享机制</li>
<li>免费</li>
</ul>
<p>经过我历时N月的搜寻筛选，MoinMoin Wiki中标了！</p>
<h2 id="1-关于moinmoin">1. 关于MoinMoin</h2>
<p>MoinMoin是使用Python编写的Wiki实现，MoinMoin当前版本1.9。</p>
<p>MoinMoin的优点是：</p>
<ul>
<li>安装简单;</li>
<li>支持中文全文检索；</li>
<li>汉化较好；</li>
<li>不依赖外界的数据库, 使用纯文本保存, 备份非常容易, 直接复制即可。</li>
<li>支持从html转换到MoinMoin Wiki格式，纯文本的wiki格式比html来的更纯粹，只保存需要的数据，而不保存冗余的样式，MoinMoin这点做的非常好，支持几乎全部html标记的转换。</li>
</ul>
<h2 id="2-安装moinmoin">2. 安装MoinMoin</h2>
<p>MoinMoin基于Python，因此安装比基于php的MediaWiki麻烦一点。</p>
<p>你也可以参考<a href="http://moinmo.in/HowTo">官方安装指导（英文）</a>，里面有 Ubuntu / CentOS / SuSE
等系统的安装方法。</p>
<h3 id="21-使用moinmoin桌面版最简单">2.1. 使用MoinMoin桌面版（最简单）</h3>
<p>好在有MoinMoin下载包里面包含了简单的可执行版本，只需3个步骤就可以运行了。</p>
<ol>
<li>下载 MoinMoin <a href="https://moinmo.in/MoinMoinDownload">MoinMoinDownload - MoinMoin</a></li>
<li>解压缩到合适的目录（安装目录）</li>
<li>运行目录下面的 <code>wikiserver.py</code>
<ol>
<li>Linux/Unix：在命令行里面运行 <code>wikiserver.py</code></li>
<li>Mac：在 <code>wikiserver.py</code> 上面点击右键，选择 <code>open with...</code> - <code>All Applications</code> - <code>Always Open With</code> - <code>Terminal.app</code></li>
<li>Windows：下载 <a href="http://www.python.org/download/">Python</a> （2.5-2.6）， 安装之后双击 <code>wikiserver.py</code> 运行。</li>
</ol>
</li>
</ol>
<p>安装好之后，打开浏览器，在地址栏输入 <a href="http://localhost:8080/">http://localhost:8080/</a> 即可访问。</p>
<p>PS：如果你将MoinMoin安装的优盘，甚至可以做成移动知识库哦~</p>
<p>更多可以参考 <a href="http://moinmo.in/DesktopEdition">官方DesktopEdition帮助文档（英文）</a></p>
<h3 id="22-nginxuwsgi方式程序员适用">2.2. nginx+uWsgi方式（程序员适用）</h3>
<p><code>wikiserver.py</code> 虽然可以运行，但是作为开发者，我当然要使用效率更高的方式。 运行Python Web应用需要
<code>Appach / ngnix + CGI / FastCGI / uWSGI</code> 环境。 我这里使用nginx + uWSGI进行环境配置。</p>
<p>Google了N多资料之后，这篇 <a href="http://typedef.me/2011/08/30/archlinux-nginx-uwsgi-moinmoin-setup">ArchLinux 下使用 Nginx + uWSGI 部署 MoinMoin</a>
最是详细，另外还可以参考 <a href="http://garfileo.is-programmer.com/2011/4/24/run-moinmoin-on-uwsgi-and-nginx.26347.html">运行在 nginx 与 uwsgi 之上的 moinmoin</a>。</p>
<p>我将主要步骤和我的一些修改列出来。</p>
<h4 id="221-安装需要软件">2.2.1. 安装需要软件</h4>
<p>我当前系统是Arch，运行一下命令安装，其他系统也类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pacman -S nginx moinmoin
</span></span><span class="line"><span class="cl">yaourt uwsgi
</span></span></code></pre></div><h4 id="222-配置moinmoin">2.2.2. 配置MoinMoin</h4>
<p>默认情况下，moinmoin 被安装在了 <code>/usr/lib/python2.7/site-packages/MoinMoin</code> 和
<code>/usr/moin/share</code> 这两个目录下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /usr/share/moin/
</span></span><span class="line"><span class="cl">ln -s /usr/share/moin/server/moin.wsgi .
</span></span><span class="line"><span class="cl">ln -s /usr/share/moin/config/wikiconfig.py .
</span></span></code></pre></div><h4 id="223-配置nginx">2.2.3. 配置nginx</h4>
<p>在上文的基础上，我做了一些小修改，我的nginx站点配置如下，我没有使用端口9090 作为uwsgi的监听端口，而是使用了UNIX
Sock，这样相对安全一些。</p>
<p>ps：貌似这个版本的uwsgi 0.9.9.2有点小问题，无法在 <code>/var/run</code> 里面创建sock， 我只能将 <code>uwsgi.sock</code> 放在
<code>/tmp</code> 里面</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">listen</span>       <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">server_name</span>  <span class="s">wiki.localhost</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">location</span> <span class="s">/</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kn">include</span> <span class="s">uwsgi_params</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#uwsgi_pass 127.0.0.1:9090;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="kn">uwsgi_pass</span> <span class="s">unix:/tmp/uwsgi.sock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">uwsgi_param</span> <span class="s">UWSGI_PYHOME</span> <span class="s">/usr/lib/python2.7/site-packages/MoinMoin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">uwsgi_param</span> <span class="s">UWSGI_CHDIR</span> <span class="s">/usr/share/moin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">uwsgi_param</span> <span class="s">UWSGI_SCRIPT</span> <span class="s">moin_wsgi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># vim: set ft=conf:
</span></span></span></code></pre></div><h4 id="224-配置启动文件">2.2.4. 配置启动文件</h4>
<p>因为使用 UNIX Sock 连接，所以 <code>/etc/rc.d/uwsgi</code> 启动文件也略做修改（ Ubunt 的启动配置文件在
<code>/etc/init.d/</code> 下面）， 加入了 <code>SOCK</code> ，同时我为 uwsgi 指定运行用户 <code>http</code> ，避免root启动带来的安全隐患。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">#PORT=9090</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">SOCK</span><span class="o">=</span>/tmp/uwsgi.sock
</span></span><span class="line"><span class="cl"><span class="nv">PROCESSES</span><span class="o">=</span><span class="m">4</span>
</span></span><span class="line"><span class="cl"><span class="nv">USER</span><span class="o">=</span><span class="nv">httpLOG</span><span class="o">=</span>/var/log/uwsgi.log
</span></span><span class="line"><span class="cl"><span class="nv">PID</span><span class="o">=</span><span class="sb">`</span>pidof -o %PPID /usr/bin/uwsgi<span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">. /etc/rc.conf
</span></span><span class="line"><span class="cl">. /etc/rc.d/functions
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> in
</span></span><span class="line"><span class="cl">	start<span class="o">)</span>
</span></span><span class="line"><span class="cl">		stat_busy <span class="s2">&#34;Starting uwsgi&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$PID</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">			stat_busy <span class="s2">&#34;uwsgi is already running&#34;</span>
</span></span><span class="line"><span class="cl">			stat_die
</span></span><span class="line"><span class="cl">		<span class="k">else</span>
</span></span><span class="line"><span class="cl">			<span class="c1">#uwsgi --uid $USER -s &#34;:$PORT&#34; -M -p $PROCESSES -d $LOG &amp;&gt; /dev/null # use socket port</span>
</span></span><span class="line"><span class="cl">			uwsgi --uid <span class="nv">$USER</span> --socket <span class="nv">$SOCK</span> -M -p <span class="nv">$PROCESSES</span> -d <span class="nv">$LOG</span> <span class="p">&amp;</span>&gt; /dev/null <span class="c1"># use unix sock</span>
</span></span><span class="line"><span class="cl">			add_daemon uwsgi
</span></span><span class="line"><span class="cl">			stat_done
</span></span><span class="line"><span class="cl">		<span class="k">fi</span>
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	stop<span class="o">)</span>
</span></span><span class="line"><span class="cl">		stat_busy <span class="s2">&#34;Stopping uwsgi&#34;</span>
</span></span><span class="line"><span class="cl">		killall -QUIT uwsgi <span class="p">&amp;</span>&gt; /dev/null
</span></span><span class="line"><span class="cl">		rm_daemon uwsgi
</span></span><span class="line"><span class="cl">		stat_done
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	restart<span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="nv">$0</span> stop
</span></span><span class="line"><span class="cl">		sleep <span class="m">1</span>
</span></span><span class="line"><span class="cl">		<span class="nv">$0</span> start
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	*<span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">echo</span> <span class="s2">&#34;usage: </span><span class="nv">$0</span><span class="s2"> {start|stop|restart}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span>
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">0</span>
</span></span></code></pre></div><h2 id="3-image2attach">3. Image2Attach</h2>
<p>去年我选择Wiz而不选择Wiki类产品时候，是考虑到一个图片保存本地化的问题。 即保存一篇网页时候，要将里面的图片保存到本地，而不是使用链接方式保存，
因为由于各种不可预测的原因，原始图片数据很有可能丢失或者无法连接。</p>
<p>Wiz使用的方案是使用mht格式将图片保存在问题，而大部分 Wiki，包括 MoinMoin 都以 文本的形式保存数据，那就无法保存远程图片了。</p>
<p>经我研究，MoinMoin 中有附件的方法可以保存文件，并且当这种附件存放的是图片文件时， 也可以直接使用 <code>{{attachment:xxx.jpg}}</code>
这样的 Wiki 语法来查看图片。</p>
<p>我尝试在 MoinMoin 插件库里面找将远程图片本地化的插件未果，于是就花了一个星期左右 时间写了一个实现这样功能的插件 Image2Attach。</p>
<p>更多使用可以参考这篇文章 <a href="http://log4d.com/2011/12/moinmoin-plugin-image2attach">MoinMoin plugin: image2attach v0.0.2 released</a></p>
<p>所以说，当程序员就是好，功能没有就自己实现呗。</p>
<h2 id="4-moinmoin的简单上手">4. MoinMoin的简单上手</h2>
<p><a href="http://zhanggang.net/">@张刚</a> 同学发邮件给我和我交流了两个问题，我顺便整理到这里。（2011-12-28更新）</p>
<h3 id="安装语言包">安装语言包</h3>
<ul>
<li>首先请确保当前登录账户是超级用户，超级用户设置在 <code>/usr/share/moin/wikiconfig.py</code> （可能路径有所差异）里面的 <code>superuser = [u&quot;yourid&quot;]</code> ，加入你需要设定的用户id</li>
<li>中文界面会根据浏览器语言设定获取，而相应的中文帮助文件默认没有安装，我建议安装。安装步骤如下：
<ul>
<li>访问http://localhost/LanguageSetup，里面有安装文档链接http://localhost/LanguageSetup?action=language_setup</li>
<li>在http://wiki.localhost/LanguageSetup?action=language_setup中，选择 <code>Simplified_Chinese</code> 点击最下面 <code>all_pages</code></li>
<li>同时我也建议安装英文版本的 <code>all_pages</code> ，因为中文有一些翻译不全。</li>
</ul>
</li>
</ul>
<p>更多的中文信息你可以访问<a href="http://master.moinmo.in/%E9%A6%96%E9%A1%B5">MoinMoin主版本中文网站</a>。</p>
<h3 id="如何加入内容">如何加入内容</h3>
<p>下面是我自己总结的步骤，目前工作的还不错。</p>
<ul>
<li>进入新页面http://localhost/newpage，如果不存在就会创建新页面</li>
<li>默认是文本模式编辑器，切换到图形编辑模式（默认编辑器可以在个人设置里面修改）</li>
<li>从某个网页粘帖内容到图形编辑模式（这个图形编辑器是CKEditor的精简版）。</li>
<li>查看图形编辑器原始码，再返回&quot;所见即所得&quot;状态（这个步骤可以去除一些空格）</li>
<li>返回文本模式编辑器，MoinMoin会自动转换html-&gt;wiki（目前我遇到3个bug，中文开头空格/BR换行/fieldset，前两个我已经修 复，diff文件在<a href="../../static/images/upload_dropbox/201112/moinmoin.diff">diff</a>）</li>
<li>人工审核一下wiki，也顺便仔细看看文章内容</li>
<li>加入Category，预览，保存</li>
</ul>
<h2 id="5-moinmoin的一些修改">5. MoinMoin的一些修改</h2>
<p>在使用MoinMoin这段时间，我发现了一些小问题，就对源码做了一些小修改。 当然如果你觉得麻烦，不做这些修改也一样可以使用的很好。</p>
<p>我修改了 <code>/usr/lib/python2.7/site-packages/MoinMoin/converter/text_html_text_moin_wiki.py</code> 这个文件。点击 <a href="../../static/images/upload_dropbox/201112/moinmoin.diff">diff文件</a>下载。</p>
<h2 id="6-wiz转moinmoin经验">6. wiz转MoinMoin经验</h2>
<p>Wiz中数据存储格式其实是mht，微软的鸟东西，数据转换颇为不方便。</p>
<p>第一种方法是借助Wiz Web服务，Wiz小组推出的 <a href="http://service.wiz.cn/web">Web服务</a> 可以很方便的查看所有同步
过的内容，里面就是标准的html代码了，直接可以复制粘帖。Wiz的Web端图片也不用 Cookie认证，取到图片地址就可以抓取了。</p>
<p>另一种办法就是使用Wiz的导出功能，导出成mht格式， 然后使用MoinMoin站点提供的插件
<a href="http://moinmo.in/MicrosoftWordConverter">Word2Moin</a> 脚本进行转换。</p>
<p>我使用的方法是第一种。</p>
]]></content:encoded>
    </item>
    <item>
      <title>MoinMoin plugin: image2attach</title>
      <link>https://blog.alswl.com/2011/12/moinmoin-plugin-image2attach/</link>
      <pubDate>Sun, 18 Dec 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/12/moinmoin-plugin-image2attach/</guid>
      <description> What&amp;rsquo;s this Image2Attach is a extension for MoinMoin. It can create a page action to save images from web to page&amp;rsquo;s attachments.
Requirment MoinMoin 1.9 (I only test in this version.) Install copy action/Image2Attach.py to data/plugin/action/ restart python server Usage Go into a page, click more action - Image2Attach . It will take a while to fetch the images, after that it will save the image to attachments and replace the image&amp;rsquo;s link with attachment&amp;rsquo;s link. Finnally it will commit a change with message internet image save to attachment to wiki.
Enjoy it, any bugs can report to Issue Report.
Support You can get some develop infomation in Image2attach - Log4D
Licence Distributed under the GPL v2
Source code powered by https://github.com/alswl/image2attach.
update 2012-05-28 fix url catch bug(Issue 4 / Issue 6) 2011-12-25 support link([[http://xxx.com/xxx.jpg|) fix url has &amp;lsquo;attachment&amp;rsquo; string bug. support image attachment rewrite. </description>
      <content:encoded><![CDATA[<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201112/moinmoin.png" alt="MoinMoin"  />


</p>
<h2 id="whats-this">What&rsquo;s this</h2>
<p>Image2Attach is a extension for <a href="http://moinmo.in">MoinMoin</a>.
It can create a page action to save images from web to page&rsquo;s attachments.</p>
<h2 id="requirment">Requirment</h2>
<ul>
<li>MoinMoin 1.9 (I only test in this version.)</li>
</ul>
<h2 id="install">Install</h2>
<ul>
<li>copy action/Image2Attach.py to data/plugin/action/</li>
<li>restart python server</li>
</ul>
<h2 id="usage">Usage</h2>
<p>Go into a page, click <code>more action</code> - <code>Image2Attach</code> .
It will take a while to fetch the images,
after that it will save the image to attachments and replace the
image&rsquo;s link with attachment&rsquo;s link.
Finnally it will commit a change with message
<code>internet image save to attachment</code> to wiki.</p>
<p>Enjoy it, any bugs can report to
<a href="https://github.com/alswl/image2attach/issues">Issue Report</a>.</p>
<h2 id="support">Support</h2>
<p>You can get some develop infomation in
<a href="http://log4d.com/tag/image2attach">Image2attach - Log4D</a></p>
<h2 id="licence">Licence</h2>
<p>Distributed under the <a href="http://www.gnu.org/licenses/gpl-2.0.htmwl">GPL v2</a></p>
<p>Source code powered by <a href="https://github.com/alswl/image2attach">https://github.com/alswl/image2attach</a>.</p>
<h2 id="update">update</h2>
<ul>
<li>2012-05-28</li>
</ul>
<ul>
<li>fix url catch bug(Issue 4 / Issue 6)</li>
</ul>
<ul>
<li>2011-12-25</li>
</ul>
<ul>
<li>support link([[http://xxx.com/xxx.jpg|)</li>
<li>fix url has &lsquo;attachment&rsquo; string bug.</li>
<li>support image attachment rewrite.</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
