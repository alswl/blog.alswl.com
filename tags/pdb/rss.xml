<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pdb on Log4D</title>
    <link>https://blog.alswl.com/tags/pdb/</link>
    <description>Recent content in Pdb on Log4D</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 20 Mar 2012 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/pdb/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Python中调试代码</title>
      <link>https://blog.alswl.com/2012/03/python-debug/</link>
      <pubDate>Tue, 20 Mar 2012 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/03/python-debug/</guid>
      <description>&lt;p&gt;撰写程序时候，需要在调试上面花费不少时间，好的调试工具可以让这个过程如虎添翼， 靠打 log 调试会是一种很痛苦的过程，我总结一下 Pylons
开发的调试技巧。&lt;/p&gt;
&lt;p&gt;吐槽：团队开发时候，每个成员需要学习、总结和分享各自的开发技巧， 这样才能自我提升并提高开发效率。这属于团队文化建设，开发是一种艺术创造过程，
绝对不是简单的复制和粘帖。&lt;/p&gt;
&lt;h2 id=&#34;在-python-中调试&#34;&gt;在 Python 中调试&lt;/h2&gt;
&lt;h3 id=&#34;pdb&#34;&gt;pdb&lt;/h3&gt;
&lt;p&gt;在代码中加入下列语句即可启用交互式调试。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pdb;pdb.set_trace()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 pdb 中，可以使用 &lt;code&gt;h / l / b / n / s / c / j / a / p / ! / q&lt;/code&gt; 这些命令所代表的含义可以通过
&lt;code&gt;h(elp)&lt;/code&gt; 打印出来。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>撰写程序时候，需要在调试上面花费不少时间，好的调试工具可以让这个过程如虎添翼， 靠打 log 调试会是一种很痛苦的过程，我总结一下 Pylons
开发的调试技巧。</p>
<p>吐槽：团队开发时候，每个成员需要学习、总结和分享各自的开发技巧， 这样才能自我提升并提高开发效率。这属于团队文化建设，开发是一种艺术创造过程，
绝对不是简单的复制和粘帖。</p>
<h2 id="在-python-中调试">在 Python 中调试</h2>
<h3 id="pdb">pdb</h3>
<p>在代码中加入下列语句即可启用交互式调试。</p>
<pre><code>import pdb;pdb.set_trace()
</code></pre>
<p>在 pdb 中，可以使用 <code>h / l / b / n / s / c / j / a / p / ! / q</code> 这些命令所代表的含义可以通过
<code>h(elp)</code> 打印出来。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://magustest.com/blog/python/use-pdb-debug-python/comment-page-1">用PDB库调试Python程序</a></li>
</ul>
<h3 id="ipdb">ipdb</h3>
<p>比 pdb 更好用的是 ipdb，需要预先安装 IPython，通过 IPython 可以提供更强的交互功能。</p>
<p>安装 ipdb: <code>easy_install ipdb</code> ， 使用方法依然是 <code>import ipdb;ipdb.set_trace()</code> 。</p>
<p>ps: 根据我的测试，ipdb 0.61 不能和 ipython 0.91 正常工作， 会报 <code>ImportError: No module named core.debugger</code> 错误，请尝试使用 ipython 0.10 或者更新版本。这个错误在 ipdb 官网有 issue 描述
（<a href="https://github.com/gotcha/ipdb/issues/9">link</a>）。</p>
<h3 id="使用-embed-python-shell">使用 embed python shell</h3>
<p>除了特定代码的调试，有时候我们还需要在开发一个功能之前进行尝试性代码撰写， 这点在 web 开发时候尤其有用。托 Python
动态语言特性的福，我们可以很方便的使用 Interactivate Shell 进行开发。</p>
<p>在项目的根目录建立一个 Python 脚本，比如 <code>shell.py</code> ，其中代码如下：</p>
<pre><code>#!/usr/bin/env python
#coding=utf-8
</code></pre>
<h1 id="desc-这个shell提供python上下文环境方便调试">desc: 这个shell提供Python上下文环境，方便调试</h1>
<h1 id="author-alswl">author: alswl</h1>
<h1 id="date-2012-03-20">date: 2012-03-20</h1>
<p>def main():</p>
<h1 id="do-something-for-init-here">Do something for init here.</h1>
<p>try:</p>
<p>from IPython.frontend.terminal.embed import InteractiveShellEmbed</p>
<p>ipshell = InteractiveShellEmbed()</p>
<p>ipshell()</p>
<p>except ImportError:</p>
<p>import code</p>
<p>pyshell = code.InteractiveConsole(locals=locals())</p>
<p>pyshell.interact()</p>
<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>
<p>main()</p>
<p>这段代码先尝试使用 IPython 作为交互 shell，如果没有安装就使用原生 Python 作为 交互 Shell。(强烈建议使用 IPython)。</p>
<p>请在 <code>main()</code> 方法开始时候做一些初始化动作，比如载入 webapp 的实例并初始化各路config，
这样就能实现即时代码测试功能，提高开发效率，不用一遍遍地跑流程。</p>
<p>参考链接</p>
<ul>
<li><a href="http://qixinglu.com/archives/embed_python_shell_in_code">http://qixinglu.com/archives/embed_python_shell_in_code</a> （注意， 这篇文章是2011年的，其中引入 IPython 的 <code>InteractiveShellEmbed</code> 的方法已经过期，请参考上面的代码）</li>
</ul>
<h3 id="gae-中的-pdb">GAE 中的 pdb</h3>
<p>有一些特定系统，比如 GAE 和 nosetests，他们会重定向 <code>std:in</code> 和 <code>std:out</code> ， 造成 pdb
无法正确输入和输出，在使用的使用，需要用以下代码做个 hack。</p>
<pre><code>import sys
import pdb
for attr in ('stdin', 'stdout', 'stderr'):
    setattr(sys, attr, getattr(sys, '__%s__' % attr))
pdb.set_trace()
</code></pre>
<h2 id="pylons-调试">Pylons 调试</h2>
<p>Paster 的 Shell 交互式调试更显犀利（官方所称杀手级功能）， 可以直接使用 <code>paster shell dev.ini</code>
命令启用交互界面，默认会先尝试载入 IPython，不存在就载入原生 Shell。</p>
<p>我当前使用的 Paster 版本为 1.7.5,无法正确识 IPython 0.11及以上版本， 请使用0.9.1或者0.10。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://wiki.pylonshq.com/pages/viewpage.action?pageId=9011323">How can I use &ldquo;paster shell&rdquo; to develop doctest tests?</a></li>
<li><a href="http://stackoverflow.com/questions/7389388/pylons-paster-shell-does-not-run-in-ipython">stackoverflow 上关于 IPython 版本的问题</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
