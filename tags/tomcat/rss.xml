<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tomcat on Log4D</title>
    <link>https://blog.alswl.com/tags/tomcat/</link>
    <description>Recent content in Tomcat on Log4D</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 20 May 2009 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/tomcat/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Eclipse中开发的Jave EE项目在Tomcat的部署</title>
      <link>https://blog.alswl.com/2009/05/eclipse-in-the-development-of-jave-ee-projects-in-the-deployment-of-tomcat/</link>
      <pubDate>Wed, 20 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/eclipse-in-the-development-of-jave-ee-projects-in-the-deployment-of-tomcat/</guid>
      <description>&lt;p&gt;贴吧最基本的功能写完了，正好可以应付数据库设计课的实验。于是我准备把贴吧的项目从Eclipse的开发环境中移植出来，在Tomcat中进行部署。&lt;/p&gt;
&lt;p&gt;也许是习惯了Eclipse提供的便利，这个小小的移植，居然难倒了我，直接把Eclipse里的PostBar考出，根本不能运行，直接报404错误。Google
上也没有提供详细的步骤，也许大家都觉得这个问题很简单吧，呵呵。&lt;/p&gt;
&lt;p&gt;我琢磨了一会，终于整理出了头绪。&lt;/p&gt;
&lt;p&gt;1.修改Apache-conf-server.xml这个文件，修改其中一段&lt;Host&gt;&amp;hellip;&lt;/Host&gt;如下所示&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>贴吧最基本的功能写完了，正好可以应付数据库设计课的实验。于是我准备把贴吧的项目从Eclipse的开发环境中移植出来，在Tomcat中进行部署。</p>
<p>也许是习惯了Eclipse提供的便利，这个小小的移植，居然难倒了我，直接把Eclipse里的PostBar考出，根本不能运行，直接报404错误。Google
上也没有提供详细的步骤，也许大家都觉得这个问题很简单吧，呵呵。</p>
<p>我琢磨了一会，终于整理出了头绪。</p>
<p>1.修改Apache-conf-server.xml这个文件，修改其中一段<Host>&hellip;</Host>如下所示</p>
<pre><code>&lt;host appbase=&quot;webapps&quot; name=&quot;localhost&quot;
    unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;
    xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;
	&lt;context debug=&quot;0&quot; docbase=&quot;F:T3&quot; path=&quot;/postbar&quot;&gt;
		  reloadable=&quot;true&quot; crossContext=&quot;true&quot;&gt;
	&lt;/context&gt;
&lt;/host&gt;
</code></pre>
<p>这一段的作用是在原先webapps的目录下添加虚拟目录/postbar，并且指定实际目录是&quot;F:T3&quot;</p>
<p>2.打开目录listtings功能，这样能帮助调试，正式发布可以关闭。 在Apache-conf-web.xml中找到</p>
<pre><code>&lt;init-param&gt;
	&lt;param-name&gt;listings&lt;/param-name&gt;
	&lt;param-value&gt;false&lt;/param-value&gt;
&lt;/init-param&gt;
</code></pre>
<p>把其中的false改为true就可以了。</p>
<p>3.打包Java EE项目。其实与其我们花时间考虑classes的位置，tld文件位置等繁琐的问题，可以直接使用Eclipse的输出功能，具体是项目右键-
Export 然后选择WAR file，就可以输出一个打包的项目文件。</p>
<p>4.在Tomcat的index.jsp里有stauts，输入管理密码后，可以进入一个状态页面，这里提供上传WAR文件并配置，可以这么做，但是其实可以直接用W
inRAR解压缩WAR文件，然后复制到之前设置的目录中。</p>
<p>这样，就可以再Tomcat使用项目，而不用考虑太多的部署问题了。 当然，我更建议初学者好好研究一下Java EE项目的部署要求，而不是简单的会用。
我也该认真看看孙鑫大大的Java EE前面的基础章节了&hellip;</p>
<p>本以为这样就可以使用项目，结果半路杀出一个程咬金，表单提交的中文都是乱码。</p>
<p>又遇到乱码问题了，呵呵，幸好不是初哥，我用Log4j调试一下，查看Tomcat/logs/，检查下面相应的txt文件，发现Action读取时候就出现了乱码，
数据库也是乱码，说明乱码产生原因在服务器端获取数据时候，我Google一下，发现Connector可以设置编码集，具体设置是Tomcat/conf/serv
er.xml</p>
<pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot;/&gt;
</code></pre>
<p>将其修改为</p>
<pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;  connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;utf-8&quot; /&gt;
</code></pre>
<p>重新测试表单数据发送，一切没有问题了。 细节决定一切啊.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
