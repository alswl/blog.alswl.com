<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>综合技术 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E7%BB%BC%E5%90%88%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 综合技术 on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 29 Oct 2013 22:32:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/%E7%BB%BC%E5%90%88%E6%8A%80%E6%9C%AF/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>15 分钟学会 R 语言[译文]</title>
      <link>https://blog.alswl.com/2013/10/r-tutorial/</link>
      <pubDate>Tue, 29 Oct 2013 22:32:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/10/r-tutorial/</guid>
      <description>仗着自己有几门语言的基础，我在学新语言时候，都会选择一些快速入门教程。 比如 Learn X in Y minuts 就是我经常光顾的站点。 前段时间，小柒在用 R 写数据分析脚本，我就建议她把 Learn X in Y minuts 里面的 R 语言教程翻译出来。话说 Learn X in Y minuts 里面的中文贡献还是非常多的，赞。 Learn X in Y minuts 的源码托管在 Github。 小柒被我逼着把这篇 R 语言教程 翻译到 R 语言教程中文版。 下面是译文，有不妥的地方可以留言或者直接去 Github 上面 Pull request。 R 是一门统</description>
    </item>
    
    <item>
      <title>读《大规模Web服务开发技术》</title>
      <link>https://blog.alswl.com/2013/06/web-technology/</link>
      <pubDate>Sat, 29 Jun 2013 00:17:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/06/web-technology/</guid>
      <description>年前看了这本书《大规模Web服务开发技术》，当时给的评价是： 很好，让我这个渣渣看的很感动，数据翔实，经历可靠，翻译的也不错，我给 4.2 分 现在经历过 Python / Django / 烂代码的阵痛，开始有更多的想法， 在整理这些粗糙的想法之前，我又把这本书翻了一遍，写个流水帐读书笔记。 《大规模Web服务开发技术》@豆瓣： http://book.douban.com/subject/6758780/ 规模 小规模 / 大规模 / 超大规模的侧重点各不相同：保持扩展性/保持冗余/低成本运维/开发合作方便 内存、磁盘、负载 内存</description>
    </item>
    
    <item>
      <title>服务器 Push 技术</title>
      <link>https://blog.alswl.com/2012/05/comet/</link>
      <pubDate>Wed, 30 May 2012 10:40:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/05/comet/</guid>
      <description>服务器 Push 技术表示服务器可以主动推送消息给客户端浏览器。 实现方式 Comet Ajax 轮询 iframe / htmlfile script tag （不中断的连续请求） Flash 通讯 WebSocket Comet 本意是彗星，彗星尾巴痕迹很像长连接工作方式，所以 Comet 指代长连接。 在 Ajax 轮询的分类上，存在一些分歧，这里我把轮询认为一种 Comet 方式。 ps：「长连接」在一些场景下，是另外一种意义「HTTP: Keep alive」。不在本文讨论的范围中。 参考链接： Comet：基于 HTTP 长连接的「服务器推」技术 Socket.IO Supported transports 浏览器支持情况 WebSocket</description>
    </item>
    
    <item>
      <title>再读《重构》</title>
      <link>https://blog.alswl.com/2012/02/refactory/</link>
      <pubDate>Sun, 05 Feb 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/02/refactory/</guid>
      <description>Martin Fowler 的「重构-改善既有代码的设计」这本书，是我大学老师推荐给我的。 当时我在撰写代码过程中，发现当代码量到某个数量级时候（1000+行）， 就会逐渐失去对代码的控制能力。 昆哥推荐了两本书「UML 和模式应用」和「重构」这本书。 这本书是2年前购买的，可惜以我当时的代码感知和撰写能力，看起来颇为吃力。 半途就看得云里雾里而中断了。最近我又重新拾起这本书， 将书中所写的境况与我这两年多来遇到的问题相互印证，才感受</description>
    </item>
    
    <item>
      <title>《卓有成效的程序员》读后感</title>
      <link>https://blog.alswl.com/2011/11/the-productive-programmer/</link>
      <pubDate>Sun, 27 Nov 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/11/the-productive-programmer/</guid>
      <description>《卓有成效的程序员》，上次在京东半价买了这本书，一直没来得及看， 前几周在地铁上把这本书看完了。 说实话，书里面的观点我很赞同，但是没有觉得惊艳， 因为我本身已经在尝试实践这些观点。 书中的这些观点有如下： 加速法则：减少输入次数，用快捷键/方法启用常用操作 专注法则：集中注意力处理工作，避免额外的信息干扰 自动化法则：贯彻&amp;quot;懒&amp;quot;的原则，减少重复劳动 规范性法则：DRY 书中第二部分是撰写代码时</description>
    </item>
    
    <item>
      <title>char nchar varchar nvarchar 区别</title>
      <link>https://blog.alswl.com/2010/07/difference-between-char-nchar-varchar-nvarchar/</link>
      <pubDate>Fri, 16 Jul 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/07/difference-between-char-nchar-varchar-nvarchar/</guid>
      <description>在开发时候，发现数据库的一个字段用的是nchar(16)，让我感觉很奇怪，我知道nvarchar可以变长，nchar会用空格填充，这在存取时候需要Trim( )操作，所以我一直不用nchar。而现在在产品中发现nchar的使用，不由觉得很奇怪。 私底下认为是效率的问题，一番Google之后发现一段文章详述了几种数据库文字类型存储的差异。 原文出处：char nchar varchar nvarchar 区别 - Rainbow - 博客园 联机帮助上的： char(n) 定长 索引效</description>
    </item>
    
    <item>
      <title>正则表达式中的零宽断言</title>
      <link>https://blog.alswl.com/2010/01/regular-expressions-in-the-zero-width-assertion/</link>
      <pubDate>Tue, 26 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/regular-expressions-in-the-zero-width-assertion/</guid>
      <description>这文是上个月开始写的，本来想深入的分析一下零宽断言，可惜工作一直忙，现在又要去转战DWR&amp;hellip;OMG~~ 起因 将要上线的系统中有一个字符规则：&amp;ldquo;13位的字符串，其中有8位连续数字&amp;rdquo;，需要用这则表达式对这个字符串进行判断。而我之前对正则的认识仅仅停留在匹配固定的字符上 ，对这个问题一筹莫展。 这时候热心的小邪出现了，我在他的博客 邪罗刹的菠萝阁 留下这个[问题](http:/</description>
    </item>
    
    <item>
      <title>Oracle PL/SQL编程规范</title>
      <link>https://blog.alswl.com/2010/01/oracle-pl-sql-coding-standards/</link>
      <pubDate>Thu, 14 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/oracle-pl-sql-coding-standards/</guid>
      <description>学习PL/SQL不可避免遇到规范的问题，这里转载一篇比较精的文章。 当然，各个公司和个人有自己的风格和规范，甚至Oracle官方的教程代码也没有完全遵守这些规则，这里只是一个推荐和介绍。 来源：Oracle PL/SQL编程规范指南 - 51CTO.COM 更多参考：SQL,PL/SQL编程规范 - PL/SQL - IT民工杂谈 分割线，Google真汉子 一、PL/SQL编程规范之大小写 就像在SQL中一样，PL / SQL中是不区分大小写的。其一</description>
    </item>
    
    <item>
      <title>python&#43;django MTV框架 和php MVC框架</title>
      <link>https://blog.alswl.com/2009/10/python-django-mtv-framework-and-php-mvc-framework/</link>
      <pubDate>Thu, 01 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/10/python-django-mtv-framework-and-php-mvc-framework/</guid>
      <description>首先，祝福祖国60华诞，我爱这个国家。 刚才在GR读到Here Comes The Sun的[A shorten url app](http://www.classicning.com/blog/2009/09/a-shorten-url-app/-shorten-url- app/)，其中提到了Python下Django框架的一些问题，我很感兴趣，搜索了一下MTV模型，资料很少。但有一篇我读后很有启发，现在转载如下。 原文链接：python+django MTV框架 和php MVC框架的不同之处 - PHP+MYSQL+APACHE - ThinkPHP官方论坛 作者：乔峰 *残酷的分割线 python+django MTV框架 和php MVC框架的不同之处 最近</description>
    </item>
    
    <item>
      <title>编码: ASCII(ANSI), GB-2312, UNICODE, UTF-8，UTF-16</title>
      <link>https://blog.alswl.com/2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/</link>
      <pubDate>Sat, 12 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/</guid>
      <description>ASCII字符集 7位的编码方案，总共表示128个字符，其中包括了大小写英文字母、数字、标点符号等常用字符。英语世界已经足够应付。 ISO-8859-1字符集 也称ISO-Latin字符集，它扩展了ASCII字符集，用到了8bit字节里的最高一位，这样它就有256个字符，前128个字符和ASCII字符集相同 。有了ISO-Latin字符集，西方世界的一些其它语言，如西班牙语、法语、德语、意大利语都够用了。</description>
    </item>
    
    <item>
      <title>中国省份与城市数据SQL</title>
      <link>https://blog.alswl.com/2009/08/zhong-guo-sheng-fen-yu-cheng-shi-shu-ju-sql/</link>
      <pubDate>Sat, 22 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/08/zhong-guo-sheng-fen-yu-cheng-shi-shu-ju-sql/</guid>
      <description>本文来源：中国省份与城市数据插入 - xlx - CSDN博客 在Google找到这个，实在是爱不释手，就转过来了，很多项目都需要用到这些数据。 if exists (select * from sysobjects where id = OBJECT_ID(&#39;[province]&#39;) and OBJECTPROPERTY(id, &#39;IsUserTable&#39;) = 1) DROP TABLE [province] CREATE TABLE [province] ( [id] [int] NOT NULL, [provinceID] [nvarchar] (12) NOT NULL, [province] [nvarchar] (80) NOT NULL) ALTER TABLE [province] WITH NOCHECK ADD CONSTRAINT [PK_province] PRIMARY KEY NONCLUSTERED ( [id] )INSERT [province] ([id],[provinceID],[province]) VALUES ( 1,&amp;lsquo;110000&amp;rsquo;,&amp;lsquo;北京市&amp;rsquo;) INSERT [province] ([id],[provinceID],[province]) VALUES ( 2,&amp;lsquo;120000&amp;rsquo;,&amp;lsquo;天津市&amp;r</description>
    </item>
    
    <item>
      <title>MySQL Command Line Client乱码问题及解决方案</title>
      <link>https://blog.alswl.com/2009/07/mysql-command-line-client-garbled-problems-and-solutions/</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/07/mysql-command-line-client-garbled-problems-and-solutions/</guid>
      <description>以前用MySQL时候都是可视化界面，如MySQL Admin使用，现在学着使用MySQL Command Line client，初次接触，就遇到乱码问题。 乱码是中文字符串的，Google后，找到一些解决方案。摘录如下： 引用自今天去祸害哪家的闺女呢？&amp;lt;猛击这里打开&amp;gt; 1:改变数据库的默认编码配置，在MYSQL的安装目录中，找到my.ini，修改默认编 码为：default-character-set=utf8 2:建</description>
    </item>
    
    <item>
      <title>MYSQL数据类型长度常规的建库策略</title>
      <link>https://blog.alswl.com/2009/06/mysql-data-type-of-the-length-of-conventional-library-strategy/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/mysql-data-type-of-the-length-of-conventional-library-strategy/</guid>
      <description>无论是在小得可怜的免费数据库空间或是大型电子商务网站，合理的设计表结构、充分利用空间是十分必要的。这就要求我们对数据库系统的常用数据类型有充分的认识。下面我 就将我的一点心得写出来跟大家分享。 一、数字类型 数字类型按照我的分类方法分为三类：整数类、小数类和数字类。 我所谓的「数字类」，就是指DECIMAL和NUMERIC，它们是同一种类型。它严格的说不是一种数字类型，因为他们实际上是将数字以字符串形式保</description>
    </item>
    
    <item>
      <title>mysql 数据库导出/导入</title>
      <link>https://blog.alswl.com/2008/10/mysql-database-export-import/</link>
      <pubDate>Thu, 23 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2008/10/mysql-database-export-import/</guid>
      <description>正在学JSP，用的TomCat和MySQL，没有用CSV控制，所以数据库靠导出导入 导出： cd bin; mysqldump -uroot -proot xxx &amp;gt; xxx.sql; 导入： cd bin; create xxx; source xxx.sql;</description>
    </item>
    
  </channel>
</rss>
