<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>综合技术 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E7%BB%BC%E5%90%88%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 综合技术 on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Oct 2013 22:32:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/%E7%BB%BC%E5%90%88%E6%8A%80%E6%9C%AF/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>15 分钟学会 R 语言[译文]</title>
      <link>https://blog.alswl.com/2013/10/r-tutorial/</link>
      <pubDate>Tue, 29 Oct 2013 22:32:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/10/r-tutorial/</guid>
      <description>仗着自己有几门语言的基础，我在学新语言时候，都会选择一些快速入门教程。
比如 Learn X in Y minuts 就是我经常光顾的站点。
前段时间，小柒在用 R 写数据分析脚本，我就建议她把 Learn X in Y minuts 里面的
R 语言教程翻译出来。话说 Learn X in Y minuts 里面的中文贡献还是非常多的，赞。
Learn X in Y minuts 的源码托管在 Github。
小柒被我逼着把这篇 R 语言教程
翻译到 R 语言教程中文版。
下面是译文，有不妥的地方可以留言或者直接去 Github 上面 Pull request。
R 是一门统计语言。它有很多数据分析和挖掘程序包。可以用来统计、分析和制图。
你也可以在 LaTeX 文档中运行 R 命令。
# 评论以 # 开始 # R 语言原生不支持 多行注释 # 但是你可以像这样来多行注释 # 在窗口里按回车键可以执行一条命令 ################################################################### # 不用懂编程就可以开始动手了 ################################################################### data()	# 浏览内建的数据集 data(rivers)	# 北美主要河流的长度（数据集） ls()	# 在工作空间中查看「河流」是否出现 head(rivers)	# 撇一眼数据集 # 735 320 325 392 524 450 length(rivers)	# 我们测量了多少条河流？ # 141 summary(rivers) # Min.</description>
    </item>
    
    <item>
      <title>读《大规模Web服务开发技术》</title>
      <link>https://blog.alswl.com/2013/06/web-technology/</link>
      <pubDate>Sat, 29 Jun 2013 00:17:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/06/web-technology/</guid>
      <description>年前看了这本书《大规模Web服务开发技术》，当时给的评价是：
很好，让我这个渣渣看的很感动，数据翔实，经历可靠，翻译的也不错，我给 4.2 分
现在经历过 Python / Django / 烂代码的阵痛，开始有更多的想法，
在整理这些粗糙的想法之前，我又把这本书翻了一遍，写个流水帐读书笔记。
《大规模Web服务开发技术》@豆瓣： http://book.douban.com/subject/6758780/
规模 小规模 / 大规模 /
超大规模的侧重点各不相同：保持扩展性/保持冗余/低成本运维/开发合作方便
内存、磁盘、负载 内存快，磁盘慢，ＩＯ 速度的差异
数据分布式 使用局部分布式，热数据独立出来。 Partition 分布式，按模块分割数据。 按 ID 分割，比如 a-g, h-z 按访问类型，一般请求 / feed / 图像（#毒药计划的原理） 索引 索引，B 树（是一颗平衡树，log n 速度查找，顺序读取，插入，删除） / Ｂ+
树（节点只保存子节点指针，叶子保存数据）
使用 MySQL 索引的语句：
where order by group by 多个查询时候要使用复合索引，每次查询只会走单一一个索引。
算法 感受算法 log n, 线性的差距。
字符匹配 正则到 Trie
贝叶斯匹配 全文搜索 逆向索引
基础设施 云 / 自己构建 评估服务器性能极限 负载跟踪：平均负载 / 内存 / CPU 信息 冗余 Web 服务器冗余 DB 冗余 存储系统 维稳 功能增加 / 内存泄漏 特定 URL 的地雷，资源循环 访问暴增 数据量增加 外部 API 稳定（新浪等） 硬件故障 对策 保持余量， 在 70% 极限内运行 异常时候的自动重启 / 自动中止耗时查询 虚拟化 解除物理限制 软件层面主机控制 番外： 寻找瓶颈 调优的意义：「找出负载原因并去除」</description>
    </item>
    
    <item>
      <title>服务器 Push 技术</title>
      <link>https://blog.alswl.com/2012/05/comet/</link>
      <pubDate>Wed, 30 May 2012 10:40:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/05/comet/</guid>
      <description>服务器 Push 技术表示服务器可以主动推送消息给客户端浏览器。
实现方式 Comet Ajax 轮询 iframe / htmlfile script tag （不中断的连续请求） Flash 通讯 WebSocket Comet 本意是彗星，彗星尾巴痕迹很像长连接工作方式，所以 Comet 指代长连接。
在 Ajax 轮询的分类上，存在一些分歧，这里我把轮询认为一种 Comet 方式。
ps：「长连接」在一些场景下，是另外一种意义「HTTP: Keep alive」。不在本文讨论的范围中。
参考链接：
Comet：基于 HTTP 长连接的「服务器推」技术 Socket.IO Supported transports 浏览器支持情况 WebSocket 属于 HTML5 规范，需要「先进」浏览器支持，
Flash 通讯需要浏览器安装 Flash 插件，其他方式都可以适应常见浏览器。
参考连接：
HTTP持久链接 [Comet (programming)](http://en.wikipedia.org/wiki/Comet_(programming)) 一个误解: 单个服务器程序可承受最大连接数「理论」上是「65535」 How to implement COMET with PHP 各大网站连接情况 可以通过 url 请求来揣测一些东西，比如说，它们没有用 WebSocket，
否则 FireBug 是无法监测的，WebSocket 可以双向通讯。
新浪微博 未读信息链接： http://rm.api.weibo.com/remind/unread_count.json?target=api&amp;amp;_pid=10001&amp;amp;count=2&amp;amp;source=3818214747&amp;amp;callback=STK_133834300664875
未读信息大约每20秒触发一次，像是 Ajax 轮询。</description>
    </item>
    
    <item>
      <title>再读《重构》</title>
      <link>https://blog.alswl.com/2012/02/refactory/</link>
      <pubDate>Sun, 05 Feb 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/02/refactory/</guid>
      <description>Martin Fowler 的「重构-改善既有代码的设计」这本书，是我大学老师推荐给我的。
当时我在撰写代码过程中，发现当代码量到某个数量级时候（1000+行），
就会逐渐失去对代码的控制能力。
昆哥推荐了两本书「UML 和模式应用」和「重构」这本书。
这本书是2年前购买的，可惜以我当时的代码感知和撰写能力，看起来颇为吃力。 半途就看得云里雾里而中断了。最近我又重新拾起这本书，
将书中所写的境况与我这两年多来遇到的问题相互印证，才感受到这本经典的力量。
Martin 其人：
ThoughtWorks 的首席科学家，当今世界软件开发领域最具影响力的五位大师之一。
他在 UML 推广普及、领域建模、企业应用开发和敏捷方法等方面建树卓著，被称为软件开发的教父。
大学时候有段时间我对 Martin 的敏捷非常痴迷。现在对技术的选择没以前那么冲动了， 但是毫不妨碍我对 Martin 的敬仰之情。
1. 重构原则 1.1. 重构的定义 对软件内部结构的一种调整，目的是在不改变&amp;quot;软件之可察行为&amp;quot;前提下，提高其可理解性，降低其修改成本。
重构就是在代码写好之后改进它的设计。
重构和添加新功能并不冲突，但是当开发者身份在两者之间切换时候，不能混淆在一起。 1.2. 重构的意义 优秀设计的根本是：消除重复部分！（DRY = Don&amp;rsquo;t repeat yourself） 重构让代码更清晰，更容易理解 清晰的代码可以更方便的找到 bug ，重构可以写出更强健的代码 良好的设计可以在长远时间上提高开发速度 1.3. 重构的时间 随时进行重构（在我看来，重构更是一种开发的习惯） 事不过三，代码重复不要超过三次（否则就要&amp;quot;抽&amp;quot;出来） 添加功能时候并一一重构（个人理解是，添加新功能之前，分析并重构，从而更方便添加新功能） 修补错误时 Code Review 时 1.4. 重构和开发进度 重构的意义之一也是提高开发进度。杀手锏是&amp;quot;不要告诉经理&amp;quot;。
1.5. 重构的难题 数据层（数据模型）的变更压力 修改接口 那些难以通过重构改变的设计改动 代码不能运行 项目期限压力 Deadline 1.6. 重构与设计 编程不是机械的开发，（软件开发是艺术行为！） 设计和重构的平衡（预先设计的难度和重构灵活性的平衡） 1.7. 重构与性能 重构确实会在短期内降低代码执行效率，但优化阶段是可以调整的，而且调整会更容易。 提前优化是万恶之源 1.</description>
    </item>
    
    <item>
      <title>《卓有成效的程序员》读后感</title>
      <link>https://blog.alswl.com/2011/11/the-productive-programmer/</link>
      <pubDate>Sun, 27 Nov 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/11/the-productive-programmer/</guid>
      <description>《卓有成效的程序员》，上次在京东半价买了这本书，一直没来得及看， 前几周在地铁上把这本书看完了。
说实话，书里面的观点我很赞同，但是没有觉得惊艳， 因为我本身已经在尝试实践这些观点。
书中的这些观点有如下：
加速法则：减少输入次数，用快捷键/方法启用常用操作 专注法则：集中注意力处理工作，避免额外的信息干扰 自动化法则：贯彻&amp;quot;懒&amp;quot;的原则，减少重复劳动 规范性法则：DRY 书中第二部分是撰写代码时候的一些意识，这些我就不复述了， 是比较常见的软件工程思想。这些思想由ThoughWorks的咨询师娓娓道来也是值得一看的。 我觉得这本书在学完第一门语言/数据结构/操作系统之后就可以开始阅读。 也就是学生在大三-大四阶段阅读，会对代码撰写规范和风格形成大有帮助。</description>
    </item>
    
    <item>
      <title>char nchar varchar nvarchar 区别</title>
      <link>https://blog.alswl.com/2010/07/difference-between-char-nchar-varchar-nvarchar/</link>
      <pubDate>Fri, 16 Jul 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/07/difference-between-char-nchar-varchar-nvarchar/</guid>
      <description>在开发时候，发现数据库的一个字段用的是nchar(16)，让我感觉很奇怪，我知道nvarchar可以变长，nchar会用空格填充，这在存取时候需要Trim(
)操作，所以我一直不用nchar。而现在在产品中发现nchar的使用，不由觉得很奇怪。
私底下认为是效率的问题，一番Google之后发现一段文章详述了几种数据库文字类型存储的差异。
原文出处：char nchar varchar nvarchar 区别 - Rainbow - 博客园
联机帮助上的：
char(n)
定长
索引效率高 程序里面使用trim去除多余的空白
n 必须是一个介于 1 和 8,000 之间的数值,存储大小为 n 个字节
varchar(n)
变长
效率没char高 灵活
n 必须是一个介于 1 和 8,000 之间的数值。存储大小为输入数据的字节的实际长度，而不是 n 个字节
text(n)
变长
非Unicode数据
nchar(n)
定长
处理unicode数据类型(所有的字符使用两个字节表示)
n 的值必须介于 1 与 4,000 之间。存储大小为 n 字节的两倍
nvarchar(n)
变长
处理unicode数据类型(所有的字符使用两个字节表示)
n 的值必须介于 1 与 4,000 之间。字节的存储大小是所输入字符个数的两倍。所输入的数据字符长度可以为零
ntext(n)
变长
处理unicode数据类型(所有的字符使用两个字节表示)
1、CHAR。 CHAR存储定长数据很方便，CHAR字段上的索引效率级高，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间,不足
的自动用空格填充，所以在读取的时候可能要多次用到trim（）。
2、VARCHAR。 存储变长数据，但存储效率没有CHAR高。如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为 VARCHAR(10)是最合算的。
VARCHAR类型的实际长度是它的值的实际长度+1。为什么&amp;quot;+1&amp;quot;呢？这一个字节用于保存实际使用了多大的长度。从空间上考虑，用varchar合适；从效率上考</description>
    </item>
    
    <item>
      <title>正则表达式中的零宽断言</title>
      <link>https://blog.alswl.com/2010/01/regular-expressions-in-the-zero-width-assertion/</link>
      <pubDate>Tue, 26 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/regular-expressions-in-the-zero-width-assertion/</guid>
      <description>这文是上个月开始写的，本来想深入的分析一下零宽断言，可惜工作一直忙，现在又要去转战DWR&amp;hellip;OMG~~
起因 将要上线的系统中有一个字符规则：&amp;ldquo;13位的字符串，其中有8位连续数字&amp;rdquo;，需要用这则表达式对这个字符串进行判断。而我之前对正则的认识仅仅停留在匹配固定的字符上
，对这个问题一筹莫展。
这时候热心的小邪出现了，我在他的博客 邪罗刹的菠萝阁
留下这个[问题](http://www.evlos.org/2010/01/05/use-regex-to-clear-the-mix-of-tag-
img/#comment-5968)
小邪很热心的撰写了一篇文章给出回答： 一个杯具和一个洗具与最近学习手记 :
邪罗刹的菠萝阁。
解答 核心字符串如下： &amp;lsquo;/^(?!(.?d){9,})(?!(.?D){6,}).{13}$/&amp;rsquo;;
小邪的文章给了很详细的解答，比我自己解释要好得多～我就索性copy过来，如下：
小邪是这个样子解答的，首先两边的斜杠是 Perl 正则式的要求。
然后两边的 ^ 和 $ 用来表示对应的是字符串的开始和结束。
接着 .{13}，. 表示除了换行以外的所有字符，13 规定了匹配长度。
我们这里前面用了两次零宽断言，第一次，(?!exp) 这里的 exp 是 (.*?d){9,}。
表示数字的个数大于等于 9，零宽断言把它反过来就是数字的个数小于 9。
第二次 exp 是 (.*?D){6,} 表示非数字大于等于 6 个以上。
即表示非数字的个数大于等于 6，把它反过来就是非数字的个数小于 6。
而这里.*表示 ?d 和 ?D 的前面可能有零次或更多次的其他字符。
而这里的 ? 表示这段连续的字符会重复零次或一次。
Python下的实现和测试代码 import re def fun(p, datas): for data in datas: print p.match(data) if __name__ == &amp;#39;__main__&amp;#39;: p = re.</description>
    </item>
    
    <item>
      <title>Oracle PL/SQL编程规范</title>
      <link>https://blog.alswl.com/2010/01/oracle-pl-sql-coding-standards/</link>
      <pubDate>Thu, 14 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/oracle-pl-sql-coding-standards/</guid>
      <description>学习PL/SQL不可避免遇到规范的问题，这里转载一篇比较精的文章。
当然，各个公司和个人有自己的风格和规范，甚至Oracle官方的教程代码也没有完全遵守这些规则，这里只是一个推荐和介绍。
来源：Oracle PL/SQL编程规范指南 -
51CTO.COM
更多参考：SQL,PL/SQL编程规范 - PL/SQL -
IT民工杂谈
分割线，Google真汉子
一、PL/SQL编程规范之大小写 就像在SQL中一样，PL / SQL中是不区分大小写的。其一般准则如下：
关键字(BEGIN, EXCEPTION, END, IF THEN ELSE,LOOP, END LOOP)、数据类型(VARCHAR2, NUMBER)、内部函数(LEAST,
SUBSTR)和用户定义的子程序(procedures, functions,packages)，使用大写。
变量名以及SQL中的列名和表名，使用小写。
二、PL/SQL编程规范之空白 空白（空行和空格）在PL/SQL中如同在SQL中一样重要，因为它是提高代码可读性的一个重要因素。换句话说，可以通过在代码中使用缩进来体现程序的逻辑结构。以下
是一些建议：
在等号或比较操作符的左右各留一个空格；
结构词（DECLARE, BEGIN, EXCEPTION, END,IF and END IF, LOOP and END LOOP）居左排列。另外，结构中的嵌套结构要缩进三个空格（使用空格键，而不是Tab键）；
主要代码段之间用空行隔开；
把同一结构的不同逻辑部分分开写在独立的行，即使这个结构很短。例如，IF和THEN被放在同一行，而ELSE 和END IF则放在独立的行。
三、PL/SQL编程规范之命名约定 使用以下前缀对于避免与关键字和表名列名相冲突是很有帮助的：
v_变量名
con_常量名
i_输入参数名，o_输出参数名，io_输入输出参数名
c_游标名 或者 游标名_cur
rc_ Ref Cursor名
r_Record名 或者 Record名_rec
FOR r_stud IN c_stud LOOP…
FOR stud_rec IN stud_cur LOOP</description>
    </item>
    
    <item>
      <title>python&#43;django MTV框架 和php MVC框架</title>
      <link>https://blog.alswl.com/2009/10/python-django-mtv-framework-and-php-mvc-framework/</link>
      <pubDate>Thu, 01 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/10/python-django-mtv-framework-and-php-mvc-framework/</guid>
      <description>首先，祝福祖国60华诞，我爱这个国家。
刚才在GR读到Here Comes The Sun的[A shorten url
app](http://www.classicning.com/blog/2009/09/a-shorten-url-app/-shorten-url-
app/)，其中提到了Python下Django框架的一些问题，我很感兴趣，搜索了一下MTV模型，资料很少。但有一篇我读后很有启发，现在转载如下。
原文链接：python+django MTV框架 和php MVC框架的不同之处 - PHP+MYSQL+APACHE -
ThinkPHP官方论坛
作者：乔峰
*残酷的分割线
python+django MTV框架 和php MVC框架的不同之处 最近学习了python语言和djangoMTV框架，感觉用的很爽啊。这里给大家粗略的介绍一下。
Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的设计模式，即模型M，模版T和视图控制器V。它最初是被开发来用于管理劳伦斯出版
集团旗下的一些以新闻内容为主的网站的。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。
Django的主要目标是使得开发复杂的、数据库驱动的网站变得简单。Django注重组件的重用性和「可插拔性」，敏捷开发和DRY法则（Don&amp;rsquo;t Repeat
Yourself）。在Django中Python被普遍使用，甚至包括配置文件和数据模型。
关键一点是Django框架把控制层(Ctronl layer)给封装了，无非与数据交互这层都是数据库表的读,写,删除,更新的操作.在写程序的时候，只要调用方
法就行了.感觉很方便.用户可以用很少的代码完成很多的事情.代码可读性强.运行的速度比php要快.
python是嵌入式的语言,它可以把C和JAVA语言的写的东西结合在一起.也难怪Google公司主导议语言用python,c++,java的比较多.大的公司
比较重视系统管理和总体的架构.
有人说最有发展的语言是python,不过都值得大家去探讨的.因为结果都很预料,前段时间闹的很热的是Ruby语言,Ruby刚出来时,传说也很了得,现在看起来也
不怎么行了.
Python的前景 Python在编程领域的占有率一直处于稳步上升之中，根据最新的数据，Python排名第七。前六名分别是Java,C,VB,C++,PHP和Perl.
作为一个很年轻的语言，Python的位置已经相当令人振奋了。随着微软将Python纳入.Net 平台，相信Python的将来会更加强劲发展。Python
很可能会成为.Net平台快速开发的主流语言。
欲了解这方面情况，请参考Iron Python的相关信息.
著名的搜索引擎 Google 也大量使用Python。 现在中国的搜狐(sohu)网站邮箱系统也是用python开发的.更加令人吃惊的是，在Nokia智能手
机所采用的Symbian操作系统上，Python成为继C++,Java之后的第三个编程语言！可见Python的影响力之巨大。
我在学python语言和django MTV框架的一点体会,拿来教程,都说该语言如何简单易学,都是乱说,入门很简单,想要学深点,都不容易的.
个人感觉还是学PHP入门时最简单,不过现在弄出哪么框架,组件,也变得越来越不简单,PHP也越来越像JAVA的儿子JSP(当然PHP是C语言的儿子),个人觉得
他们越来越接近,但又有好多差异.
python语言不仅可以做WEB应用,而且可以做桌面,服务器软件和手机软件开发(有的诺基亚手机系统就是用python做的),而PHP专注做WEB 应用的,P
HP开发祖师也为PHP为什么不能转向照顾到做桌面,服务器软件和手机软件开发的应用听说也苦耐了好久,但最终没能成功转型.哪是因为他们在最初的底层定位搞死了(网
上评论观点).
不过我看到网上语言排名,PHP在Python之前,也说明PHP在近期表现不俗.
我喜欢用Python,Django,也很喜欢用php,thinkphp,特别是升级后的1.5版,但是可不可也做成MTV的框架模式呢.用精良的代码完成很多工作
.加快开发速度呢.大家都要努力哦.加油兄弟们.
2楼回复： 美國太空總署NASA使用Python，Google使用Python，Youtube使用Python.阿里巴巴也用python开发,搜狐邮箱是用python2
.6开发的
5楼回复： MVC与MTV有什么不同呢.
大家都知道
MVC 中的M是代表MODLE层,V代表VIEW层,C代表Contrl层.
MTV 中的M是代表MODLE层,T代表Template(模板层),V代表VIEW层.</description>
    </item>
    
    <item>
      <title>编码: ASCII(ANSI), GB-2312, UNICODE, UTF-8，UTF-16</title>
      <link>https://blog.alswl.com/2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/</link>
      <pubDate>Sat, 12 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/</guid>
      <description>ASCII字符集 7位的编码方案，总共表示128个字符，其中包括了大小写英文字母、数字、标点符号等常用字符。英语世界已经足够应付。
ISO-8859-1字符集 也称ISO-Latin字符集，它扩展了ASCII字符集，用到了8bit字节里的最高一位，这样它就有256个字符，前128个字符和ASCII字符集相同
。有了ISO-Latin字符集，西方世界的一些其它语言，如西班牙语、法语、德语、意大利语都够用了。
GB系列字符集（GB2312，GBK，GB18030） 由于一个字节是无论如何也表达不了哪怕是最长用的汉字字符集的，所以为了用计算机存储汉字，必须使用多个字节。
多字节字符集就是使用可变长的编码长度来编码字符，有的字符用一个字节编码，比如ASCII字符，有的字符用两个字节编码，比如汉字。在VC里，多字节字符集等同于双
字节字符集，VC不支持多于2个字节编码长度的字符。GB系列的字符集和ISO-Latin字符集一样，前128个字符和ASCII字符集相同。GB系列字符集是兼容
的，相同的中文字符在这3个字符集里有相同的编码。GB2312和GBK一个字符最多2个字节表示，GB18030可多达4个字节。在这种编码里表示汉字时，需要一个
leading byte，它总是大于127，这个字节的含义是说明它和后面的字节（们）一起表示一个字符。
这些字符集（ISO-Latin字符集，GB系列字符集）都是以ASCII为基础扩展而来，统称为ANSI字符集。
记事本在默认情况下（选择ANSI编码）就是使用多字节字符集保存文件的，至于使用的是GB2312，GBK，还是GB18030我不清楚。
Unicode字符集 每个地区的人都试图扩展ASCII编码来支持本地的语言，最终的结果是导致互不兼容。因为除了最低的128个字符相同以外，其它的字符都使用自己特殊的编码方案。
当使用与文件保存时的编码方案不同的编码来读取文件时，就会产生错误——比如Windows记事本那个著名的「联通BUG」。
统一所有字符的编码是Unicode被设计出来的初衷。
长久以来，Unicode在我心中的概念就是：使用2个字节来编码字符，使用Unicode可以表示世界上所有的字符。但这种理解并不准确！
其实Unicode可以看成是一种理想：这种理想就是世界上的所有字符都只有一个唯一的标识！至于怎样去实现这种理想，有很多的实现方式：UTF-
8,UTF-16,UTF-32,甚至在Unicode标准里还介绍了一种压缩的实现方式。Unicode把这个唯一的标识称之为代码点（code
point），字符的代码点以U+XXXX的方式表示，这个可以打开Windows自带的字符映射表看得到。
Unicode最初被设计出来的时候希望使用2个字节就可以表示世界上的所有字符。因此，实现Unicode最直接的想法就是用两个字节来存储一个字符，如果大家都这
么想就好了，这样一个字符就可以用2个字节长的短整形来存储。但是偏偏还有一个叫做大端小端东西存在，这样2个字节的短整型在内存中的表示顺序就有2种可能，这就是为
什么当用记事本保存文本文件时可以选择Unicode或者Unicode big endian的原因。
1个字符=2个字节在现实中却遇到了麻烦。一方面，用2个字节表示一个字符，浪费了大量的空间（如果仅仅用来存储ISO-
Latin字符集里的字符的话），而且还会有大端小端的问题，解决的方案是UTF-
8编码；另一方面，人们在实践中发现即使用2个字节编码也无法表示所有字符，因此出现了UTF- 16。UTF-16除了使用2个字节编码外，还使用一对2个字节来表
示Unicode里很少用到的字符；另外还有UTF-32，它使用单独的4个字节来编码所有的Unicode字符。
UTF-8编码 我想最早提出UTF-8的一定是美国人，「用2个字节来表示一个英语字母这太浪费了！」，他们肯定会这么说的。顾名思义，那个8说明UTF-
8编码中最小的单位是8bit的字节。采用UTF-
8编码，Unicode代码点中U+007F以下（包含U+007F）的字符用一个字节编码，其它的字符用多个字节编码，最多一个字符用4个字节编码。这样UTF-
8兼容ASCII，但是不兼容ISO-Latin字符集。
Unicode字符采用UTF-8编码方案时的对照表 U-00000000 - U-0000007F: 0xxxxxxx
U-00000080 - U-000007FF: 110xxxxx 10xxxxxx
U-00000800 - U-0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx
U-00010000 - U-001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
U-00200000 - U-03FFFFFF: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
U-04000000 - U-7FFFFFFF: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</description>
    </item>
    
    <item>
      <title>中国省份与城市数据SQL</title>
      <link>https://blog.alswl.com/2009/08/zhong-guo-sheng-fen-yu-cheng-shi-shu-ju-sql/</link>
      <pubDate>Sat, 22 Aug 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/08/zhong-guo-sheng-fen-yu-cheng-shi-shu-ju-sql/</guid>
      <description>本文来源：中国省份与城市数据插入 - xlx - CSDN博客
在Google找到这个，实在是爱不释手，就转过来了，很多项目都需要用到这些数据。
if exists (select * from sysobjects where id = OBJECT_ID(&#39;[province]&#39;) and OBJECTPROPERTY(id, &#39;IsUserTable&#39;) = 1) DROP TABLE [province] CREATE TABLE [province] (
[id] [int] NOT NULL,
[provinceID] [nvarchar] (12) NOT NULL,
[province] [nvarchar] (80) NOT NULL)
ALTER TABLE [province] WITH NOCHECK ADD CONSTRAINT [PK_province] PRIMARY KEY
NONCLUSTERED ( [id] )INSERT [province] ([id],[provinceID],[province]) VALUES (
1,&amp;lsquo;110000&amp;rsquo;,&amp;lsquo;北京市&amp;rsquo;)
INSERT [province] ([id],[provinceID],[province]) VALUES ( 2,&amp;lsquo;120000&amp;rsquo;,&amp;lsquo;天津市&amp;rsquo;)
INSERT [province] ([id],[provinceID],[province]) VALUES ( 3,&amp;lsquo;130000&amp;rsquo;,&amp;lsquo;河北省&amp;rsquo;)</description>
    </item>
    
    <item>
      <title>MySQL Command Line Client乱码问题及解决方案</title>
      <link>https://blog.alswl.com/2009/07/mysql-command-line-client-garbled-problems-and-solutions/</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/07/mysql-command-line-client-garbled-problems-and-solutions/</guid>
      <description>以前用MySQL时候都是可视化界面，如MySQL Admin使用，现在学着使用MySQL Command Line client，初次接触，就遇到乱码问题。
乱码是中文字符串的，Google后，找到一些解决方案。摘录如下：
引用自今天去祸害哪家的闺女呢？&amp;lt;猛击这里打开&amp;gt;
1:改变数据库的默认编码配置，在MYSQL的安装目录中，找到my.ini，修改默认编
码为：default-character-set=utf8
2:建立数据库时，CREATE DATABASE ms_db CHARACTER SET utf8 COLLATE
utf8_general_ci;
3:执行脚本：指定编码格式set names utf8(注意，不是UTF-8)
4:如果你采用的是外部接入的方式，在连接中确定请求的编码格式如：
jdbc:mysql://localhost:3306 /ms_db?
useUnicode=true&amp;amp;characterEncoding=UTF-8(不要出现任何空格，否则出错)
我使用的是第3种方法，由于我的数据库是Hibernate生成的，所以编码集改为utf8依然乱码，使用gbk就可以了。</description>
    </item>
    
    <item>
      <title>MYSQL数据类型长度常规的建库策略</title>
      <link>https://blog.alswl.com/2009/06/mysql-data-type-of-the-length-of-conventional-library-strategy/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/mysql-data-type-of-the-length-of-conventional-library-strategy/</guid>
      <description>无论是在小得可怜的免费数据库空间或是大型电子商务网站，合理的设计表结构、充分利用空间是十分必要的。这就要求我们对数据库系统的常用数据类型有充分的认识。下面我
就将我的一点心得写出来跟大家分享。
一、数字类型 数字类型按照我的分类方法分为三类：整数类、小数类和数字类。
我所谓的「数字类」，就是指DECIMAL和NUMERIC，它们是同一种类型。它严格的说不是一种数字类型，因为他们实际上是将数字以字符串形式保存的；他的值的每
一位（包括小数点）占一个字节的存储空间，因此这种类型耗费空间比较大。但是它的一个突出的优点是小数的位数固定，在运算中不会「失真」，所以比较适合用于「价格」、
「金额」这样对精度要求不高但准确度要求非常高的字段。
小数类，即浮点数类型，根据精度的不同，有 FLOAT（单精度）和DOUBLE（双精度）两种。它们的优势是精确度，FLOAT可以表示绝对值非常小、小到约
1.17E- 38 （0.000&amp;hellip;0117， 小数点后面有37个零）的小数，而DOUBLE更是可以表示绝对值小到约 2.22E- 308
（0.000&amp;hellip;0222， 小数点后面有307个零）的小数。FLOAT类型和DOUBLE类型占用存储空间分别是4字节和8字节。如果需要用到小数的字段，精度
要求不高的，当然用FLOAT了！可是说句实在话，我们「民用」的数据，哪有要求精度那么高的呢？这两种类型至今我没有用过——我还没有遇到适合于使用它们的事例。
用的最多的，最值得精打细算的，是整数类型。从只占一个字节存储空间的TINYINT到占8个字节的
BIGINT，挑选一个「够用」并且占用存储空间最小的类型是设计数据库时应该考虑的。TINYINT、SMALLINT、MEDIUMINT、INT和
BIGINT占用存储空间分别为1字节、2字节、3字节、4字节和8字节，就无符号的整数而言，这些类型能表示的最大整数分别为255、65535、 1677721
5、4294967295和18446744073709551615。如果用来保存用户的年龄（举例来说，数据库中保存年龄是不可取的），用TINYINT就够了；
九城的《纵横》里，各项技能值，用SMALLINT也够了；如果要用作一个肯定不会超过16000000行的表的
AUTO_INCREMENT的IDENTIFY字段，当然用 MEDIUMINT 不用 INT
，试想，每行节约一个字节，16000000行可以节约10兆多呢！
二、日期时间类型 日期和时间类型比较简单，无非是 DATE、TIME、DATETIME、TIMESTAMP
和YEAR等几个类型。只对日期敏感，而对时间没有要求的字段，就用DATE而不用DATETIME是不用说的了；单独使用时间的情况也时有发生——使用
TIME；但最多用到的还是用DATETIME。在日期时间类型上没有什么文章可做，这里就不再详述。
三、字符（串）类型 不要以为字符类型就是 CHAR！CHAR和VARCHAR的区别在于CHAR是固定长度，只要你定义一个字段是CHAR(10),那么不论你存储的数据是否达到了1
0个字节，它都要占去10个字节的空间；而VARVHAR则是可变长度的，如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为
VARCHAR(10)是最合算的，VARCHAR 类型的实际长度是它的值的(实际长度+1)。为什么「+1」呢？这一个字节用于保存实际使用了多大的长度呀！从这
个「+1」中也应该看到，如果一个字段，它的可能值最长是10个字符，而多数情况下也就是用到了10个字符时，用
VARCHAR就不合算了：因为在多数情况下，实际占用空间是11个字节，比用CHAR(10)还多占用一个字节！
举个例子，就是一个存储股票名称和代码的表，股票名称绝大部分是四个字的，即8个字节；股票代码，上海的是六位数字，深圳的是四位数字。这些都是固定长度的，股票名称
当然要用CHAR(8 )；股票代码虽然是不固定长度，但如果使用VARVHAR(6)，一个深圳的股票代码实际占用空间是5个字节，而一个上海的股票代码要占用7个
字节！考虑到上海的股票数目比深圳的多，那么用VARCHAR(6)就不如CHAR(6)合算了。
虽然一个CHAR或
VARVHAR的最大长度可以到255，我认为大于20的CHAR是几乎用不到的——很少有大于20个字节长度的固定长度的东东吧？不是固定长度的就用 VARCHA
R！大于100的VARCHAR也是几乎用不到的——比这更大的用TEXT就好了。TINYTEXT，最大长度为255，占用空间也是(实际长度+1)；TEXT，最
大长度65535，占用空间是(实际长度+2)；MEDIUMTEXT，最大长度16777215，占用空间是(实际长度+3)；LONGTEXT，最大长度4294
967295，占用空间是(实际长度+4)。为什么「+1」？「+2」？「+3」？「+4」？你要是还不知道就该打PP了。这些可以用在论坛啊、新闻啊，什么的，用来
保存文章的正文。根据实际情况的不同，选择从小到大的不同类型。
四、枚举和集合类型 枚举（ENUM）类型，最多可以定义65535种不同的字符串从中做出选择，只能并且必须选择其中一种，占用存储空间是一个或两个字节，由枚举值的数目决定；集合（S
ET）类型，最多可以有64个成员，可以选择其中的零个到不限定的多个，占用存储空间是一个到八个字节，由集合可能的成员数目决定。
举个例子来说，在SQLServer中，你可以节约到用一个Bit类型来表示性别（男/女），但MySQL没有Bit，用TINTINT？不，可以用
ENUM(帅哥,美眉)！只有两种选择，所以只需一个字节——跟TINYINT一样大，但却可以直接用字符串帅哥和美眉来存取。真是太方便啦！
好了，MySQL的数据类型介绍得差不多，我的建库策略也随着介绍数据类型介绍给大家一些。但这只是其中一部分，篇幅有限，不能再细说；其他的，就靠各人在对数据类型
理解的基础上，多多实践、多多讨论。
转载自YD631.com&amp;lt;猛击这里打开&amp;gt;，原始作者信息不详，
感谢该作者的文章。</description>
    </item>
    
    <item>
      <title>mysql 数据库导出/导入</title>
      <link>https://blog.alswl.com/2008/10/mysql-database-export-import/</link>
      <pubDate>Thu, 23 Oct 2008 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2008/10/mysql-database-export-import/</guid>
      <description>正在学JSP，用的TomCat和MySQL，没有用CSV控制，所以数据库靠导出导入
导出：
cd bin;
mysqldump -uroot -proot xxx &amp;gt; xxx.sql;
导入：
cd bin;
create xxx;
source xxx.sql;</description>
    </item>
    
  </channel>
</rss>
