<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rabbitmq on Log4D</title>
    <link>https://blog.alswl.com/tags/rabbitmq/</link>
    <description>Recent content in Rabbitmq on Log4D</description>
    <generator>Hugo -- 0.125.6</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 30 May 2012 10:40:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/rabbitmq/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务器 Push 技术</title>
      <link>https://blog.alswl.com/2012/05/comet/</link>
      <pubDate>Wed, 30 May 2012 10:40:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/05/comet/</guid>
      <description>服务器 Push 技术表示服务器可以主动推送消息给客户端浏览器。 实现方式 Comet Ajax 轮询 iframe / htmlfile script tag （不中断的连续请求） Flash 通讯 WebSocket Comet 本意是彗星，彗星尾巴痕迹很像长连接工作方式，所以 Comet 指代长连接。 在 Ajax 轮询的分类上，存在一些分歧，这里我把轮询认为一种 Comet 方式。 ps：「长连接」在一些场景下，是另外一种意义「HTTP: Keep alive」。不在本文讨论的范围中。 参考链接： Comet：基于 HTTP 长连接的「服务器推」技术 Socket.IO Supported transports 浏览器支持情况 WebSocket</description>
      <content:encoded><![CDATA[<p>服务器 Push 技术表示服务器可以主动推送消息给客户端浏览器。</p>
<h2 id="实现方式">实现方式</h2>
<ul>
<li>Comet
<ul>
<li>Ajax 轮询</li>
<li>iframe / htmlfile</li>
<li>script tag （不中断的连续请求）</li>
<li>Flash 通讯</li>
</ul>
</li>
<li>WebSocket</li>
</ul>
<p>Comet 本意是彗星，彗星尾巴痕迹很像长连接工作方式，所以 Comet 指代长连接。
在 Ajax 轮询的分类上，存在一些分歧，这里我把轮询认为一种 Comet 方式。</p>
<p>ps：「长连接」在一些场景下，是另外一种意义「HTTP: Keep alive」。不在本文讨论的范围中。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">Comet：基于 HTTP 长连接的「服务器推」技术</a></li>
<li><a href="http://socket.io/#browser-support">Socket.IO Supported transports</a></li>
</ul>
<!-- more -->
<h3 id="浏览器支持情况">浏览器支持情况</h3>
<p>WebSocket 属于 HTML5 规范，需要「先进」浏览器支持，
Flash 通讯需要浏览器安装 Flash 插件，其他方式都可以适应常见浏览器。</p>
<p>参考连接：</p>
<ul>
<li><a href="http://zh.wikipedia.org/wiki/HTTP%E6%8C%81%E4%B9%85%E9%93%BE%E6%8E%A5">HTTP持久链接</a></li>
<li>[Comet (programming)](<a href="http://en.wikipedia.org/wiki/Comet_(programming">http://en.wikipedia.org/wiki/Comet_(programming</a>))</li>
<li><a href="http://www.cnblogs.com/tianzhiliang/archive/2011/06/13/2079564.html">一个误解: 单个服务器程序可承受最大连接数「理论」上是「65535」</a></li>
<li><a href="http://www.zeitoun.net/articles/comet_and_php/start">How to implement COMET with PHP</a></li>
</ul>
<h2 id="各大网站连接情况">各大网站连接情况</h2>
<p>可以通过 url 请求来揣测一些东西，比如说，它们没有用 WebSocket，
否则 FireBug 是无法监测的，WebSocket 可以双向通讯。</p>
<h3 id="新浪微博">新浪微博</h3>
<p>未读信息链接： <code>http://rm.api.weibo.com/remind/unread_count.json?target=api&amp;_pid=10001&amp;count=2&amp;source=3818214747&amp;callback=STK_133834300664875</code></p>
<p>未读信息大约每20秒触发一次，像是 Ajax 轮询。</p>
<p>IM 长连接：
<code>http://4.46.web1.im.weibo.com/im?jsonp=parent.org.cometd.script._callback5&amp;message=%5B%7B%22channel%22%3A%22%2Fmeta%2Fconnect%22%2C%22connectionType%22%3A%22callback-polling%22%2C%22id%22%3A6%2C%22clientId%22%3A%22b02qp9qw9cgiuxxyn3%22%7D%5D&amp;1338343019008</code></p>
<p>可以看出新浪在使用 JSONP 跨域做 IM 长连接，FireBug 中也始终有链接请求，
看上去像 Script Tag 请求方式。</p>
<h3 id="知乎">知乎</h3>
<p>请求链接：
<code>http://comet.zhihu.com/update?loc=http%3A%2F%2Fwww.zhihu.com%2F&amp;channel=13781e6817833300f0a70f19&amp;callback=zhp13781e6a6f22349b9865b47c8</code></p>
<p>依然能在 FireBug 中看到请求地址，说明客户端请求数据还是走 HTTP 方式，
并且会出现 update 动作链接一直出于请求状态，猜测知乎仍然使用 Script Tag 请求。</p>
<h2 id="框架支持">框架支持</h2>
<h3 id="orbited2">orbited2</h3>
<p><a href="http://labs.gameclosure.com/orbited2/">http://labs.gameclosure.com/orbited2/</a></p>
<ul>
<li>跨浏览器</li>
<li>容易集成：IRC / XMPP / ActiveMQ / RabbitMQ</li>
<li>Python</li>
</ul>
<h3 id="streamhub">StreamHub</h3>
<p><a href="http://www.stream-hub.com/">http://www.stream-hub.com/</a></p>
<ul>
<li>免费版仅支持 10 个在线</li>
<li>支持 Java / .net / iPhone</li>
</ul>
<h3 id="socketio">socket.io</h3>
<p><a href="http://socket.io/">http://socket.io/</a></p>
<ul>
<li>NodeJS</li>
<li>推送方式：
<ul>
<li>WebSocket</li>
<li>Adobe® Flash® Socket</li>
<li>AJAX long polling</li>
<li>AJAX multipart streaming</li>
<li>Forever Iframe</li>
<li>JSONP Polling</li>
</ul>
</li>
<li>支持浏览器：
<ul>
<li>Internet Explorer 5.5+</li>
<li>Safari 3+</li>
<li>Google Chrome 4+</li>
<li>Firefox 3+</li>
<li>Opera 10.61+</li>
<li>iPhone Safari</li>
<li>iPad Safari</li>
<li>Android WebKit</li>
<li>WebOs WebKit</li>
</ul>
</li>
</ul>
<h3 id="sockjs-client">sockjs-client</h3>
<p><a href="https://github.com/sockjs/sockjs-client">https://github.com/sockjs/sockjs-client</a></p>
<ul>
<li>支持 Node.js / Erlang / Lua / Python-Tornado</li>
<li>跨浏览器</li>
</ul>
<h2 id="实战-socketio">实战 Socket.io</h2>
<p>考虑到上述候选框架的使用场景，这里选择 Socket.IO 作为 Comet 框架。</p>
<h3 id="尴尬的-pylons">尴尬的 Pylons</h3>
<p>Pylons 和 Comet 配合有问题，问题处在标准 WSGI 是非异步的。
（看邮件列表里面，似乎新的标准准备支持）。</p>
<ul>
<li><a href="http://stackoverflow.com/a/3090118">http://stackoverflow.com/a/3090118</a></li>
<li><a href="http://mail.python.org/pipermail/web-sig/2008-July/003545.html">http://mail.python.org/pipermail/web-sig/2008-July/003545.html</a></li>
<li><a href="http://pypi.python.org/pypi/Spawning/">Spawning</a></li>
</ul>
<p>这样的话，我就直接选择使用 Node.JS 做 Comet 服务器，Nginx 负责转发。</p>
<h3 id="简单demo">简单Demo</h3>
<p>node.js 代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/* global __dirname, console */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading index.html&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">hello</span><span class="o">:</span> <span class="s1">&#39;world, for everyone!&#39;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;my other event&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;private message&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I received a private message by &#39;</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="s1">&#39; saying &#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>页面代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;content-type&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;text/html; charset=utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Socket.io Demo<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/socket.io/socket.io.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;my other event&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">my</span><span class="o">:</span> <span class="s1">&#39;data&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>连接成功之后，在浏览器控制台里面，可以使用 <code>socket.emit('my other event', {biu: 'biu'});</code>
向服务器发送消息。</p>
<p>服务器也可以通过 <code>socket.emit()</code> 来向客户端推送消息。</p>
<p>私有信息发送，使用 <code>socket.emit('private message', 'James', {some: 'message'});</code> 。</p>
<h3 id="跨平台">跨平台</h3>
<p>实测看来，在 IE8 下面， Socket.io 会降级使用 <code>htmlfile</code> 来实现 Comet。</p>
<p>而 Firefox 中会有 <code>websocket / htmlfile / xhr-polling / jsonp-polling</code> 依次备选，
首选 websocket。</p>
<h3 id="安全性">安全性</h3>
<p>问题：提交数据的身份认证过程，以前在后台由 Web 框架自动完成，而现在流程是
Socket.IO -&gt; RabbitMQ -&gt; Web App，身份验证的复杂度增加了。</p>
<p>思路：Socket.IO 使用 Nginx 代理转发，从而保留同一域名下面的 cookie 信息，
这样能够提交到 Socket.IO 服务器，每次 RabbitMQ Message 都记录 cookie 信息，
后台从 RabbitMQ 读取信息时候，再进行认证。</p>
<p>实际操作：由于 Comet 中的数据流仅负责推送，客户端继续使用原始 POST
方式发送数据到服务器，所以暂时不会产生身份认证问题。</p>
<h2 id="node-ampq-驱动">Node AMPQ 驱动</h2>
<p>Socket.IO 提供了一个通用的 Comet 解决方案，下面就需要点润滑剂，将整个数据流跑通。
消息队列 RabbitMQ 正好适合用来做这个。</p>
<p>Rabbit 官网提到了一个套件 <a href="https://github.com/squaremo/rabbit.js">rabbit.js</a> 。
遗憾的是这个库是混合了 RabbitMQ 和 Node.JS，提供了一个封装好的 Node.JS 库，
而我想要的仅仅是一个 AMPQ 协议驱动。<a href="https://github.com/postwait/node-amqp/blob/master/amqp.js">node-amqp</a> 则是我们需要的驱动。</p>
<h3 id="demo">Demo</h3>
<p>服务器接收者脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/* global __dirname, console */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">conn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;amqp&#39;</span><span class="p">).</span><span class="nx">createConnection</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;amqp://localhost&#39;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;socket works&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">conn</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;conn ready&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nx">queue</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">passive</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">queue</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">queue</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">deliveryInfo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;#json:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">view</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;#headers:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">view</span><span class="p">(</span><span class="nx">headers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;#deliveryInfo:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">view</span><span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">conn</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">view</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>用 Python 写的发送者脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># coding=utf-8</span>
</span></span><span class="line"><span class="cl"><span class="c1">#! /usr/bin/env python2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pika</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">chan</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">chan</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span><span class="o">=</span><span class="s1">&#39;socket.io&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">message</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;no&#39;</span><span class="p">:</span> <span class="n">count</span><span class="p">,</span> <span class="s1">&#39;some&#39;</span><span class="p">:</span> <span class="s1">&#39;Message&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;比如&#39;</span><span class="p">:</span> <span class="sa">u</span><span class="s1">&#39;中文信息&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">publish_text</span><span class="p">(</span><span class="n">chan</span><span class="p">,</span> <span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;text </span><span class="si">%d</span><span class="s1">&#39;</span> <span class="o">%</span><span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">publish_json</span><span class="p">(</span><span class="n">chan</span><span class="p">,</span> <span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;add one message to RabbitMQ&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#time.sleep(5) # sleep 5 sec</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">publish_text</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">routing_key</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">body</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">message</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                          <span class="n">properties</span><span class="o">=</span><span class="n">pika</span><span class="o">.</span><span class="n">BasicProperties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;text/plain&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">delivery_mode</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                         <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">publish_json</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">routing_key</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">body</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">message</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                          <span class="n">properties</span><span class="o">=</span><span class="n">pika</span><span class="o">.</span><span class="n">BasicProperties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">delivery_mode</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                         <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><p>使用 <code>node ./app-amqp.js</code> 运行 Node.JS 服务器，然后运行 <code>producter.py</code> 产生
RabbitMQ Message，我使用的数据格式是序列化的 JSON 字串，
还有 <code>JSON, Thrift, Protocol Buffers, MessagePack</code> 这些格式可供选择。运行结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">#json:
</span></span><span class="line"><span class="cl">data: &#34;text 1&#34;
</span></span><span class="line"><span class="cl">UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-3: ordinal not icontentType: text/plain
</span></span><span class="line"><span class="cl">#headers:
</span></span><span class="line"><span class="cl">#deliveryInfo:
</span></span><span class="line"><span class="cl">contentType: text/plain
</span></span><span class="line"><span class="cl">contentEncoding: utf-8
</span></span><span class="line"><span class="cl">deliveryMode: 1
</span></span><span class="line"><span class="cl">queue: socket.io
</span></span><span class="line"><span class="cl">deliveryTag: 19
</span></span><span class="line"><span class="cl">redelivered: false
</span></span><span class="line"><span class="cl">exchange:
</span></span><span class="line"><span class="cl">routingKey: socket.io
</span></span><span class="line"><span class="cl">consumerTag: node-amqp-10880-0.06487216474488378
</span></span><span class="line"><span class="cl">#json:
</span></span><span class="line"><span class="cl">比如: 中文信息
</span></span><span class="line"><span class="cl">some: Message
</span></span><span class="line"><span class="cl">no: 1
</span></span><span class="line"><span class="cl">#headers:
</span></span><span class="line"><span class="cl">#deliveryInfo:
</span></span><span class="line"><span class="cl">contentType: application/json
</span></span><span class="line"><span class="cl">contentEncoding: utf-8
</span></span><span class="line"><span class="cl">deliveryMode: 1
</span></span><span class="line"><span class="cl">queue: socket.io
</span></span><span class="line"><span class="cl">deliveryTag: 20
</span></span><span class="line"><span class="cl">redelivered: false
</span></span><span class="line"><span class="cl">exchange:
</span></span><span class="line"><span class="cl">routingKey: socket.io
</span></span><span class="line"><span class="cl">consumerTag: node-amqp-10880-0.06487216474488378
</span></span></code></pre></div><p>里面有两个 Message，发送数据格式为 <code>text/plain</code> 和 <code>application/json</code> 。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://pika.github.com/">Pika Document</a></li>
</ul>
<h2 id="socketio--rabbitmq">Socket.IO + RabbitMQ</h2>
<p>最后提供 Socket.IO + RabbitMQ 的完整 Demo，客户端会实时接受到来自消息发送者的消息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/* global __dirname, console */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading index.html&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;io ready&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">conn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;amqp&#39;</span><span class="p">).</span><span class="nx">createConnection</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;amqp://localhost&#39;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;conn ready&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conn</span><span class="p">.</span><span class="nx">queue</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">passive</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">queue</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">			<span class="nx">queue</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">deliveryInfo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">.</span><span class="nx">contentType</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">.</span><span class="nx">contentType</span> <span class="o">==</span> <span class="s1">&#39;application/json&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="nx">json</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">.</span><span class="nx">contentType</span> <span class="o">==</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="nx">json</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">});</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>在运行 <code>producter.py</code> 后，Python 脚本持续产生 Message 到 RabbitMQ，
<code>app-amqp-socket.js</code> 订阅读取 Message 并推送到浏览器端。
浏览器可以在 Console 里面看到日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Object { 比如=&#34;中文信息&#34;, some=&#34;Message&#34;, no=1}
</span></span></code></pre></div><p>至此，我们可以完成 WebApp -&gt; RabbitMQ -&gt; Socket.IO -&gt; Browser 的实时推送。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
