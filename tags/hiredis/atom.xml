<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>hiredis on Log4D</title><link>https://blog.alswl.com/tags/hiredis/</link><description>Recent content in hiredis on Log4D</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 30 Mar 2014 15:41:43 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/hiredis/atom.xml" rel="self" type="application/rss+xml"/><item><title>hiredis 源码学习</title><link>https://blog.alswl.com/2014/03/hiredis/</link><pubDate>Sun, 30 Mar 2014 15:41:43 +0800</pubDate><guid>https://blog.alswl.com/2014/03/hiredis/</guid><description>前段时间学习 Redis 时候，听到 hiredis 的大名，正好也在做异步的学习，就找来代码学习一下。 我几乎不太会 C，仅限于最简单的语法，完全没有在生产环境中写过， 所以先看个 Client 简单代码，下次看 Memcached 代码应该会更顺畅一些。
Hiredis 是用 C 写的 Redis 客户端，对 Redis 协议进行了简单的封装， 同时提供了同步和异步的两种 API。Hiredis 的代码位于 https://github.com/redis/hiredis。
一分钟使用入门 同步 API 的调用方法：
redisContext *context = redisConnect(&amp;#34;127.0.0.1&amp;#34;, 6379); reply = redisCommand(context, &amp;#34;SET foo %s&amp;#34;, value); printf(&amp;#34;PING: %s\n&amp;#34;, reply-&amp;gt;str); freeReplyObject(reply) redisFree(context); Redis ae 异步 API 的调用方法，使用 Redis 自己的 ae 事件库， 至于为什么 Redis 没有使用 libevent 或者 libev，可以参考 Reason， 中文翻译：
void connectCallback(const redisAsyncContext *c, int status) { printf(&amp;#34;Connected...\n&amp;#34;); } void disconnectCallback(const redisAsyncContext *c, int status) { printf(&amp;#34;Disconnected.</description></item></channel></rss>