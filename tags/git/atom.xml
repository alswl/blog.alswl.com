<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on Log4D</title>
    <link>https://blog.alswl.com/tags/git/</link>
    <description>Recent content in git on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jan 2014 00:20:06 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/git/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从 SVN 到 Git，找回丢失的历史</title>
      <link>https://blog.alswl.com/2014/01/renamed-svn-to-git/</link>
      <pubDate>Tue, 21 Jan 2014 00:20:06 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2014/01/renamed-svn-to-git/</guid>
      <description>前段时间在将公司的 SVN 项目迁移到 Git 上面去，遇到一个很少见的问题：
有一个小伙伴使用 git-svn 做 rename 操作时候，将一个目录 svn mv 了，
导致新目录只存了最近几个月提交历史，丢失了历史信息。对团队开发而言，
历史提交是非常宝贵的财产，我们想了一些办法，把这些数据提取出来。
# 找出丢失之前的版本，列出丢失目录上层的操作记录。 svn log -l 2000 svn://log4d.com/trunk/apps/ios/ | less # 将重命名之前的版本拷贝到一个临时目录 svn copy svn://log4d.com/trunk/apps/ios/nami@43252 svn://log4d.com/trunk/apps/ios/nami_lost # 准备现有代码到 Git git svn clone svn://log4d.com/ -T trunk/apps/ios/nami -t tags -b branches -r 13532 nami # 修改 .git/config 来加入丢失的历史数据 Remote [svn-remote &amp;#34;svn-lost&amp;#34;] url = svn://log4d.com fetch = trunk/apps/ios/nami_lost:refs/remotes/trunk-lost # 并抓取 Remote 内容 git svn fetch # Rebase 新代码到恢复过来的历史记录上 git checkout master git rebase --committer-date-is-author-date trunk-lost 其中注意的是手动添加一个 svn-remote 地址为历史数据副本地址。</description>
    </item>
    
    <item>
      <title>Vundle 和 Submodule</title>
      <link>https://blog.alswl.com/2012/06/vundle-submodule/</link>
      <pubDate>Mon, 11 Jun 2012 22:07:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/06/vundle-submodule/</guid>
      <description>问题背景 Vundle 是个好东西，可以用来管理 vim 配置和 vim 插件。Vundle
会将所有插件管理在 .vim/bundle/ 中，详情可看
使用 Vundle 管理 Vim 插件。
官方安装 Vundle 方法如下：
$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle 我的 Vundle 的版本是 59bff0c457f68c3d52bcebbf6068ea01ac8f5dac，
git 版本是 git version 1.7.10.2 。
使用 BundleInstall 可以安装 .vimrc 中配置的插件，
我使用 git 控制 .vim 和 .vimrc 版本。在 BundleInstall
之后会导致 vundle 目录项目状态混乱，要么形成一个无法追踪的
submodule 比如 .vim/bundle/The-NERD-Commenter (untracked content)
，要么变成一个普通的文件夹 .vim/bundle/vim-markdown。
使用 Submodule 管理 插件 为了解决这个问题，我们需要先了解一点 Git 中 Submodule 的知识，详情可以查看
Git Book 中文版 - 子模块。</description>
    </item>
    
    <item>
      <title>Gource-可视化你的代码历史</title>
      <link>https://blog.alswl.com/2011/11/gource/</link>
      <pubDate>Sat, 26 Nov 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/11/gource/</guid>
      <description>昨天我在sunng
那里看到一个非常好玩的东西Gource。
Gource可以将代码版本控制系统里面的日志全部可视化， 所谓可视化就是可以看见每个成员在系统里面提交代码的行为。
Gource目前支持git/hg/svn，cvs通过一个简单的脚本也可以被Gource支持。
官方视频在这里[Gource - Software Version Control Visualization Tool](http://www.youtu
be.com/watch?v=E5xPMW5fg48&amp;amp;feature=player_embedded)，里面有Moodle/Git/Drupal/Postg
reSQL/Ruby on Rails/Linux/VLC Player这几个非常漂亮的开源软件视频。Ruby on Rails那一段特别帅有没有。
使用下列命令可以将视频录制下来(via wiki)：
pacman -S x264 #在archlinux下安装H264支持 gource -1280x720 -o gource.ppm #在项目目录下运行，生成ppm文件 #生成mp4文件，官方文档里面有-vpre slow项，会报错，去掉即可 ffmpeg -y -b 10000K -r 60 -f image2pipe -vcodec ppm -i gource.ppm -vcodec libx264 -threads 0 -bf 0 gource.x264.mp4 使用cvs2cl来支持CVS （via
wiki)：
cd my-cvs-project cvs2cl --chrono --stdout --xml -g-q &amp;gt; my-cvs-project.xml gource my-cvs-project.xml Gource里面有几个快捷键，我常用的有[放大，]缩小，方向键移动，+加速，-减速。
我本来想把我的dbevent2gc拿来凑了一个热闹，结果h264编码传到要哭土豆似乎一直有问题，只能作罢。ps：3分钟的视频，生成的ppm有1.2个G，转换
成mp4是1.2M。</description>
    </item>
    
  </channel>
</rss>
