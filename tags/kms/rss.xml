<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kms on Log4D</title>
    <link>https://blog.alswl.com/tags/kms/</link>
    <description>Recent content in Kms on Log4D</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 26 Dec 2011 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/kms/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用MoinMoin作为个人KMS</title>
      <link>https://blog.alswl.com/2011/12/moinmoin-kms/</link>
      <pubDate>Mon, 26 Dec 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/12/moinmoin-kms/</guid>
      <description>去年9月份时候，我写过一篇《我所使用的知识管理系统》 来介绍我使用的KMS系统。当时经过我层层筛选之后，我选用了Wiz作为我的KMS。 一年多过去了，Wiz在Windows下面工作的非常不错，Wiz团队里陆续推出了iOS / Android / Web版本。我的Wiz收藏的内容也增加到近1000篇。 此时我遇到了KMS再选型的问题，原因很简单：我全线转换到Linux平台， Wiz不符合我的要求了。 我重新整理一下我要求KMS的</description>
      <content:encoded><![CDATA[<p>去年9月份时候，我写过一篇《<a href="http://log4d.com/2010/09/my-kms">我所使用的知识管理系统</a>》
来介绍我使用的KMS系统。当时经过我层层筛选之后，我选用了Wiz作为我的KMS。</p>
<p>一年多过去了，Wiz在Windows下面工作的非常不错，Wiz团队里陆续推出了iOS / Android /
<a href="http://service.wiz.cn/web/">Web</a>版本。我的Wiz收藏的内容也增加到近1000篇。</p>
<p>此时我遇到了KMS再选型的问题，原因很简单：我全线转换到Linux平台， Wiz不符合我的要求了。</p>
<p>我重新整理一下我要求KMS的特性：</p>
<ul>
<li>跨平台：Linux / Web / iOS / Android / Windows</li>
<li>数据保存格式：移植方便，将图片保存到本地</li>
<li>数据采集方式：支持网络直接拷贝复制</li>
<li>数据索引：支持分类 + tag</li>
<li>协同工作：方便的分享机制</li>
<li>免费</li>
</ul>
<p>经过我历时N月的搜寻筛选，MoinMoin Wiki中标了！</p>
<h2 id="1-关于moinmoin">1. 关于MoinMoin</h2>
<p>MoinMoin是使用Python编写的Wiki实现，MoinMoin当前版本1.9。</p>
<p>MoinMoin的优点是：</p>
<ul>
<li>安装简单;</li>
<li>支持中文全文检索；</li>
<li>汉化较好；</li>
<li>不依赖外界的数据库, 使用纯文本保存, 备份非常容易, 直接复制即可。</li>
<li>支持从html转换到MoinMoin Wiki格式，纯文本的wiki格式比html来的更纯粹，只保存需要的数据，而不保存冗余的样式，MoinMoin这点做的非常好，支持几乎全部html标记的转换。</li>
</ul>
<h2 id="2-安装moinmoin">2. 安装MoinMoin</h2>
<p>MoinMoin基于Python，因此安装比基于php的MediaWiki麻烦一点。</p>
<p>你也可以参考<a href="http://moinmo.in/HowTo">官方安装指导（英文）</a>，里面有 Ubuntu / CentOS / SuSE
等系统的安装方法。</p>
<h3 id="21-使用moinmoin桌面版最简单">2.1. 使用MoinMoin桌面版（最简单）</h3>
<p>好在有MoinMoin下载包里面包含了简单的可执行版本，只需3个步骤就可以运行了。</p>
<ol>
<li>下载 MoinMoin <a href="https://moinmo.in/MoinMoinDownload">MoinMoinDownload - MoinMoin</a></li>
<li>解压缩到合适的目录（安装目录）</li>
<li>运行目录下面的 <code>wikiserver.py</code>
<ol>
<li>Linux/Unix：在命令行里面运行 <code>wikiserver.py</code></li>
<li>Mac：在 <code>wikiserver.py</code> 上面点击右键，选择 <code>open with...</code> - <code>All Applications</code> - <code>Always Open With</code> - <code>Terminal.app</code></li>
<li>Windows：下载 <a href="http://www.python.org/download/">Python</a> （2.5-2.6）， 安装之后双击 <code>wikiserver.py</code> 运行。</li>
</ol>
</li>
</ol>
<p>安装好之后，打开浏览器，在地址栏输入 <a href="http://localhost:8080/">http://localhost:8080/</a> 即可访问。</p>
<p>PS：如果你将MoinMoin安装的优盘，甚至可以做成移动知识库哦~</p>
<p>更多可以参考 <a href="http://moinmo.in/DesktopEdition">官方DesktopEdition帮助文档（英文）</a></p>
<h3 id="22-nginxuwsgi方式程序员适用">2.2. nginx+uWsgi方式（程序员适用）</h3>
<p><code>wikiserver.py</code> 虽然可以运行，但是作为开发者，我当然要使用效率更高的方式。 运行Python Web应用需要
<code>Appach / ngnix + CGI / FastCGI / uWSGI</code> 环境。 我这里使用nginx + uWSGI进行环境配置。</p>
<p>Google了N多资料之后，这篇 <a href="http://typedef.me/2011/08/30/archlinux-nginx-uwsgi-moinmoin-setup">ArchLinux 下使用 Nginx + uWSGI 部署 MoinMoin</a>
最是详细，另外还可以参考 <a href="http://garfileo.is-programmer.com/2011/4/24/run-moinmoin-on-uwsgi-and-nginx.26347.html">运行在 nginx 与 uwsgi 之上的 moinmoin</a>。</p>
<p>我将主要步骤和我的一些修改列出来。</p>
<h4 id="221-安装需要软件">2.2.1. 安装需要软件</h4>
<p>我当前系统是Arch，运行一下命令安装，其他系统也类似</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pacman -S nginx moinmoin
</span></span><span class="line"><span class="cl">yaourt uwsgi
</span></span></code></pre></div><h4 id="222-配置moinmoin">2.2.2. 配置MoinMoin</h4>
<p>默认情况下，moinmoin 被安装在了 <code>/usr/lib/python2.7/site-packages/MoinMoin</code> 和
<code>/usr/moin/share</code> 这两个目录下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /usr/share/moin/
</span></span><span class="line"><span class="cl">ln -s /usr/share/moin/server/moin.wsgi .
</span></span><span class="line"><span class="cl">ln -s /usr/share/moin/config/wikiconfig.py .
</span></span></code></pre></div><h4 id="223-配置nginx">2.2.3. 配置nginx</h4>
<p>在上文的基础上，我做了一些小修改，我的nginx站点配置如下，我没有使用端口9090 作为uwsgi的监听端口，而是使用了UNIX
Sock，这样相对安全一些。</p>
<p>ps：貌似这个版本的uwsgi 0.9.9.2有点小问题，无法在 <code>/var/run</code> 里面创建sock， 我只能将 <code>uwsgi.sock</code> 放在
<code>/tmp</code> 里面</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">listen</span>       <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">server_name</span>  <span class="s">wiki.localhost</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">location</span> <span class="s">/</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kn">include</span> <span class="s">uwsgi_params</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#uwsgi_pass 127.0.0.1:9090;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="kn">uwsgi_pass</span> <span class="s">unix:/tmp/uwsgi.sock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">uwsgi_param</span> <span class="s">UWSGI_PYHOME</span> <span class="s">/usr/lib/python2.7/site-packages/MoinMoin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">uwsgi_param</span> <span class="s">UWSGI_CHDIR</span> <span class="s">/usr/share/moin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="kn">uwsgi_param</span> <span class="s">UWSGI_SCRIPT</span> <span class="s">moin_wsgi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># vim: set ft=conf:
</span></span></span></code></pre></div><h4 id="224-配置启动文件">2.2.4. 配置启动文件</h4>
<p>因为使用 UNIX Sock 连接，所以 <code>/etc/rc.d/uwsgi</code> 启动文件也略做修改（ Ubunt 的启动配置文件在
<code>/etc/init.d/</code> 下面）， 加入了 <code>SOCK</code> ，同时我为 uwsgi 指定运行用户 <code>http</code> ，避免root启动带来的安全隐患。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">#PORT=9090</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">SOCK</span><span class="o">=</span>/tmp/uwsgi.sock
</span></span><span class="line"><span class="cl"><span class="nv">PROCESSES</span><span class="o">=</span><span class="m">4</span>
</span></span><span class="line"><span class="cl"><span class="nv">USER</span><span class="o">=</span><span class="nv">httpLOG</span><span class="o">=</span>/var/log/uwsgi.log
</span></span><span class="line"><span class="cl"><span class="nv">PID</span><span class="o">=</span><span class="sb">`</span>pidof -o %PPID /usr/bin/uwsgi<span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">. /etc/rc.conf
</span></span><span class="line"><span class="cl">. /etc/rc.d/functions
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> in
</span></span><span class="line"><span class="cl">	start<span class="o">)</span>
</span></span><span class="line"><span class="cl">		stat_busy <span class="s2">&#34;Starting uwsgi&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$PID</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">			stat_busy <span class="s2">&#34;uwsgi is already running&#34;</span>
</span></span><span class="line"><span class="cl">			stat_die
</span></span><span class="line"><span class="cl">		<span class="k">else</span>
</span></span><span class="line"><span class="cl">			<span class="c1">#uwsgi --uid $USER -s &#34;:$PORT&#34; -M -p $PROCESSES -d $LOG &amp;&gt; /dev/null # use socket port</span>
</span></span><span class="line"><span class="cl">			uwsgi --uid <span class="nv">$USER</span> --socket <span class="nv">$SOCK</span> -M -p <span class="nv">$PROCESSES</span> -d <span class="nv">$LOG</span> <span class="p">&amp;</span>&gt; /dev/null <span class="c1"># use unix sock</span>
</span></span><span class="line"><span class="cl">			add_daemon uwsgi
</span></span><span class="line"><span class="cl">			stat_done
</span></span><span class="line"><span class="cl">		<span class="k">fi</span>
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	stop<span class="o">)</span>
</span></span><span class="line"><span class="cl">		stat_busy <span class="s2">&#34;Stopping uwsgi&#34;</span>
</span></span><span class="line"><span class="cl">		killall -QUIT uwsgi <span class="p">&amp;</span>&gt; /dev/null
</span></span><span class="line"><span class="cl">		rm_daemon uwsgi
</span></span><span class="line"><span class="cl">		stat_done
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	restart<span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="nv">$0</span> stop
</span></span><span class="line"><span class="cl">		sleep <span class="m">1</span>
</span></span><span class="line"><span class="cl">		<span class="nv">$0</span> start
</span></span><span class="line"><span class="cl">		<span class="p">;;</span>
</span></span><span class="line"><span class="cl">	*<span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">echo</span> <span class="s2">&#34;usage: </span><span class="nv">$0</span><span class="s2"> {start|stop|restart}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span>
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">0</span>
</span></span></code></pre></div><h2 id="3-image2attach">3. Image2Attach</h2>
<p>去年我选择Wiz而不选择Wiki类产品时候，是考虑到一个图片保存本地化的问题。 即保存一篇网页时候，要将里面的图片保存到本地，而不是使用链接方式保存，
因为由于各种不可预测的原因，原始图片数据很有可能丢失或者无法连接。</p>
<p>Wiz使用的方案是使用mht格式将图片保存在问题，而大部分 Wiki，包括 MoinMoin 都以 文本的形式保存数据，那就无法保存远程图片了。</p>
<p>经我研究，MoinMoin 中有附件的方法可以保存文件，并且当这种附件存放的是图片文件时， 也可以直接使用 <code>{{attachment:xxx.jpg}}</code>
这样的 Wiki 语法来查看图片。</p>
<p>我尝试在 MoinMoin 插件库里面找将远程图片本地化的插件未果，于是就花了一个星期左右 时间写了一个实现这样功能的插件 Image2Attach。</p>
<p>更多使用可以参考这篇文章 <a href="http://log4d.com/2011/12/moinmoin-plugin-image2attach">MoinMoin plugin: image2attach v0.0.2 released</a></p>
<p>所以说，当程序员就是好，功能没有就自己实现呗。</p>
<h2 id="4-moinmoin的简单上手">4. MoinMoin的简单上手</h2>
<p><a href="http://zhanggang.net/">@张刚</a> 同学发邮件给我和我交流了两个问题，我顺便整理到这里。（2011-12-28更新）</p>
<h3 id="安装语言包">安装语言包</h3>
<ul>
<li>首先请确保当前登录账户是超级用户，超级用户设置在 <code>/usr/share/moin/wikiconfig.py</code> （可能路径有所差异）里面的 <code>superuser = [u&quot;yourid&quot;]</code> ，加入你需要设定的用户id</li>
<li>中文界面会根据浏览器语言设定获取，而相应的中文帮助文件默认没有安装，我建议安装。安装步骤如下：
<ul>
<li>访问http://localhost/LanguageSetup，里面有安装文档链接http://localhost/LanguageSetup?action=language_setup</li>
<li>在http://wiki.localhost/LanguageSetup?action=language_setup中，选择 <code>Simplified_Chinese</code> 点击最下面 <code>all_pages</code></li>
<li>同时我也建议安装英文版本的 <code>all_pages</code> ，因为中文有一些翻译不全。</li>
</ul>
</li>
</ul>
<p>更多的中文信息你可以访问<a href="http://master.moinmo.in/%E9%A6%96%E9%A1%B5">MoinMoin主版本中文网站</a>。</p>
<h3 id="如何加入内容">如何加入内容</h3>
<p>下面是我自己总结的步骤，目前工作的还不错。</p>
<ul>
<li>进入新页面http://localhost/newpage，如果不存在就会创建新页面</li>
<li>默认是文本模式编辑器，切换到图形编辑模式（默认编辑器可以在个人设置里面修改）</li>
<li>从某个网页粘帖内容到图形编辑模式（这个图形编辑器是CKEditor的精简版）。</li>
<li>查看图形编辑器原始码，再返回&quot;所见即所得&quot;状态（这个步骤可以去除一些空格）</li>
<li>返回文本模式编辑器，MoinMoin会自动转换html-&gt;wiki（目前我遇到3个bug，中文开头空格/BR换行/fieldset，前两个我已经修 复，diff文件在<a href="../../static/images/upload_dropbox/201112/moinmoin.diff">diff</a>）</li>
<li>人工审核一下wiki，也顺便仔细看看文章内容</li>
<li>加入Category，预览，保存</li>
</ul>
<h2 id="5-moinmoin的一些修改">5. MoinMoin的一些修改</h2>
<p>在使用MoinMoin这段时间，我发现了一些小问题，就对源码做了一些小修改。 当然如果你觉得麻烦，不做这些修改也一样可以使用的很好。</p>
<p>我修改了 <code>/usr/lib/python2.7/site-packages/MoinMoin/converter/text_html_text_moin_wiki.py</code> 这个文件。点击 <a href="../../static/images/upload_dropbox/201112/moinmoin.diff">diff文件</a>下载。</p>
<h2 id="6-wiz转moinmoin经验">6. wiz转MoinMoin经验</h2>
<p>Wiz中数据存储格式其实是mht，微软的鸟东西，数据转换颇为不方便。</p>
<p>第一种方法是借助Wiz Web服务，Wiz小组推出的 <a href="http://service.wiz.cn/web">Web服务</a> 可以很方便的查看所有同步
过的内容，里面就是标准的html代码了，直接可以复制粘帖。Wiz的Web端图片也不用 Cookie认证，取到图片地址就可以抓取了。</p>
<p>另一种办法就是使用Wiz的导出功能，导出成mht格式， 然后使用MoinMoin站点提供的插件
<a href="http://moinmo.in/MicrosoftWordConverter">Word2Moin</a> 脚本进行转换。</p>
<p>我使用的方法是第一种。</p>
]]></content:encoded>
    </item>
    <item>
      <title>我所使用的知识管理系统</title>
      <link>https://blog.alswl.com/2010/09/my-kms/</link>
      <pubDate>Fri, 24 Sep 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/09/my-kms/</guid>
      <description>最近工作比较忙，自由上网的时间被大幅度减少，加上在啃.net的书，所以能够分享的东西就不多了。公司所在的部门需要将PMS和KMS整合在一起，正在对KMS进行 选型，我就趁这个机会把我使用知识管理系统的经验分享一下。 一、知识管理系统（KMS） 简单说一下知识管理的定义：指个人或团体通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程，这其中使用的工具也就是KMS。KMS应该帮助我们 队只是</description>
      <content:encoded><![CDATA[<p>最近工作比较忙，自由上网的时间被大幅度减少，加上在啃.net的书，所以能够分享的东西就不多了。公司所在的部门需要将PMS和KMS整合在一起，正在对KMS进行
选型，我就趁这个机会把我使用知识管理系统的经验分享一下。</p>
<h2 id="一知识管理系统kms">一、知识管理系统（KMS）</h2>
<p>简单说一下知识管理的定义：指个人或团体通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程，这其中使用的工具也就是KMS。KMS应该帮助我们
队只是进行采集、精炼、索引、分类、检阅、检索、搜索的功能。</p>
<p>不多解释KMS了，省的看大段文字心烦，想做理论深入的去最下面的相关链接查找吧。</p>
<h2 id="二我想要的kms">二、我想要的KMS</h2>
<p>我理想中的KMS应该能够满足一下几点要求。</p>
<h3 id="1数据保存格式">1、数据保存格式</h3>
<p>数据的保存格式关系到知识的完整性和呈现方式，这是我最看重的一条。我理想中的保存格式是能够内嵌媒体信息，可以自定义内容的样式，最好是用大家比较习惯的文档体系，
比如h1/h2/h3/p/br/ol/li。在内嵌媒体内容的同时也要能够在知识点外挂其他类型文件，比如Excel、知识导图，甚至exe可执行文件。</p>
<p>数据保存格式也要考虑数据的移植性，因为一旦我们的KMS需要换一个系统，就会带来大量个工作，这个极其讨厌。使用xml/doc/excel/mm这些通用数据类型
存储信息可以在一定条件下解决这个问题。</p>
<p>数据存储的形式最好使用文件形式，尽量不要使用数据库，什么MySQL/MSSQL/SQLite，一旦知识数量到了一个规模，这反而会成为限制（我可不想为了一个小
小KSM而开一个后台服务器进程）。</p>
<h3 id="2数据采集方式">2、数据采集方式</h3>
<p>数据采集方式关系到采集是否顺手。所谓顺手，就是说我看到某个资源（文字 / 图片 /
网页），都可以通过尽可能少的步骤保存到我自己的KMS，比如通过常驻后台的托盘程序，又或者监视剪贴板指定格式内容。</p>
<p>相应的解决办法有从源获取，比如说可以直接读取我Google
Reader中打上星号的内容，从某个Feed获取内容，从我当前正在浏览的网页获取我所需要的内容（不保存那些广告和垃圾信息）。</p>
<h3 id="3数据索引">3、数据索引</h3>
<p>能够对所有的信息进行无限制分类和打标签，支持1-&gt;N分类和1-&gt;N标签即可，没有太多的花样了。</p>
<p>能够根据分类、标签、标题、正文多层次搜索，支持高级查找，比如说AND条件和OR条件。</p>
<h3 id="4数据同步和安全">4、数据同步和安全</h3>
<p>能够将KMS的数据同步到网上，哦~换一个流行的说法，支持云同步。考虑到在家庭和工作电脑之间进行切换，这点还是需要的。</p>
<p>有一个剑走偏锋的办法，使用现在很多的同步软件，比如说DropBox、DBank和快盘，就可以把那些以文件形式保存数据的KMS信息进行同步。</p>
<p>KMS可能涉及到很多安全和隐私信息，所以必须建立对应帐户和安全机制。允许用户对分享、二次分享、隐私、禁止同步等选项进行详细设置。</p>
<h3 id="5协同工作">5、协同工作</h3>
<p>能够针对于部门小组进行知识管理，这属于企业级产品，不在今天讨论范围之内。其实对于团队来说，Wiki也是一个不错的选择，KMS太过于个性化了。</p>
<h2 id="三我使用的kms-wizknowledge">三、我使用的KMS-WizKnowledge</h2>
<p>废话了这么多，终于进入重点了，我现在使用的KMS系统-WizKnowledge。</p>
<p><a href="../../static/images/upload_dropbox/201009/wiz1.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/wiz1.jpg" alt="image"  />


</a></p>
<p>这款Wiz是我最早在<a href="http://louishan.com">Louis</a>那里看到这篇文章《[Wiz(为知个人知识管理)正式版发布- Louis Han
Life Log](<a href="http://louishan.com/articles/wiz-personal-knowledge-">http://louishan.com/articles/wiz-personal-knowledge-</a>
management.html)》，当时没有立即试用。之后在看到<strong>同步控</strong>也发布了相关的一篇日志《<a href="http://www.syncoo.com/wizknowledge-1988.htm">WizKnowledge -
支持同步的个人知识整理工具 |
同步控</a>》，最后又看到xDash的一篇《<a href="http://www.syncoo.com/my-pkm-tools-2038.htm">我的个人知识管理工具
[PKM] | 同步控</a>》，终于忍不住诱惑去下了试用。</p>
<p>现在用Wiz也大概一个多月了，我对应我上面的要求对Wiz进行一下品评一下。</p>
<h3 id="1优点">1、优点</h3>
<p>Wiz使用.ziw格式保存文件，其实这就是zip wiz的缩写，其内质是zip压缩的html文档。这种保存方式可以妥善的保存上文提到的内嵌式媒体，而且内部使
用html+css，能够方便数据展现和迁移。对于大部分选用KMS的朋友来说，使用html+css也不会带来学习曲线。</p>
<p>Wiz使用树形目录保存文件，这样就无法做到任意指定分类，但是带来好处是以文件夹方式保存知识内容，所以总体来说这算是优点。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/wizcat.jpg" alt="image"  />


</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/wiz_path.jpg" alt="image"  />


</p>
<p>Wiz的每个文档都支持外接任意类型附件，并将其保存到.ziw中，这对于mm/doc/xls这些特殊类型来说特别有用。</p>
<p>Wiz支持多平台，其中有WM平台，还有Android版本。我试用过Android版本，很弱，问题很多。对我来说，移动手持上面的软体不需要太多功能，可以方便的
查看即可。</p>
<p>Wiz还支持第三方插件，目前官方发布版本集成的有导入文件、导入Google
Docs/日历、博客下载器、发布到博客。其中导入文件支持&quot;<em>.htm;</em>.html; <em>.mht;</em>.nws; <em>.eml; <em>.txt;</em>.ini;
<em>.bat;</em>.inf; <em>.swf;</em>.bmp; <em>.jpg;</em>.jpeg; <em>.gif;</em>.png; <em>.doc;</em>.docx;
<em>.rtf;</em>.ppt;</em>.pptx; <em>.xls;</em>.xlsx;<em>.ziw; <em>.zip;</em>.cpp;</em>.hpp; <em>.cxx;</em>.c;<em>.h;
<em>.pas;</em>.dpr;</em>.java; <em>.js;</em>.cs;*.vbs; <em>.sql;</em>.oraclesql; <em>.idl;</em>.console;
<em>.shell;</em>.pl; *.php&quot;这么多类型。</p>
<p>Wiz给每个注册用户提供300M的网络空间（从1.0.3不限制总空间大小，限制每月流量）。这点在同类产品中比较少见，极其方便了用户。</p>
<p>Wiz提供一个名为WizNote的小工具进行信息采集，同时会在IE中装插件。FireFox下面也有自己的.xpi小插件（功能有些问题，我还是使用FireBu
g获取innerHtml的方式操作）。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/wiznote.png" alt="image"  />


</p>
<p>Wiz还附带一个一个WIzCalendar小工具，可以在日历上面布置知识点，这点对于有些同学来说比较方便，可以实现GTD功能。（因为我依赖于Google
Calendar，所以我不使用这个功能）</p>
<p><a href="../../static/images/upload_dropbox/201009/wizcal.png">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/wizcal.png" alt="image"  />


</a></p>
<h3 id="2缺点">2、缺点</h3>
<p>Wiz的缺点不多，说起来就是刚发行到正式版，还不是特别完善，比如安全机制，比如采集机制（我现在喜欢用FireBug获取元素的innerHtml直接复制到Wi
z的编辑器源码里）。</p>
<p>Wiz开发团队承诺永久免费，从他们的其他几款产品&quot;网文快捕&quot;等来看，还是比较有运营能力的，尤其是支持第三方插件，这在KMS中间不多见。</p>
<h2 id="四其他几款kms">四、其他几款KMS</h2>
<p>我选择Wiz不适没用试用其他KMS，这里我说一下不选择他们的原因。</p>
<h3 id="1evernote">1、EverNote</h3>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/evernote.png" alt="image"  />


</p>
<p>EverNote是最近最火的同步工具，是的，它是同步工具，不是KMS。而且现在的EverNote基于.net
3.5，我直接崩溃。虽然我是.net程序员，但是我反感CS程序使用.net，尤其还是3.5sp1，天哪，我的2G电脑跑起来都觉得卡。</p>
<p>同事EverNote保存的文件格式也不适合做KMS，更多有关EverNote的信息可以看[善用佳软EverNote专题](<a href="http://xbeta.info">http://xbeta.info</a>
/tag/evernote)。</p>
<p>PS：EverNote是不错的同步工具，但是善用佳软的宣传力度也太大了吧~</p>
<h3 id="2onenote">2、OneNote</h3>
<p>微软的办公软件体系好大哦，OneNote是Office 2007之后逐渐变得比较重要的部分。OneNote存放时本地的，似乎在OneNote
2010的正版用户支持数据同步。</p>
<p>因为OneNote体积比较大，我追求速度和体积，加之没有使用Offcie全系列，所以没有选用OneNote。准确来说，Outlook+SharePoint+
OneNote是一整套的企业级KMS，OneNote更注重于收集。</p>
<p>我使用OneNote用的不多，感兴趣的朋友到这里<a href="http://www.onenoter.com/">OneNote爱好者</a>可以看到更多信息。</p>
<p>PS：<a href="http://microsoft-office-onenote.softonic.cn/download">OneNote 2010试用版下载地址</a></p>
<h3 id="3pkm">3、PKM</h3>
<p>PKM = Pin Knowledge Managerment，说起来这款软件挺早的，使用KMS比较早的朋友们应该都知道这款软件。我使用这款软件的第一印象是
：好山寨的界面啊，居然可以选取工具栏，虽然是VB写的，但也不至于如此吧~</p>
<p><a href="../../static/images/upload_dropbox/201009/pinE1.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/pinE1.jpg" alt="image"  />


</a></p>
<p>我使用时候还遇到了诸多问题，比如附件无法拖入，网页到html无法转换成功，甚至开启PKM之后，我的QQ2010聊天界面的Alt键无法使用，真是诡异。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/pinE2.jpg" alt="image"  />


</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/pinE3.jpg" alt="image"  />


</p>
<p>PKM的功能看上去很强大，似乎比Wiz更专业，作者给了很多教程。但是最不喜欢的是居然用doc保存文档，这搞毛啊，无论是大小还是速度都是我不能忍受的。同时PK
M分为免费版和专业版，专业版需要花票票购买。</p>
<p>PKM在KMS的普及上做了相当多的工作，这点上我很佩服和感谢作者，详情可见<a href="http://www.cnblogs.com/pinpkm/archive/2007/10/16/925606.html">PKM全民推广系列一：PKM定义 - 专业个人知识管理软件研究 -
博客园</a>。</p>
<h3 id="4其他一些kms">4、其他一些KMS</h3>
<p>Google Docs其实也能做成KMS，还支持团队协作，但是，你懂的……</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201009/maiku.jpg" alt="image"  />


</p>
<p>盛大推出了线上KMS-<a href="http://note.sdo.com/">麦库</a>，我支持盛大的这次向KMS进军，可惜线上……你懂的……这不是我的菜……</p>
<p>再其他……我就不懂了……</p>
<h2 id="last">Last</h2>
<p>好啦，介绍到这里，总算是大功告成，一篇博文搞了两天，真是吃力~</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
