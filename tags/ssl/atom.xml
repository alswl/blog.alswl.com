<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ssl on Log4D</title>
    <link>https://blog.alswl.com/tags/ssl/</link>
    <description>Recent content in ssl on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Mar 2009 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/ssl/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 OpenSSL API 进行安全编程，第 2 部分: 安全握手</title>
      <link>https://blog.alswl.com/2009/03/safe-use-of-openssl-api-programming-part-2-security-handshake/</link>
      <pubDate>Tue, 31 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/safe-use-of-openssl-api-programming-part-2-security-handshake/</guid>
      <description>原文链接：[http://www.ibm.com/developerworks/cn/linux/l-openssl2.html](http://www.i bm.com/developerworks/cn/linux/l-openssl2.html)
怎么都复制不过来，提示含有敏感字眼，我晕，这是IBM文档库里的啊，崩溃了
我都不要言论自由，只想保存一些经典的文章而已，河蟹啊````</description>
    </item>
    
    <item>
      <title>OpenSSL 编程入门【转载-这篇很精】</title>
      <link>https://blog.alswl.com/2009/03/introduction-to-openssl-programming/</link>
      <pubDate>Thu, 19 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/introduction-to-openssl-programming/</guid>
      <description>**OpenSSL **编程入门
作者:Eric Rescorla on Sat, 2001-09-01 01:0
如果你急切的想构建一个简单的Web客户端和服务器对,这时你就需要使用SSL了..
SSL是一种保护基于TCP协议的网络应用最快而且最简单的的方法,如果你正在用C语言做开发,那么对于你来说,最好的选择可能就是使用OpenSSL了. OpenSSL是在Eric Young的SSLeay包的基础上对TSL/SSL的一个免费的执行(类似于BSD方式的License).然而, 不幸运的事情是, 伴随OpenSSL一起发布的文档和示例代码并不是很完全, 使用它的人需要更多的东西.在OpenSSL被使用之处, man手册都相当优秀,可是这些手册失去了大的背景 因为它们只是参考资料而不是教程.
OpenSSL的API多而复杂, 因此我们在此并不会作出一个完整的讲述. 相反,我的目的只是教会你如何去高效的使用man手册.在本文中, 我们将会通过构建一个简单的Web客户端和服务器来演示OpenSSL的基本特点. 而在后续的第二篇中我们将会介绍OpenSSL的一些高级特性, 比如会话恢复和客户端认证等.
在话题开始之前, 我会认为你已经熟悉SSL和HTTP了, 或者最起码在概念层上应该有一些了解. 如果你对此一无所知, 推荐一个比较好的方法,那就是参考RFC(参见附录).
由于篇幅原因, 本文只包涵了源代码的一些摘录, 完整的代码可以从作者的站点http://www.rtfm.com/openssl- examples/上下载.
程序
我们的客户端是一个简单的HTTPS(见 RFC 281![image](/DOCUME~1/%E7%8B%84%E6%95%AC%E8%B6%85/LOCALS~1/ Temp/msohtml1/01/clip_image001.gif)客户端,它在初始化了一个到达服务器的SSL连接之后便通过这个连接将HTTP请求传送给H TTP服务器. 然后等待服务器端的响应,并将响应信息打印在屏幕上.这是对通常那些&amp;quot;获取并且打印信息&amp;quot;的程序功能更简化的一个例子.
服务器端程序是一个简单的HTTPS 服务器, 它等待从客户端发出的TCP连接, 每当接收到一个连接时,它会磋商这个连接(的合法性). 一旦这个连接被确定下来, 它会读取客户端的HTTP请求, 并将HTTP请求的响应信息传输给客户端. 当响应传输完毕时它会关闭这个连接.
我们的第一个任务就是建立一个上下文对象(一个SSL_CTX), 这个上下文对象会在每次需要建立新的SSL连接的时候被用来创建一个新的连接对象. 而这些连接对象则用于SSL的握手,读和写.
(使用上下文对象)这种方法有两个优点: 首先, 上下文对象允许一次初始化多个结构体, 这样就提提高了性能. 在大多数应用中, 每一个SSL连接都使用相同的加密算法(keying material)和CA(certificate authority)列表等. 而采用上面这种方法, 我们就不需要在每次连接的时都去加载这些信息(加密算法和证书), 而只需要在程序启动时将它们加载进上下文对象中. 然后,当我们需要创建一个新的连接时, 只需要将新的连接简单的指向这个上下文对象就可以了. 使用一个简单的上下文对象的第二个好处就是它允许多个SSL连接之间共享数据, 比如用于SSL会话恢复的SSL缓冲(cache). 上下文初始化由主要的四个任务组成, 通过列表1所示的initialize_ctx()函数来完成.
列表** 1 initialize_ctx()**</description>
    </item>
    
    <item>
      <title>OpenSSL中的BIO【转载】</title>
      <link>https://blog.alswl.com/2009/03/openssl-s-bio/</link>
      <pubDate>Thu, 19 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/openssl-s-bio/</guid>
      <description>SSL类型的BIO
&amp;mdash;根据openssl doccryptobio_f_ssl.pod翻译和自己的理解写成
（作者：DragonKing, Mail: wzhah@263.net ,发布于：http://openssl.126.com 之openssl专业论坛）
从名字就可以看出，这是一个非常重要的BI O类型，它封装了openssl里面的ssl规则和函数，相当于提供了一个使用SSL很好的有效工具，一个很好的助手。其定义（opensslbio.h,opens slssl.h）如下：
BIO_METHOD *BIO_f_ssl(void);
#define BIO_set_ssl(b,ssl,c) BIO_ctrl(b,BIO_C_SET_SSL,c,(char *)ssl)
#define BIO_get_ssl(b,sslp) BIO_ctrl(b,BIO_C_GET_SSL,0,(char *)sslp)
#define BIO_set_ssl_mode(b,client) BIO_ctrl(b,BIO_C_SSL_MODE,client,NULL)
#define BIO_set_ssl_renegotiate_bytes(b,num) BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_BYTES,num,NULL);
#define BIO_set_ssl_renegotiate_timeout(b,seconds) BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT,seconds,NULL);
#define BIO_get_num_renegotiates(b) BIO_ctrl(b,BIO_C_SET_SSL_NUM_RENEGOTIATES,0,NULL);
BIO *BIO_new_ssl(SSL_CTX *ctx,int client);
BIO *BIO_new_ssl_connect(SSL_CTX *ctx);
BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
int BIO_ssl_copy_session_id(BIO *to,BIO *from);
void BIO_ssl_shutdown(BIO *bio);
#define BIO_do_handshake(b) BIO_ctrl(b,BIO_C_DO_STATE_MACHINE,0,NULL)
该类型BIO的实现文件在sslbio_ssl.c里面，大家可以参看这个文件得到详细的函数实现信息。
【BIO_f_ssl】
该函数返回一个SSL类型的BIO_METHOD结构，其定义如下：
static BIO_METHOD methods_sslp=
{
BIO_TYPE_SSL,&amp;ldquo;ssl&amp;rdquo;,
ssl_write,
ssl_read,
ssl_puts,
NULL, /* ssl_gets, */
ssl_ctrl,
ssl_new,</description>
    </item>
    
    <item>
      <title>用openssl编写ssl,tls程序实例【转载-作者：yawl(yawl@nsfocus.com) 】</title>
      <link>https://blog.alswl.com/2009/03/openssl-prepared-using-ssl-tls-instance/</link>
      <pubDate>Wed, 18 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/openssl-prepared-using-ssl-tls-instance/</guid>
      <description>◆ 用openssl编写ssl,tls程序
作者：yawl(yawl@nsfocus.com)
日期：2000-8-15
一:简介:
ssl(secure socket layer)是netscape公司提出的主要用于web的安全通信标准,分为2.0版和3.0版.tls(transport layer security)是ietf的tls工作组在ssl3.0基础之上提出的安全通信标准,目前版本是1.0,即rfc2246.ssl/tls提供的安全 机制可以保证应用层数据在互联网络传输不被监听,伪造和窜改.
openssl(www.openssl.org)是sslv2,sslv3,tlsv1的一份完整实现,内部包含了大量加密算法程序.其命令行提供了丰富的加密,验 证,证书生成等功能,甚至可以用其建立一个完整的ca.与其同时,它也提供了一套完整的库函数,可用开发用ssl/tls的通信程序. apache的https两种 版本mod_ssl和apachessl均基于它实现的.openssl继承于ssleay,并做了一定的扩展,当前的版本是0.9.5a.
openssl的缺点是文档太少,连一份完整的函数说明都没有,man page也至今没做完整:-(,如果想用它编程序,除了熟悉已有的文档(包括ssleay,m od_ssl,apachessl的文档)外,可以到它的maillist上找相关的帖子,许多问题可以在以前的文章中找到答案.
编程:
程序分为两部分,客户端和服务器端,我们的目的是利用ssl/tls的特性保证通信双方能够互相验证对方身份(真实性),并保证数据的完整性,私密性.
1.客户端程序的框架为:
/生成一个ssl结构/
meth = sslv23_client_method();
ctx = ssl_ctx_new (meth);
ssl = ssl_new(ctx);
/下面是正常的socket过程/
fd = socket();
connect();
/把建立好的socket和ssl结构联系起来/
ssl_set_fd(ssl,fd);
/ssl的握手过程/
ssl_connect(ssl);
/接下来用ssl_write(), ssl_read()代替原有的write(),read()即可/
ssl_write(ssl,&amp;ldquo;hello world&amp;rdquo;,strlen(&amp;ldquo;hello world!&amp;rdquo;));
2.服务端程序的框架为:
/生成一个ssl结构/
meth = sslv23_server_method();
ctx = ssl_ctx_new (meth);
ssl = ssl_new(ctx);
/下面是正常的socket过程/
fd = socket();
bind();
listen();
accept();
/把建立好的socket和ssl结构联系起来/
ssl_set_fd(ssl,fd);
/ssl的握手过程/
ssl_connect(ssl);
/接下来用ssl_write(), ssl_read()代替原有的write(),read()即可/</description>
    </item>
    
    <item>
      <title>用openssl进行SSL编程【转载-月光】</title>
      <link>https://blog.alswl.com/2009/03/programming-with-openssl-for-ssl/</link>
      <pubDate>Wed, 18 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/programming-with-openssl-for-ssl/</guid>
      <description>主要介绍openssl进行SSL通信的一些函数以及过程，主要是初始化过程，至于数据的接收以及后续处理可以具体问题具体分析。
load所有的SSL算法
OpenSSL_add_ssl_algorithms();
建立SSL所用的method
SSL_METHOD *meth=SSLv23_method();
初始化上下文情景
SSL_CTX *ctx=SSL_CTX_new(meth);
ret-&amp;gt;quiet_shutdown=1;默认的是ret-&amp;gt;quiet_shutdown=0;他相当于SSL_set_shutdown函数将参数设置为SS L_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN
当设置为1时，假如关闭后，不通知对方，这样不适合TLS标准
SSL_CTX_set_quiet_shutdown(ctx,1);
ctx-&amp;gt;options|=SSL_OP_ALL，SSL/TLS有几个公认的bug,这样设置会使出错的可能更小
SSL_CTX_set_options(ctx,SSL_OP_ALL);
设置cache的大小，默认的为1024*20=20000，这个也就是可以存多少个session_id，一般都不需要更改的。假如为0的话将是无限
SSL_CTX_sess_set_cache_size(ctx,128);
SSL_CTX_load_verify_locations用于加载受信任的CA证书，CAfile如果不为NULL，则他指向的文件包含PEM编码格式的一个或多 个证书，可以用e.g.来简要介绍证书内容
CApath如果不为NULL，则它指向一个包含PEM格式的CA证书的目录，目录中每个文件包含一份CA证书，文件名是证书中CA名的HASH值
可以用c-rehash来建立该目录，如cd /some/where/certs（包含了很多可信任的CA证书） c_rehash .。返回一成功，0 失败。SSL_CTX_set_default_verify_paths找寻默认的验证路径，在这里肯定找不到的。
这里主要set cert_store
char *CAfile=NULL,*CApath=NULL;
SSL_CTX_load_verify_locations(ctx,CAfile,CApath);
当需要客户端验证的时候，服务器把CAfile里面的可信任CA证书发往客户端。
if(CAfile !=NULL )SSL_CTX_set_client_CA_list(ctx,SSL_load_client_CA_file(CAfile));
设置最大的验证用户证书的上级数。
SSL_CTX_set_verify_depth(ctx,10);
当使用RSA算法鉴别的时候，会有一个临时的DH密钥磋商发生。这样会话数据将用这个临时的密钥加密，而证书中的密钥中做为签名。
所以这样增强了安全性，临时密钥是在会话结束消失的，所以就是获取了全部信息也无法把通信内容给解密出来。
static unsigned char dh512_p[]={
0xDA,0x58,0x3C,0x16,0xD9,0x85,0x22,0x89,0xD0,0xE4,0xAF,0x75,
0x6F,0x4C,0xCA,0x92,0xDD,0x4B,0xE5,0x33,0xB8,0x04,0xFB,0x0F,
0xED,0x94,0xEF,0x9C,0x8A,0x44,0x03,0xED,0x57,0x46,0x50,0xD3,
0x69,0x99,0xDB,0x29,0xD7,0x76,0x27,0x6B,0xA2,0xD3,0xD4,0x12,
0xE2,0x18,0xF4,0xDD,0x1E,0x08,0x4C,0xF6,0xD8,0x00,0x3E,0x7C,
0x47,0x74,0xE8,0x33,
};
static unsigned char dh512_g[]={0x02,};
DH *dh=DH_new();
dh-&amp;gt;p=BN_bin2bn(dh512_p,sizeof(dh512_p),NULL);
dh-&amp;gt;g=BN_bin2bn(dh512_g,sizeof(dh512_g),NULL);
SSL_CTX_set_tmp_dh(ctx,dh);
下面加载服务器的证书和私钥，私钥可以和证书在一个文件之中。判断私钥和证书是否匹配。
char *s_cert_file=&amp;ldquo;server.pem&amp;rdquo;;
char *s_key_file=NULL;
SSL_CTX_use_certificate_file(ctx,s_cert_file,SSL_FILETYPE_PEM);
获取私钥之前先把私钥的密码给写上
char *pKeyPasswd=&amp;ldquo;serve&amp;rdquo;;
SSL_CTX_set_default_passwd_cb_userdata(ctx, pKeyPasswd);
SSL_CTX_use_PrivateKey_file(ctx,s_cert_file,SSL_FILETYPE_PEM);</description>
    </item>
    
    <item>
      <title>使用 OpenSSL API 进行安全编程【转载】</title>
      <link>https://blog.alswl.com/2009/03/safe-use-of-openssl-api-programming/</link>
      <pubDate>Tue, 17 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/safe-use-of-openssl-api-programming/</guid>
      <description>使用 OpenSSL API 进行安全编程
创建基本的安全连接和非安全连接
级别： 初级
Kenneth Ballard (kenneth.ballard@ptk.org), 自由程序员
2004 年 8 月 09 日
学习如何使用 OpenSSL &amp;mdash;- 用于安全通信的最著名的开放库 &amp;mdash;- 的 API 有些强人所难，因为其文档并不完全。您可以通过本文中的提示补充这方面的知识，并驾驭该 API。在建立基本的连接之后，就可以查看如何使用 OpenSSL 的 BIO 库来建立安全连接和非安全连接。与此同时，您还会学到一些关于错误检测的知识。
OpenSSL API 的文档有些含糊不清。因为还没有多少关于 OpenSSL 使用的教程，所以对初学者来说，在应用程序中使用它可能会有一些困难。那么怎样才能使用 OpenSSL 实现一个基本的安全连接呢？本教程将帮助您解决这个问题。
学习如何实现 OpenSSL 的困难部分在于其文档的不完全。不完全的 API 文档通常会妨碍开发人员使用该 API，而这通常意味着它注定要失败。但 OpenSSL 仍然很活跃，而且正逐渐变得强大。这是为什么？
OpenSSL 是用于安全通信的最著名的开放库。在 google 中搜索&amp;quot;SSL library&amp;quot;得到的返回结果中，列表最上方就是 OpenSSL。它诞生于 1998 年，源自 Eric Young 和 Tim Hudson 开发的 SSLeay 库。其他 SSL 工具包包括遵循 GNU General Public License 发行的 GNU TLS，以及 Mozilla Network Security Services（NSS）（请参阅本文后面的 参考资料 ，以获得其他信息）。</description>
    </item>
    
    <item>
      <title>用OpenSSL创建证书时用到的命令【原创】</title>
      <link>https://blog.alswl.com/2009/03/using-openssl-to-create-certificates-using-the-command/</link>
      <pubDate>Tue, 17 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/using-openssl-to-create-certificates-using-the-command/</guid>
      <description>这几天在弄OpenSSL需要使用的证书，翻了很多文档，找来一《本OpenSSL与网络信息安全- 基础、结构和指令》，书上的密码学和OpenSSL的基础介绍的很详细，但是缺少一些实例。
这证书死活做不出来，最后在《计算机网络高级软件编程技术》上第19章&amp;quot;利用OpenSSL实现安全的Web Server&amp;quot;中找到自己需要的内容，现在分享一下。
1.生成CA中心的私钥
openssl req -newkey rsa:1024 -sha1 -keyout rootkey.pem -out rootreq.pem
2.生成CA中心的自签证书
openssl x509 -req -in rootreq.pem -sha1 -extensions v3_ca -days 365 -signkey rootkey.pem -out rootcert.pem
3.生成A分支机构的私钥和认证请求
openssl req -newkey rsa:1024 -sha1 -keyout Akey.pem -out Areq.pem
PS:如果出现 Unable to load config info from c:/openssl/ssl/openssl.cnf 的错误提示，说明系统环境没有配置好，找不到Openssl.cnf配置文件
那么这时候可以把命令修改为： openssl req -newkey rsa:1024 -sha1 -keyout Akey.pem -out Areq.pem -config D:StudyOpenSSLopenssl-0.9.8jappsopenssl.cnf
注意：这个 openssl.cnf 文件定位根据自己的OpenSSL位置修改。
4.由CA中心为A分支机构签发证书
openssl x509 -req -in Areq.pem -sha1 -extensions usr_cert -CA rootcert.</description>
    </item>
    
    <item>
      <title>常见证书格式和转换【转载】</title>
      <link>https://blog.alswl.com/2009/03/common-certificate-format-and-conversion/</link>
      <pubDate>Sun, 15 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/common-certificate-format-and-conversion/</guid>
      <description>这些文字都是转来转去，都找不到原作者是谁，唉````
仍然感谢作者的贡献&amp;hellip;.
PKCS 全称是 Public-Key Cryptography Standards ，是由 RSA 实验室与其它安全系统开发商为促进公钥密码的发展而制订的一系列标准，PKCS 目前共发布过 15 个标准。 常用的有：
PKCS#7 Cryptographic Message Syntax Standard
PKCS#10 Certification Request Standard
PKCS#12 Personal Information Exchange Syntax Standard
X.509是常见通用的证书格式。所有的证书都符合为Public Key Infrastructure (PKI) 制定的 ITU-T X509 国际标准。
PKCS#7 常用的后缀是： .P7B .P7C .SPC
PKCS#12 常用的后缀有： .P12 .PFX
X.509 DER 编码(ASCII)的后缀是： .DER .CER .CRT
X.509 PAM 编码(Base64)的后缀是： .PEM .CER .CRT
.cer/.crt是用于存放证书，它是2进制形式存放的，不含私钥。
.pem跟crt/cer的区别是它以Ascii来表示。
pfx/p12用于存放个人证书/私钥，他通常包含保护密码，2进制方式
p10是证书请求
p7r是CA对证书请求的回复，只用于导入
p7b以树状展示证书链(certificate chain)，同时也支持单个证书，不含私钥。
一 用openssl创建CA证书的RSA密钥(PEM格式)：
openssl genrsa -des3 -out ca.</description>
    </item>
    
    <item>
      <title>用OpenSSL生成证书</title>
      <link>https://blog.alswl.com/2009/03/using-openssl-to-generate-certificates/</link>
      <pubDate>Sun, 15 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/using-openssl-to-generate-certificates/</guid>
      <description>这些命令虽然是linux下面的，但是在windows下面也能用
我遇到I am unable to access the ./demoCA/newcerts directory ./demoCA/newcerts: No such file or directory 然后找到这篇文章，只要用生成相应的目录就可以了。
我遇到的第二个问题是TXT_DB error number 2 在redhat的网站[kbase.redhat.com/faq/docs/DOC-3624] (http://kbase.redhat.com/faq/docs/DOC-3624)这篇文章。
我将原来index.txt里面的内容剪切出，然后重新签证，再把剪切出的内容粘贴到后来生成文件之前，就解决了那个问题。
下面是网上的资料：OpenSSL相关命令hi.baidu.com/kobetec/blog/item/706fc0440ff3b44a510ffe0b.html
这个是一个不错的资料参考，就转载过来，谢谢原作者
命令操作：
1、生成普通私钥：
[weigw@TEST src]$ openssl genrsa -out privatekey.key 1024
Generating RSA private key, 1024 bit long modulus &amp;hellip;.++++++ &amp;hellip;&amp;hellip;.++++++ e is 65537 (0x10001)
2、生成带加密口令的密钥：
[weigw@TEST src]$ openssl genrsa -des3 -out privatekey.key 1024
Generating RSA private key, 1024 bit long modulus &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;++++++ &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;++++++ e is 65537 (0x10001) Enter pass phrase for privatekey.</description>
    </item>
    
    <item>
      <title>OpenSSL初接触</title>
      <link>https://blog.alswl.com/2009/03/early-contact-with-openssl/</link>
      <pubDate>Thu, 05 Mar 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/03/early-contact-with-openssl/</guid>
      <description>Boss昨个儿说，这两天把SSL上面的相关东西给他去看一下
苦命啊，最近都在做Ajax，SSL几乎没有什么动静。唉，今天中午没吃饭，没睡觉，就开始做SSL
耗费了很多时间，才正确的编译完OpenSSL
要做的东西是基于C#的、利用OpenSSL开源代码完成的SSL分级服务器，很是麻烦，要用C#来调用C程序，而且OpenSSL本来就很难使用，唉，残念啊。
下面把我今天的成果分享一下：
[C#]用HttpWebRequest加载证书建立SSL通道时发生异常的解决办法- 旁观 &amp;hellip;
OpenSSL- .net，C++/CLI语言的一次实践
OpenSSL: The Open Source toolkit for SSL/TLS
使用OpenSSL API 进行安全编程
[在C#工程中使用OPENSSL](http://www.cnblogs.com/sleepingwit/archive/2008/11/03/132333 4.html)
本文介绍在VC 6.0中编译和使用OpenSSL的过程- 微光的闪现- 博客园
深信服SSL VPN M4.0正式发布
这些是我使用的资料，搜集了好几天的
关于OpenSSL编译，源码文件夹下的INSTALL.W32就说的很清楚
本文介绍在VC 6.0中_编译_和使用_OpenSSL_的过程- 微光的闪现- 博客园
_openssl编译_步骤- 太郎之石的专栏- CSDNBlog
在Windows下使用汇编方式_编译OpenSSL_方法- rabbit729的专栏- CSDNBlog
在Windows下_编译OpenSSL_（VS2005） - shootingstars - 博客园
之前我按照官方做法编译失败了，后来安装了VS2005之后就成功了，可能是环境配置的问题，如果VC6.0的朋友遇到和我一样的原因，可以换Visual Studio下面的&amp;quot;Visual Studio 2005 命令提示&amp;quot;试试</description>
    </item>
    
  </channel>
</rss>
