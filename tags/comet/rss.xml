<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Comet on Log4D</title>
    <link>https://blog.alswl.com/tags/comet/</link>
    <description>Recent content in Comet on Log4D</description>
    <generator>Hugo -- 0.134.2</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 30 May 2012 10:40:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/comet/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务器 Push 技术</title>
      <link>https://blog.alswl.com/2012/05/comet/</link>
      <pubDate>Wed, 30 May 2012 10:40:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/05/comet/</guid>
      <description>&lt;p&gt;服务器 Push 技术表示服务器可以主动推送消息给客户端浏览器。&lt;/p&gt;
&lt;h2 id=&#34;实现方式&#34;&gt;实现方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Comet
&lt;ul&gt;
&lt;li&gt;Ajax 轮询&lt;/li&gt;
&lt;li&gt;iframe / htmlfile&lt;/li&gt;
&lt;li&gt;script tag （不中断的连续请求）&lt;/li&gt;
&lt;li&gt;Flash 通讯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebSocket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comet 本意是彗星，彗星尾巴痕迹很像长连接工作方式，所以 Comet 指代长连接。
在 Ajax 轮询的分类上，存在一些分歧，这里我把轮询认为一种 Comet 方式。&lt;/p&gt;
&lt;p&gt;ps：「长连接」在一些场景下，是另外一种意义「HTTP: Keep alive」。不在本文讨论的范围中。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/cn/web/wa-lo-comet/&#34;&gt;Comet：基于 HTTP 长连接的「服务器推」技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://socket.io/#browser-support&#34;&gt;Socket.IO Supported transports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;浏览器支持情况&#34;&gt;浏览器支持情况&lt;/h3&gt;
&lt;p&gt;WebSocket 属于 HTML5 规范，需要「先进」浏览器支持，
Flash 通讯需要浏览器安装 Flash 插件，其他方式都可以适应常见浏览器。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>服务器 Push 技术表示服务器可以主动推送消息给客户端浏览器。</p>
<h2 id="实现方式">实现方式</h2>
<ul>
<li>Comet
<ul>
<li>Ajax 轮询</li>
<li>iframe / htmlfile</li>
<li>script tag （不中断的连续请求）</li>
<li>Flash 通讯</li>
</ul>
</li>
<li>WebSocket</li>
</ul>
<p>Comet 本意是彗星，彗星尾巴痕迹很像长连接工作方式，所以 Comet 指代长连接。
在 Ajax 轮询的分类上，存在一些分歧，这里我把轮询认为一种 Comet 方式。</p>
<p>ps：「长连接」在一些场景下，是另外一种意义「HTTP: Keep alive」。不在本文讨论的范围中。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">Comet：基于 HTTP 长连接的「服务器推」技术</a></li>
<li><a href="http://socket.io/#browser-support">Socket.IO Supported transports</a></li>
</ul>
<!-- more -->
<h3 id="浏览器支持情况">浏览器支持情况</h3>
<p>WebSocket 属于 HTML5 规范，需要「先进」浏览器支持，
Flash 通讯需要浏览器安装 Flash 插件，其他方式都可以适应常见浏览器。</p>
<p>参考连接：</p>
<ul>
<li><a href="http://zh.wikipedia.org/wiki/HTTP%E6%8C%81%E4%B9%85%E9%93%BE%E6%8E%A5">HTTP持久链接</a></li>
<li>[Comet (programming)](<a href="http://en.wikipedia.org/wiki/Comet_(programming">http://en.wikipedia.org/wiki/Comet_(programming</a>))</li>
<li><a href="http://www.cnblogs.com/tianzhiliang/archive/2011/06/13/2079564.html">一个误解: 单个服务器程序可承受最大连接数「理论」上是「65535」</a></li>
<li><a href="http://www.zeitoun.net/articles/comet_and_php/start">How to implement COMET with PHP</a></li>
</ul>
<h2 id="各大网站连接情况">各大网站连接情况</h2>
<p>可以通过 url 请求来揣测一些东西，比如说，它们没有用 WebSocket，
否则 FireBug 是无法监测的，WebSocket 可以双向通讯。</p>
<h3 id="新浪微博">新浪微博</h3>
<p>未读信息链接： <code>http://rm.api.weibo.com/remind/unread_count.json?target=api&amp;_pid=10001&amp;count=2&amp;source=3818214747&amp;callback=STK_133834300664875</code></p>
<p>未读信息大约每20秒触发一次，像是 Ajax 轮询。</p>
<p>IM 长连接：
<code>http://4.46.web1.im.weibo.com/im?jsonp=parent.org.cometd.script._callback5&amp;message=%5B%7B%22channel%22%3A%22%2Fmeta%2Fconnect%22%2C%22connectionType%22%3A%22callback-polling%22%2C%22id%22%3A6%2C%22clientId%22%3A%22b02qp9qw9cgiuxxyn3%22%7D%5D&amp;1338343019008</code></p>
<p>可以看出新浪在使用 JSONP 跨域做 IM 长连接，FireBug 中也始终有链接请求，
看上去像 Script Tag 请求方式。</p>
<h3 id="知乎">知乎</h3>
<p>请求链接：
<code>http://comet.zhihu.com/update?loc=http%3A%2F%2Fwww.zhihu.com%2F&amp;channel=13781e6817833300f0a70f19&amp;callback=zhp13781e6a6f22349b9865b47c8</code></p>
<p>依然能在 FireBug 中看到请求地址，说明客户端请求数据还是走 HTTP 方式，
并且会出现 update 动作链接一直出于请求状态，猜测知乎仍然使用 Script Tag 请求。</p>
<h2 id="框架支持">框架支持</h2>
<h3 id="orbited2">orbited2</h3>
<p><a href="http://labs.gameclosure.com/orbited2/">http://labs.gameclosure.com/orbited2/</a></p>
<ul>
<li>跨浏览器</li>
<li>容易集成：IRC / XMPP / ActiveMQ / RabbitMQ</li>
<li>Python</li>
</ul>
<h3 id="streamhub">StreamHub</h3>
<p><a href="http://www.stream-hub.com/">http://www.stream-hub.com/</a></p>
<ul>
<li>免费版仅支持 10 个在线</li>
<li>支持 Java / .net / iPhone</li>
</ul>
<h3 id="socketio">socket.io</h3>
<p><a href="http://socket.io/">http://socket.io/</a></p>
<ul>
<li>NodeJS</li>
<li>推送方式：
<ul>
<li>WebSocket</li>
<li>Adobe® Flash® Socket</li>
<li>AJAX long polling</li>
<li>AJAX multipart streaming</li>
<li>Forever Iframe</li>
<li>JSONP Polling</li>
</ul>
</li>
<li>支持浏览器：
<ul>
<li>Internet Explorer 5.5+</li>
<li>Safari 3+</li>
<li>Google Chrome 4+</li>
<li>Firefox 3+</li>
<li>Opera 10.61+</li>
<li>iPhone Safari</li>
<li>iPad Safari</li>
<li>Android WebKit</li>
<li>WebOs WebKit</li>
</ul>
</li>
</ul>
<h3 id="sockjs-client">sockjs-client</h3>
<p><a href="https://github.com/sockjs/sockjs-client">https://github.com/sockjs/sockjs-client</a></p>
<ul>
<li>支持 Node.js / Erlang / Lua / Python-Tornado</li>
<li>跨浏览器</li>
</ul>
<h2 id="实战-socketio">实战 Socket.io</h2>
<p>考虑到上述候选框架的使用场景，这里选择 Socket.IO 作为 Comet 框架。</p>
<h3 id="尴尬的-pylons">尴尬的 Pylons</h3>
<p>Pylons 和 Comet 配合有问题，问题处在标准 WSGI 是非异步的。
（看邮件列表里面，似乎新的标准准备支持）。</p>
<ul>
<li><a href="http://stackoverflow.com/a/3090118">http://stackoverflow.com/a/3090118</a></li>
<li><a href="http://mail.python.org/pipermail/web-sig/2008-July/003545.html">http://mail.python.org/pipermail/web-sig/2008-July/003545.html</a></li>
<li><a href="http://pypi.python.org/pypi/Spawning/">Spawning</a></li>
</ul>
<p>这样的话，我就直接选择使用 Node.JS 做 Comet 服务器，Nginx 负责转发。</p>
<h3 id="简单demo">简单Demo</h3>
<p>node.js 代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/* global __dirname, console */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading index.html&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">hello</span><span class="o">:</span> <span class="s1">&#39;world, for everyone!&#39;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;my other event&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;private message&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I received a private message by &#39;</span><span class="p">,</span> <span class="nx">from</span><span class="p">,</span> <span class="s1">&#39; saying &#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>页面代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;content-type&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;text/html; charset=utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Socket.io Demo<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/socket.io/socket.io.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;my other event&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">my</span><span class="o">:</span> <span class="s1">&#39;data&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>连接成功之后，在浏览器控制台里面，可以使用 <code>socket.emit('my other event', {biu: 'biu'});</code>
向服务器发送消息。</p>
<p>服务器也可以通过 <code>socket.emit()</code> 来向客户端推送消息。</p>
<p>私有信息发送，使用 <code>socket.emit('private message', 'James', {some: 'message'});</code> 。</p>
<h3 id="跨平台">跨平台</h3>
<p>实测看来，在 IE8 下面， Socket.io 会降级使用 <code>htmlfile</code> 来实现 Comet。</p>
<p>而 Firefox 中会有 <code>websocket / htmlfile / xhr-polling / jsonp-polling</code> 依次备选，
首选 websocket。</p>
<h3 id="安全性">安全性</h3>
<p>问题：提交数据的身份认证过程，以前在后台由 Web 框架自动完成，而现在流程是
Socket.IO -&gt; RabbitMQ -&gt; Web App，身份验证的复杂度增加了。</p>
<p>思路：Socket.IO 使用 Nginx 代理转发，从而保留同一域名下面的 cookie 信息，
这样能够提交到 Socket.IO 服务器，每次 RabbitMQ Message 都记录 cookie 信息，
后台从 RabbitMQ 读取信息时候，再进行认证。</p>
<p>实际操作：由于 Comet 中的数据流仅负责推送，客户端继续使用原始 POST
方式发送数据到服务器，所以暂时不会产生身份认证问题。</p>
<h2 id="node-ampq-驱动">Node AMPQ 驱动</h2>
<p>Socket.IO 提供了一个通用的 Comet 解决方案，下面就需要点润滑剂，将整个数据流跑通。
消息队列 RabbitMQ 正好适合用来做这个。</p>
<p>Rabbit 官网提到了一个套件 <a href="https://github.com/squaremo/rabbit.js">rabbit.js</a> 。
遗憾的是这个库是混合了 RabbitMQ 和 Node.JS，提供了一个封装好的 Node.JS 库，
而我想要的仅仅是一个 AMPQ 协议驱动。<a href="https://github.com/postwait/node-amqp/blob/master/amqp.js">node-amqp</a> 则是我们需要的驱动。</p>
<h3 id="demo">Demo</h3>
<p>服务器接收者脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/* global __dirname, console */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">conn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;amqp&#39;</span><span class="p">).</span><span class="nx">createConnection</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;amqp://localhost&#39;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;socket works&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">conn</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;conn ready&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nx">queue</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">passive</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">queue</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">queue</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">deliveryInfo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;#json:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">view</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;#headers:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">view</span><span class="p">(</span><span class="nx">headers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;#deliveryInfo:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">view</span><span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">conn</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">view</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>用 Python 写的发送者脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># coding=utf-8</span>
</span></span><span class="line"><span class="cl"><span class="c1">#! /usr/bin/env python2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pika</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">chan</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">chan</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span><span class="o">=</span><span class="s1">&#39;socket.io&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">message</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;no&#39;</span><span class="p">:</span> <span class="n">count</span><span class="p">,</span> <span class="s1">&#39;some&#39;</span><span class="p">:</span> <span class="s1">&#39;Message&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;比如&#39;</span><span class="p">:</span> <span class="sa">u</span><span class="s1">&#39;中文信息&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">publish_text</span><span class="p">(</span><span class="n">chan</span><span class="p">,</span> <span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;text </span><span class="si">%d</span><span class="s1">&#39;</span> <span class="o">%</span><span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">publish_json</span><span class="p">(</span><span class="n">chan</span><span class="p">,</span> <span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;add one message to RabbitMQ&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#time.sleep(5) # sleep 5 sec</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">publish_text</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">routing_key</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">body</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">message</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                          <span class="n">properties</span><span class="o">=</span><span class="n">pika</span><span class="o">.</span><span class="n">BasicProperties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;text/plain&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">delivery_mode</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                         <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">publish_json</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">routing_key</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">body</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">message</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                          <span class="n">properties</span><span class="o">=</span><span class="n">pika</span><span class="o">.</span><span class="n">BasicProperties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">content_encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">delivery_mode</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                         <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><p>使用 <code>node ./app-amqp.js</code> 运行 Node.JS 服务器，然后运行 <code>producter.py</code> 产生
RabbitMQ Message，我使用的数据格式是序列化的 JSON 字串，
还有 <code>JSON, Thrift, Protocol Buffers, MessagePack</code> 这些格式可供选择。运行结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">#json:
</span></span><span class="line"><span class="cl">data: &#34;text 1&#34;
</span></span><span class="line"><span class="cl">UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-3: ordinal not icontentType: text/plain
</span></span><span class="line"><span class="cl">#headers:
</span></span><span class="line"><span class="cl">#deliveryInfo:
</span></span><span class="line"><span class="cl">contentType: text/plain
</span></span><span class="line"><span class="cl">contentEncoding: utf-8
</span></span><span class="line"><span class="cl">deliveryMode: 1
</span></span><span class="line"><span class="cl">queue: socket.io
</span></span><span class="line"><span class="cl">deliveryTag: 19
</span></span><span class="line"><span class="cl">redelivered: false
</span></span><span class="line"><span class="cl">exchange:
</span></span><span class="line"><span class="cl">routingKey: socket.io
</span></span><span class="line"><span class="cl">consumerTag: node-amqp-10880-0.06487216474488378
</span></span><span class="line"><span class="cl">#json:
</span></span><span class="line"><span class="cl">比如: 中文信息
</span></span><span class="line"><span class="cl">some: Message
</span></span><span class="line"><span class="cl">no: 1
</span></span><span class="line"><span class="cl">#headers:
</span></span><span class="line"><span class="cl">#deliveryInfo:
</span></span><span class="line"><span class="cl">contentType: application/json
</span></span><span class="line"><span class="cl">contentEncoding: utf-8
</span></span><span class="line"><span class="cl">deliveryMode: 1
</span></span><span class="line"><span class="cl">queue: socket.io
</span></span><span class="line"><span class="cl">deliveryTag: 20
</span></span><span class="line"><span class="cl">redelivered: false
</span></span><span class="line"><span class="cl">exchange:
</span></span><span class="line"><span class="cl">routingKey: socket.io
</span></span><span class="line"><span class="cl">consumerTag: node-amqp-10880-0.06487216474488378
</span></span></code></pre></div><p>里面有两个 Message，发送数据格式为 <code>text/plain</code> 和 <code>application/json</code> 。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://pika.github.com/">Pika Document</a></li>
</ul>
<h2 id="socketio--rabbitmq">Socket.IO + RabbitMQ</h2>
<p>最后提供 Socket.IO + RabbitMQ 的完整 Demo，客户端会实时接受到来自消息发送者的消息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/* global __dirname, console */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/index.html&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Error loading index.html&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;io ready&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">conn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;amqp&#39;</span><span class="p">).</span><span class="nx">createConnection</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;amqp://localhost&#39;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;conn ready&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conn</span><span class="p">.</span><span class="nx">queue</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">passive</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">queue</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">			<span class="nx">queue</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">deliveryInfo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">.</span><span class="nx">contentType</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">.</span><span class="nx">contentType</span> <span class="o">==</span> <span class="s1">&#39;application/json&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="nx">json</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="nx">deliveryInfo</span><span class="p">.</span><span class="nx">contentType</span> <span class="o">==</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">,</span> <span class="nx">json</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">});</span>
</span></span><span class="line"><span class="cl">		<span class="p">});</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>在运行 <code>producter.py</code> 后，Python 脚本持续产生 Message 到 RabbitMQ，
<code>app-amqp-socket.js</code> 订阅读取 Message 并推送到浏览器端。
浏览器可以在 Console 里面看到日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Object { 比如=&#34;中文信息&#34;, some=&#34;Message&#34;, no=1}
</span></span></code></pre></div><p>至此，我们可以完成 WebApp -&gt; RabbitMQ -&gt; Socket.IO -&gt; Browser 的实时推送。</p>
]]></content:encoded>
    </item>
    <item>
      <title>AzaAjaxChat笔记-实现</title>
      <link>https://blog.alswl.com/2010/08/azaajaxchat-notes-implementation/</link>
      <pubDate>Sun, 22 Aug 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/08/azaajaxchat-notes-implementation/</guid>
      <description>&lt;p&gt;唔，继续整理笔记，这些是在代码编写中遇到的问题和解决办法的总结，不是 Turtial，问题有针对性，内容枯燥，路人可以直接忽略~&lt;/p&gt;
&lt;h2 id=&#34;一comet-服务器推技术&#34;&gt;一、Comet 服务器推技术&lt;/h2&gt;
&lt;p&gt;Comet 推技术，一句话概括，就是形成一个不断开的连接，使得服务器能主动向客户端发送信息。这种技术在交互性强的 Web 产品中应用的非常多，比如 GMail。Co
met 的实现方式有两种：基于 AJAX 的长轮询（long-polling）方式和基于 Iframe 及 htmlfile
的流（streaming）方式，具体两种实现方式可以参考&lt;a href=&#34;http://www.ibm.com/developerworks/cn/web/wa-lo-comet/&#34;&gt;Comet：基于 HTTP 长连接的&amp;quot;服务器推&amp;quot;技术&lt;/a&gt;。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>唔，继续整理笔记，这些是在代码编写中遇到的问题和解决办法的总结，不是 Turtial，问题有针对性，内容枯燥，路人可以直接忽略~</p>
<h2 id="一comet-服务器推技术">一、Comet 服务器推技术</h2>
<p>Comet 推技术，一句话概括，就是形成一个不断开的连接，使得服务器能主动向客户端发送信息。这种技术在交互性强的 Web 产品中应用的非常多，比如 GMail。Co
met 的实现方式有两种：基于 AJAX 的长轮询（long-polling）方式和基于 Iframe 及 htmlfile
的流（streaming）方式，具体两种实现方式可以参考<a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">Comet：基于 HTTP 长连接的&quot;服务器推&quot;技术</a>。</p>
<p>我计划把这个技术引入，成为一个亮点，第二种 Comet 实现方式过于复杂（GMail 使用的就是这种），我就尝试第一种。我在测试环境测试了基于 AJAX 的长轮询
（long-polling）方式。这种方式说白了就是在 Ajax 获取返回数据时候，在状态吗为 4（数据传输完成）情况随后进行下次查询。进行循环的查询。</p>
<p>这种 Long-polling 的轮询方式有点伪 Comet。相对于常见的定时查询，不同点是将&quot;查询-&gt;返回-&gt;再查询&quot;中间的一段断开时间进行重连接。最后因为技术
实现和开发时间，我决定放弃了 Comet 的实现。</p>
<p>PS：一个系统应该不仅仅是技术的堆积，也应该考虑其他的一些因素，是否有确实需求，开发效率问题。虽然我做了一些前期准备，最终还是没有加入 Comet，蛮可惜的。</p>
<h3 id="相关链接">相关链接：</h3>
<ul>
<li><a href="http://www.javaeye.com/topic/652949">一步一步打造 WebIM（1） - .net - dotnet - JavaEye 论坛 </a>（.net 使用 IHttpAsyncHandler 的实现）</li>
<li><a href="http://ued.sohu.com/article/118/comment-page-1">Comet&ndash;&ldquo;服务器推&quot;技术 - 搜狐 UED</a>（搜狐 UED 团队的一个小介绍）</li>
</ul>
<h2 id="二用户状态的处理">二、用户状态的处理</h2>
<p>开发时候遇到一个逻辑问题，具体描述如下：&ldquo;一个用户登录长时间不活动（比如直接关闭浏览器），系统需要判定此用户为离线。&ldquo;按照一般设计思路，这个动作应该由后台每
过一段时间自动（比如说 5 分钟）触发一次，如果用 Java 或.net 实现，会考虑设计一个后台运行的进程进行管理。而现在用的 PHP，我查了一下，似乎没有找到相应的
解决办法。</p>
<p>我尝试在系统中设定一个页面每隔几分钟触发一个动作，放置在 index.php 页面中，但是感觉这个设计有点鸡肋。</p>
<p>这个问题困惑我很久，最后参考了<a href="https://blueimp.net/ajax/">AJAX Chat</a>的源码，它的思路是在一个新用户上线时候，进行检测所
有用户距离上次其活动的时间来判定每个用户的离线状态。这个也不是最优想法（万一长时间没有用户登录怎么办？），但是比上面那个定时页面要好多了。</p>
<p>如果有 PHP 达人看到这个，望不惜赐教。</p>
<h2 id="三rtmp">三、RTMP</h2>
<p>RTPM 是一个流媒体传输的协议，我在 AzaAjaxChat 中用它进行视频聊天画面和音频传输。这块内容可以洋洋洒洒的写一大篇日志，我在这里只是简单罗列一下我用
到的相关内容。</p>
<blockquote>
<p>Real Time Messaging Protocol（实时消息传送协议协议）概述，实时消息传送协议是 Adobe
Systems 公司为 Flash 播放器和服务器之间音频、视频和数据传输开发的私有协议。它有三种变种： 1)工作在 TCP 之上的明文协议，使用端口 1935；
2)RTMPT 封装在 HTTP 请求之中，可穿越防火墙； 3)RTMPS 类似 RTMPT，但使用的是 HTTPS 连接；</p>
<p>RTMP 协议是被 Flash 用于对象，视频，音频的传输.该协议建立在 TCP 协议或者轮询 HTTP 协议之上。</p>
<p>RTMP 协议就像一个用来装数据包的容器，这些数据可以是 AMF 格式的数据，也可以是 FLV 中的视/音频数据。一个单一的连接可以通过不同的通道传输多路网络流。
这些通道中的包都是按照固定大小的包传输的。</p>
</blockquote>
<p>我使用 FMS 作为 RTPM 容器，Adobe FMS（Flash Media Server）是一款能够提供出色的 Flash
Video 流媒体播放功能的服务器软件。</p>
<p>FMS 提供一个强大 Script 可定制脚本的服务器流媒体引擎，通过这个引擎，允许创建和交付面向互联网任何用户群体的交互媒体应用及服务。FMS 还是 Adobe 公司
跨媒体解决方案中的一部分，针对诸如数据库连接访问、文件系统操作、服务访问等要求，可以同 Adobe Flash Player 与 Adobe AIR 一起来实现。</p>
<h2 id="四基于-flex-的流媒体传输">四、基于 Flex 的流媒体传输</h2>
<h3 id="41-官方-sample-stratus">4.1 官方 Sample-Stratus</h3>
<p>AzaAjaxChat 中最技术含量的地方在于语音视频聊天。Adobe 官网在 Flex 子类中提供了一个 Demo 名叫<a href="http://labs.adobe.com/technologies/stratus/samples/">Stratus</a>，正是一个聊天系统。从教程上看，Adobe 公司目前开放的 Stratus 是同时支
持视频和语音 P2P 的，同时，未来的 FMS 也可能会支持 P2P。</p>
<p>Adobe 的某个专家博客还针对 Stratus 有一篇相当详细的讲解，原文在此<a href="http://www.adobe.com/devnet/flashplayer/articles/rtmfp_stratus_app.html">Stratus service for developing end-to- end applications using RTMFP in Flash Player 10 | Adobe Developer Connection</a>，文中分析了
RTMFP（比 RTMP 更高阶的流媒体传输协议，支持 P2P）和 Stratus 的相关核心代码。我本想把这篇文章翻译，完成 10%之后，意外发现已经有人翻译了，地址
在此【通过 Stratus 服务器在 Flash Player 中使用 RTMFP 开发 点对点应用（一） &ndash; Windows Live】(<a href="http://snowyrock.spaces.live.com/Blog/cns!B8CBEB7169880B1D!1279.entry?wa=wsignin1.0&amp;sa=18">http://snowyrock.spaces.live.com/Blog/cns!B8CBEB7169880B1D!1279.entry?wa=wsignin1.0&amp;sa=18</a>
3740112)，<a href="http://snowyrock.spaces.live.com/blog/cns!B8CBEB7169880B1D!1278.entry?_c=BlogPart">通过 Stratus 服务器在 Flash Player 中使用 RTMFP 开发 点对点应用（二） &ndash; Windows Live</a>
。</p>
<p>同时可以参考其他例子<a href="http://www.cnblogs.com/beniao/archive/2009/04/28/1444159.html">FMS3 系列（五）：通过 FMS 实现时时视频聊天（Flash|Flex） - Bēniaǒ成长笔记 - 博客园</a>。</p>
<h3 id="42-azaajaxchat-视频语音核心代码">4.2 AzaAjaxChat 视频语音核心代码</h3>
<p>下面是核心代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span> <span class="k">function</span> <span class="nf">starChat</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">MouseEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//同时开始监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">doReceive</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//初始化一个网络连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetConnection</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//开始连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span><span class="o">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">rtmpUrl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//为这个连接添加事件，这个事件有返回连接状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span><span class="o">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">NetStatusEvent</span><span class="o">.</span><span class="nx">NET_STATUS</span><span class="p">,</span><span class="nx">onPublishNetStatusHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">microphone</span> <span class="o">=</span> <span class="nx">Microphone</span><span class="o">.</span><span class="nx">getMicrophone</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="nx">camera</span> <span class="o">=</span> <span class="nx">Camera</span><span class="o">.</span><span class="nx">getCamera</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">camera</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Alert</span><span class="o">.</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;没有开启摄像头或者没有安装摄像头&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="nx">videoPublish</span><span class="o">.</span><span class="nx">attachCamera</span><span class="p">(</span><span class="nx">camera</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">onPublishNetStatusHandler</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">NetStatusEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//根据连接返回的状态信息判断是滞连接成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="o">==</span><span class="s2">&#34;NetConnection.Connect.Success&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n 发布连接建立成功&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetStream</span><span class="p">(</span><span class="nx">publicNc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">attachAudio</span><span class="p">(</span><span class="nx">microphone</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">attachCamera</span><span class="p">(</span><span class="nx">camera</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">client</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">publish</span><span class="p">(</span><span class="nx">publicName</span><span class="p">,</span><span class="s2">&#34;live&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">doReceive</span><span class="p">()</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">receiveNc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetConnection</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//开始连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">receiveNc</span><span class="o">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">rtmpUrl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//为这个连接添加事件，这个事件有返回连接状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">receiveNc</span><span class="o">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">NetStatusEvent</span><span class="o">.</span><span class="nx">NET_STATUS</span><span class="p">,</span><span class="nx">onReceiveNetStatusHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">onReceiveNetStatusHandler</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">NetStatusEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//根据连接返回的状态信息判断是滞连接成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="o">==</span><span class="s2">&#34;NetConnection.Connect.Success&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n 接受连接建立成功&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">receiveNs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetStream</span><span class="p">(</span><span class="nx">publicNc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Video</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">230</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="mi">173</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">attachNetStream</span><span class="p">(</span><span class="nx">receiveNs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="nx">videoReceive</span><span class="o">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">video</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">receiveNs</span><span class="o">.</span><span class="nx">play</span><span class="p">(</span><span class="nx">receiveName</span><span class="p">,</span><span class="s2">&#34;live&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n&#34;</span> <span class="o">+</span>　<span class="nx">event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><h3 id="43-管道-netconnectionconnect">4.3 管道 NetConnection.connect()</h3>
<p>Flex 流媒体传输通过通道传输，在 NetConnection 之上建立连接，由于 RTMP 和 FMS 的存在，我们可以很方便的在网络流上写入和读取流媒体信息。Net
Connection.connect()支持 FMS 流媒体和本地文件，官方解释如下。</p>
<blockquote>
<p>在 Flash Player 或 AIR AIR 应用程序和 Flash Media Server 应用程序之间创建双向连接，NetConnection
对象如同客户端与服务器之间的管道。</p>
<p>如果未使用 Flash Media Server，请调用 NetConnection.connect()，以便从本地文件系统或 Web</p>
</blockquote>
<p>服务器中播放视频和 MP3 文件。有关支持的编解码器和文件格式的信息，请参阅 <a href="http://www.adobe.com/go/hardware_scaling_cn">http://www.adobe.com/go/hardware_scali ng_cn</a>。</p>
<h3 id="44-flashnetnetconnection-上找不到属性-onbwdone">4.4 flash.net.NetConnection 上找不到属性 onBWDone</h3>
<p>这个问题参考<a href="http://blog.csdn.net/xiang08/archive/2009/07/13/4343551.aspx">在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。解决办法。 - Xiang - CSDN 博客</a>，解决如下。</p>
<blockquote>
<p>在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。</p>
<pre tabindex="0"><code>_nc = new NetConnection();
c.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);
c.client = this;
c.objectEncoding = ObjectEncoding.AMF0;
c.connect(&#34;rtmp://localhost/oflaDemo&#34;);
</code></pre><p>首先添加_nc.client = this.</p>
<p>然后新建一个方法：<code>public function onBWDone():void{}</code></p>
<p>问题解决。</p>
</blockquote>
<h2 id="五javascript-和-flex-的交互">五、JavaScript 和 Flex 的交互</h2>
<p>页面上的 Flex 必须响应页面 JavaScript 的触发事件，Adboe 在设计 Flex 时候，预留了相互调用的端口 ExternalInterface，详情可以 Google 之，类似代码如下。</p>
<pre tabindex="0"><code>if (ExternalInterface.available) {
    ExternalInterface.addCallback(&#34;initParams&#34;, initParams);
    ExternalInterface.addCallback(&#34;playSound&#34;, playSound);
} else {
    this.appMessage.text += &#34;nJS 无法调用 Flash，请检查 Flash 环境&#34;;
}
</code></pre><p>但是这种调用方法存在着一个致命的问题：创建一个 swf 的 Object，当对这个 swf 做隐藏/显示的时候(display:none,display:block)
的时候，swf 的所有的注册的 javascritp 函数都会被干掉（ExternalInterface.addCall 方法）。这个是 Flex 的一个 BUG，现在也
还没有解决。</p>
<p>相关讨论可以参见<a href="http://rwl6813021.javaeye.com/blog/236344">Javascript 无法访问 Flex 问题~ - rwl6813021 - JavaEye 技术网站</a>，文中详细讨论了这个问题，并给出一个解决方案。</p>
<p>有一个折中的方案：即通过 LocationConnection（本地通讯，利用两个 swf 来进行交互）来处理，初始化一个调用的 client
swf，负责调用被隐藏的 swf 中的方法，这样就避开了直接通过 javascript 调用被隐藏的 swf 中的方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//1：client 发送端：</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">private</span><span class="w"> </span><span class="kd">var</span><span class="w"> </span><span class="n">ucallswfconn</span><span class="p">:</span><span class="n">LocalConnection</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">function</span><span class="w"> </span><span class="nf">init</span><span class="p">():</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ucallswfconn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LocalConnection</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//注册 Javascritp 方法，网页调用该 flex 的方法，通过该方法中转，调用另外一个 flex 的方法</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ExternalInterface</span><span class="p">.</span><span class="na">addCallback</span><span class="p">(</span><span class="s">&#34;selectCallControl&#34;</span><span class="p">,</span><span class="n">flexSelectCallControl</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="n">function</span><span class="w"> </span><span class="nf">flexSelectCallControl</span><span class="p">(</span><span class="n">method</span><span class="p">:</span><span class="n">String</span><span class="p">,</span><span class="n">param</span><span class="p">:</span><span class="n">String</span><span class="p">):</span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//Alert.show(method+param);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">//调用另外一端 swf 中的方法，参数：1:receiver 端监听的服务名称 2:方法名称 3:参数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">ucallswfconn</span><span class="p">.</span><span class="na">send</span><span class="p">(</span><span class="s">&#34;ucallexternconn&#34;</span><span class="p">,</span><span class="s">&#34;&#34;</span><span class="o">+</span><span class="n">method</span><span class="p">,</span><span class="s">&#34;&#34;</span><span class="o">+</span><span class="n">param</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">//2：receiver 接收端：</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">//add by polarbear, 2008.09.04, 本地通讯</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">this</span><span class="p">.</span><span class="na">ucallexternConn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">LocalConnection</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">this</span><span class="p">.</span><span class="na">ucallexternConn</span><span class="p">.</span><span class="na">allowDomain</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">ucallexternConn</span><span class="p">.</span><span class="na">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">this</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">this</span><span class="p">.</span><span class="na">ucallexternConn</span><span class="p">.</span><span class="na">connect</span><span class="p">(</span><span class="s">&#34;ucallexternconn&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">error</span><span class="p">:</span><span class="n">ArgumentError</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">trace</span><span class="p">(</span><span class="s">&#34;连接失败&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>注意被调用的函数必须是 public 的。</p>
<p>我使用这个方法并没有成功，最后我采用的是将视频画面直接放在界面上（很丑，不得已为之）。上文的解决方案只是给出一个思路，感兴趣的话可以自己试试。</p>
<h2 id="六last">六、Last</h2>
<p>其实还有很多细节地方可以讲讲，我就不一一展开了。整理的文章就是这样，也没什么花样和娱乐，我都懒得加图片了~</p>
<p>祝大家周末愉快，最近我睡眠很不好，每天 6 点就醒了，中午补个觉去……</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
