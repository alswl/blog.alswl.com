<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>读书笔记 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 28 Feb 2016 18:16:01 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>技术之外</title>
      <link>https://blog.alswl.com/2016/02/team-geek/</link>
      <pubDate>Sun, 28 Feb 2016 18:16:01 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2016/02/team-geek/</guid>
      <description>这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。 在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候， 经常和新同事聊到一个词：软实力。 我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样， 我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。 这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力， 而软实力则是考衡人</description>
      <content:encoded><![CDATA[<p>这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。</p>
<hr />
<p>在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候，
经常和新同事聊到一个词：软实力。
我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样，
我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。</p>
<p>这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力，
而软实力则是考衡人的因素。这种晚来的意识让我在一段时间里面，
将自己的工作陷入困境，并且得不到解药。</p>
<p>Google 的两位工程师 Brian W. Fitzpatrick 和 Ben Collins-Sussman
写了一本书<a href="http://book.douban.com/subject/21372237/">极客与团队</a>，通过他们的视角，
告诉大家想要在团队中获得成功的另一面。不要被书名误解，我觉得「开发者和团队」是更好的名字，
虽然没那么酷。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201602/s26354473.jpg" alt="s26354473.jpg"  />

</p>
<!-- more -->
<blockquote>
<p>要在团队中获得成功，你必须以<strong>谦虚</strong>、<strong>尊重</strong>和<strong>信任</strong>为核心原则。</p>
</blockquote>
<p>要做的第一件事情，应该就是沟通了。让自己成为一个玻璃玲珑人，
其他人可以看到你的方向、目标和里程碑，同时可以看到你的进展和问题点。
这样不但可以获得工作中的肯定，当个人的目标设定和团队出现偏差，
又或是开发过程中在一个点停顿了太久，可以有其他人参与进来或直接伸出援手。</p>
<p>这种透明度对上对下都应该如此。团队的领导，
应当在开发周期内的早期就明确告知团队愿景、目标和设定的里程碑。
产生共鸣的愿景可以让人对目标有渴望，对自己工作有认同。
各位还记得中国中小学开学第一周里，大多都有一个开学典礼讲话。讲的好的领导，
会阐述自己的教学理念，去年取得的成绩，今年的教学着重点。
讲的差的领导就是泛泛而谈，每年都是一套话术，完全看不到长进。</p>
<p>缺失沟通，还会将个人陷于单打独斗的境地，一个篮球队需要 5 个人大，
一个人牛逼没屁用。</p>
<p>提高工程质量的一个有效手段就是 CI（持续集成），将开发过程中一点点的小进展都以一种机械的方式呈现出来，
并进行测试。另一个有效手段是 Code Review，不但推荐要 CR，更是要尽早、快速的 CR。
避免屎积压多了拉，太臭。</p>
<p>我突然想到一条实践：即便是做一个人的项目，在精简程度上也保持最小的一个阈值，
想象明天就要长假，工作要交给别人维护，如何在交付物里面有足够的信息让其他人知晓细节。
而不是丢给后继维护者一句冰冷的话：「看代码」。</p>
<p>沟通必须是有效的，我想任何人都不想听一个嘴碎的人在那边逼逼一下午。
有很多结构化、一部的沟通可以显著提高沟通效率：
项目看板、设计文档、Code Review、代码注释、数据字典等。</p>
<p>第二个重要的观点是，接受失败，承认自己不是无能的。你可能很聪明，但所做的事情不一定完全都是正确的，
连上帝都会犯错，何况是普通人。犯错不可怕，但是犯错还认识不到可怕。犯错并且认识到了，
但是拒绝承认错误的人，不是可怕，而是应该要被淘汰，这类人会极其难以合作。
如何你周围都是这样的人，或者你上司是这样的人，也许你可以考虑换一个地方，在拉钩搜索「堆糖」试试吧。</p>
<p>关于接受失败的另外一个隐含后续发展就是「成长」。意识到这个世界是动态发展的，
「要以发展的眼光看待事物」是一个非常非常有用的认知。
能自己意识到失败，并且会主动复盘，重新认知自己的人，往往会成长的极为迅速。
关于成长的话题可以讨论很深，以后可以单独拎出来讨论。</p>
<p>书中提到一个失败后回顾的清单：</p>
<blockquote>
<ol>
<li>简要</li>
<li>时间的时间线，从发现到调查，再到最终见过</li>
<li>事件发生的主因</li>
<li>影响和损失评估</li>
<li>立即修正问题的步骤</li>
<li>防止事件再次发生的步骤</li>
<li>得到的教训</li>
</ol>
</blockquote>
<p>我就哈哈哈了，这不就是我大堆糖的故障报告模板么？</p>
<p>第三点，如何成长？简单来说，去冒险，去承担自己能力之外的任务，
去挑战没有经历过的任务。有一条<a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%E5%8E%9F%E7%90%86">彼得定律</a>：「在组织或企业的等级制度中，
人会因其某种特质或特殊技能，令他在被擢升到不能胜任的职位，相反变成组织的障碍物（冗员）及负资产。」。
前半段含义是，大部分情况下面，并不是具有了相应能力才去承担，而是试着去承担任务。
无论成功与否，对当前去挑战的人来说，都能够得到历练，从而能力得到提升。</p>
<p>第四点是：成为 Leader，而不是 Manager。
一个团队是一艘危机四伏的海面上一只船，如果没有一个船长，那么就前途叵测。
在职业生涯的某些阶段，你可能自然成为船长，也许是一个项目的船长，也许是一个小 Team 的船长。
那么切记，船长是 Leader，而不是 Manager，是能力综合，可守可攻，顺风时候会把舵，
缺人时候可以顶任何岗位的船长。而不是手持大鞭的 Manager。
我觉得新闻联播里面描述的人民公仆，就是一个很好的 Leader。</p>
<p>一年多前之前和铁柱聊过，一个 Leader 是否需要要以能力服众。
我仍然保持当初的观点：「是的」。在目标管理、方向把握上面，
强大的技术背景可以有魄力的开展工作，挖掘新技术，推动变化。
在遇到困难时候，可以决策、解决问题。
这是由这个行业特质决定的，互联网是依赖创造力的脑力劳动，而不是根据人数线性增加产出的体力劳动。</p>
<p>但毕竟不是每个人都一定拥有 Leader 特质，难道就要一辈子做技术得不到上升？
Google 的一种做法，可以很好解决这个问题。分离 TL（techlead）和 TLM（techleadmanager），
前者更着重技术，后者不但关心技术，还关心手下工程师的成长。
用国内互联网的职责分工描述，大概就是有技术专家和团队负责人的区别。</p>
<p>关于这条，书中的几点最佳实践非常棒：</p>
<blockquote>
<ol>
<li>放下自负</li>
<li>做一个禅师（保持冷静和理性）</li>
<li>成为催化剂</li>
<li>当一个导师</li>
<li>设置明确的目标</li>
<li>坦诚（三明治赞美法）</li>
<li>记录快乐程度</li>
</ol>
</blockquote>
<p>最后聊一下对书本身的评价。黄易山在 Quora 写过一段非常有名的
<a href="https://www.quora.com/What-makes-engineering-management-hard">为什么工程师管理这么难？</a>。
这本书讨论的内容要比黄易山那篇回答范围更大，讲述的也更详细（废话，这是书）。
作者是典型的工程师，书目结构易读，第五章从反模式来思考问题非常赞。</p>
<p>我读过几本技术管理相关的书籍，印象深刻的有两本，一本是温伯格的<a href="http://book.douban.com/subject/1132623/">成为技术领导者</a>，另外一本是此书。温伯格的行文比较跳跃、比较抽象，不容易读。
而这本书不但通俗异动，也添加了非常具有可操作性的最佳实践。
从创造力驱动的角度出发，技术开发者都是管理者。因为他们需要设计方案，创造价值，而不是重复劳动，
所以我推荐每个开发者阅读。</p>
<p>好了，学习够了充分的理论，下面就是做起来了，「知行合一」。</p>
<hr />
<p>开给自己的处方：</p>
<ul>
<li>上面提到的最佳实践</li>
<li>谦逊：谦逊一些，低调一些，向他人学习</li>
<li>坚毅：认准目标，稳步前行，不放弃</li>
<li>信心：信念也许可以重建，但是对自己始终保有信心，也许会错，但是要相信自己的判断</li>
<li>开会技巧：超过 5 人的会用单向宣讲更有效</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>带理想的执行者 - 柳比歇夫的一生</title>
      <link>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</link>
      <pubDate>Sun, 12 Jul 2015 17:29:19 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</guid>
      <description>作为战斗民族的俄罗斯民族，不但能在热带风暴级的灿鸿中进行正常起降， 历来也盛产各种奇葩人物。 最近我有看到一本描述一个科学家的如何生活的书，叫「奇特的一生」。 让人拍案称奇。 主人公是一位名叫柳比歇夫的科学家，想必他在「回首往事时候没有因为虚度年华而悔恨」， 因为他将自己的一生都精确的奉献到分类学、地蚤研究上面。 他的工作投入，不是单纯激情洋溢投入，而是精确到分钟级别的投入， 是奉献完整一生的投入。 除了学术上面</description>
      <content:encoded><![CDATA[<p>作为战斗民族的俄罗斯民族，不但能在热带风暴级的灿鸿中进行正常起降，
历来也盛产各种奇葩人物。
最近我有看到一本描述一个科学家的如何生活的书，叫「奇特的一生」。
让人拍案称奇。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201507/liu_bi_xie_fu.jpg" alt="201507/liu_bi_xie_fu.jpg"  />

</p>
<p>主人公是一位名叫柳比歇夫的科学家，想必他在「回首往事时候没有因为虚度年华而悔恨」，
因为他将自己的一生都精确的奉献到分类学、地蚤研究上面。
他的工作投入，不是单纯激情洋溢投入，而是精确到分钟级别的投入，
是奉献完整一生的投入。</p>
<p>除了学术上面的成功，他的时间记录法也很牛逼，甚至让苏联科学院进行研究。怎么描述他的牛逼呢？如果他生活在今天，大致会这样写：</p>
<blockquote>
<p>今天我 19:00 - 19:25 看了新闻联播，感受到社会各阶级在党的领导下面获得令人振奋的成绩</p>
<p>19:25 休息了一会，避过无聊的天气预报时间</p>
<p>19:30 - 20:30 学习了「XXX 的讲话精神研究」</p>
<p>附加工作：20:35 - 20:40 小解，顺便刷了一会朋友圈作为今天的娱乐放松，评论了隔壁老王老婆的出行照片</p>
</blockquote>
<p>看到没有，他精确的记录了自己的时间使用记录，犹如脑子里面有个精确的 GTD
管理器，那个年代 David Allen 还没出生呢，肯定也谈不上了解 Get Things Done。苏联真是靠各类牛逼人物撑起了一战、二战时候工业大跃进和各种黑科技的崛起。</p>
<p>简单记录时间当然不能带来效率和成果的提升，柳比歇夫明显没有纳什这种神经病天才的聪明，他能获得这样比较高的成就，必须还有真正的大招。</p>
<p>第一招是他有坚定的奋斗目标：「创立生物自然分类法」。我们暂不管这不出名的法则是什么，能在 1918 年（他时年 28 岁，我擦，和我现在差不多大啊）就提出自己一生奋斗的目标，着实了不起。
从书中的记录来看，28 岁的青年教师柳比歇夫，
在日记里面描述他想要做什么事情，需要具备什么素质，
并且在估算重要里程碑时间点。</p>
<p>我估摸着，在战争中成长起来的人，不仅仅需要幸运，还需要勇气和坚韧意志，
19 世纪初年，沙皇政权摇摇欲坠，布尔什维克们应该还在密谋革命造反，
民众生活艰苦（感觉好像民国时期的中国）。
这种时代的大环境造就了各阶级人物命运的跌宕起伏，附带效应是出产优秀的文人和思想家。
柳比歇夫既然在这个时期成长，那也会渴望建树功勋，做点改变世界的事情。</p>
<p>第二招是，他就去做了。</p>
<p>「听过了很多大道理，却依然过不好这一生」，无非是缺在执行。
柳比歇夫的时间记录法，不是简单作为一个日记本在使用，
关键点在于回顾和计划。通过过去的记录，分析自我，总结经验，判断未来。</p>
<p>哎哟，道理说起来都简单，做起来都难，柳比歇夫作为一个很好的例子，
告诉我们，一个资质普通的人，决定牺牲自我，奉献到某个特定事业时候，
可以获得的成绩，他完成了「立言」。</p>
<p>在这个物欲横流，信息多得炸掉脑仁，各类媒体都在抢占眼珠的时代，能够不忘初心，
去做点实际的事情，是一件不容易的事情。
对快 30 的我来说，别说「立言」，就光「立命」，
就已经让我困苦不堪，在这和平年代，没有家仇国恨美国梦，想要做点牛逼的事情，就得需要勇气和爱来驱动。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201507/da_sheng_gui_lai.jpeg" alt="201507/da_sheng_gui_lai.jpeg"  />

</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>读《遇见未知的自己》</title>
      <link>https://blog.alswl.com/2015/03/real-self/</link>
      <pubDate>Sat, 14 Mar 2015 14:38:39 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2015/03/real-self/</guid>
      <description>「遇到未知的自己」这本书讲的是如何来认识自己，理解自己的情绪，和自己内心沟通。 豆瓣链接 / Kindle 版本购买链接 下面我写的倒不是什么读后感，而是我自己去解决自己焦虑和压力的一个探寻过程，希望对你有帮助。 不完美 最近一年来，我生活和工作状态持续处于亚健康状态。表现出来的状况是：工作上对产出的成绩不满意， 对自己不够自信，追寻的目标（创业）变得模糊和不可量化；生活受到影响，开始陷入到哪里去的困惑。 很久没有兴奋的迎着</description>
      <content:encoded><![CDATA[<p>「遇到未知的自己」这本书讲的是如何来认识自己，理解自己的情绪，和自己内心沟通。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201503/s3403254.jpg" alt="遇到未知的自己"  />

</p>
<p><a href="http://book.douban.com/subject/2340100/">豆瓣链接</a> /
<a href="http://www.amazon.cn/%E9%81%87%E8%A7%81%E6%9C%AA%E7%9F%A5%E7%9A%84%E8%87%AA%E5%B7%B1-%E5%BC%A0%E5%BE%B7%E8%8A%AC/dp/B009WNRMM0/ref=sr_1_1?s=digital-text&amp;ie=UTF8&amp;qid=1426319187&amp;sr=1-1&amp;keywords=%E9%81%87%E8%A7%81%E6%9C%AA%E7%9F%A5%E7%9A%84%E8%87%AA%E5%B7%B1">Kindle 版本购买链接</a></p>
<p>下面我写的倒不是什么读后感，而是我自己去解决自己焦虑和压力的一个探寻过程，希望对你有帮助。</p>
<h2 id="不完美">不完美</h2>
<p>最近一年来，我生活和工作状态持续处于亚健康状态。表现出来的状况是：工作上对产出的成绩不满意，
对自己不够自信，追寻的目标（创业）变得模糊和不可量化；生活受到影响，开始陷入到哪里去的困惑。
很久没有兴奋的迎着早晨第一缕阳光蹦着下楼梯，人变得焦虑和烦躁。</p>
<p>这种压抑，让我回忆起小时候周日晚上动画片的结尾曲，昏黄、萧瑟，似乎一切都走向终结。
哈，好在我不是那么消极的人，我热爱生活，期望创造价值，渴望别人的认同，
我不愿意自己长期陷入这种低潮。</p>
<p>我做了一些尝试和挣扎：给自己添加束缚（变成一个“工作日素食者”），计划自己工作和生活（践行 GTD），
意识到自己情绪抖动并尝试控制自己的情绪。
针对能力上面不足，我也去阅读了彼得德鲁克的系列丛书，柯维的「高效能人士的七个习惯」。
这些措施的确帮助了我，我觉得自己比以前更强大。
但是始终没有彻底解决我的问题，无法治愈我内心的恐惧和压抑。</p>
<p>我意识到：我在焦虑，继而恐惧、自卑，害怕面对未知，更害怕面对不完美的自己。</p>
<h2 id="求解">求解</h2>
<p>周围能提供帮助的人不多，好在有互联网。第一个药丸在知乎，我直接搜索了关键词「自我」和「自卑」。
知乎关于认识自己有几个相当不错的问答，从中得到的观点有下列几个：</p>
<blockquote>
<ul>
<li>真正的进步不是那么焦虑的自我怀疑，而是带着自我接纳体会进步的喜悦 <a href="http://www.zhihu.com/question/22063688/answer/20499104">via</a></li>
<li>我们的一生就不断地在优越感和自卑之间切换 <a href="http://zhi.hu/YTzH">via</a></li>
</ul>
</blockquote>
<p>其中有若干个回答有提到「遇到未知的自己」，我也对这本书略有耳闻，于是从亚马逊上购买了，
没想到仅仅花了花了几个小时就一口气读完，很久没有这么舒畅的读完一本书了。</p>
<h2 id="身体情绪思想">身体、情绪、思想</h2>
<p>从书中收获最大的一点，就是和自己的内心进行沟通：通过运动来提高自己和身体的合一；
通过臣服来客观认同理解自己的情绪；通过冥想来和自己的潜意识沟通，了解自己的内心，
增强对自己和外部的觉察能力。</p>
<p>认识自己的一个重要途径是回溯，重新和过去的自己沟通。这种感觉很奇妙，
似乎在看另外一个生命。他慢慢长大，人生起伏，自信自卑，受到家庭的教育，
被师长激励，选择新的挑战，遇到新的困难和低谷，他的优柔寡断，他的努力和堕落，
他受到的爱护和痛苦。</p>
<p>到哪里去？这个问题我依然没有找到很好的答案，虽然有「爱、喜悦、和平」这个大一的概念，
但实在不够落地，就像「内圣外王」一样，太过于笼统。</p>
<p>即便到哪里去没有一个明确地答案，但是当和自己的内心的达成一致，能够坦然面对自己的不完美，
未来的不确定之后，不管往哪里走，都不是在原地转动。</p>
<p>现在我学会了运动，每周两次 5km 跑步，跑步时候感觉自己释放恐惧，追逐目标。
还在学会如何臣服自己的情绪，面对未知做的决策即便会不安和恐惧，也不至于影响自己太久。</p>
<h2 id="糟粕">糟粕</h2>
<p>这本书里面有几段鸡汤文，什么「水知道答案」，女主回忆自己诞生过程而泪流满面，
显得很鬼扯。作为工程师的我，对这些内容表示质疑。</p>
<h2 id="end">End</h2>
<p>这本书不完美，但是它在一个合适的时间点给了我启发和帮助。我很感谢它，如果你有和我类似的困惑，建议去读一下。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>读《如何高效学习》</title>
      <link>https://blog.alswl.com/2014/04/lean-more-study-less/</link>
      <pubDate>Sun, 13 Apr 2014 11:42:47 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2014/04/lean-more-study-less/</guid>
      <description>Learn More Study Less（如何高效学习） 讲的是作者斯科特·扬如何快速学习的方法和技巧。 我在 Kindle 上面阅读了这本书，并用书中的方法学习这本书，顺便做了一些笔记。 A. 目的 学习「整体性学习」方法，从而快速学习并且将学到的知识更高效合理的利用起来。 （所谓聪明，就是指学得更快，而且信息组织非常适合完成自己的目标）。 B. 整体性学习的定义 知识并非孤立，学习任何知识（概念、定义、公式、问题、观念、理论等）都需要联系。 C. 整体性学习的</description>
      <content:encoded><![CDATA[<p><a href="http://book.douban.com/subject/25783654/">Learn More Study Less（如何高效学习）</a>
讲的是作者斯科特·扬如何快速学习的方法和技巧。</p>
<p>我在 Kindle 上面阅读了这本书，并用书中的方法学习这本书，顺便做了一些笔记。</p>
<!-- more -->
<h2 id="a-目的">A. 目的</h2>
<p>学习「整体性学习」方法，从而快速学习并且将学到的知识更高效合理的利用起来。</p>
<p>（所谓聪明，就是指学得更快，而且信息组织非常适合完成自己的目标）。</p>
<h2 id="b-整体性学习的定义">B. 整体性学习的定义</h2>
<p>知识并非孤立，学习任何知识（概念、定义、公式、问题、观念、理论等）都需要联系。</p>
<h2 id="c-整体性学习的策略">C. 整体性学习的策略</h2>
<h3 id="1-关键元素">1. 关键元素</h3>
<ul>
<li>建立结构（某个领域内，紧密联系的知识），让其中的知识尽可能多的联系。
<ul>
<li>通用结构：感知结构（视觉、嗅觉、听觉、味觉、触觉）</li>
<li>关系结构（群体关系等）</li>
<li>基础数学结构</li>
<li>时间结构（@alswl 自己横向扩展想到的）</li>
</ul>
</li>
<li>利用模型（类似于知识框架和体系以及其他存储方式）</li>
<li>高速公路（在不同的结构之间进行联系，激发创造力）</li>
</ul>
<h3 id="2-5-个学习的步骤">2. 5 个学习的步骤</h3>
<ul>
<li>获取
<ul>
<li>关键：简化、容量、速度</li>
</ul>
</li>
<li>理解</li>
<li>拓展
<ul>
<li>深度拓展：知识的深度，虽花费时间但有效</li>
<li>横向拓展：知识的周边，有相关性的拓展，需要借助模型</li>
<li>纵向拓展：跨结构的知识，比喻和内在化是一种手段</li>
</ul>
</li>
<li>纠错</li>
<li>应用</li>
</ul>
<p>（@alswl 可以想到软件开发中的需求获取、需求分析、需求挖掘、测试、
开发这些对应的另外一个软件开发结构中的联系）</p>
<h3 id="3-5-种信息的类型">3. 5 种信息的类型</h3>
<ul>
<li>随意信息：死记硬背，联想法、挂钩法、压缩法</li>
<li>观点信息：存在争议的信息，需要检索信息</li>
<li>过程信息：多操作就能掌握</li>
<li>具体信息：通过感官进行联系（医学）</li>
<li>抽象信息：对知识进行简化、抽象和纠错（化学、计算机）</li>
</ul>
<h3 id="4-快速学习的技术">4. 快速学习的技术</h3>
<ul>
<li>获取知识
<ul>
<li>快速阅读：指读法，积极阅读（观点是什么？怎么记住？怎么拓展和运用），一次学会</li>
<li>笔记流</li>
</ul>
</li>
<li>联系观点
<ul>
<li>比喻</li>
<li>内在化：赋予知识情感</li>
<li>图表法：流程图、概念图和图像</li>
</ul>
</li>
<li>随意信息的处理
<ul>
<li>联想法</li>
<li>挂钩法：创造对应和夸张的记忆场景</li>
<li>信息压缩法：口诀，笔记压缩</li>
</ul>
</li>
<li>知识拓展
<ul>
<li>实际应用</li>
<li>模型纠错</li>
<li>以项目为目的的学习</li>
</ul>
</li>
<li>增加能量储备：运动、睡眠、饮食、饮水</li>
</ul>
<h2 id="d-alswl-拓展">D. @alswl 拓展</h2>
<p>哈，文中提到了《春风化雨》这部电影，我记得上次《七周七语言》也提到了它，
决定找个时间去看看了。</p>
<p>更广泛的能力定义：</p>
<ul>
<li>发现问题的能力</li>
<li>学习的能力</li>
<li>时间管理的能力</li>
<li>沟通协作的能力</li>
</ul>
<p>可以立刻开始做起来的方法：</p>
<ul>
<li>指读法</li>
<li>将这个学习方法用来学 <a href="http://book.douban.com/subject/5977975/">数学那些事儿</a></li>
<li>睡眠、饮食</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>读《大规模Web服务开发技术》</title>
      <link>https://blog.alswl.com/2013/06/web-technology/</link>
      <pubDate>Sat, 29 Jun 2013 00:17:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/06/web-technology/</guid>
      <description>年前看了这本书《大规模Web服务开发技术》，当时给的评价是： 很好，让我这个渣渣看的很感动，数据翔实，经历可靠，翻译的也不错，我给 4.2 分 现在经历过 Python / Django / 烂代码的阵痛，开始有更多的想法， 在整理这些粗糙的想法之前，我又把这本书翻了一遍，写个流水帐读书笔记。 《大规模Web服务开发技术》@豆瓣： http://book.douban.com/subject/6758780/ 规模 小规模 / 大规模 / 超大规模的侧重点各不相同：保持扩展性/保持冗余/低成本运维/开发合作方便 内存、磁盘、负载 内存</description>
      <content:encoded><![CDATA[<p>年前看了这本书《大规模Web服务开发技术》，当时给的评价是：</p>
<blockquote>
<p>很好，让我这个渣渣看的很感动，数据翔实，经历可靠，翻译的也不错，我给 4.2 分</p>
</blockquote>
<p>现在经历过 Python / Django / 烂代码的阵痛，开始有更多的想法，
在整理这些粗糙的想法之前，我又把这本书翻了一遍，写个流水帐读书笔记。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201306/s6818566.jpg" alt="大规模Web服务开发技术"  />

</p>
<p>《大规模Web服务开发技术》@豆瓣： <a href="http://book.douban.com/subject/6758780/">http://book.douban.com/subject/6758780/</a></p>
<h2 id="规模">规模</h2>
<p>小规模 / 大规模 /
超大规模的侧重点各不相同：保持扩展性/保持冗余/低成本运维/开发合作方便</p>
<h2 id="内存磁盘负载">内存、磁盘、负载</h2>
<p>内存快，磁盘慢，ＩＯ 速度的差异</p>
<h2 id="数据分布式">数据分布式</h2>
<ol>
<li>使用局部分布式，热数据独立出来。</li>
<li>Partition 分布式，按模块分割数据。</li>
<li>按 ID 分割，比如 a-g, h-z</li>
<li>按访问类型，一般请求 / feed / 图像（#毒药计划的原理）</li>
</ol>
<!-- more -->
<h2 id="索引">索引</h2>
<p>索引，B 树（是一颗平衡树，log n 速度查找，顺序读取，插入，删除） / Ｂ+
树（节点只保存子节点指针，叶子保存数据）</p>
<p>使用 MySQL 索引的语句：</p>
<ul>
<li>where</li>
<li>order by</li>
<li>group by</li>
</ul>
<p>多个查询时候要使用复合索引，每次查询只会走单一一个索引。</p>
<h2 id="算法">算法</h2>
<p>感受算法 log n, 线性的差距。</p>
<h3 id="字符匹配">字符匹配</h3>
<p>正则到 Trie</p>
<h3 id="贝叶斯匹配">贝叶斯匹配</h3>
<h3 id="全文搜索">全文搜索</h3>
<p>逆向索引</p>
<h2 id="基础设施">基础设施</h2>
<ul>
<li>云 / 自己构建</li>
<li>评估服务器性能极限</li>
<li>负载跟踪：平均负载 / 内存 / CPU 信息</li>
</ul>
<h2 id="冗余">冗余</h2>
<ul>
<li>Web 服务器冗余</li>
<li>DB 冗余</li>
<li>存储系统</li>
</ul>
<h2 id="维稳">维稳</h2>
<ul>
<li>功能增加 / 内存泄漏</li>
<li>特定 URL 的地雷，资源循环</li>
<li>访问暴增</li>
<li>数据量增加</li>
<li>外部 API 稳定（新浪等）</li>
<li>硬件故障</li>
</ul>
<h3 id="对策">对策</h3>
<ul>
<li>保持余量， 在 70% 极限内运行</li>
<li>异常时候的自动重启 / 自动中止耗时查询</li>
</ul>
<h2 id="虚拟化">虚拟化</h2>
<ul>
<li>解除物理限制</li>
<li>软件层面主机控制</li>
</ul>
<h2 id="番外-寻找瓶颈">番外： 寻找瓶颈</h2>
<p>调优的意义：「找出负载原因并去除」</p>
<ul>
<li>查看平均负载</li>
<li>top / uptime</li>
<li>确认 CPU、 I/O 瓶颈</li>
<li>sar / vmstat 检查交换区状态</li>
</ul>
<h2 id="番外-负载">番外： 负载</h2>
<p>负载的含义：等待 CPU / IO 资源的进程数。 知道了负载还要知道如何看 CPU
还是 IO 负载。</p>
<h2 id="番外sar">番外：sar</h2>
<ul>
<li>sar-P ALL</li>
<li>sar -u</li>
<li>sar -q</li>
<li>sar -r</li>
</ul>
<h2 id="番外henata-的选择">番外：Henata 的选择</h2>
<p>队列系统：</p>
<ul>
<li><a href="/TheSchwartz">TheSchwartz</a></li>
<li>Gearman</li>
</ul>
<p>DB 类型：</p>
<ul>
<li>Key Value： memcached / <a href="/TokyoTyrant">TokyoTyrant</a></li>
<li>MyISAM / InnoDB</li>
</ul>
<p>文件系统：</p>
<ul>
<li>MogileFS</li>
<li>NFS</li>
<li>WebDAV</li>
<li>DRBD</li>
<li>HDFS</li>
</ul>
<p>缓存系统：</p>
<ul>
<li>Squid</li>
<li>Vanish</li>
</ul>
<p>计算集群：</p>
<ul>
<li>Hadoop</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>读《人件》</title>
      <link>https://blog.alswl.com/2013/04/peopleware/</link>
      <pubDate>Wed, 10 Apr 2013 23:35:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/04/peopleware/</guid>
      <description>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要， 还是通过语言/工具来约束人重要」。 我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。 如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。 并不是静态编译和工具检查就能搞定了。 我愤愤的在 QQ 对话框中写道： 我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学 后来痛苦与代码质量</description>
      <content:encoded><![CDATA[<p>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要，
还是通过语言/工具来约束人重要」。
我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。
如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。
并不是静态编译和工具检查就能搞定了。</p>
<p>我愤愤的在 QQ 对话框中写道：</p>
<blockquote>
<p>我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学
后来痛苦与代码质量，阅读了《重构》，开始坚信代码质量决定产品质量
现在痛苦于人和语言的冲突，动态和静态的冲突，我想读《人件》了</p>
</blockquote>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201304/s1299961.jpg" alt="人件"  />

</p>
<p>人件已经绝版，只能在找线上版，我花了两个星期把它读完。
书中给了我一部分答案，另外还有一些意外的收获。</p>
<!-- more -->
<p>《人件》其实讲了一件事情：怎样将脑力劳动者管理好，打造出一个高效的团队。</p>
<p>《人件》@豆瓣： <a href="http://book.douban.com/subject/1108725/">http://book.douban.com/subject/1108725/</a></p>
<p>《人件》在线阅读地址： <a href="http://book.zi5.me/books/read/2206">http://book.zi5.me/books/read/2206</a></p>
<p>吐槽：翻译太烂太烂太烂了，下次要看直接去看翻译版。</p>
<h2 id="以人为本">以人为本</h2>
<blockquote>
<p>我们工作的主要挑战，与其说来源于技术，不如说来源于团队成员本身</p>
</blockquote>
<p>技术人员转成项目经理经理之后，往往继续用工程化思维管理人员，
认为人是可以设计成标准化接口，是可以替换的。很可惜，这种想法不是那么 <strong>有效</strong>。</p>
<p>因为脑力劳动和体力重复劳动不一样，不是在卖汉堡这种重复工作，
而是需要创造、思考和发明的工作。软件经理需要提供有限额的错误机会。
错误无法完全避免，并且是工作内容的健康组成部分。一旦硬性阻止犯错，
会让团队成员失去创造的勇气。
我相信这也是为什么 Facebook 早期会践行「Break it Down」。</p>
<h2 id="何不双赢">何不双赢</h2>
<blockquote>
<p>西班牙人的理论坚持认为地球上只有一个固定数量的价值，
因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富。
而英国人的理论认为价值可以通过天才和技术创造出来。因此英国就产生了工业革命，
而西班牙人就转动起了车轮，开始开拓疆土和剥削在新大陆的印第安人。
他们从海上运回大量的黄金，
他们所有努力带来的却是通货膨胀（太多的金钱追逐太少的有用货物）。</p>
</blockquote>
<p>我坚信公司和员工并不是对立面的，双赢才是正确的路线。
大部分情况下，我愿意牺牲个人时间和精力来完成公司的任务。
前提就是对产品有认同感，对公司有归属感。</p>
<h2 id="最好和最坏">最好和最坏</h2>
<p>作者通过一个持续两年，有来自 92 个公司的 600 多名开发程序员参加的比赛，
分析出以下数据：</p>
<ul>
<li>成绩最好与成绩最差的人之间的绩效比率是10 : 1。</li>
<li>最好选手成绩大约是中等成绩选手成绩的2.5倍。</li>
<li>成绩中等以上的一半选手与另外一半选手的绩效比是2 : 1</li>
</ul>
<p><a href="http://www.aqee.net/">外刊 IT 评论</a>的
<a href="http://www.aqee.net/why-programmers-are-not-paid-in-proportion-to-their-productivity/">为什么程序员的工作效率跟他们的工资不成比例</a> 一文中也提供一些数据支持。</p>
<p>我离最好还有很长的距离，但是我相信个人能力是可以提升的，
并且在个人能力上面的投资汇报比极高。</p>
<h2 id="高效工作的秘诀">高效工作的秘诀</h2>
<blockquote>
<ul>
<li>进入顺流：咦？怎么时间过得这么快？！</li>
<li>邮件比电话更不容易打乱人的思绪</li>
</ul>
</blockquote>
<h2 id="团队的力量">团队的力量</h2>
<blockquote>
<ul>
<li>团结起来，工作的更高效更开心</li>
<li>有目标的团队，1 + 1 &gt; 2</li>
<li>为一个共同的目标走到一起</li>
<li>优秀的团队里的成员，不会因为钱、阶层、晋升的问题离开团队</li>
<li>优秀的团队往往是带有个性的</li>
</ul>
</blockquote>
<p>《人人都是产品经理》中当时讲了一个愿景（Vison）问题，
我相信一个好的愿景可以吸引更多高质量人才，为赚钱而创建的团队是不会长久的。</p>
<h2 id="烂团队的苗头">烂团队的苗头</h2>
<blockquote>
<ul>
<li>防范团队成员</li>
<li>官僚作风</li>
<li>不挨在一起工作（空间上）</li>
<li>某个成员的职责被分割多份</li>
<li>对产品质量要求降低</li>
<li>无意义的截止日期（不可能达到的目标）</li>
<li>结党营私</li>
<li>加班</li>
<li>绩效考核 / 目标奖励</li>
<li>早期时候人员超编</li>
</ul>
</blockquote>
<p>这里和上文的愿景问题是对应的，无论是强制加班还是通过考核回报激励，
都不是激发人的创造力和战斗力的好方法。老大们应该学会画饼，画大饼。
另外，管理团队果然好难：做的事情必须靠谱，才能吸引到人才；
需要能管理好有个性的人才（比如伞哥这样的）； 在中国大环境下，还要不错的物质回报。</p>
<h2 id="经营好团队">经营好团队</h2>
<blockquote>
<ul>
<li>崇拜高质量：因为市场和用户需要高质量的产品</li>
<li>通过里程碑的方式管理任务，提高士气</li>
<li>崇拜精英</li>
<li>允许和鼓励异端：异端代表创新和进化，没有异端就会种群灭亡</li>
<li>给予自由度：对成员信任，而不是纯粹服从权威工作</li>
<li>交流，唤醒那些有潜力的巨人（唤醒了才能将脑力劳动能力发挥到极限）</li>
<li>内部竞争和培养</li>
<li>管理层自身的学习，公司自身定位的不断改变</li>
<li>将公司内部建设出社区文化（我觉得就是公司团队文化建设嘛）</li>
</ul>
</blockquote>
<p>我有一个观点是工程质量决定产品质量，产品质量决定整个团队。
质量的一个标准是：<strong>我以此为荣</strong></p>
<h2 id="工作是一种乐趣">工作是一种乐趣</h2>
<blockquote>
<ul>
<li>将混乱重建成秩序是有趣的</li>
<li>敢于用小项目来做尝试</li>
<li>组织竞赛游戏</li>
<li>团队头脑风暴</li>
</ul>
</blockquote>
<p>这本这么老的书居然提到团队竞争游戏，和 Facebook 的 Hackday 异曲同工啊。
再为这种乐趣补充一点：将公司的成果分享到开源社区。</p>
<blockquote>
<p>团队成员需要做到：</p>
<ul>
<li>界定自己工作，成为主人翁</li>
<li>促使自己成长为多面手，而不是单纯某个职位</li>
</ul>
</blockquote>
<p>给了成员足够的自由度，那么就会有相应的风险，需要对他们进行监测，
另外招人时候就需要找靠谱的人，这也是为什么 Facebook / Google / 早期百度对招人要求极其严格。</p>
<h2 id="流程改进">流程改进</h2>
<blockquote>
<ul>
<li>CMM 是标准，是标准的话就一定不是对于个体的最优情况</li>
<li>CMM 自身也在改进，说明上一个版本的 CMM 不是最优</li>
<li>流程的目标是：提高质量 / 提高生产力 / 减少风险</li>
</ul>
</blockquote>
<h2 id="读后感">读后感</h2>
<p>发挥个人的能力才是最关键的，要点在于信任、自由、乐趣。原则是 Pull 而不是 Push。</p>
<p>我会继续学习和思考这些原则，因为总有一天我也会面临这样的挑战。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>读《打造 Facebook》</title>
      <link>https://blog.alswl.com/2013/02/facebook/</link>
      <pubDate>Mon, 25 Feb 2013 00:51:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/02/facebook/</guid>
      <description>感谢好基友 @daodao 送了我这本《打造 Facebook》， 年前一直忙，最近腾出两个晚上，把这本很火的书看完了。 第一次听见王淮这个名字，其实是在知乎上面， 当时有一个问题 Facebook 早期员工王淮在职期间有什么成就？。 之后陆陆续续看到他的几个回答，感觉他非常善于自我营销。再之后就读到他这本书。 书中最喜欢的章节是关于 Facebook 工程师文化和产品开发流程的描述。 ============================== 我是分割线 ============================== Facebook 招人标准 对公司的忠诚，是文化认同的附属品 技术面试 2.5 / 系统设计</description>
      <content:encoded><![CDATA[<p>感谢好基友 <a href="http://weibo.com/idao">@daodao</a> 送了我这本《<a href="http://book.douban.com/subject/20471120/">打造 Facebook</a>》，
年前一直忙，最近腾出两个晚上，把这本很火的书看完了。</p>
<p>


<img loading="lazy" src="http://img3.doubanio.com/lpic/s24581301.jpg" alt="cover"  />


</p>
<!-- more -->
<p>第一次听见王淮这个名字，其实是在知乎上面，
当时有一个问题 <a href="http://www.zhihu.com/question/20239975">Facebook 早期员工王淮在职期间有什么成就？</a>。
之后陆陆续续看到他的几个回答，感觉他非常善于自我营销。再之后就读到他这本书。</p>
<p>书中最喜欢的章节是关于 Facebook 工程师文化和产品开发流程的描述。</p>
<p>============================== 我是分割线 ==============================</p>
<ul>
<li>
<p>Facebook 招人标准</p>
<ul>
<li>对公司的忠诚，是文化认同的附属品</li>
<li>技术面试 2.5 / 系统设计 1 / 文化面试 0.5</li>
<li>5 个程度的面试打分</li>
<li>高标准人才，喜欢挑战和完成艰巨任务</li>
<li>慢招人，快炒鱿鱼</li>
</ul>
</li>
<li>
<p>新兵训练营</p>
</li>
<li>
<p>全局认识 / 工具和框架 / 运营商业模式 / 选组</p>
<ul>
<li>工程师入职不区分方向</li>
<li>导师</li>
</ul>
</li>
<li>
<p>黑客文化</p>
<ul>
<li>学习 / 再创造</li>
<li>Done is better than perfect / Code wins arguments</li>
<li>工程师参与构思、设计、实现</li>
<li>很少有「这样子一定成功」，「我们来试试吧」，通过数据反馈</li>
<li>工程师主导产品开发</li>
<li>跨部门回忆，由工程师汇报进度</li>
<li>开发准则：迅速开发、进行监测 / 坦然对待不确定性 / 不追求极致，不断发布到达目标</li>
<li>工具文化</li>
<li>换职位，Hack a month</li>
</ul>
</li>
<li>
<p>王淮转管理岗</p>
</li>
<li>
<p>Facebook 开发流程</p>
<ul>
<li>描绘远景、设置目标
<ul>
<li>SMART：详细、可度量、有难度、现实的、有期限</li>
</ul>
</li>
<li>优先级和时间分配（6-2-2：预期任务-品质改良-有风险任务）
<ul>
<li>120% 难度任务 / 任务段分片进行</li>
</ul>
</li>
<li>跨团队沟通 / 通知</li>
<li>设计产品
<ul>
<li>衡量指标：时间、预算、质量</li>
<li>3 倍目标经验</li>
<li>早期快速迭代变成多方面参与的流程控制</li>
<li>前期评估优缺点和风险</li>
<li>不重复造轮子，拥抱开源</li>
<li>一些理念：不要过度设计、越简单越好、自己就是用户、好用流畅、不追求完美、最基本质量线</li>
</ul>
</li>
<li>指定责任人，定期碰头，了解进度，汇总报告</li>
<li>发布产品，监测数据（系统状态，用户反馈，报警系统）
<ul>
<li>问题事件分析：发生了什么，影响多大，问题原因，发生过程，如何避免</li>
</ul>
</li>
</ul>
</li>
<li>
<p>考核激励</p>
</li>
<li>
<p>王淮做天使</p>
</li>
</ul>
<p>这本书谈不上经典，也不是全文干货，但仍然能从一些章节中获取有用的信息，
推荐一读。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《少有人走的路》读后感</title>
      <link>https://blog.alswl.com/2012/08/the-road-less-traveled/</link>
      <pubDate>Sat, 04 Aug 2012 08:58:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/08/the-road-less-traveled/</guid>
      <description>关注这本书是在编程随想那里看到的一篇书评， 其中引用了书中一句经典的话： 人可以拒绝任何东西，但绝对不可以拒绝成熟。拒绝成熟，实际上就是在规避问题、 逃避痛苦。规避问题和逃避痛苦的趋向，是人类心理疾病的根源，不及时处理， 你就会为此付出沉重的代价，承受更大的痛苦。 所有逃避者，都在阻碍自己心智的成熟； 一切心智成熟者，他们的人生之旅都是从直面问题开始。 我最近半年的时间中，经常和一位闺密朋友讨论成熟、感情、人生</description>
      <content:encoded><![CDATA[<p>关注这本书是在<a href="http://program-think.blogspot.com/">编程随想</a>那里看到的<a href="http://program-think.blogspot.com/2012/06/book-review-road-less-traveled.html">一篇书评</a>，
其中引用了书中一句经典的话：</p>
<blockquote>
<p>人可以拒绝任何东西，但绝对不可以拒绝成熟。拒绝成熟，实际上就是在规避问题、
逃避痛苦。规避问题和逃避痛苦的趋向，是人类心理疾病的根源，不及时处理，
你就会为此付出沉重的代价，承受更大的痛苦。</p>
</blockquote>
<blockquote>
<p>所有逃避者，都在阻碍自己心智的成熟；
一切心智成熟者，他们的人生之旅都是从直面问题开始。</p>
</blockquote>
<!-- more -->
<p>我最近半年的时间中，经常和一位闺密朋友讨论成熟、感情、人生历程的问题，
她的价值取向：喜欢自由无舒服的生活，压力尽量好。
我直观的感觉这是有问题的，可是说不出哪里不对，人的确有追求美好生活的权利呀。
看到《少有人走的路》中这几句话，我反应过来了。
我们依然用童年的遗留思维评判生活质量，以自己为中心，缺少安全感，心智还没有成熟。</p>
<p>于是我翻开这本书，寻找答案。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201208/s2144391.jpg" alt="少有人走的路"  />

</p>
<h2 id="心智成熟的标志-自律">心智成熟的标志-自律</h2>
<p>人生苦难重重，我们要解决它们，逃避不是办法，依赖别人也不可靠。
自律可以让我们解决各种问题，自律有四种技巧：</p>
<ol>
<li>
<p>推迟满足感：喜欢先苦后甜的人往往缺乏安全感，和成长历程有关。
推迟满足感需要控制自己欲望并相信自己的价值。</p>
</li>
<li>
<p>承担责任：相信自己的能力，完成自己的承诺。</p>
</li>
<li>
<p>尊重事实：不要陷入固有知识的诅咒，而要不停探索新的世界。
秘诀就是尊重事实，经常自省。避免固步自封，逃避挑战。
保持开放的心态，敢于面对事实，同时真诚对待他人。</p>
</li>
<li>
<p>保持平衡：自律是痛苦的，要学会在痛苦和快乐之间保持平衡。
心智成熟需要在需要、目标、责任之间保持微妙的平衡，
在放弃和新生之间达到平衡。</p>
</li>
</ol>
<p>就我而言，第四点「保持平衡」极难掌握，而且几乎是只可意会不可言传的，
我相信这个平衡的掌握依赖于个人对价值观的认识，
这也引出了本书的第二部分「爱」。</p>
<p>我在这里在将人生各个阶段会遇到的危机按出现顺序列出来，
帮助我们「在合适的时候做合适的事情」（这是我从小给我被灌输的人生理念）。</p>
<ol>
<li>不需要过多考虑外界要求的婴儿时期</li>
<li>想象中无所不能的幻觉</li>
<li>完全占有（包括性方面）父亲或母亲（或者二者）的欲望</li>
<li>童年的依赖感</li>
<li>父母的扭曲形象</li>
<li>自以为拥有无穷潜力的青春期感觉</li>
<li>无拘无束的自由</li>
<li>青年时期的灵巧与活力</li>
<li>青春时代性的吸引力</li>
<li>长生不老的错觉</li>
<li>对子女的权威</li>
<li>各种各样暂时性的权力</li>
<li>身体健康的独立性</li>
<li>自我以及生命本身</li>
</ol>
<h2 id="心智成熟的原动力-爱">心智成熟的原动力-爱</h2>
<p>推上有一位朋友 <a href="https://twitter.com/HeseyWang">@HeseyWang</a> 每天12点都有一条 Twitter 来自 ifttt，
「所有的戰鬥力都來源於愛。」。第二章就是关于爱的，不是情爱，
书中对「爱」的定义如下：</p>
<blockquote>
<p>爱，是为了促进自我和他人心智成熟，而具有的一种自我完善的意愿。</p>
</blockquote>
<p>书中关于爱的建议：</p>
<ul>
<li>恋爱能够突破「自我界限」，让人感到狂喜。这是残酷的假想，不是真正的相知和相爱。</li>
<li>坠入情网本质：内在性的需求和外在性的刺激，增加种族繁衍机会。（这里我存疑）</li>
<li>真正的爱：陶醉在爱的情感中，希望对方成长，想把激情和生命献给对方。</li>
<li>爱需要关注对方的心智成熟。爱的对象也可以是事物或活动，比如园艺和金钱。</li>
<li>坠入情网和爱往往存在关联，很有可能同时发生，很多人会将两者混淆在一起。</li>
<li>依赖不是爱，是心智的不成熟，严重的被成为「消极性依赖人格失调」</li>
<li>学会如何爱，学会关注，比如倾听和反馈</li>
<li>正视死亡</li>
<li>因为有爱，就有愿景，就会去努力，去改变。有爱就会愿意去改变命运。</li>
<li>借助心智的成熟、爱，从而自我完善，突破自我界限，将自我延伸到新的领域。</li>
</ul>
<h2 id="成长与信仰">成长与信仰</h2>
<p>原标题是「成长和宗教」，鉴于国内对对宗教的认识，
我认为「成长与信仰」更能表达作者想法。</p>
<ul>
<li>及时更新自己的世界观，摈弃旧的自我，拥抱新的认识。</li>
<li>用「科学的宗教」替代「父母的宗教」，保持怀疑和挑战的勇气。</li>
</ul>
<p>作者继续使用几个故事告诉我们处理好成长与宗教信仰的关系。</p>
<h2 id="神奇的力量">神奇的力量</h2>
<ul>
<li>有神秘的力量可以帮我们绝处逢生，甚至对厄运产生抵抗力。</li>
<li>潜意识的神奇力量</li>
</ul>
<p>作者在这里插入了一些有神论的认识，因为我是无神论，我对这章无感。</p>
<p>虽然最后一章我有些不赞同，但是就总体而言，这仍然是一本关于成熟、价值观的极好的书。
更多书评可以看<a href="http://book.douban.com/subject/1775691/">少有人走的路 (豆瓣)</a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《写给大家看的设计书》读后感</title>
      <link>https://blog.alswl.com/2012/05/the-non-designers-design-book/</link>
      <pubDate>Sat, 19 May 2012 18:10:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/05/the-non-designers-design-book/</guid>
      <description>我读过两本关于视觉设计的书，一本是《写给程序员的Web设计书》， 这是第二本《写给大家看的设计书》。 我对前者的评价是「作者花了大约25%的篇幅来讲述设计理念和方法，这也是我真正想看的部分。 本来想从书中获取更多布局、色彩、字体的内容，发现还是太少了。图灵系的书翻译不错。」 相对应的，《写给大家看的设计书》是我真心想看的设计入门书。作者的文字功底好，经验丰富， 范例适合，取材广泛，总之，是不可多得的一本好书</description>
      <content:encoded><![CDATA[<p>我读过两本关于视觉设计的书，一本是<a href="http://book.douban.com/subject/6783748/">《写给程序员的Web设计书》</a>，
这是第二本<a href="http://book.douban.com/subject/3323633/">《写给大家看的设计书》</a>。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201205/s6485795.jpg" alt="写给大家看的设计书"  />

</p>
<p>我对前者的评价是「作者花了大约25%的篇幅来讲述设计理念和方法，这也是我真正想看的部分。
本来想从书中获取更多布局、色彩、字体的内容，发现还是太少了。图灵系的书翻译不错。」</p>
<p>相对应的，《写给大家看的设计书》是我真心想看的设计入门书。作者的文字功底好，经验丰富，
范例适合，取材广泛，总之，是不可多得的一本好书。</p>
<!-- more -->
<p>书中提到了设计四大原则：亲密性 / 对齐 / 重复 / 对比。依靠这四个原则，
就可以设计出效果不错的出版物（包括书籍、文档、幻灯片、网页等等）</p>
<ul>
<li>
<p>对比（Contrast）：对比的基本思想是，要避免页面上的元素过于相似，如果元素
（字体、颜色、大小、线宽、形状、空间等）不相同，那就干脆让它们截然不同。
要让页面引人注目，对比通常是最重要的一个因素，正是它能使读者首先看到这个页面。</p>
</li>
<li>
<p>重复（Repetition）：让设计中的视觉要素在整个作品中重复出现。
可以重复颜色、形状、材质、空间关系、线宽、字体、大小和图片，等等。
这样依赖，既能增加条理性，还可以加强统一性。</p>
</li>
<li>
<p>对齐（Alignment）：任何东西都不能在页面上随意安放。
每个元素都应当与页面的另一个元素有某种视觉联系。这样能建立一种清晰、
精巧而且清爽的外观。</p>
</li>
<li>
<p>亲密性（Proximity）：彼此相关的项应当靠近，归组在一起。
如果多个项相互之间存在很近的亲密性，它们就会成为一个视觉单元，
而不是多个孤立的元素。这有助于组织信息，减少混乱，为读者提供清晰的结构。</p>
</li>
</ul>
<p>除了设计的四大原则，书中还花费 1/3 的篇幅介绍西文字体，
看完可以对字体有一些初步认识。唯一遗憾的是，中文字体属于 CJK 体系，
书中没有介绍。</p>
<p>西文字体主要分</p>
<ul>
<li>Oldstyle</li>
<li>Modern</li>
<li>Slab serif</li>
<li>Sans serif</li>
<li>Script</li>
<li>Decorative</li>
</ul>
<p>我认为做产品的、做前端的，或者对艺术和美感兴趣的（比如我），都应该读一读这本书。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>GAE 编程指南读书笔记</title>
      <link>https://blog.alswl.com/2012/03/gae/</link>
      <pubDate>Sat, 24 Mar 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/03/gae/</guid>
      <description>GAE 和我蛮有缘分，我初学 Python 的其中一个原因就是当时 GAE 刚推出， 当时想法是免费的应用要用起来，要不然就浪费了。随后也假模假样的看文档， 就是没有什么产出。 去年写了一个小应用 dbevent2gc ， 期间发现 GAE 和普通程序开发的诸多不同，又遭遇 GAE 配额大幅缩水， 写出来的应用运转的不太稳定。在南京图书馆的架上看见这本《GAE 编程指南读书笔记》， 立即借回家仔细阅读。 GAE 的简介 运行时环境 Python / Java 数据存储 Datastore（实体 / 查询 / 索引 / 事务</description>
      <content:encoded><![CDATA[<p>GAE 和我蛮有缘分，我初学 Python 的其中一个原因就是当时 GAE 刚推出， 当时想法是免费的应用要用起来，要不然就浪费了。随后也假模假样的看文档，
就是没有什么产出。</p>
<p>去年写了一个小应用 <a href="https://github.com/alswl/dbevent2gc">dbevent2gc</a> ， 期间发现 GAE
和普通程序开发的诸多不同，又遭遇 GAE 配额大幅缩水， 写出来的应用运转的不太稳定。在南京图书馆的架上看见这本《GAE 编程指南读书笔记》，
立即借回家仔细阅读。</p>
<ul>
<li>
<p>GAE 的简介</p>
<ul>
<li>运行时环境 Python / Java</li>
<li>数据存储 Datastore（实体 / 查询 / 索引 / 事务）</li>
<li>服务（Memcache / GAccount / 任务队列 / 计划任务）</li>
<li>工具（SDK / appcfg / dev_appserver / 控制台）</li>
</ul>
</li>
<li>
<p>入门（安装 / GAccount / webapp / app.yaml / /_ah/admin / 注册部署 / login:required）</p>
</li>
<li>
<p>处理流程：请求 - 前端 - 引用服务器 / 静态文件服务器 - 服务</p>
<ul>
<li>配额限制：请求限制 / CPU 限制 / 服务限制 / 部署限制 （最新配额：http://code.google.com/intl/zh-CN/appengine/docs/quotas.html）</li>
</ul>
</li>
<li>
<p>数据存储</p>
<ul>
<li>
<p>GAE 的数据存储方式和传统的 RDBMS 差异比较大，更类似于对象数据库。</p>
</li>
<li>
<p>类别 kind / 键 / 键名 key name</p>
</li>
<li>
<p>可以通过键来获取和操作对象</p>
<ul>
<li><code>e = db.get(db.Key('Entity', 'alphabeta'))</code> / <code>e = Entity.get(k)</code></li>
<li><code>e = db.get(k)</code></li>
<li><code>e.delete()</code> / <code>db.delete(e1, e2)</code> / <code>db.delete(k)</code></li>
</ul>
</li>
<li>
<p>Expando 基类可以任意扩展属性，Model 基类则不可。</p>
</li>
<li>
<p>GAE 中基本类型与 Python / Java 中基本类型的差异</p>
</li>
<li>
<p>多值属性</p>
</li>
</ul>
</li>
<li>
<p>数据查询</p>
<ul>
<li>查询和类别 <code>db.query()</code> <code>query.filter()</code> <code>query.order()</code></li>
<li>查询和键：查询结果要么返回实体，要么返回键（ <code>key_only=True</code> ）</li>
<li>可以用 GQL 写查询语句，不能写 CUD</li>
<li>获取结果： <code>fetch()</code></li>
</ul>
</li>
<li>
<p>索引</p>
<ul>
<li>每条查询都需要维护一条索引，在 <code>index.yaml</code> 中可以配置</li>
<li>排序之后的索引查询很快，查询效率和返回结果集有关</li>
<li>实体的每个属性会自动维护两条索引：升序和降序</li>
<li>查询时候选取对应的索引进行查询，条件语句可能和排序语句相冲突</li>
<li>不等于 / IN 操作符将引发一系列变换出的查询</li>
<li>多值字段的索引：每个值会成为索引中一行 / 实体会因此分散 / 取第一次成功扫描到的行</li>
<li>多值会引入爆炸索引问题</li>
</ul>
</li>
<li>
<p>事务</p>
<ul>
<li>通过实体组来控制事务，实体组会在同一块存储区</li>
<li>GAE 使用乐观锁</li>
<li>使用 <code>AModel(parent=p)</code> 构造祖先，然后通过 <code>run_in_transation()</code> 回调事务处理函数</li>
<li>BigTable 中使用日志+时间戳来跟踪实体的修改，保证数据并发和一致性</li>
<li>事务更新和索引更新：可能返回的索引结果和实体不一致</li>
</ul>
</li>
<li>
<p>Python 数据建模</p>
<ul>
<li>
<p>声明 / 类型 / 验证（ <code>validate()</code> ）</p>
</li>
<li>
<p>不编入索引的属性 <code>indexed=False</code></p>
</li>
<li>
<p>时间类型的自动值</p>
</li>
<li>
<p>模型变化带来的维护问题：修改属性类型 / 添加一个必要属性是不向后兼容的。</p>
</li>
<li>
<p>关系建模</p>
<ul>
<li>db.ReferenceProperty</li>
<li>collection_name</li>
</ul>
</li>
<li>
<p>多对多关系的处理</p>
<ul>
<li>键列表方法：使用多值属性</li>
<li>链接模型方法：相当于中间表概念</li>
</ul>
</li>
<li>
<p>模型的继承：通过 <code>db.PolyModel</code> 实现多态查询</p>
</li>
</ul>
</li>
<li>
<p>Memcache</p>
<ul>
<li>CRUD</li>
</ul>
</li>
<li>
<p>获取 URL 资源</p>
<ul>
<li><code>urlfetch()</code></li>
</ul>
</li>
<li>
<p>RPC 异步请求调用，闭包调用</p>
</li>
<li>
<p>邮件和 XMPP</p>
<ul>
<li>额，亲用到时候看 Google 官方文档吧～</li>
</ul>
</li>
<li>
<p>大批量数据操作和远程访问</p>
<ul>
<li><code>/remote_api</code></li>
<li>Bulk Loader 大量数据操作</li>
<li>远程 shell <code>remote_api_shell.py app-id</code></li>
</ul>
</li>
<li>
<p>任务队列和计划任务</p>
<ul>
<li>队列： <code>queue.yaml</code> / 令牌桶</li>
<li>计划任务： <code>cron.yaml</code></li>
<li>都是通过设定主动触发某个 url</li>
</ul>
</li>
<li>
<p>Django</p>
<ul>
<li>看 Django 文档吧，亲～</li>
</ul>
</li>
<li>
<p>部署</p>
<ul>
<li>上传 <code>appcfg.py update ./clock</code></li>
<li>通过 url 使用特定版本： <code>version-id.latest.app-id.appspot.com</code></li>
<li>版本只维护代码，数据库还是同一份</li>
<li>下载日志 <code>appcfg.py request_logs clock logs.txt</code></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>影响力读书笔记</title>
      <link>https://blog.alswl.com/2012/03/influence/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/03/influence/</guid>
      <description>本书研究 - 社会心理学 - 顺从心理学。 日常生活中有大量心理捷径。 在某个环境下机械地回应某一信息的倾向叫做自动化反应或&amp;quot;按一下就播放&amp;quot;式反应； 对所有相关信息进行彻底分析后做出反应的倾向，则叫做可控式反应。 豆瓣链接 1. 互惠 互惠是人类社会群体的一个独有特征。 利用小礼物，使目标答应原来会拒绝的请求。 互惠原理适用于强加的恩惠。 互惠原理可触发不对等交换。 违背互惠原理，接受而不试图回报他人善举的人</description>
      <content:encoded><![CDATA[<ul>
<li>本书研究 - 社会心理学 - 顺从心理学。</li>
<li>日常生活中有大量心理捷径。</li>
<li>在某个环境下机械地回应某一信息的倾向叫做自动化反应或&quot;按一下就播放&quot;式反应； 对所有相关信息进行彻底分析后做出反应的倾向，则叫做可控式反应。</li>
</ul>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201203/s1003546.jpg" alt="Influence"  />

<a href="http://book.douban.com/subject/1005576/">豆瓣链接</a></p>
<h2 id="1-互惠">1. 互惠</h2>
<ul>
<li>
<p>互惠是人类社会群体的一个独有特征。</p>
</li>
<li>
<p>利用小礼物，使目标答应原来会拒绝的请求。</p>
</li>
<li>
<p>互惠原理适用于强加的恩惠。</p>
</li>
<li>
<p>互惠原理可触发不对等交换。</p>
</li>
<li>
<p>违背互惠原理，接受而不试图回报他人善举的人，是不受群体欢迎的。（进化适应器）</p>
</li>
<li>
<p>互惠式让步：面对接受的善意，我们感到有义务要偿还。</p>
</li>
<li>
<p>拒绝-后撤策略：先提出较大的要求，遭到拒绝之后再提出真正的较小要求。</p>
<ul>
<li>责任感</li>
<li>满意感</li>
</ul>
</li>
<li>
<p>如何防范：</p>
<ul>
<li>拒绝最初的善意 / 分清楚请求者是否有善意或别有所图</li>
<li>明辩敌友：善意自然应当得到善意回报，可对销售策略却没有这个必要。</li>
</ul>
</li>
</ul>
<h2 id="2-承诺和一致">2. 承诺和一致</h2>
<ul>
<li>
<p>人人都有一种言行一致，同时也显得言行一致的愿望。</p>
</li>
<li>
<p>人类普遍人为言行一致是基本的人格特征。信仰、言语和行为前后不一的人， 会被堪称是脑筋混乱、表里不一，甚至精神有毛病。另一方面， 言行高度一致大多跟个性坚强、智力出众挂钩，它是逻辑性、稳定性和诚实感的核心。</p>
</li>
<li>
<p>每当一个人当中选择了一种立场，便产生了维持它的动机，这样才能显得言行一致。</p>
</li>
<li>
<p>言行一致的优势：</p>
<ul>
<li>为复杂的现代生活提供一种捷径，被验证过的模式会提供好处</li>
<li>避免费力的思考。</li>
</ul>
</li>
<li>
<p>激活一致性的关键：承诺</p>
</li>
<li>
<p>承诺之后甚至会加大顺从度，去做之前小请求毫不相关的事情。</p>
</li>
<li>
<p>承诺需要当事人积极、公开、、经过一番努力后自由选择的。</p>
<ul>
<li>只有当我们认为外界不存在强大的压力时，我们才会为自己的行为发自内心地负起责任。</li>
<li>观察当事人，通过他的行为确定一个人自身信仰、价值观和态度</li>
<li>书面承诺的效果很显著</li>
<li>公开承诺假话和具有持久的效力，人们会忠于自己的公开决定。</li>
<li>额外的努力对承诺者的影响力更大。</li>
</ul>
</li>
<li>
<p>承诺之后，尽管环境发生了变化，承诺仍然会持续的发挥效用（自己长出腿）。</p>
<ul>
<li>这是为了保持内心信仰系统一致。</li>
<li>抛低球：用甜头引诱，然后再找接口撤销。</li>
</ul>
</li>
<li>
<p>公共利益往往是一个很好的承诺点。</p>
</li>
<li>
<p>防范引诱性承诺</p>
<ul>
<li>肠胃信号</li>
<li>心灵深处的力量，寻找和信任自己做出反应那一瞬间的乍现灵光。</li>
</ul>
</li>
<li>
<p>容易被攻击的弱点</p>
<ul>
<li>年龄</li>
<li>个人主义</li>
</ul>
</li>
</ul>
<h2 id="3-社会认同">3. 社会认同</h2>
<ul>
<li>
<p>社会认同原理：在判断何为正确时，我们会根据别人的意见行事。</p>
</li>
<li>
<p>推导</p>
<ul>
<li>我们对社会认同的反应方式完全是无意识的、条件反射式的，这样一来， 偏颇甚至伪造的证据也能愚弄我们。</li>
<li>认为一种想法正确的人越多，持有这种想法的人就会觉得它正确。</li>
</ul>
</li>
<li>
<p>人越多反而越不安全</p>
<ul>
<li>现场有大量旁观者在场时，旁观者伸出援手的可能性最低。</li>
<li>避免这种情况：指定对象要求救援。</li>
</ul>
</li>
<li>
<p>模仿自杀（维特效应）：报道自杀的消息，促使一部分跟自杀者类似的人走向了绝路。</p>
</li>
<li>
<p>不确定性的帮助：在人不确定时候，会根据他人的行为指导自己的行为。</p>
</li>
<li>
<p>防范：</p>
<ul>
<li>那些从众行为往往是赤裸裸伪造的，甚至是可笑的。</li>
<li>在自己不明白真相时候，取了解真相，避免对集体智慧的极大信任。</li>
</ul>
</li>
</ul>
<h2 id="4-喜好">4. 喜好</h2>
<ul>
<li>
<p>社会纽带的影响比对产品本身的好恶强两倍</p>
</li>
<li>
<p>喜好的缘由：</p>
<ul>
<li>
<p>外表：一个人的正面特征能主刀他人看待此人的眼光。 长相好的人更容易在需要帮助的时候获得帮助，在改变听众意见时候也更具有说服力。</p>
</li>
<li>
<p>相似性：人们喜欢与自己相似的人，无论是在观点、个性、背景还是生活方式。</p>
</li>
<li>
<p>恭维：人们喜欢听人恭维奉承。</p>
</li>
<li>
<p>接触和合作：人们对熟悉的人有好感。</p>
<ul>
<li>接触带来的熟悉往往能导致更大的好感，但是接触本身蕴含了让人反感的体验， 也许会适得其反。</li>
<li>在接触时候，努力创造一种&quot;我们和他们在为了同一目标而奋斗&quot;的氛围， 会提升合作顺利程度。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>关联性：</p>
<ul>
<li>糟糕的消息会让报信人也染上不详。</li>
<li>流行文化的导向</li>
<li>新闻、天气和体育的惊人力量：能将成功联系到自己，将自己的公共形象变得光辉。</li>
</ul>
</li>
<li>
<p>防范：</p>
<ul>
<li>警惕自己的好感度是否超过正常指标</li>
</ul>
</li>
</ul>
<h2 id="5-权威">5. 权威</h2>
<ul>
<li>
<p>人往往会听从于专家和上级，难以公然违抗他们。 权威的上级的命令，往往会被无条件的执行，甚至违抗常识、道德和法律。</p>
</li>
<li>
<p>权威的象征往往就能降伏我们：</p>
<ul>
<li>头衔</li>
<li>衣着</li>
<li>身份标识</li>
</ul>
</li>
<li>
<p>防范：</p>
<ul>
<li>分清楚真正的权威，判断是否是专家</li>
</ul>
</li>
</ul>
<h2 id="6-稀缺">6. 稀缺</h2>
<ul>
<li>
<p>物以稀为贵</p>
</li>
<li>
<p>对失去某种东西的恐惧，似乎要比对获得同一物品的渴望，更能激发人们的行动力。</p>
</li>
<li>
<p>稀缺的特征：数量有限/时间有限。</p>
</li>
<li>
<p>逆反心理</p>
<ul>
<li>保住既得利益的愿望，是心理逆反理论的核心。</li>
<li>我们基本可以根据获得一种东西的难易程度，迅速准确地判断它的价值。</li>
<li>每当东西获取起来比以前难，我们拥有 它的自由受了限制，我们就越发地想要得到它。</li>
<li>信息审查对受众的影响：人们对封锁的信息更接受、更包容。</li>
</ul>
</li>
<li>
<p>创造稀缺的条件：</p>
<ul>
<li>新的稀缺：失去比获得带来的震动更大。</li>
<li>竞争稀缺资源：人们在竞争稀缺资源时候，往往会变得狂热愚昧。</li>
</ul>
</li>
<li>
<p>防范：</p>
<ul>
<li>警惕在顺从环境下面高涨的情绪</li>
<li>理解物品的价值来源于本身，而不是稀缺程度。</li>
<li>避免竞争环境下面的情绪狂热。</li>
</ul>
</li>
</ul>
<h2 id="7-新时代环境的影响力">7. 新时代环境的影响力</h2>
<ul>
<li>我们容易根据孤立的代表性特征做决定，因为现代生活节奏太快，信息太纷杂。</li>
<li>当代的信息爆炸了。</li>
<li>我们需要使用捷径来做出快速的相应。</li>
<li>我们要采取一切合理的方法：抵制、威胁、对峙、谴责、抗议， 来报复刺激我们的捷径反应为目的的虚假信号。</li>
</ul>
<h2 id="8-alswl-的总结">8. alswl 的总结</h2>
<p>关于如何防范，其实只要掌握两点：</p>
<ul>
<li>避免懒惰，勤加思考（反捷径）</li>
<li>天上不会掉馅饼（反虚假捷径刺激信号）</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>再读《重构》</title>
      <link>https://blog.alswl.com/2012/02/refactory/</link>
      <pubDate>Sun, 05 Feb 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/02/refactory/</guid>
      <description>Martin Fowler 的「重构-改善既有代码的设计」这本书，是我大学老师推荐给我的。 当时我在撰写代码过程中，发现当代码量到某个数量级时候（1000+行）， 就会逐渐失去对代码的控制能力。 昆哥推荐了两本书「UML 和模式应用」和「重构」这本书。 这本书是2年前购买的，可惜以我当时的代码感知和撰写能力，看起来颇为吃力。 半途就看得云里雾里而中断了。最近我又重新拾起这本书， 将书中所写的境况与我这两年多来遇到的问题相互印证，才感受</description>
      <content:encoded><![CDATA[<p>Martin Fowler 的「<a href="http://book.douban.com/subject/1229923/">重构-改善既有代码的设计</a>」这本书，是我大学老师推荐给我的。
当时我在撰写代码过程中，发现当代码量到某个数量级时候（1000+行），
就会逐渐失去对代码的控制能力。
昆哥推荐了两本书「<a href="http://book.douban.com/subject/1792387/">UML 和模式应用</a>」和「重构」这本书。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201202/s1669771_l.jpg" alt="Refactory"  />

</p>
<p>这本书是2年前购买的，可惜以我当时的代码感知和撰写能力，看起来颇为吃力。 半途就看得云里雾里而中断了。最近我又重新拾起这本书，
将书中所写的境况与我这两年多来遇到的问题相互印证，才感受到这本经典的力量。</p>
<p>Martin 其人：</p>
<blockquote>
<p>ThoughtWorks 的首席科学家，当今世界软件开发领域最具影响力的五位大师之一。
他在 UML 推广普及、领域建模、企业应用开发和敏捷方法等方面建树卓著，被称为软件开发的教父。</p>
</blockquote>
<p>大学时候有段时间我对 Martin 的敏捷非常痴迷。现在对技术的选择没以前那么冲动了， 但是毫不妨碍我对 Martin 的敬仰之情。</p>
<h2 id="1-重构原则">1. 重构原则</h2>
<h3 id="11-重构的定义">1.1. 重构的定义</h3>
<blockquote>
<p>对软件内部结构的一种调整，目的是在不改变&quot;软件之可察行为&quot;前提下，提高其可理解性，降低其修改成本。</p>
</blockquote>
<p>重构就是在代码写好之后改进它的设计。</p>
<ul>
<li>重构和添加新功能并不冲突，但是当开发者身份在两者之间切换时候，不能混淆在一起。</li>
</ul>
<h3 id="12-重构的意义">1.2. 重构的意义</h3>
<ul>
<li>优秀设计的根本是：消除重复部分！（DRY = Don&rsquo;t repeat yourself）</li>
<li>重构让代码更清晰，更容易理解</li>
<li>清晰的代码可以更方便的找到 bug ，重构可以写出更强健的代码</li>
<li>良好的设计可以在长远时间上提高开发速度</li>
</ul>
<h3 id="13-重构的时间">1.3. 重构的时间</h3>
<ul>
<li>随时进行重构（在我看来，重构更是一种开发的习惯）</li>
<li>事不过三，代码重复不要超过三次（否则就要&quot;抽&quot;出来）</li>
<li>添加功能时候并一一重构（个人理解是，添加新功能之前，分析并重构，从而更方便添加新功能）</li>
<li>修补错误时</li>
<li>Code Review 时</li>
</ul>
<h3 id="14-重构和开发进度">1.4. 重构和开发进度</h3>
<p>重构的意义之一也是提高开发进度。杀手锏是&quot;不要告诉经理&quot;。</p>
<h3 id="15-重构的难题">1.5. 重构的难题</h3>
<ul>
<li>数据层（数据模型）的变更压力</li>
<li>修改接口</li>
<li>那些难以通过重构改变的设计改动</li>
<li>代码不能运行</li>
<li>项目期限压力 Deadline</li>
</ul>
<h3 id="16-重构与设计">1.6. 重构与设计</h3>
<ul>
<li>编程不是机械的开发，（软件开发是艺术行为！）</li>
<li>设计和重构的平衡（预先设计的难度和重构灵活性的平衡）</li>
</ul>
<h3 id="17-重构与性能">1.7. 重构与性能</h3>
<ul>
<li>重构确实会在短期内降低代码执行效率，但优化阶段是可以调整的，而且调整会更容易。</li>
<li>提前优化是万恶之源</li>
</ul>
<h3 id="18-那些bad-smell">1.8. 那些Bad Smell</h3>
<ul>
<li>重复的代码（这才是真正万恶之源，鄙视一切Ctrl+C/P）</li>
<li>过长函数，会导致责任不明确/难以切割/难以理解等一系列问题</li>
<li>过大类，职责不明确，垃圾滋生地</li>
<li>过长参数列（面向对象不是说说而已）</li>
<li>发散式变化，一个类会响应多种需求而被修改</li>
<li>散弹式修改（其实就是没有封装变化处，由于一个需求，多处需要被修改）</li>
<li>依赖情节（一个类对其他类过多的依赖）</li>
<li>数据泥团（如果数据有意义，就将结构数据变成对象）</li>
<li>Type code，使用 Class 替代</li>
<li><code>switch</code>，少用，考虑多态</li>
<li>过多平行的类，使用类继承并联起来</li>
<li>冗余类，去除它</li>
<li>夸夸其谈的未来性（Matin 的文字，侯俊杰的翻译真是…出彩…）</li>
<li>临时值域，封装它</li>
<li>过度耦合的消息链，使用真正需要的函数和对象，而不要依赖于消息链</li>
<li>过度的 Deleate</li>
<li>过度使用其他类 <code>private</code> 值域</li>
<li>重复作用的类</li>
<li>不完美的类库，（类库老了，使用者也没办法阿）</li>
<li>纯数据类（类需要行为）</li>
<li>不纯粹的继承（拒绝父类的接口的类）</li>
<li>过多注释，注释多了，就说明代码不清楚了</li>
</ul>
<h3 id="19-从测试开始">1.9. 从测试开始</h3>
<p>无测试，无重构，只依赖手工测试，重构时候人会崩溃的。</p>
<ul>
<li>重构的保真就是自动化测试（如果真的要无聊的手工测试，我也不反对）</li>
<li>单元测试</li>
<li>功能测试</li>
</ul>
<h3 id="110-kent-back说">1.10. Kent Back说</h3>
<blockquote>
<p>如果我纯粹为今天工作，明天我将完全无法工作。</p>
</blockquote>
<p>间接层的价值：</p>
<ul>
<li>允许逻辑共享</li>
<li>分开解释&quot;意图&quot;和&quot;实现&quot;</li>
<li>将变化加以隔离</li>
<li>将条件逻辑加以编码</li>
</ul>
<blockquote>
<p>计算机科学是这样一门学科：它相信所有问题都可以通过一个间接层来解决。</p>
<p>&ndash;Dennis DeBruler</p>
</blockquote>
<p>我相信，撰写代码时候不仅仅考虑当下功能，要考虑到有可能出现的情况，
在可能的平衡下面，为将来的扩展做好准备。（也许不仅仅是自己的明天，
还要考虑团队成员的今天工作内容）</p>
<h2 id="2-重构名录">2. 重构名录</h2>
<h3 id="21-重新组织函数">2.1. 重新组织函数</h3>
<p>Extract Method（提炼函数）</p>
<blockquote>
<p>将一段独立的，不依赖上下文的代码组织并独立出来。</p>
</blockquote>
<p>Inline Method（将函数内联化）</p>
<blockquote>
<p>当函数内部代码简短而容易理解时候，去除这个非必要的间接层。</p>
</blockquote>
<p>Inline Temp（将临时变量内联化）</p>
<blockquote>
<p>去除只被赋值一次的临时变量。（当有意义时候，应该保留）</p>
</blockquote>
<p>Replace Temp with Query（以查询取代临时变量）</p>
<blockquote>
<p>将临时变量提取到一个独立函数，并将原来变量引用替换为函数调用。 （我还是担心性能的问题，另外将临时变量限定在一个段落中，可以避免额外的引用）</p>
</blockquote>
<p>Introduce Explainning Variable（引入解释性变量）</p>
<blockquote>
<p>将复杂表达式的结果放入临时变量，并用变量名来解释表达式用途。 （自注释代码的表现）</p>
</blockquote>
<p>Split Temporary Variable（剖析临时变量）</p>
<blockquote>
<p>除了循环变量和临时集合变量，临时变量赋值不能超过一次。</p>
</blockquote>
<p>Remove Assignments to Parameters（移除对参数的赋值动作）</p>
<blockquote>
<p>不对函数参数进行赋值动作，如果要赋值，创建一个新的临时变量。</p>
</blockquote>
<p>Replace Method with Method Object（以函数对象取代函数）</p>
<blockquote>
<p>把函数变成对象，再把临时变量变成对象值域。该方法在分解函数时候常用。 （Martin 对小型函数特别迷恋，我认为这个方法更应该用在有逻辑意义的方法上面）</p>
</blockquote>
<p>Substitute Algorithm（替换算法）</p>
<blockquote>
<p>用更清晰的算法。 （码农都知道）</p>
</blockquote>
<h3 id="22-在对象之间搬移特性">2.2. 在对象之间搬移特性</h3>
<p>（面向对象编程原则之一就是职责归属，搬移其实也就意味着职责重新规划）</p>
<p>Move Method（搬移函数）</p>
<blockquote>
<p>将函数移动到被最多次调用的类里面去。 （往往在逻辑意义上，这个函数就应该归属于这个类）</p>
</blockquote>
<p>Move Field（搬移值域）</p>
<blockquote>
<p>将值域移动到被最多次调用的类里面去。</p>
</blockquote>
<p>Extract Class（提炼类）</p>
<blockquote>
<p>将开发过程中逐渐变得臃肿的类拆分成数个类，形成清楚的抽象，明确的职责。</p>
</blockquote>
<p>Inline Class（将类内联化）</p>
<blockquote>
<p>将不再担任足够职责的类搬到另外一个类中，并移除这个原始类。</p>
</blockquote>
<p>Hide Delegate（隐藏委托关系）</p>
<blockquote>
<p>将直接调用变成间接，在中间添加一层，从而从容面对变更，隔离变化。 （&ldquo;哪里变化，封装哪里&quot;这是设计模式的一个经典原则）</p>
</blockquote>
<p>Remove Middle Man（移除中间人）</p>
<blockquote>
<p>和Hide Delegate相反，移除做了过多简单委托的类。 （应该Hide Delegate需要加入成本，多维护一层，这需要控制一种平衡）</p>
</blockquote>
<p>Introduce Foreign Method（引入外加函数）</p>
<blockquote>
<p>当类无法进行修改时候，使用静态函数接受这种类型的类实例，</p>
</blockquote>
<p>Introduce Local Extenstion（引入本地扩展）</p>
<blockquote>
<p>使用子类继承/Wrapper 类来实现额外的函数。</p>
</blockquote>
<h3 id="23-重新组织数据">2.3. 重新组织数据</h3>
<p>Self Encapsulate Field（自封装值域）</p>
<blockquote>
<p>使用getter/setter。 （个人觉得这样很繁琐，.net 中的属性方式处理的不错）</p>
</blockquote>
<p>Replace Date Value with Object （以对象取代数据值）</p>
<blockquote>
<p>当数据项有额外的数据和行为时候，将它变成一个类</p>
</blockquote>
<p>Change Value to Reference（将实值对象改为引用对象）</p>
<blockquote>
<p>有一些类型，比如日期、星期，不需要保存太多副本。</p>
</blockquote>
<p>Change Reference to Value（将引用对象改为实值对象）</p>
<blockquote>
<p>和楼上相反的情况，引用会带来复杂的内存分配，在分布式系统中，实值对象特别有用。</p>
</blockquote>
<p>Replace Array with Object（以对象取代数组）</p>
<blockquote>
<p>不应该将不同的元素存放到数组中，应该使用值域。</p>
</blockquote>
<p>Duplicate Observed Data（复制被监视数据）</p>
<blockquote>
<p>通过观察者模式，将业务数据和 GUI 数据进行同步控制</p>
</blockquote>
<p>Change Unidirectional Association to Bidirectional（将单向关联改为双向）</p>
<blockquote>
<p>使用双向连接，从而能让两个类能互相使用对方特性。</p>
</blockquote>
<p>Change Bidirectional Assicuation to Unidirectional（将双向关联改为单向）</p>
<blockquote>
<p>当一个类不再需要另外一个类特性时候作修改。</p>
</blockquote>
<p>Replace Magic Number with Symbolic Constant（以符号常量/字面常量取代魔法数）</p>
<blockquote>
<p>使用有意义的名称，比如pi, gravity。</p>
</blockquote>
<p>Encapsulate Field（封装值域）</p>
<blockquote>
<p>使用getter/setter。</p>
</blockquote>
<p>Encapsulate Collection（封装集群）</p>
<blockquote>
<p>避免直接修改容器对象，而是封装出类方法来修改。将变化控制在既有方法内。</p>
</blockquote>
<p>Replace Record with Data Class（以数据类取代记录）</p>
<blockquote>
<p>将传统编程中的结构体转换为数据类。</p>
</blockquote>
<p>Replace Type Code with Class（以类别取代型别码）</p>
<blockquote>
<p>使用类型集合类来替换型别码。</p>
</blockquote>
<p>Replace Type Code with Subclass（以子类取代型别码）</p>
<blockquote>
<p>使用多态来替换型别码，发挥面向对象编程的优势。 （小心处理 ORM 映射）</p>
</blockquote>
<p>Replace Type Code with State/Strategy（以State/Strategy取代型别码）</p>
<blockquote>
<p>使用State/Strategy模式来因对type code会发生变化的情况。 将状态类作为父类，再进行继承。</p>
</blockquote>
<p>Replace Subclass with Fields（以值域取代子类）</p>
<blockquote>
<p>当子类的差异仅仅体现在返回常量数据的函数上时候，进行这样的替换。</p>
</blockquote>
<h3 id="24-简化条件表达式">2.4. 简化条件表达式</h3>
<p>简化的核心思想，是将过程式的 <code>if</code> / <code>else</code> 替换为面向对象的多态。</p>
<p>Decompose Conditional（分解条件式）</p>
<blockquote>
<p>将复杂的条件式提炼为独立函数。</p>
</blockquote>
<p>Consolidate Conditional Expression（合并条件式）</p>
<blockquote>
<p>将多个条件式判断提炼成一个独立函数。这和上面的分解条件式都需要一个前提： 这几个条件式是要有逻辑关联的。</p>
</blockquote>
<p>Consolidate Duplicate Conditional Fragments（合并重复的条件判断）</p>
<blockquote>
<p>将所有分支里面都拥有的代码提炼到分支判断之后运行。</p>
</blockquote>
<p>Remove Control Flag（移除控制标志）</p>
<blockquote>
<p>使用 break/return 取代控制标记。单一出口，多出口。控制标记让程序接口看上去混乱。</p>
</blockquote>
<p>Replace Nested Conditional with Guard Clauses（以卫语句取代嵌套条件式）</p>
<blockquote>
<p>保留正常情况下面下的顺序执行，提前对非正常情况进行单独检查并返回。 （我更倾向于使用 Exception）</p>
</blockquote>
<p>Replace Conditional with Polymorphism（以多态取代条件式）</p>
<blockquote>
<p>将条件式的每个分支放入一个Subclass 内覆写函数中，然后将原始函数生命为抽象函数。
（这个方法之前的 5 种重构手段是代码小手段，引入多态才能充分发挥 OOP 优势）</p>
</blockquote>
<p>Introduce Null Object（引入 Null 对象）</p>
<blockquote>
<p>将无效值替换为Null Object，从而可以让程序正常运行。 （这好象是一种 Hack 方法，我倾向使用 Exception，作者的用以可能是通过 Null 来减少判断代码）</p>
</blockquote>
<p>Introduce Assertion（引入断言）</p>
<blockquote>
<p>通过断言来发现程序错误，实际使用中，可以配合 Debug Mode 使用。</p>
</blockquote>
<h3 id="25-简化函数调用">2.5. 简化函数调用</h3>
<p>Rename Method（重命名函数）</p>
<blockquote>
<p>A good name is better than a line of comment.</p>
</blockquote>
<p>Add Parameter（添加参数）</p>
<blockquote>
<p>你没看错，就是添加参数。 （啊？Matin老师，不带这么水的阿）</p>
</blockquote>
<p>Remove Parameter（移除参数）</p>
<blockquote>
<p>不要就丢掉。</p>
</blockquote>
<p>Separate Query from Modifier（将查询参数和修改参数分离）</p>
<blockquote>
<p>将一个即查询状态又修改状态的函数分离开来，职责分离清楚。 （我以前很喜欢写多面手函数～）</p>
</blockquote>
<p>Parameterize Method（令函数携带参数）</p>
<blockquote>
<p>同一逻辑功能函数，通过重载接受不同参数。而不要建立多个同样的函数。</p>
</blockquote>
<p>Replace Parameter with Explicit Methods（以明确函数取代参数）</p>
<blockquote>
<p>将单一函数分解为多个函数从而去掉参数，前提是这几个函数的逻辑功能区别较大。</p>
</blockquote>
<p>Preserve Whole Object（保持对象完整）</p>
<blockquote>
<p>传递完整的对象，取代几个参数的传递。</p>
</blockquote>
<p>Replace Parameter with Methods（以函数取代参数）</p>
<blockquote>
<p>如果目标函数需要的是几个参数操作的结果，就直接传递这个结果，而不是数个参数。</p>
</blockquote>
<p>Introduce Parameter Object(引入参数对象)</p>
<blockquote>
<p>当几个参数经常同时出现，就封装他们。 （他们之间往往就有逻辑关系）</p>
</blockquote>
<p>Remove Setting Method（移除设值函数）</p>
<blockquote>
<p>如果类的某个值域初始化后不再改变，就去掉它的 setting 方法。 （我理解为原则：&ldquo;减少疑惑，保持唯一&rdquo;）</p>
</blockquote>
<p>Hide Method（隐藏某个函数）</p>
<blockquote>
<p>使用 private 标记未被其他类调用的方法。</p>
</blockquote>
<p>Replace Constructor with Factory Method（以工厂函数取代构造函数）</p>
<blockquote>
<p>引入工厂模式。</p>
</blockquote>
<p>Encapsulate Downcast（封装向下转型动作）</p>
<blockquote>
<p>当知道什么类型时候，将其封装在产生函数里面，减少引用者的困扰。</p>
</blockquote>
<p>Replace Error Code with Exception（以异常取代错误码）</p>
<blockquote>
<p>如其名。 （关于异常使用的时机，抛出的方式，捕捉的粒度，我困惑了很久。 最后的总结的经验是：在什么层级处理并且仅处理该层级的异常。等有时间详细成文送出）</p>
</blockquote>
<p>Replace Exception with Test（以测试取代异常）</p>
<blockquote>
<p>异常不是条件判断。</p>
</blockquote>
<h3 id="26-处理概括关系">2.6. 处理概括关系</h3>
<p>关于 OOP 继承的那些事儿。</p>
<p>Pull Up Field（值域上移）</p>
<blockquote>
<p>子类重复的值域放到父类去。 （其实还是基于责任归属的问题）</p>
</blockquote>
<p>Pull Up Method（函数上移）</p>
<blockquote>
<p>子类中重复函数移到父类。</p>
</blockquote>
<p>Pull Up Construction Body（构造函数本体上移）</p>
<blockquote>
<p>共用的构造函数片段上移。</p>
</blockquote>
<p>Push Down Method（函数下移）</p>
<blockquote>
<p>将父类中近被某个子类调用的函数下移。</p>
</blockquote>
<p>Push Down Field（值域下移）</p>
<blockquote>
<p>同上。</p>
</blockquote>
<p>Extract Subclass（提炼子类）</p>
<blockquote>
<p>当某个类只有部分特性被用到，就需要提取出子类。</p>
</blockquote>
<p>Extract Superclass（提炼超类）</p>
<blockquote>
<p>和上面相反。</p>
</blockquote>
<p>Extract Interface（提炼接口）</p>
<blockquote>
<p>将相同的子集提取接口。</p>
</blockquote>
<p>Collapse hierarchy（折叠继承体系）</p>
<blockquote>
<p>父类和子类并无太大区别时候，合体吧亲。</p>
</blockquote>
<p>From Template Mehod（塑造模板函数）</p>
<blockquote>
<p>将子类的同功能不同实现函数上移到父类，并在子类提供同名不同实现被调用的子函数。</p>
</blockquote>
<p>Replace Inheritance with Delegation（以委托取代继承）</p>
<blockquote>
<p>将父类变成一个值域，在调用这个值域的方法。is-a -&gt; has-a （继承太多就会出问题）</p>
</blockquote>
<p>Replace Delegation with Inheritance（以继承取代委托）</p>
<blockquote>
<p>和上面相反的应用，当子类和父类出现明显的继承关系时候使用。</p>
</blockquote>
<h3 id="27-大型重构">2.7. 大型重构</h3>
<p>这一章讲的内容有点高屋建瓴，这里就不概括了，建议读原文。</p>
<ul>
<li>Tease Apart Inheritance（梳理并分解继承体系）</li>
<li>Convert Procedural Design to Objects（将过程化设计转化为对象设计）</li>
<li>Separate Domain from Presentation（将领域和表述/显示分离）</li>
<li>Extract hierarchy（提炼继承体系）</li>
</ul>
<p>少年，Coding 时候重构你的代码吧！</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>暗时间读书笔记</title>
      <link>https://blog.alswl.com/2012/01/an-shi-jian/</link>
      <pubDate>Sun, 15 Jan 2012 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/01/an-shi-jian/</guid>
      <description>pongba的大作《暗时间》，讲述效率、习惯、思维，还有一些数学史话和算法，推荐一看。 ps：我的读书笔记比较水，也许成为摘抄更合适。我习惯这种大纲式的笔记，方便我回想。这里有[一篇很赞的评论](http://book.douban.com/r eview/5012104/)，介绍了三头牛，其中有笑来老师和刘未鹏。 1. 效率、记忆和学习 人生的原动力，对卓越的追求。 在每个时间的沙粒留过的时候，抓住沙子，让自</description>
      <content:encoded><![CDATA[<p><a href="http://mindhacks.cn/">pongba</a>的大作《<a href="http://book.douban.com/subject/6709809">暗时间</a>》，讲述效率、习惯、思维，还有一些数学史话和算法，推荐一看。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201201/s6586365.jpg" alt="an-shi-jian"  />

</p>
<p>ps：我的读书笔记比较水，也许成为摘抄更合适。我习惯这种大纲式的笔记，方便我回想。这里有[一篇很赞的评论](<a href="http://book.douban.com/r">http://book.douban.com/r</a>
eview/5012104/)，介绍了三头牛，其中有笑来老师和刘未鹏。</p>
<h2 id="1-效率记忆和学习">1. 效率、记忆和学习</h2>
<p>人生的原动力，对卓越的追求。
在每个时间的沙粒留过的时候，抓住沙子，让自己生命更有质量。</p>
<p>效率 X 时间 = 质量。</p>
<ul>
<li>暗时间
<ul>
<li>那些瓶颈较细的能够抓住每一粒时间之沙，虽然啥子总量一样，但相对却拥有更长的生命。</li>
</ul>
</li>
<li>投入时间和效率
<ul>
<li>投入时间这个说法本身就是荒唐的，实际投入的是时间和效率的乘积。</li>
<li>避免工作内容切换带来的上下文时间损耗</li>
<li>通过锻炼缩短进入状态的能力</li>
<li>能够迅速进入专注状态，以及能够长期保持专注状态，是高效学习的两个最重要习惯。</li>
</ul>
</li>
<li>设计你自己的进度条
<ul>
<li>设计你自己的进度条</li>
<li>不要过早退出循环
<ul>
<li>绝大多数情况下你并不孤单，你遇到的问题早就有人遇到过，你踩过的坑里尽是前人的脚印。</li>
</ul>
</li>
<li>兴趣遍地都是，专注和持之以恒才是真正稀缺的
<ul>
<li>性格里面有没有维持兴趣的火种一直燃烧下去的燃料</li>
</ul>
</li>
<li>靠专业技能的陈宫是最具有可复制性的</li>
<li>反思是让人得以改进自己的最重要思维品质</li>
<li>一生的知识积累，自学的起码占90%</li>
</ul>
</li>
<li>如何有效的记忆与学习
<ul>
<li>最终目的是要在恰当的时候能够想起来去使用</li>
<li>记忆线索的提取
<ul>
<li>知识信息：精细的概念、逻辑、一般的解题原则、通用的解题手法、背景知识、类似的问题</li>
<li>环境因素：环境、味道、声音</li>
<li>语言背景</li>
</ul>
</li>
<li>如何记忆
<ul>
<li>主动回顾</li>
<li>创造回忆的机会</li>
<li>虚拟别人的经历</li>
<li>抽象和推广</li>
<li>比较自己的经历</li>
</ul>
</li>
</ul>
</li>
<li>学习密度和专注力
<ul>
<li>并非靠自制力去强迫不受干扰，真正的效率源自于内心对一个事物的强烈的热忱。</li>
<li>专注力的意义
<ul>
<li>专注力可以让表层意识全功率运作</li>
<li>专注力可以让潜意识进入一种专注状态，在非工作时间持续发挥作用。</li>
</ul>
</li>
<li>获取专注力
<ul>
<li>人在接触一样新事物时候都是极其专注的（小时候的故事）。</li>
<li>克服焦虑，焦虑会严重影响专注力</li>
<li>享受困难，保持乐观心态</li>
<li>GTD，要事第一，让不重要的事情来找自己</li>
</ul>
</li>
</ul>
</li>
<li>刘未鹏的学习习惯
<ul>
<li>学习和思考
<ul>
<li>Google &amp; Wiki</li>
<li>看书挑剔，只看经典</li>
<li>做读书笔记</li>
<li>将思考变成习惯，避免焦虑</li>
<li>多看心理学与思维的书，因为它们是跨学科的</li>
<li>学习知识的技巧：它的本质是什么？它的第一原则是什么？它的知识结构是怎样的？</li>
<li>学习和思考时候常问自己问题
<ul>
<li>你的问题到底是什么</li>
<li>有什么收获</li>
<li>设想自己正在将东西讲给别人听</li>
<li>设想讲给一个不懂的人听</li>
<li>市场反省和注意自己的思维过程</li>
<li>养成反驳自己的想法的习惯</li>
<li>问自己，真的理解了么</li>
</ul>
</li>
</ul>
</li>
<li>时间和效率
<ul>
<li>趁着对一件事情有热情的时候，一股脑儿把万事开头那个最难的阶段熬过去</li>
<li>重要的事情优先</li>
<li>重要的事情要营造比较大的时间快来完成</li>
<li>同时也要善于利用小块时间</li>
<li>重视知识的本质</li>
<li>重视提前积累的强大力量（要把眼光多看，就能提前准备）</li>
<li>抬起头来（停下来，问问自己做的事情是否有意义）</li>
<li>退订RSS（这个嘛，过滤就好了）</li>
<li>总结最近得到的新知识</li>
<li>保持看书（书本的知识质量优于互联网上的知识）</li>
<li>制定简要的阅读计划</li>
</ul>
</li>
<li>时间和效率2
<ul>
<li>根据主体来查阅资料，而不是根据资料来查阅主题</li>
<li>好资料是根据思考过程来推导，坏资料是上来就写定理公式</li>
<li>学习一样东西，首先要在大脑中积累充分的疑惑感</li>
<li>有选择的阅读</li>
<li>书籍分为两类，一种是知识的，一种是思维的</li>
<li>看不懂的时候，有可能是几种原因：
<ul>
<li>看的不够使劲</li>
<li>牵扯到了不懂的概念</li>
<li>作者讲述的顺序不对</li>
</ul>
</li>
<li>在阅读之前就获取书本质量的评估</li>
<li>如何搜索好书：同作者，Amazon/Douban推荐，提到其他著作的数，别人之作的索引</li>
</ul>
</li>
<li>知识结构
<ul>
<li>抓住不变量（本质的知识）</li>
</ul>
</li>
<li>习惯的养成
<ul>
<li>人容易珍视自己长期积累的信念</li>
<li>理智是情感的奴隶</li>
<li>不自我欺骗，承认养成习惯的难度，并注意观察自己的行为，经常自我认知</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-逃出你的肖申克">2. 逃出你的肖申克</h2>
<p>讲认知模型，思考模式。</p>
<p>人 &lt;-&gt; 世界，去感受这个世界，探索世界的规律，回到内心，理性分析+笃定的信念。</p>
<ul>
<li>亲身经历才能明白
<ul>
<li>切身体验：心理学上表明，人无法从强度上正确感受到他人痛苦</li>
<li>别人口中的故事：会受到讲述人自己观念的影响而影响</li>
<li>为什么：往往他人只讲述how，而不是why</li>
<li>世界是复杂的：影响的因素太多，未必是别人认为的</li>
<li>未来是不确定的：&ldquo;你只要……就能……&ldquo;的错觉。只有做好准备，而无万全之策</li>
<li>别人的道理，自己的事情：知识经验跨越情景转移失败</li>
<li>认识失调和自我辩护：自我辩护倾向</li>
<li>失败即成功：自己的失败，也能给予一些信息和帮助</li>
<li>情绪对照：pass</li>
<li>天性：进化心理学，理性vs情绪</li>
<li>习惯</li>
</ul>
</li>
<li>亲身经历未必明白
<ul>
<li>很傻很天真的条件反射：遇到失败容易放弃，其实没有好的结果并不代表过程就错了。 判定成功失败从更长远的上来做统计</li>
<li>认知偏差：将失败归于外界，将成功归于自身</li>
<li>情绪系统：我们平时的决策强烈依赖情绪系统输出。情绪是决策系统之一，而不应该是全部</li>
</ul>
</li>
<li>不需经历也能明白-理性的力量
<ul>
<li>不应该让事实替代我们进行思考和推理，而需要进行社会学习（从别人错误中学习）</li>
<li>人类最强大的能力之一是归纳和推理（和波利亚解题的归纳/联想相对应）</li>
</ul>
</li>
<li>错觉和偏见
<ul>
<li>平凡的解释vs疯狂的解释</li>
<li>理所当然的错误：人往往无法看到或设想另一种可能性</li>
<li>打破这种的偏见唯一途径就是开阔视野，积累知识，以及和具有不同知识背景的人讨论</li>
</ul>
</li>
<li>新皮层和原始皮层
<ul>
<li>理智vs情绪</li>
</ul>
</li>
<li>理智和情感
<ul>
<li>我们的理性大脑非常善于对自己的行为作出立即的，看上去合理的解释。</li>
<li>思想钢印</li>
<li>大脑符合用进废退的原理，越经常使用的区域会越来越强大。</li>
<li>习惯之所以难以改变，就是因为习惯是自我巩固的。</li>
<li>能够改变既有的习惯，依靠的不是自制力，而是知识。</li>
</ul>
</li>
<li>书写是为了更好的思考</li>
<li>为什么你从现在开始就应该写博客</li>
<li>我能与我不能
<ul>
<li>我想-&gt;我不能-&gt;我不想</li>
<li>自利归因</li>
</ul>
</li>
<li>遇到问题为什么应该自己动手
<ul>
<li>捷径未必正确，只是小聪明</li>
<li>问题之外的知识会更多</li>
</ul>
</li>
<li>什么才是你的不可替代性和核心竞争力
<ul>
<li>专业领域技能</li>
<li>跨领域的技能</li>
<li>学习能力</li>
<li>性格要素</li>
</ul>
</li>
</ul>
<h2 id="3-跟波利亚学解题">3. 跟波利亚学解题</h2>
<p>一些解决具体问题的思维方法。</p>
<ul>
<li>跟波利亚学解题
<ul>
<li>联想
<ul>
<li>联想是为了补上从条件到结论、从已知到未知之间缺失的链环</li>
<li>联想可以将问题向上归约一层，或者将条件往下推导一层</li>
<li>Working Backward (倒过来解)：将需要求解的问题本身当作条件，再进行推导。</li>
</ul>
</li>
<li>一些思维方法
<ul>
<li>时刻不忘未知量：始终知道自己需要什么</li>
<li>用特例启发思考</li>
<li>反过来推导：结论往往蕴含丰富的条件</li>
<li>试错：穷举</li>
<li>调整题目的条件：通过调整条件，找到条件和结论之间是如何联系的</li>
<li>求解一个类似的题目：寻求通用的方法</li>
<li>列出所有可能和问题相关的定理或性质</li>
<li>考察反面，考察其他所有情况</li>
<li>将问题泛化，并求解这个泛化的问题</li>
<li>意识孵化法（即前面提到的，将问题存在潜意识里面）</li>
<li>烫手山芋法（2B方法）</li>
<li>让联想更容易发生
<ul>
<li>已有知识是双刃剑：提供了解决问题的捷径，同时也是思维的桎梏</li>
<li>使用抽象将问题泛化，只抓住本质</li>
</ul>
</li>
<li>好题目，坏题目</li>
<li>思考的习惯：记录
<ul>
<li>人的记忆资源是有限的</li>
<li>将精力集中在某个过程，而不是全部过程上</li>
<li>记录更能刺激神经兴奋</li>
<li>记录可以方便的回顾，防止进入思维定势</li>
<li>方便解题之后整理</li>
</ul>
</li>
<li>练习练习
<ul>
<li>将外显记忆转化为内隐记忆</li>
<li>养成正确思维习惯</li>
<li>增加领域知识</li>
<li>帮助养成策略性联想</li>
</ul>
</li>
<li>启发法并不能精准的命中目标，而只能划定一个大致的范围</li>
<li>总结的意义：在解题过程中寻找一般性的、跨问题的思维思维法则</li>
</ul>
</li>
<li>锤子和钉子
<ul>
<li>记住问题是什么</li>
<li>专注于想要解决的问题</li>
</ul>
</li>
<li>鱼是最后一个看到水的（这章像是赚稿费的，果然是文章集，呵呵）
<ul>
<li>Think out of the box</li>
</ul>
</li>
<li>知其所以然
<ul>
<li>我们要下蛋的鸡</li>
<li>两种思维形式
<ul>
<li>联想</li>
<li>演绎&amp;归纳</li>
</ul>
</li>
<li>所以然是什么？什么是问题的价值？
<ul>
<li>内隐化：将知识变成本能</li>
<li>跨情境运用</li>
<li>对问题解的更多记忆提取线索：通过线索记住这个问题以及解法</li>
<li>更多的知识：(beyond the question)</li>
<li>重要分析推理，而不是联想：推理更靠谱</li>
<li>寻找问题原始出处：那里也许讲的更详细</li>
<li>整理自己的思路</li>
</ul>
</li>
</ul>
</li>
<li>为什么要知其所以然
<ul>
<li>更难忘记</li>
<li>知识结构是树状的，越往上走，需要记忆的节点越少</li>
</ul>
</li>
<li>康托尔、歌德尔、图灵（pass）</li>
<li>快速排序：让未知世界无机可乘，让答案的任何一个分支都是等概率</li>
<li>贝叶斯算法：（黑客与画家也提到这个算法）</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
