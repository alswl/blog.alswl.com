<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>dao on Log4D</title>
    <link>https://blog.alswl.com/tags/dao/</link>
    <description>Recent content in dao on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Nov 2009 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/dao/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java笔记 使用反射来改进BaseDao</title>
      <link>https://blog.alswl.com/2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/</link>
      <pubDate>Tue, 17 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/</guid>
      <description>关于反射 反射的定义（via Wiki）：在计算机科学中，反射是指一种特定类型的计算机程序能够在运行时以一种依
赖于它的代码的抽象特性和它的运行时行为的方式被更改的特性。用比喻来说，那种程式能够&amp;quot;观察&amp;ldquo;并且修改自己的行为。
Java中的反射示例如下：
package dddspace.job.exercise1116; public class Foo {
public void fun(String str) {
System.out.println(str);
}
}
package dddspace.job.exercise1116; import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
public class ReflectionDemo {
public static void main(String[] args) throws SecurityException,
NoSuchMethodException, ClassNotFoundException, InstantiationException,
IllegalAccessException, IllegalArgumentException,
InvocationTargetException {
// 不使用反射
Foo foo = new Foo();
foo.fun(&amp;ldquo;no reflection&amp;rdquo;);
// 使用反射
String className = &amp;ldquo;dddspace.job.exercise1116.Foo&amp;rdquo;;
String funName = &amp;ldquo;fun&amp;rdquo;;
// 获取类名
Class cls = Class.forName(className);
// 创建Object实例</description>
    </item>
    
    <item>
      <title>DAO的设计-使用泛型来避免重复DAO</title>
      <link>https://blog.alswl.com/2009/07/dao-design-the-use-of-generics-to-avoid-duplication-of-dao/</link>
      <pubDate>Fri, 10 Jul 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/07/dao-design-the-use-of-generics-to-avoid-duplication-of-dao/</guid>
      <description>DAO的全称是Data Access Object数据访问接口。数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。
我大二时候写的一个小型管理系统，那时候老师开始强调分层和MVC的思想，当时我将DAO层分了开来，把所有与数据库的交互操作封装成对应的DAO类，这样最大的好处
是实现了封装和隔离，方便系统的迁移和重构。
分层、封装、接口化是一种基本的解决思路，无论是TCP/IP协议族，还是软件工程，都是很值得使用的方案。
那么接下来的问题就是DAO类的设计，我当时遇到的问题就是DAO类之间存在大量的冗余代码，用敏捷的角度来思考，这绝对是不允许存在的。
讲相同的方法抽象出来，这也是最常见的解决方案，最简单的例子就是函数的产生，其实也是对程序的一种抽象和提炼，避免冗余，达到复用效果。
在Java1.5出来之前，用Object来操作对象，实现方法复用，就可以达到上面的目的，但是，存在类型安全的问题。Java1.5提出了泛型的概念，类似与C+
+中的Template，Java运行环境帮助会检查类型的安全。
这里有一篇IBM资料库的文章，详细阐述了泛型在DAO设计的使用「不要重复DAO」&amp;lt;猛击这里打开&amp;gt;，作者PerMellqvist
(per@mellqvist.name), 系统架构师, 自由作家
我的贴吧里面DAO最后的UML类图设计如下：</description>
    </item>
    
  </channel>
</rss>
