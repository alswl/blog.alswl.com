<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>flash on Log4D</title>
    <link>https://blog.alswl.com/tags/flash/</link>
    <description>Recent content in flash on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 May 2010 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/flash/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SWFObject 一款JavaScript的Flash检测与插入模块</title>
      <link>https://blog.alswl.com/2010/05/swfobject/</link>
      <pubDate>Sun, 23 May 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/05/swfobject/</guid>
      <description>今天开始AzaAjaxChat的视频聊天模块，拖FMS的福，实现起来很轻松，不过后来在JavaScript和Flash的交互上遇到了问题。
Flash在各个浏览器中的实现始终是个麻烦的事情，什么Object Embed~，似乎没有什么标准的格式，一般都要做一些浏览器Hack，我对这些深痛恶绝，在 泡了一下午前端相关的论坛后，偶然发现一款JavaScript交互的神器。
{# https://medium.com/@ardianta/writing-using-typora-on-hugo-based-blog-a1be8500774a #} SWFObject: 基于Javascript的Flash媒体版本检测与嵌入模块 SWFObject是一个用于在HTML中方面插入Adobe Flash媒体资源（*.swf文件）的独立、敏捷的JavaScript模块。该模块中的JavaS cript脚本能够自动检测PC、Mac机器上各种主流浏览器对Flash插件的支持情况。它使得插入Flash媒体资源尽量简捷、安全。而且它是非常符合搜索引擎优 化的原则的。此外，它能够避免您的 HTML、XHTML中出现object、embed等非标准标签，从而符合更加标准。
（即：通过text/html应答页面， 而非application/xhtml+xml）
官方在Google Project Host中，下载的代码包中有一个简单的Example，也包含了SWFObject的源码，感兴趣的同学可以研究一下。
相关链接：
[swfobject - Project Hosting on Google Code
](http://code.google.com/p/swfobject)
[SWFObject中文的帮助文档
](http://www.awflasher.com/flash/articles/swfobj.htm)
如果你也像我这样为Flash发愁，不妨试试这个小巧的js~</description>
    </item>
    
    <item>
      <title>FMS的80端口占用</title>
      <link>https://blog.alswl.com/2010/05/fms-80-port-used/</link>
      <pubDate>Sat, 22 May 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/05/fms-80-port-used/</guid>
      <description>AzaAjaxChat 的语音聊天需要使用的Flex的流媒体传输，我在评估的方案有两套：1.使用原声Socket在客户端进行连接，2.使用FMS 流媒体服务器进行数据传输。
FMS （Flash Media Server）在安装时候，有一个选项是端口使用哪个，默认是1935 和 80端口，安装之后发现在使用两个Apache在80端口发生冲突（FMS使用的也是Apache服务器），需要将这个端口修改。
Google后，发现修改 Flash Media Server 3conffms.ini 删除80留下1935即可。
# IP address and port(s) Flash Media Server should listen on # For example: # ADAPTOR.HOSTPORT = :1935,80 # ADAPTOR.HOSTPORT = :1935 唔～继续搞鼓Flex的流媒体传输了，头疼蛋大啊。。。
相关链接：[Flash Media Server 开发版下载](http://www.adobe.com/cfusion/tdrc/index.cfm?pr oduct=flashmediaserver&amp;amp;loc=zh_cn)，容量有上线，支持10个用户并发操作</description>
    </item>
    
    <item>
      <title>Flex Builder3中的launch path设置</title>
      <link>https://blog.alswl.com/2009/11/flex-builder3-in-the-launch-path-is-set/</link>
      <pubDate>Tue, 24 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/flex-builder3-in-the-launch-path-is-set/</guid>
      <description>在Flex Builder3中，想运行或者调试一个Flex项目，有Run/Debug/Profile三种运行方式。当我点击这三种方式的按钮时，都会报出一下警告：
Flash Player Not Found
Flex Builder cannot locate the required version of Flash Player. You might need to install Flash Player 9 or reinstall Flex Builder.
Do you want to try to run your application with the current version?
大意就是说没有找到Flash Player，有两个选项Yes/No。如果是Yes，则开启FireFox打开一个html页面，其中内嵌着swf文件。这个警告框还给出一个&amp;quot;Adobe Flash Player downloads&amp;ldquo;的下载链接。我下载安装后依然无法解决这个问题。
每次点一下倒并不是很麻烦，可恶的是如果这样，就无法对项目进行调试，trace()输出也不会在Console输出。
经过我尝试，我发现问题其实是出在项目的执行方式上，修改一下几个地方就可以了。
点击菜单栏的Run-&amp;gt;Run Configurations，在打开的对话框中找到Main中的URL or Path to launch，里面默认是Use defaults，现在我们把Debug/Profile/Run手工改成项目文件夹下对应的swf文件即可。
{# https://medium.com/@ardianta/writing-using-typora-on-hugo-based-blog-a1be8500774a #} 这样修改之后，无论是运行还是调试，都能在一个Flash Player中进行，比在Firefox中方便的多了。</description>
    </item>
    
    <item>
      <title>PylexChat可行性分析</title>
      <link>https://blog.alswl.com/2009/11/pylexchat-feasibility-analysis/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/pylexchat-feasibility-analysis/</guid>
      <description>PylexChat介绍 PylexChat取名自Python+Flex+Chat部 分缩写，这就意味着这个系统是基于Python+Flex的聊天系统。之所以做这个系统，源自我大学的最后一次课程设计，我不想浪费这最后一次可以供我发 挥自己想象力的机会。年后估计要参加工作了，毕业设计也不敢做这么有想法的课程设计。那就最后一次潇洒一下，做一个我完全没有接触过的东西。
我几乎不会Python，是最近一个月迷上这门强悍而简单的语言，我完全不会Flex，是最近1周时间才开始接触Flex。这意味着这次课程设计的 风险挺大。我花了几天的时间做了详细的可行性分析，分析了系统框架和GAE能够提供的服务和限制以及Flex/AIR能做的内容，否决了几个方案，最后总 结了一篇简单可行性分析（本文是一周时间慢慢形成的，并没有遵循正规的开发文档风格）。
几个基本的概念 内容出自维基百科
Python Python，是一种面向对象、直译式计算机程序设计语言，也是一种功能强大而完善的通用型语言，已经具有十多年的发展历史，成熟且稳定。
这种语言具有非常简捷而清晰的语法特点，适合完成各种高层任务，几乎可以在所有的操作系统中运行。
目前，基于这种语言的相关技术正在飞速的发展，用户数量急剧扩大，相关的资源非常多。
Flex Adobe Flex是最初由Macromedia公司在2004年3月发布的，基于其专有的Macromedia Flash平台，它是涵盖了支持RIA（Rich Internet Applications）的开发和部署的一系列技术组合。
FLEX支持创建静态文件，该文件使用解释编译方式并且不需要购买服务器许可证就可以在线部署。
Flex的目标是让程序员更快更简单地开发RIA应用。在多层式开发模型中，Flex应用属于表现层。
Flex 采用GUI界面开发，使用基于XML的MXML语言。Flex 具有多种组件，可实现Web Services，远程对象，drag and drop，列排序，图表等功能；FLEX内建动画效果和其它简单互动界面等。相对于基于HTML的应用（如PHP、ASP、JSP、ColdFusion 及CFMX等）在每个请求时都需要执行服务器端的模板，由于客户端只需要载入一次，FLEX应用程序的工作流被大大改善。FLEX的语言和文件结构也试图 把应用程序的逻辑从设计中分离出来。
Flex 服务器也是客户端和XML Web Services及远程对象（Coldfusion CFCs，或Java类，等支持Action Message Format的其他对象）之间通讯的通路。
AIR dobe AIR（AIR＝Adobe Integrated Runtime），开发代号为Apollo，是一个跨操作系统runtime environment用来建造RIA，使用Flash、Flex、HTML与AJAX，可能部署为桌面应用程式。
AIR是Adobe针对网络与桌面应用的结合所开发出来的技术，可以不必经由浏览器而对网络上的云端程式做控制，也由于这是Adobe所开发的技术，因此能很顺利的与 Adobe旗下的Photoshop、Flash、Firework等应用程式来进行开发。
Google App Engine Google App Engine是一个开发、托管网络应用程序的平台，使用Google管理的数据中心。它在2008年4月发布了第一个beta版本。
Google App Engine使用了云计算技术。它跨越多个服务器和数据中心来虚拟化应用程序。 其他基于云的平台还有Amazon Web Services和微软的Azure服务平台等。
Google App Engine在用户使用一定的资源时是免费的。支付额外的费用可以获得应用程序所需的更多的存储空间、带宽或是CPU负载。
系统需要实现的功能 我简单罗列一下：登录、群聊、私聊、注册（功能实现优先级由高到低排列）。
功能着实有点简单，不过这个系统的亮点在于跨平台，而不是功能的强大。我在设计时候会尽量考虑多些东西，方便以后扩展。
数据交互实现方案 系统最主要也最难实现的部分是数据交互如何进行有效的交互。我总结了一下几种方法。
1.TCP/IP通信 一般的C/S模式程序都会考虑套接字连接方式，这是性能最高的交互方式。使用TCP/IP协议，能够有效的避免Python/Flex语言带来的数据交换问题。我查阅 了Flex文档，在flash.net.Socket下有套接字使用的API，这说明Flex在套接字支持上没有问题。接下来我查阅了GAE的文档，资料比较难找 ，最后我查阅了[沙盒](http://code.google.com/intl/zh-CN/appengine/docs/java/runtime.html #The_Sandbox)的定义、Python/Java在GAE的限制（参考文献-[Will it play in App Engine](http://groups.</description>
    </item>
    
  </channel>
</rss>
