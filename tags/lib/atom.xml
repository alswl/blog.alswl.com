<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>lib on Log4D</title>
    <link>https://blog.alswl.com/tags/lib/</link>
    <description>Recent content in lib on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jan 2010 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/lib/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Delphi 的单元测试工具DUnit</title>
      <link>https://blog.alswl.com/2010/01/delphi-unit-testing-tool-dunit/</link>
      <pubDate>Wed, 06 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/delphi-unit-testing-tool-dunit/</guid>
      <description>以前写Java时候经常使用一款单元测试工具JUnit，工作之后在用Delphi，自然也要换到Delphi下面的单元测试工具DUnit。
DUnit是XUnit家族中的一员，是Extreme Programming测试实现Xtreme Testing的一种工具。
DUnit的用法和JUnit很类似，如果有相关经验很容易上手。这里是DUnit的官方地址：http://dunit.sourceforge.net/ ， 下载地址：http://sourceforge.net/projects/dunit/
将DUnit解压至任意目录（我习惯在D:/Study/DelphiLib/），打开Delphi 7，将DUnit路径添加到 Tools- &amp;gt; Environment Options 里面的 Library -&amp;gt; Library Path，这样DUnit就安装完成了。
如果有装过CnPack 的Delphi工具包，就可以很轻松的在 File -&amp;gt; New -&amp;gt; Other -&amp;gt; CnPack -&amp;gt; DUnit测试实例生成向导 中建立新的测试用例。
下面是我的一个简单的测试用例，测试AppFun中的GetString()和 Add() 方法。
TAppFun.pas
(* UTest by Jason 2010-01-06 21:30 *) unit AppFun; interface uses SysUtils; type TAppFun = class(TObject) public class function GetString(sName: string; iAge: Integer): string; class function Add(iA: Integer; iB: Integer): Integer; end; implementation class function TAppFun.GetString(sName: string; iAge: Integer): string; begin result := &amp;#39;Hello &amp;#39; + sName + &amp;#39;, your age is &amp;#39; + IntToStr(iAge); end; class function TAppFun.</description>
    </item>
    
    <item>
      <title>将Python程序编译为exe可执行程序</title>
      <link>https://blog.alswl.com/2009/09/python-program-will-be-compiled-into-an-executable-program-exe/</link>
      <pubDate>Tue, 15 Sep 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/09/python-program-will-be-compiled-into-an-executable-program-exe/</guid>
      <description>Python很强大，这个py2exe程序能够把.py文件编译为.exe可执行文件，真是如虎添翼啊。
我注意到这个细节：这篇文章发表于 2005-6-5 23:34作者wolfg太犀利了。
原文出处：py2exe初接触（一） - Python - ChinaUnix.net
py2exe是什么？ py2exe是一种python发布工具，可以把python脚本转换成windows下的可执行程序，不需要安装python便可运行。
py2exe现在可以用来创建使用了wxPython, Tkinter, Pmw, PyGTK, pygame, win32com client and server 等模块的程序。
详细介绍可以看它的官方网站 http://starship.python.net/crew/theller/py2exe/
1. 下载安装py2exe py2exe目前的版本是0.5.4，根据你安装的python的版本选择下载的文件
[py2exe-0.5.4.win32-py2.3.exe](http://prdownloads.sourceforge.net/py2exe/py2ex e-0.5.4.win32-py2.3.exe?download) (现在是0.6.9-alswl)
或
[py2exe-0.5.4.win32-py2.4.exe](http://prdownloads.sourceforge.net/py2exe/py2ex e-0.5.4.win32-py2.4.exe?download)
安装后的文件应该在你的python安装目录下的Libsite-packagespy2exe
2. 使用py2exe 我们先准备一个简单的python程序hello.py
# hello.py def main(): print &amp;quot;Hello, World!&amp;quot; if __name__ == &#39;__main__&#39;: main() 然后为使用py2exe写一个脚本setup.py
# setup.py from distutils.core import setup import py2exe setup(console=[&amp;quot;hello.py&amp;quot;]) 运行setup.py，记得要传一个参数给它
python setup.py py2exe 应该看到一些输出信息
running py2exe creating E:ProjectsWorkSpacePythonbuild creating E:ProjectsWorkSpacePythonbuildbdist.win32 creating E:ProjectsWorkSpacePythonbuildbdist.</description>
    </item>
    
    <item>
      <title>使用XOM类库对Java对象进行序列化</title>
      <link>https://blog.alswl.com/2009/06/xom-class-library-to-use-java-objects-serialization/</link>
      <pubDate>Wed, 10 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/xom-class-library-to-use-java-objects-serialization/</guid>
      <description>校内工具需要保存用户名和帐号，我就想把帐号信息作为一个XiaoneiUser类，然后对其进行对象持久化。 Google下的方法有好几种方法进行持久化，JDOM， DOM4J, SAX等。我看了之后，感觉都比较麻烦，我个人比较喜欢使用jdk自带的工具，但是查阅jdk api之后，感觉使用 javax.xml.* 下工具开发更加困难。 我仅仅是需要对一个简单的对象进行持久化来保存数据，并不需要太多太复杂的功能。最后我决定使用《Thinking in Java》推荐的开源类库：XOM 猛击这里打开www.xom.nu 友情提示一下，网站可以打开，但是下载的连接貌似被墙了，至少我教育网连不上去。推荐 一个在线代理服务器古狗在线代理（猛击这里打开），通过它就可以下载类库了。 使用类库非常简单，我这里提供个小例子。XiaoneiUser类
package cn.dddspace.xiaonei.bean; import java.io.OutputStream; import nu.xom.*; public class XiaoneiUser { /** * 用户Email */ private String userEmail; /** * 用户Password */ private String userPassword; public String getUserEmail() { return userEmail; } public void setUserEmail(String userEmail) { this.userEmail = userEmail; } public String getUserPassword() { return userPassword; } public void setUserPassword(String userPassword) { this.userPassword = userPassword; } /** * 将类转换为XML * * @return */ public Element getXML() { Element userE = new Element(&amp;#34;xiaoneiUser&amp;#34;); Element userEmailE = new Element(&amp;#34;userEmail&amp;#34;); userEmailE.</description>
    </item>
    
    <item>
      <title>java.net.*操作session/GET/POST方法</title>
      <link>https://blog.alswl.com/2009/06/java-net-operation-session-get-post-method/</link>
      <pubDate>Tue, 09 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/java-net-operation-session-get-post-method/</guid>
      <description>终于又考完一门试，开始做课程设计了，结果课程设计给工作室一个尾气3个月的项目，而这次的先用我写的贴吧放上去，我变得暂时空闲了，开始着手写校内开心农场小工具- 全能拖拉机。 首先要解决的就是校内登录的问题，那就是Get/Post方法了，还有用户状态保存，就是session的操作。Java不同于C#，那位可以集成系统 的浏览器或者之间创建一个Browser。
开始写了自己的第一个版本。
import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.net.MalformedURLException; import java.net.ProtocolException; import java.net.URL; import java.net.HttpURLConnection; public class FarmerHelper {
/**
@param args @throws ProtocolException
*/
public static void main(String[] args) throws ProtocolException { String loginUrlStr = &amp;ldquo;http://login.xiaonei.com/Login.do&amp;quot;;
String homeUrlStr = &amp;ldquo;http://home.xiaonei.com/Home.do&amp;quot;;
URL loginUrl = null;
URL homeUrl = null;
HttpURLConnection loginConn = null;
HttpURLConnection homeConn = null;
try {
loginUrl = new URL(loginUrlStr);
homeUrl = new URL(homeUrlStr);</description>
    </item>
    
  </channel>
</rss>
