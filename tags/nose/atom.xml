<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nose on Log4D</title>
    <link>https://blog.alswl.com/tags/nose/</link>
    <description>Recent content in nose on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 22 Sep 2011 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/nose/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用nose做测试</title>
      <link>https://blog.alswl.com/2011/09/nose/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/09/nose/</guid>
      <description>不做单元测试的程序员不是好程序员。最近我在Pylons下面做开发， 使用 nose 做单元测试，颇有心得， 在这里分享一下。
1. Pylons中依赖包 先简单介绍一下Pylons, Pylons与其说是一个框架，不如说是一堆框架的组合， Pylons在其中做到一个胶水的作用。Pylons依赖的包如下。
breaker，缓存和Session FormEncode，用户输入检查 Mako，模板渲染 nose，自动化测试 Paste，服务器 Routes, 路由 Tempita，Paste的模板 Weberror WebOb，提供WSGI请求响应等对象 WebTest，Paste自带的测试小框架， 提供TestResponse和TestRequest两个有用的小东西 Pylons的测试主要使用的其中的 Paste / nose / WebOb / WebTest。 遇到问题的时候，可以去翻一翻上面的文档。
2. Pylons中测试目录结构 目录结构如下
├─config ├─controllers ├─lib ├─model ├─public ├─templates └─tests └─functional 目录中的 config / controllers / lib / model / public 在不同的web框架下面可能会略有差别，在这里我不关注他们，我关注 tests / functional 中存放相应的测试脚本，比如 test_user.py
3. 第一个简单的测试用例 3.1. 撰写单元测试文件 最简单的test脚本如下
from myb.tests import * class TestIndexController(TestController): def test_index(self): pass # Test response.</description>
    </item>
    
  </channel>
</rss>
