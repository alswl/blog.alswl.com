<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>php on Log4D</title>
    <link>https://blog.alswl.com/tags/php/</link>
    <description>Recent content in php on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 06 Nov 2011 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/php/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>128M内存VPS LNMP安装优化小记</title>
      <link>https://blog.alswl.com/2011/11/vps-lnmp-setup-config/</link>
      <pubDate>Sun, 06 Nov 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/11/vps-lnmp-setup-config/</guid>
      <description>重要通知：Log4D 的域名由 http://dddspace.com 迁移到 http://log4d.com 。 订阅地址现在改为 http://log4d.com/feed 和 http://feeds.feedburner.com/dddspace 。（FeedBurner 的地址未发生变化） 这一次域名迁移的同时，我更换了服务器，由原先的虚拟空间迁移到独立 VPS。 现在使用的 VPS 是 PhotonVPS 。 月付5.95美元，使用优惠码 TENOFF 或 PHOTONLEB 可以打7折， 换算汇率之后是26人民币每月。 这款VPS的内存只有128,我们就要精打细算考虑如何省内存。经过我几天琢磨， 我终于配置的可用率比较高，使用 siege -c 100 -t 100 时候可以保持 100%</description>
      <content:encoded><![CDATA[<blockquote>
<p>重要通知：Log4D 的域名由 <a href="http://dddspace.com">http://dddspace.com</a> 迁移到 <a href="http://log4d.com">http://log4d.com</a> 。
订阅地址现在改为 <a href="http://log4d.com/feed">http://log4d.com/feed</a> 和
<a href="http://feeds.feedburner.com/dddspace">http://feeds.feedburner.com/dddspace</a> 。（FeedBurner 的地址未发生变化）</p>
</blockquote>
<p>这一次域名迁移的同时，我更换了服务器，由原先的虚拟空间迁移到独立 VPS。
现在使用的 VPS 是 <a href="http://www.photonvps.com/billing/aff.php?aff=2188">PhotonVPS</a> 。</p>
<p>月付5.95美元，使用优惠码 <code>TENOFF</code> 或 <code>PHOTONLEB</code> 可以打7折，
换算汇率之后是26人民币每月。</p>
<p>这款VPS的内存只有128,我们就要精打细算考虑如何省内存。经过我几天琢磨，
我终于配置的可用率比较高，使用 <code>siege -c 100 -t 100</code> 时候可以保持 100% 可用率。
（其实做不到这么高的并发，大概10个并发每秒）下面就是我记录的安装配置过程。</p>
<!-- more -->
<h1 id="安装-lnmp">安装 LNMP</h1>
<h2 id="linux-发行版选用">Linux 发行版选用</h2>
<p>CentOS 据说有较好的安全性和性能，我个人更喜欢 Arch。查询了相关资料，
在生产环境使用 Arch 的似乎不多。</p>
<p>CentOS 里面的包比较旧，不像 Arch 里面，滚动最新。
所以这里需要用到的LNMP大部分都需要自行编译。</p>
<h3 id="nginx-安装">Nginx 安装</h3>
<p>Nginx 的性能在小内存低配置的服务器上跑得比 Apache 要好。这是我们为什么选用 Nginx。</p>
<p>目前 Nginx 的最新稳定版是1.0.9版。CentOS 官方源里面搜索不到 Nginx，需要自行编译。</p>
<p>准备编译环境，需要安装一堆工具，使用下面这个命令 yum 安装。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers
</span></span></code></pre></div><p>下载Nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /tmp
</span></span><span class="line"><span class="cl">wget http://nginx.org/download/nginx-1.0.9.tar.gz
</span></span></code></pre></div><p>因为我们需要安装使用https，所以需要SSL模块支持，我们需要OpenSSL源码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget http://openssl.org/source/openssl-1.0.0c.tar.gz
</span></span><span class="line"><span class="cl">tar zxvf openssl-1.0.0c.tar.gz
</span></span></code></pre></div><p>编译Nginx，使用www作为用户和用户组，同时加入http ssl模块支持。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./configure --user<span class="o">=</span>www --group<span class="o">=</span>www --prefix<span class="o">=</span>/usr/local/nginx --with-http_ssl_module --with-openssl<span class="o">=</span>/tmp/openssl-1.0.0c/
</span></span><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl">make install
</span></span></code></pre></div><p>这样nginx就安装完了，执行 <code>/usr/local/ngxin/bin/nginx -V</code> 可以查看nginx信息。</p>
<blockquote>
<p>nginx: nginx version: nginx/1.0.9 nginx: built by gcc 4.4.4 20100726 (Red Hat 4.4.4-13) (GCC) nginx: TLS SNI support enabled nginx: configure arguments: &ndash;user=www &ndash;group=www &ndash;prefix=/usr/local/nginx &ndash;with-http_ssl_module &ndash;with-openssl=/tmp/openssl-1.0.0c/</p>
</blockquote>
<p>为nginx 创建软链接</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx
</span></span></code></pre></div><p>ngxin 启动关闭</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nginx <span class="c1">#启动</span>
</span></span><span class="line"><span class="cl">nginx -s stop <span class="c1">#关闭</span>
</span></span><span class="line"><span class="cl">nginx -s reload <span class="c1">#重启</span>
</span></span></code></pre></div><p>运行 <code>nginx</code> 就可以启动服务器了，在浏览器输入服务器ip， 能够看见 <code>nginx</code> 的字样。</p>
<h3 id="mysql安装">MySQL安装</h3>
<p>MySQL我没有自行编译，使用CentOS官方源里面的Mysql。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install -y mysql-server
</span></span></code></pre></div><h3 id="php安装">PHP安装</h3>
<p>PHP需要自行编译，原因是Nginx使用Fast-CGI调用PHP服务。
我们需要php-cgi常驻后台。在PHP 5.3.3之后，
一个名为php-fpm的小东西被php核心加入。这个php-fpm可以常驻后台响应Fast-CGI请求。</p>
<p>悲剧的是，截至目前位置，CentOS官方源里面PHP版本是5.3.2，
好死不死的差一个小数点。只能自行编译了。</p>
<p>安装libmcrypt，这是某个依赖包，另外phpmyadmin也需要这个模块。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget http://pkgs.repoforge.org/libmcrypt/libmcrypt-2.5.71.2.el6.rf.i686.rpm
</span></span><span class="line"><span class="cl">ls
</span></span><span class="line"><span class="cl">rpm -i libmcrypt-2.5.7-1.2.el6.rf.i686.rpm
</span></span><span class="line"><span class="cl">rpm -i --force libmcrypt-2.5.7-1.2.el6.rf.i686.rpm
</span></span></code></pre></div><p>安装php 5.3.8</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./configure --prefix<span class="o">=</span>/usr/local/php --with-config-file-path<span class="o">=</span>/usr/local/php/etc --with-mysql<span class="o">=</span>/usr/bin/ --with-mysqli<span class="o">=</span>/usr/bin/mysql_config --with-iconv-dir<span class="o">=</span>/usr/local/libiconv --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir<span class="o">=</span>/usr --enable-xml --with-curl --with-curlwrappers --with-mhash --with-mcrypt --with-gd --enable-gd-native-ttf --with-xsl --with-openssl --with-ldap --with-ldap-sasl --with-xmlrpc --without-pear --enable-zip --enable-soap --enable-mbstring --enable-ftp --enable-sockets --enable-pcntl --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --disable-rpath --enable-mbregex --enable-safe-mode --enable-fpm --with-fpm-user<span class="o">=</span>www --with-fpm-group<span class="o">=</span>www
</span></span><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl">make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">make install
</span></span></code></pre></div><h2 id="运行lamp">运行LAMP</h2>
<p>现在环境已经安装好了，我们稍作配置，然后启动系统。</p>
<p>在nginx的 <code>/usr/local/nginx/html/</code> 下创建 <code>info.php</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&lt;?php info<span class="o">()</span> ?&gt;
</span></span></code></pre></div><p>配置nginx，编辑 <code>/usr/local/nginx/conf/nginx.conf</code> 其中的 <code>server</code> 段。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">location ~ <span class="se">\.</span>php$ <span class="o">{</span>
</span></span><span class="line"><span class="cl">        root           html<span class="p">;</span>
</span></span><span class="line"><span class="cl">        fastcgi_pass   unix:/var/run/php-cgi.sock<span class="p">;</span>
</span></span><span class="line"><span class="cl">        fastcgi_index  index.php<span class="p">;</span>
</span></span><span class="line"><span class="cl">        fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx/html/<span class="nv">$fastcgi_script_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        include        fastcgi_params<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>配置php-fpm，编辑 <code>/usr/local/php/etc/php-fpm.conf</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">listen</span> <span class="o">=</span> /var/run/php-cgi.sock
</span></span></code></pre></div><p>运行 <code>nginx -s reload</code> 重新启动nginx服务器。运行 <code>/etc/init.d/php-fpm start</code>
启动php-cgi监听。</p>
<p>在浏览器输入 <code>your.domain/info.php</code> 会出现php信息，成功的话，
就说明LNMP配置成功了。</p>
<h2 id="小内存主机配置">小内存主机配置</h2>
<p>经过上面的步骤，已经可以成功的配置完LNMP系统，但是默认的配置情况下面，
内存会相当吃紧。一会会就系统内存爆掉，Nginx会频繁报出
<code>The page you are looking for is temporarily unavailable. Please try again later.</code>
，不配置就不能用啊。</p>
<h3 id="nginx配置">Nginx配置</h3>
<p>我的nginx优化配置如下，主要是配置 <code>worker_processes</code> 数量和
<code>fastcgi</code> 、 <code>gzip</code> 缓存。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">user  www www
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">worker_processes 1<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">events <span class="o">{</span>
</span></span><span class="line"><span class="cl">	worker_connections 1024<span class="p">;</span>
</span></span><span class="line"><span class="cl">	use epoll<span class="p">;</span> <span class="c1">#使用高效率的epool模式</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">http <span class="o">{</span>
</span></span><span class="line"><span class="cl">	include mime.types<span class="p">;</span>
</span></span><span class="line"><span class="cl">	default_type application/octet-stream<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	sendfile on<span class="p">;</span>
</span></span><span class="line"><span class="cl">	keepalive_timeout <span class="m">65</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"># 下面是配置缓存</span>
</span></span><span class="line"><span class="cl">	client_header_buffer_size 32k<span class="p">;</span>
</span></span><span class="line"><span class="cl">	large_client_header_buffers <span class="m">4</span> 32k<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	fastcgi_connect_timeout 300<span class="p">;</span>
</span></span><span class="line"><span class="cl">	fastcgi_send_timeout 300<span class="p">;</span>
</span></span><span class="line"><span class="cl">	fastcgi_read_timeout 300<span class="p">;</span>
</span></span><span class="line"><span class="cl">	fastcgi_buffer_size 32k<span class="p">;</span>
</span></span><span class="line"><span class="cl">	fastcgi_buffers <span class="m">4</span> 32k<span class="p">;</span>
</span></span><span class="line"><span class="cl">	fastcgi_busy_buffers_size 32k<span class="p">;</span>
</span></span><span class="line"><span class="cl">	fastcgi_temp_file_write_size 32k<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"># 下面是弃用gzip压缩缓存</span>
</span></span><span class="line"><span class="cl">	gzip on<span class="p">;</span>
</span></span><span class="line"><span class="cl">	gzip_min_length 1k<span class="p">;</span>
</span></span><span class="line"><span class="cl">	gzip_buffers <span class="m">4</span> 16k<span class="p">;</span>
</span></span><span class="line"><span class="cl">	gzip_http_version 1.0<span class="p">;</span>
</span></span><span class="line"><span class="cl">	gzip_comp_level 2<span class="p">;</span>
</span></span><span class="line"><span class="cl">	gzip_types text/plain application/x-javascript text/css application/xml<span class="p">;</span>
</span></span><span class="line"><span class="cl">	gzip_vary on<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">#server 的内容我就不列出了</span>
</span></span><span class="line"><span class="cl">	<span class="c1">#….</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span></code></pre></div><h3 id="mysql配置">MySQL配置</h3>
<p>mysql的配置文件在 <code>/etc/my.cnf</code> ，我们需要配置两样东西，
一个是禁用innodb，因为innodb比较消耗内存；另外是配置mysql缓存。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[mysql]</span>
</span></span><span class="line"><span class="cl"><span class="na">no-auto-rehash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[mysqld]</span>
</span></span><span class="line"><span class="cl"><span class="na">datadir</span><span class="o">=</span><span class="s">/var/lib/mysql</span>
</span></span><span class="line"><span class="cl"><span class="na">socket</span><span class="o">=</span><span class="s">/var/lib/mysql/mysql.sock</span>
</span></span><span class="line"><span class="cl"><span class="na">user</span><span class="o">=</span><span class="s">mysql</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Disabling symbolic-links is recommended to prevent assorted security risks</span>
</span></span><span class="line"><span class="cl"><span class="na">symbolic-links</span><span class="o">=</span><span class="s">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="na">open_files_limit</span> <span class="o">=</span> <span class="s">600</span>
</span></span><span class="line"><span class="cl"><span class="na">back_log</span> <span class="o">=</span> <span class="s">20</span>
</span></span><span class="line"><span class="cl"><span class="na">max_connections</span> <span class="o">=</span> <span class="s">100</span>
</span></span><span class="line"><span class="cl"><span class="na">max_connect_errors</span> <span class="o">=</span> <span class="s">200</span>
</span></span><span class="line"><span class="cl"><span class="na">table_cache</span> <span class="o">=</span> <span class="s">60</span>
</span></span><span class="line"><span class="cl"><span class="na">external-locking</span> <span class="o">=</span> <span class="s">FALSE</span>
</span></span><span class="line"><span class="cl"><span class="na">max_allowed_packet</span> <span class="o">=</span> <span class="s">16M</span>
</span></span><span class="line"><span class="cl"><span class="na">sort_buffer_size</span> <span class="o">=</span> <span class="s">128K</span>
</span></span><span class="line"><span class="cl"><span class="na">join_buffer_size</span> <span class="o">=</span> <span class="s">128K</span>
</span></span><span class="line"><span class="cl"><span class="na">thread_cache_size</span> <span class="o">=</span> <span class="s">10</span>
</span></span><span class="line"><span class="cl"><span class="na">thread_concurrency</span> <span class="o">=</span> <span class="s">8</span>
</span></span><span class="line"><span class="cl"><span class="na">query_cache_size</span> <span class="o">=</span> <span class="s">0M</span>
</span></span><span class="line"><span class="cl"><span class="na">query_cache_limit</span> <span class="o">=</span> <span class="s">2M</span>
</span></span><span class="line"><span class="cl"><span class="na">query_cache_min_res_unit</span> <span class="o">=</span> <span class="s">2k</span>
</span></span><span class="line"><span class="cl"><span class="na">default_table_type</span> <span class="o">=</span> <span class="s">MyISAM</span>
</span></span><span class="line"><span class="cl"><span class="na">thread_stack</span> <span class="o">=</span> <span class="s">192K</span>
</span></span><span class="line"><span class="cl"><span class="na">transaction_isolation</span> <span class="o">=</span> <span class="s">READ-UNCOMMITTED</span>
</span></span><span class="line"><span class="cl"><span class="na">tmp_table_size</span> <span class="o">=</span> <span class="s">512K</span>
</span></span><span class="line"><span class="cl"><span class="na">max_heap_table_size</span> <span class="o">=</span> <span class="s">32M</span>
</span></span><span class="line"><span class="cl"><span class="na">long_query_time</span> <span class="o">=</span> <span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">log_long_format</span>
</span></span><span class="line"><span class="cl"><span class="na">server-id</span> <span class="o">=</span> <span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">binlog_cache_size</span> <span class="o">=</span> <span class="s">2M</span>
</span></span><span class="line"><span class="cl"><span class="na">max_binlog_cache_size</span> <span class="o">=</span> <span class="s">4M</span>
</span></span><span class="line"><span class="cl"><span class="na">max_binlog_size</span> <span class="o">=</span> <span class="s">512M</span>
</span></span><span class="line"><span class="cl"><span class="na">expire_logs_days</span> <span class="o">=</span> <span class="s">7</span>
</span></span><span class="line"><span class="cl"><span class="na">key_buffer_size</span> <span class="o">=</span> <span class="s">4M</span>
</span></span><span class="line"><span class="cl"><span class="na">read_buffer_size</span> <span class="o">=</span> <span class="s">1M</span>
</span></span><span class="line"><span class="cl"><span class="na">read_rnd_buffer_size</span> <span class="o">=</span> <span class="s">2M</span>
</span></span><span class="line"><span class="cl"><span class="na">bulk_insert_buffer_size</span> <span class="o">=</span> <span class="s">2M</span>
</span></span><span class="line"><span class="cl"><span class="na">myisam_sort_buffer_size</span> <span class="o">=</span> <span class="s">4M</span>
</span></span><span class="line"><span class="cl"><span class="na">myisam_max_sort_file_size</span> <span class="o">=</span> <span class="s">10G</span>
</span></span><span class="line"><span class="cl"><span class="na">myisam_max_extra_sort_file_size</span> <span class="o">=</span> <span class="s">10G</span>
</span></span><span class="line"><span class="cl"><span class="na">myisam_repair_threads</span> <span class="o">=</span> <span class="s">1</span>
</span></span><span class="line"><span class="cl"><span class="na">myisam_recover</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="na">skip-innodb #禁用innodb数据库引擎</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[mysqld_safe]</span>
</span></span><span class="line"><span class="cl"><span class="na">log-error</span><span class="o">=</span><span class="s">/var/log/mysqld.log</span>
</span></span><span class="line"><span class="cl"><span class="na">pid-file</span><span class="o">=</span><span class="s">/var/run/mysqld/mysqld.pid</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[mysqldump]</span>
</span></span><span class="line"><span class="cl"><span class="na">quick</span>
</span></span><span class="line"><span class="cl"><span class="na">max_allowed_packet</span> <span class="o">=</span> <span class="s">16M </span>
</span></span></code></pre></div><h3 id="php配置">PHP配置</h3>
<p>我们使用php-fpm来作为后台daemon响应FastCGI请求。
默认的php-fpm会启动比较多的子进程，很容易耗光内存。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">listen</span> <span class="o">=</span> /var/run/php-cgi.sock <span class="c1">#使用socket监听，不用端口监听</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pm.max_children <span class="o">=</span> <span class="m">2</span> <span class="c1">#默认是50  </span>
</span></span><span class="line"><span class="cl">pm.start_servers <span class="o">=</span> <span class="m">2</span> <span class="c1">#默认是20  </span>
</span></span><span class="line"><span class="cl">pm.min_spare_servers <span class="o">=</span> <span class="m">2</span> <span class="c1">#默认是5  </span>
</span></span><span class="line"><span class="cl">pm.max_spare_servers <span class="o">=</span> <span class="m">2</span> <span class="c1">#默认是35 </span>
</span></span></code></pre></div><p>有的配置手记是建议把上面几个数字改为5，我经过多次调试之后，
发现使用最小/最大连接数为2的时候，可用率比较高，内存消耗也比较小。</p>
<h2 id="运行结果">运行结果</h2>
<p>经过一番折腾之后，我的 <a href="http://log4d.com">Log4D</a> 终于配置完成了。
打开速度还算凑合，用WebKaka测试截图如下。</p>
<p>原来的虚拟主机 dddspace.com 的响应情况：</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201111/dddspace.png" alt="dddspace"  />

</p>
<p>现在 log4d.com VPS 的响应情况：</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201111/log4d.png" alt="log4d"  />

</p>
<p>内存使用情况：</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201111/free.png" alt="free"  />

</p>
<p><code>siege -c 100 -t 100 log4d.com</code> 的测试结果：</p>
<pre tabindex="0"><code>Transactions:		        1711 hits
Availability:		       96.61 %
Elapsed time:		      416.72 secs
Data transferred:	       18.20 MB
Response time:		       22.12 secs
Transaction rate:	        4.11 trans/sec
Throughput:		        0.04 MB/sec
Concurrency:		       90.84
Successful transactions:        1711
Failed transactions:	          60
Longest transaction:	       30.31
Shortest transaction:	        1.06
</code></pre><h2 id="参考链接">参考链接</h2>
<ul>
<li><a href="http://www.54chen.com/architecture/wordpress-nginx-php-cgi-mysql-memory-in-the-128m-to-install-and-optimize-the-vps-notes.html">wordpress nginx php-cgi mysql在128m内存下的vps安装和优化手记原创</a></li>
<li><a href="http://www.xtgly.com/2011/05/17/centos-lanmp%E4%B9%8B%E4%B8%89%EF%BC%88%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-php-5-3-6%EF%BC%89.htm">centos LANMP之三（编译安装 php 5.3.6）</a></li>
<li><a href="http://hi.baidu.com/xxjjyy2008/blog/item/b52d07943e4d1d02d21b70da.html">编译包含 SSL 模块的 Nginx 时使用新版本的 OpenSSL 避免已知的 SSL/TLS 协议弱点</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>AzaAjaxChat笔记-实现</title>
      <link>https://blog.alswl.com/2010/08/azaajaxchat-notes-implementation/</link>
      <pubDate>Sun, 22 Aug 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/08/azaajaxchat-notes-implementation/</guid>
      <description>唔，继续整理笔记，这些是在代码编写中遇到的问题和解决办法的总结，不是Turtial，问题有针对性，内容枯燥，路人可以直接忽略~ 一、Comet服务器推技术 Comet推技术，一句话概括，就是形成一个不断开的连接，使得服务器能主动向客户端发送信息。这种技术在交互性强的Web产品中应用的非常多，比如GMail。Co met的实现方式有两种：基于 AJAX 的长轮询（long-polling）方式和基于 Iframe 及 htmlfile 的流（st</description>
      <content:encoded><![CDATA[<p>唔，继续整理笔记，这些是在代码编写中遇到的问题和解决办法的总结，不是Turtial，问题有针对性，内容枯燥，路人可以直接忽略~</p>
<h3 id="一comet服务器推技术">一、Comet服务器推技术</h3>
<p>Comet推技术，一句话概括，就是形成一个不断开的连接，使得服务器能主动向客户端发送信息。这种技术在交互性强的Web产品中应用的非常多，比如GMail。Co
met的实现方式有两种：基于 AJAX 的长轮询（long-polling）方式和基于 Iframe 及 htmlfile
的流（streaming）方式，具体两种实现方式可以参考<a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">Comet：基于 HTTP 长连接的&quot;服务器推&quot;技术</a>。</p>
<p>我计划把这个技术引入，成为一个亮点，第二种Comet实现方式过于复杂（GMail使用的就是这种），我就尝试第一种。我在测试环境测试了基于 AJAX 的长轮询
（long-polling）方式。这种方式说白了就是在Ajax获取返回数据时候，在状态吗为4（数据传输完成）情况随后进行下次查询。进行循环的查询。</p>
<p>这种Long-polling的轮询方式有点伪Comet。相对于常见的定时查询，不同点是将&quot;查询-&gt;返回-&gt;再查询&quot;中间的一段断开时间进行重连接。最后因为技术
实现和开发时间，我决定放弃了Comet的实现。</p>
<p>PS：一个系统应该不仅仅是技术的堆积，也应该考虑其他的一些因素，是否有确实需求，开发效率问题。虽然我做了一些前期准备，最终还是没有加入Comet，蛮可惜的。</p>
<h4 id="相关链接">相关链接：</h4>
<ul>
<li><a href="http://www.javaeye.com/topic/652949">一步一步打造WebIM（1） - .net - dotnet - JavaEye论坛 </a>（.net使用IHttpAsyncHandler的实现）</li>
<li><a href="http://ued.sohu.com/article/118/comment-page-1">Comet&ndash;&ldquo;服务器推&quot;技术 - 搜狐UED</a>（搜狐UED团队的一个小介绍）</li>
</ul>
<h3 id="二用户状态的处理">二、用户状态的处理</h3>
<p>开发时候遇到一个逻辑问题，具体描述如下：&ldquo;一个用户登录长时间不活动（比如直接关闭浏览器），系统需要判定此用户为离线。&ldquo;按照一般设计思路，这个动作应该由后台每
过一段时间自动（比如说5分钟）触发一次，如果用Java或.net实现，会考虑设计一个后台运行的进程进行管理。而现在用的PHP，我查了一下，似乎没有找到相应的
解决办法。</p>
<p>我尝试在系统中设定一个页面每隔几分钟触发一个动作，放置在index.php页面中，但是感觉这个设计有点鸡肋。</p>
<p>这个问题困惑我很久，最后参考了<a href="https://blueimp.net/ajax/">AJAX Chat</a>的源码，它的思路是在一个新用户上线时候，进行检测所
有用户距离上次其活动的时间来判定每个用户的离线状态。这个也不是最优想法（万一长时间没有用户登录怎么办？），但是比上面那个定时页面要好多了。</p>
<p>如果有PHP达人看到这个，望不惜赐教。</p>
<h3 id="三rtmp">三、RTMP</h3>
<p>RTPM是一个流媒体传输的协议，我在AzaAjaxChat中用它进行视频聊天画面和音频传输。这块内容可以洋洋洒洒的写一大篇日志，我在这里只是简单罗列一下我用
到的相关内容。</p>
<blockquote>
<p>Real Time Messaging Protocol（实时消息传送协议协议)概述，实时消息传送协议是Adobe
Systems公司为Flash播放器和服务器之间音频、视频和数据传输开发的私有协议。它有三种变种： 1)工作在TCP之上的明文协议，使用端口1935；
2)RTMPT封装在HTTP请求之中，可穿越防火墙； 3)RTMPS类似RTMPT，但使用的是HTTPS连接；</p>
<p>RTMP协议是被Flash用于对象，视频,音频的传输.该协议建立在TCP协议或者轮询 HTTP协议之上。</p>
<p>RTMP协议就像一个用来装数据包的容器，这些数据可以是AMF格式的数据，也可以是FLV中的视/音频数据。一个单一的连接可以通过不同的通道传输多路网络流。
这些通道中的包都是按照固定大小的包传输的。</p>
</blockquote>
<p>我使用FMS作为RTPM容器，Adobe FMS（Flash Media Server）是一款能够提供出色的Flash
Video流媒体播放功能的服务器软件。</p>
<p>FMS提供一个强大Script可定制脚本的服务器流媒体引擎，通过这个引擎，允许创建和交付面向互联网任何用户群体的交互媒体应用及服务。FMS还是Adobe公司
跨媒体解决方案中的一部分，针对诸如数据库连接访问、文件系统操作、服务访问等要求，可以同Adobe Flash Player与Adobe AIR一起来实现。</p>
<h3 id="四基于flex的流媒体传输">四、基于Flex的流媒体传输</h3>
<h4 id="41-官方sample-stratus">4.1 官方Sample-Stratus</h4>
<p>AzaAjaxChat中最技术含量的地方在于语音视频聊天。Adobe官网在Flex子类中提供了一个Demo名叫[Stratus](<a href="http://labs.a">http://labs.a</a>
dobe.com/technologies/stratus/samples/)，正是一个聊天系统。从教程上看，Adobe公司目前开放的Stratus是同时支
持视频和语音P2P的，同时，未来的FMS也可能会支持P2P。</p>
<p>Adobe的某个专家博客还针对Stratus有一篇相当详细的讲解，原文在此<a href="http://www.adobe.com/devnet/flashplayer/articles/rtmfp_stratus_app.html">Stratus service for developing end-to- end applications using RTMFP in Flash Player 10 | Adobe Developer Connection</a>，文中分析了
RTMFP（比RTMP更高阶的流媒体传输协议，支持P2P）和Stratus的相关核心代码。我本想把这篇文章翻译，完成10%之后，意外发现已经有人翻译了，地址
在此[通过Stratus 服务器在Flash Player中使用RTMFP 开发 点对点应用(一) &ndash; Windows Live](<a href="http://snowyrock.spaces.live.com/Blog/cns!B8CBEB7169880B1D!1279.entry?wa=wsignin1.0&amp;sa=18">http://snowyrock.spaces.live.com/Blog/cns!B8CBEB7169880B1D!1279.entry?wa=wsignin1.0&amp;sa=18</a>
3740112)，<a href="http://snowyrock.spaces.live.com/blog/cns!B8CBEB7169880B1D!1278.entry?_c=BlogPart">通过Stratus 服务器在Flash Player中使用RTMFP 开发 点对点应用（二） &ndash; Windows Live</a>
。</p>
<p>同时可以参考其他例子<a href="http://www.cnblogs.com/beniao/archive/2009/04/28/1444159.html">FMS3系列(五)：通过FMS实现时时视频聊天（Flash|Flex） - Bēniaǒ成长笔记 - 博客园</a>。</p>
<h4 id="42-azaajaxchat视频语音核心代码">4.2 AzaAjaxChat视频语音核心代码</h4>
<p>下面是核心代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span> <span class="k">function</span> <span class="nf">starChat</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">MouseEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//同时开始监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">doReceive</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//初始化一个网络连接 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetConnection</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//开始连接 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span><span class="o">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">rtmpUrl</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">	<span class="c1">//为这个连接添加事件,这个事件有返回连接状态 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span><span class="o">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">NetStatusEvent</span><span class="o">.</span><span class="nx">NET_STATUS</span><span class="p">,</span><span class="nx">onPublishNetStatusHandler</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">	<span class="nx">microphone</span> <span class="o">=</span> <span class="nx">Microphone</span><span class="o">.</span><span class="nx">getMicrophone</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="nx">camera</span> <span class="o">=</span> <span class="nx">Camera</span><span class="o">.</span><span class="nx">getCamera</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">camera</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Alert</span><span class="o">.</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;没有开启摄像头或者没有安装摄像头&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="nx">videoPublish</span><span class="o">.</span><span class="nx">attachCamera</span><span class="p">(</span><span class="nx">camera</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">onPublishNetStatusHandler</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">NetStatusEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//根据连接返回的状态信息判断是滞连接成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="o">==</span><span class="s2">&#34;NetConnection.Connect.Success&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n发布连接建立成功&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetStream</span><span class="p">(</span><span class="nx">publicNc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">attachAudio</span><span class="p">(</span><span class="nx">microphone</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">attachCamera</span><span class="p">(</span><span class="nx">camera</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">client</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">publish</span><span class="p">(</span><span class="nx">publicName</span><span class="p">,</span><span class="s2">&#34;live&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">doReceive</span><span class="p">()</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">receiveNc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetConnection</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//开始连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">receiveNc</span><span class="o">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">rtmpUrl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//为这个连接添加事件,这个事件有返回连接状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">receiveNc</span><span class="o">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">NetStatusEvent</span><span class="o">.</span><span class="nx">NET_STATUS</span><span class="p">,</span><span class="nx">onReceiveNetStatusHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">onReceiveNetStatusHandler</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">NetStatusEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//根据连接返回的状态信息判断是滞连接成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="o">==</span><span class="s2">&#34;NetConnection.Connect.Success&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n接受连接建立成功&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">receiveNs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetStream</span><span class="p">(</span><span class="nx">publicNc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Video</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">230</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="mi">173</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">attachNetStream</span><span class="p">(</span><span class="nx">receiveNs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="nx">videoReceive</span><span class="o">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">video</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">receiveNs</span><span class="o">.</span><span class="nx">play</span><span class="p">(</span><span class="nx">receiveName</span><span class="p">,</span><span class="s2">&#34;live&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n&#34;</span> <span class="o">+</span><span class="nx">　event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><h4 id="43-管道netconnectionconnect">4.3 管道NetConnection.connect()</h4>
<p>Flex流媒体传输通过通道传输，在NetConnection之上建立连接，由于RTMP和FMS的存在，我们可以很方便的在网络流上写入和读取流媒体信息。Net
Connection.connect()支持FMS流媒体和本地文件，官方解释如下。</p>
<blockquote>
<p>在 Flash Player 或 AIR AIR 应用程序和 Flash Media Server 应用程序之间创建双向连接,NetConnection
对象如同客户端与服务器之间的管道。</p>
<p>如果未使用 Flash Media Server，请调用 NetConnection.connect()，以便从本地文件系统或 Web</p>
</blockquote>
<p>服务器中播放视频和 MP3 文件。有关支持的编解码器和文件格式的信息，请参阅 <a href="http://www.adobe.com/go/hardware_scaling_cn">http://www.adobe.com/go/hardware_scali ng_cn</a>。</p>
<h4 id="44-flashnetnetconnection-上找不到属性-onbwdone">4.4 flash.net.NetConnection 上找不到属性 onBWDone</h4>
<p>这个问题参考<a href="http://blog.csdn.net/xiang08/archive/2009/07/13/4343551.aspx">在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。解决办法。 - Xiang - CSDN博客</a>，解决如下。</p>
<blockquote>
<p>在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。</p>
<pre tabindex="0"><code>_nc = new NetConnection();
c.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);
c.client = this;
c.objectEncoding = ObjectEncoding.AMF0;
c.connect(&#34;rtmp://localhost/oflaDemo&#34;);
</code></pre><p>首先添加_nc.client = this.</p>
<p>然后新建一个方法：public function onBWDone():void{}</p>
<p>问题解决。</p>
</blockquote>
<h3 id="五javascript和flex的交互">五、JavaScript和Flex的交互</h3>
<p>页面上的Flex必须响应页面JavaScript的触发事件，Adboe在设计Flex时候，预留了相互调用的端口ExternalInterface，详情可以Google之，类似代码如下。</p>
<pre tabindex="0"><code>if (ExternalInterface.available) {
    ExternalInterface.addCallback(&#34;initParams&#34;, initParams);
    ExternalInterface.addCallback(&#34;playSound&#34;, playSound);
} else {
    this.appMessage.text += &#34;nJS无法调用Flash，请检查Flash环境&#34;;
}
</code></pre><p>但是这种调用方法存在着一个致命的问题：创建一个swf的Object，当对这个swf做隐藏/显示的时候(display:none,display:block)
的时候，swf的所有的注册的javascritp函数都会被干掉(ExternalInterface.addCall方法)。这个是Flex的一个BUG，现在也
还没有解决。</p>
<p>相关讨论可以参见<a href="http://rwl6813021.javaeye.com/blog/236344">Javascript无法访问Flex问题~ - rwl6813021 - JavaEye技术网站</a>，文中详细讨论了这个问题，并给出一个解决方案。</p>
<p>有一个折中的方案：即通过LocationConnection(本地通讯,利用两个swf来进行交互)来处理，初始化一个调用的client
swf，负责调用被隐藏的swf中的方法，这样就避开了直接通过javascript调用被隐藏的swf中的方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//1：client 发送端:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="n">var</span> <span class="n">ucallswfconn</span><span class="o">:</span><span class="n">LocalConnection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">function</span> <span class="nf">init</span><span class="o">():</span><span class="kt">void</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ucallswfconn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//注册Javascritp方法，网页调用该flex的方法，通过该方法中转，调用另外一个flex的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ExternalInterface</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="s">&#34;selectCallControl&#34;</span><span class="o">,</span><span class="n">flexSelectCallControl</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">function</span> <span class="nf">flexSelectCallControl</span><span class="o">(</span><span class="n">method</span><span class="o">:</span><span class="n">String</span><span class="o">,</span><span class="n">param</span><span class="o">:</span><span class="n">String</span><span class="o">):</span><span class="kt">void</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Alert.show(method+param);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//调用另外一端swf中的方法，参数：1:receiver端监听的服务名称 2:方法名称 3:参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ucallswfconn</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&#34;ucallexternconn&#34;</span><span class="o">,</span><span class="s">&#34;&#34;</span><span class="o">+</span><span class="n">method</span><span class="o">,</span><span class="s">&#34;&#34;</span><span class="o">+</span><span class="n">param</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//2：receiver 接收端：
</span></span></span><span class="line"><span class="cl"><span class="c1">//add by polarbear, 2008.09.04, 本地通讯
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="o">.</span><span class="na">ucallexternConn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="o">.</span><span class="na">ucallexternConn</span><span class="o">.</span><span class="na">allowDomain</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ucallexternConn</span><span class="o">.</span><span class="na">client</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">ucallexternConn</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="s">&#34;ucallexternconn&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">error</span><span class="o">:</span><span class="n">ArgumentError</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span><span class="o">(</span><span class="s">&#34;连接失败&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>注意被调用的函数必须是public的。</p>
<p>我使用这个方法并没有成功，最后我采用的是将视频画面直接放在界面上（很丑，不得已为之）。上文的解决方案只是给出一个思路，感兴趣的话可以自己试试。</p>
<h3 id="六last">六、Last</h3>
<p>其实还有很多细节地方可以讲讲，我就不一一展开了。整理的文章就是这样，也没什么花样和娱乐，我都懒得加图片了~</p>
<p>祝大家周末愉快，最近我睡眠很不好，每天6点就醒了，中午补个觉去……</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>AzaAjaxChat笔记-框架</title>
      <link>https://blog.alswl.com/2010/08/azaajaxchat-notes-frame/</link>
      <pubDate>Thu, 12 Aug 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/08/azaajaxchat-notes-frame/</guid>
      <description>1个月没有动PHP了，新装的系统甚至还没有配置PHP环境，今天看到BooguNote上有一个boo是专门记录AzaAjaxChat开发时候遇到的问题和解决办 法。于是把一些东西整理记录一下。 1. 从ThinkPHP开始 最早的AzaAjaxChat是基于ThinkPHP的，我当时在OpenSouce上看到ThinkPHP的介绍，有很多优点，看的我很心动：MVC模型，Ajax 支持，详细的文档和案例，国人开发</description>
      <content:encoded><![CDATA[<p>1个月没有动PHP了，新装的系统甚至还没有配置PHP环境，今天看到BooguNote上有一个boo是专门记录AzaAjaxChat开发时候遇到的问题和解决办
法。于是把一些东西整理记录一下。</p>
<h3 id="1-从thinkphp开始">1. 从ThinkPHP开始</h3>
<p>最早的AzaAjaxChat是基于ThinkPHP的，我当时在OpenSouce上看到ThinkPHP的介绍，有很多优点，看的我很心动：MVC模型，Ajax
支持，详细的文档和案例，国人开发的框架。我作为一个PHP新人一下子就被他吸引住了，决定用ThinkPHP做框架。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201008/thinkphp.png" alt="image"  />

</p>
<p>随着系统开发的推进，我却感觉到一些不自在，遇到一些问题却找不好太好的解决办法。比如ThinkPHP的模块和分组两个概念，让我比较疑惑，花费了大量时间重组目录
结构，两种方法各有优劣，让我很难选择（有选择了反而难办了 ^_^）。</p>
<p>最让我恼火的是相对目录带来的路径混乱，在JSP开发中，静态内容习惯性放在webcontent文件夹中，而ThinkPHP的CSS、图片、JS引用让我很疑惑，
要区分App的和Model的静态文件。</p>
<p>在开发过程中，我也遇到过框架本身的Bug，让我对这个框架失去信心。在这里我没有贬低ThinkPHP或者ThinkPHP开发者的意思，他们的&quot;大道至简、开发由
我&quot;的理念很值得欣赏。只是作为初学者因为遇到的一些问题，带来了一定的开发难度，不得已放弃。</p>
<h3 id="2-选择cakephp">2. 选择CakePHP</h3>
<p>在遇到数次挫折之后，我终于下定决心换框架。工作室之前有过一个项目是用CakePHP开发的，保存着一些资料，阿贵强烈推荐CakePHP。我Google了几篇框
架的评测文章后，考虑了一下AzaAjaxChat的规模，决定选择CakePHP。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201008/cakephp.png" alt="image"  />

</p>
<p>CakePHP的脚手架(Scaffold)功能让我眼前一亮，让我脱离了大量CRUD繁琐的操作。而Cake Bake可以方便的根据数据库生成php代码，减少那
些没有逻辑意义的代码。AzaAjaxChat的定位是毕业设计，不是强健的产品，不会苛求太高的用户体验和安全特性，所以这个功能帮了我很多忙。</p>
<p>CakePHP能够处理关系型数据库之间的m-n关系，由于我的系统逻辑简单，并没复杂的多表操作，所以这里没有深究。从Cake
Baker的生成代码菜单上应该能够看出CakePHP还是能够处理一定的多表关联问题。</p>
<p>CakePHP也不是那么十全十美，最麻烦的是文档少，我指的是中文文档，英文资源还是比较丰富的。其次是对Ajax的支持不如ThinkPHP那么原生，我一开始使
用JSON方案，后来使用XML方案实现Ajax数据序列化。</p>
<h3 id="3-cakephp--thinkphp">3. CakePHP &amp; ThinkPHP</h3>
<p>使用的框架最大的目的是提高效率，大幅度缩短工作时间，这两个框架都是为此而诞生的。我这里不说孰优孰劣，如果感兴趣，可以Google查看相关比较。这两个框架都使
用Ruby On Rails的Active
Record理念进行开发，CakePHP更是被称为PHP版的RuR，我在编码中期还特意去图书馆查阅了RuR的相关资料，的确是高效的Web开发模型。</p>
<p>Active Record释义</p>
<blockquote>
<p>ActiveRecord也属于ORM层，由Rails最早提出，遵循标准的ORM模型：表映射到记录，记录映射到对象，字段映射到对象属性。配合遵循的命名和配
置惯例，能够很大程度的快速实现模型的操作，而且简洁易懂。</p>
</blockquote>
<p>我在答辩的PPT中写选择CakePHP的原因有三：一站式的MVC框架、约定优于配置、更少的代码，其实这也是RuR的优势。</p>
<h3 id="4-相关连接">4. 相关连接</h3>
<ul>
<li>
<p><a href="http://plod.popoever.com/archives/001110.html">Plod: [翻译]十款PHP开发框架横向比较  </a></p>
</li>
<li>
<p><a href="http://blog.chinaunix.net/tag.php?q=CakePHP">ChinaUnix一位网友写的CakePHP入门（我觉得比官方教材好上手）  </a></p>
</li>
<li>
<p><a href="http://hi.baidu.com/zsj1029/blog/item/8fa55e19502e6e4e42a9ad8c.html">cakephp jquery ajax json_天知道_百度空间（CakePHP的Ajax操作方法）  </a></p>
</li>
<li>
<p><a href="http://hi.baidu.com/thinkinginlamp/blog/category/cakephp%20%26%2347%3B%20zendframework/index/0">老王的技术手册_博客_cakephp / zendframework_百度空间（挺多CakePHP相关资料）  </a></p>
</li>
<li>
<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-php-cake/">IBM developerWorks 中国 : 使用 CakePHP 快速打造 Web 站点（IBM的CakePHP教程）  </a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Cakephp的国际化和poEdit的使用</title>
      <link>https://blog.alswl.com/2010/06/cakephp-localization-internationalization-and-usage-of-poedit/</link>
      <pubDate>Thu, 03 Jun 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/06/cakephp-localization-internationalization-and-usage-of-poedit/</guid>
      <description>原文出处：在Cakephp中使用i18n本地化程序，并使用poedit编辑语言文件 | 程序如此灵动！ alswl: 官方的帮助手册都没有这篇文章来的详细，太赞了。这篇文章不仅介绍了CakePHP的使用，更多的介绍了PoEdit的使用，图文并茂，着实详细，感谢原作者苏南。 &amp;mdash;&amp;ndash; 以下为原文 &amp;mdash;&amp;ndash; Cakephp的很强大的i18n功能就是用来实现本地化和国际化的。他通过使用语言配置文件使得程序能够很好的适应变化进行本地化。通过新</description>
      <content:encoded><![CDATA[<p>原文出处：<a href="http://newsn.net/20090525/472.html">在Cakephp中使用i18n本地化程序，并使用poedit编辑语言文件 | 程序如此灵动！</a></p>
<p>alswl:
官方的帮助手册都没有这篇文章来的详细，太赞了。这篇文章不仅介绍了CakePHP的使用，更多的介绍了PoEdit的使用，图文并茂，着实详细，感谢原作者苏南。</p>
<p>&mdash;&ndash; 以下为原文 &mdash;&ndash;</p>
<p>Cakephp的很强大的i18n功能就是用来实现本地化和国际化的。他通过使用语言配置文件使得程序能够很好的适应变化进行本地化。通过新建locale/chi/
LC_MESSAGES/default.po文件，并指定语言选项为&quot;chi&quot;实现。本文中说的就是如何实现这个本地化过程，当然本文中的poedit并不是必须的
，但是他可以使得工作效率更高。</p>
<h2 id="一关于i18n和l10n">一、关于i18n和L10n</h2>
<p>这2个东东其实头一次我看到的时候也是一头雾水，但是经过百度的一通搜索，得出的结论就是，不管是几个n，最终的目的就是实现程序本地化就好了，说白了，就是由很多的
语言配置文件，反正我是这么理解的。大家也可以去看看，[http://baike.baidu.com/view/372835.htm](http://baik e.baidu.com/view/372835.htm) 这里有很详细的说明。</p>
<h2 id="二在cakephp里面实现本地化的方法">二、在Cakephp里面，实现本地化的方法</h2>
<p>目前为止，有2种配置方法。</p>
<h3 id="21-方法一">2.1 方法一</h3>
<p>在config/core.php中使用configure::write来制定语言文件。</p>
<p>Configure::write(&lsquo;Config.language&rsquo;,&ldquo;chi&rdquo;);</p>
<h3 id="22-方法二">2.2 方法二</h3>
<p>官方说明：<a href="http://book.cakephp.org/view/162/Localizing-Your-Application">http://book.cakephp.org/view/162/Localizing-Your- Application</a></p>
<p>貌似很复杂的说哦。</p>
<pre><code>App::import('Core', 'l10n');
class TestsController extends AppController{
  $name=&quot;Tests&quot;;
  function test_function(){
    $this-&gt;L10n-&gt;new L10n();
    $this-&gt;L10n-&gt;get(&quot;chi&quot;);
    .....
  }
}
</code></pre>
<h3 id="23-做上边设置改动后需要做的">2.3 做上边设置改动后需要做的：</h3>
<p>当然在上面做修改后，还需要修改对应的ctp文件等哦，</p>
<p>所有的直接输出字符串，没有返回值的地方像这样：</p>
<p><code>__(``&quot;english&quot;``);</code></p>
<p>间接输出字符串，有返回的地方：</p>
<p><code>__(``&quot;english&quot;``,``true``);</code></p>
<p>还有input要加个label来使他出现中文。</p>
<p><strong>(&ldquo;english&rdquo;);echo $form-&gt;input(&rsquo;name&rsquo;,array(&rsquo;label&rsquo;=&gt;</strong>(&rsquo;name&rsquo;,true)));</p>
<h3 id="24-最最重要的一步">2.4 最最重要的一步</h3>
<p>就是要编辑这个文件了，locale/chi/LC_MESSAGES/default.po。中间的chi就是语言文件的标志位了。这个文件的格式也很简单，</p>
<p>msgid &ldquo;Chinese&rdquo;</p>
<p>msgstr &ldquo;中国话&rdquo;</p>
<p>这个的简单重复就行了。</p>
<h2 id="三使用poedit">三、使用poedit</h2>
<p>使用poedit不是必须的，但是可以使工作变得简单的多。官方网站是：[http://www.poedit.net/](<a href="http://www.poedit.n">http://www.poedit.n</a> et/)</p>
<p>他的主要功用就是使得编辑语言配置文件更加方便和快捷。下面是使用poedit的一些简单的截图和说明。</p>
<h3 id="31-头一次使用需要选择界面语言">3.1 头一次使用需要选择界面语言</h3>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-01.png" alt="poedit_01"  />

</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-02.png" alt="poedit_02"  />

</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-03.png" alt="poedit_03"  />

</p>
<h3 id="32-新建一个配置文件就是我们的目的文件po文件了">3.2 新建一个配置文件，就是我们的目的文件po文件了</h3>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-04.png" alt="poedit_04"  />

</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-05.png" alt="poedit_05"  />

</p>
<p>工程信息这里当然要选择好utf8格式了</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-06.png" alt="poedit_06"  />

</p>
<p>路径这里的基本路径填写cakephp的目录，当然这里居然没有浏览功能，真是崩溃。</p>
<p>注意这里要通过下面的新建按钮新建一个名为&quot;.&ldquo;的路径，这样的话，以后就可以搜索基本路径下面的子目录了。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-07.png" alt="poedit_07"  />

</p>
<p>关键字选项卡里面要填上cakephp的标志性本地化函数&rdquo;__&quot;。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-08.png" alt="poedit_08"  />

</p>
<p>当然上面那些选项卡设置好之后，还可以通过菜单类目=》设置调出来，从新设置。</p>
<h3 id="33-点击那个小地球图标或者类目自源更新开始自动扫描该翻译的文字了">3.3 点击那个小地球图标或者类目=》自源更新，开始自动扫描该翻译的文字了</h3>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-09.png" alt="poedit_09"  />

</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-10.png" alt="poedit_10"  />

</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-11.png" alt="poedit_11"  />

</p>
<h3 id="34-但是这个时候你可能会发现扫描出来的字段远远少于你需要的东东原来这个软件不认识ctp文件这个步骤的设置是让他能识别ctp文件设置文件">3.4 但是这个时候，你可能会发现扫描出来的字段远远少于你需要的东东，原来这个软件不认识ctp文件。这个步骤的设置是让他能识别ctp文件设置。文件=</h3>
<p>》首选=》解析器。</p>
<p><strong>本步骤参考了一个意大利程序员的博客文章，在此向他表示感谢先。</strong></p>
<p><a href="http://www.luizz.it/119/cakephp/poedit-e-i-file-ctp">http://www.luizz.it/119/cakephp/poedit-e-i-file-
ctp</a></p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-12.png" alt="poedit_12"  />

</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-13.png" alt="poedit_13"  />

</p>
<p>选中php，选择编辑，然后在第2行内输入ctp文件后缀，如下图，但是注意下图的设置是错误的!虽然上面的提示，是用逗号分隔，但是实践证明，用分号才是正确的选择
。这个很令人崩溃，大概是poedit的一个小bug吧。会出现错误提示。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-14.png" alt="poedit_14"  />

</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-145.png" alt="poedit_14.5"  />

</p>
<p>但是如果用分号分隔的话，仍然会看到如下错误提示。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-15.png" alt="poedit_15"  />

 需要在下面的解析器命令下面增加个选项-language=php，注意这里是两个中划线啊。所以这个步骤的要点就是下图所示了。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-16.png" alt="poedit_16"  />

</p>
<h3 id="35-这里通过那个地球图标就可以找出所有需要翻译的字段了当然这个操作的前提是你已经用__函数把所有的字段都标示好了如果你按这个图标之前进行了部">3.5 这里通过那个地球图标就可以找出所有需要翻译的字段了，当然这个操作的前提是你已经用__函数把所有的字段都标示好了。如果你按这个图标之前进行了部</h3>
<p>分翻译，这个操作如果发现了新字句，这个软件会根据以前的翻译自己翻译字句的，并用棕色突出显示它自动翻译的词语。当然，一般都是不准确的。所以还是需要进行修改保存
操作的说。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-17.png" alt="poedit_17"  />

</p>
<h3 id="36-如果这个时候你查看生成的po文件的时候比自己手写的文件确实多些设置">3.6 如果这个时候你查看生成的po文件的时候，比自己手写的文件确实多些设置。</h3>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201006/poedit-18.png" alt="poedit_18"  />

</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>CakePHP的全局变量</title>
      <link>https://blog.alswl.com/2010/05/cakephp-global-variables/</link>
      <pubDate>Mon, 17 May 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/05/cakephp-global-variables/</guid>
      <description>毕业设计AzaAjaxChat 中有一个功能，记录当前在线用户，直观的看，用Application对象就可以解决。 忙了一会发现，原来PHP没有Application对象这个概念，于是我想到了全局变量，噩梦便开始了。（Application 和全局变量其实完全不是同一个概念） 我使用的框架是CakePHP，查找资料后，找到了几种CakePHP中使用全局变量的方法。 一、使用bootstrap.php文件 在a</description>
      <content:encoded><![CDATA[<p>毕业设计AzaAjaxChat 中有一个功能，记录当前在线用户，直观的看，用Application对象就可以解决。</p>
<p>忙了一会发现，原来PHP没有Application对象这个概念，于是我想到了全局变量，噩梦便开始了。（Application
和全局变量其实完全不是同一个概念）</p>
<p>我使用的框架是CakePHP，查找资料后，找到了几种CakePHP中使用全局变量的方法。</p>
<h3 id="一使用bootstrapphp文件">一、使用bootstrap.php文件</h3>
<p>在app/config 下面，有一个bootstrap文件，从名字就可以看出，这个是在控制器之前加载的文件，根据官方的描述，有下面几个用法。</p>
<blockquote>
<ul>
<li>定义方便的函数</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>注册全局常量</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>定义新增的控制器，视图，控制器路径</li>
</ul>
</blockquote>
<p>通过这个文件可以实现全局变量的声明。</p>
<pre><code>if (!isset ($globalAAC)) {
	global $globalAAC;
	$globalAAC = array (
		'currentMessageId' =&gt; -1,
		'onlineUsers' =&gt; array()
	);
}
</code></pre>
<p>在其他文件中就可以调用这个全局变量了。</p>
<h3 id="二通过configure-类">二、通过Configure 类</h3>
<p>Configure类是CakePHP用来进行配置文件的地方，通过write() 和read()方法，也能实现全局变量的读写操作。</p>
<pre><code>Configure::write('Aac.currentMessageId', -1);
Configure::read('Aac.currentMessageId');
</code></pre>
<p>其中，还有一个使用Configure的偏门方法，我从 [Need to share global variables throughout your app? » Debuggable Ltd](<a href="http://debuggable.com/posts/need-to-share-global-">http://debuggable.com/posts/need-to-share-global-</a>
variables-throughout-your-app:480f4dd5-6f64-4c88-812d-46d5cbdd56cb) 看到的。</p>
<pre><code>$config =&amp; Configure::getInstance();
$config-&gt;myVariable = 'Hello World';
</code></pre>
<p>$config =&amp; Configure::getInstance();</p>
<p>debug($config-&gt;myVariable);</p>
<p>其实就是通过引用操作Configure 类内部的getInstance() 方法，看源码就能看出来。</p>
<h3 id="三关于类似application-对象的全局变量">三、关于类似Application 对象的全局变量</h3>
<p>以上两种方法都没错，都可以操作全局变量，但是我却都操作失败了，为此我折腾了整整一天。</p>
<p>我甚至一度把错误归结到CakePHP，后来才发现，原来我冤枉它了。问题的根本是在于，这个全局变量根本不是我所想的那个Application 对象。</p>
<p>什么是Application 对象？Application 对象用于存储和访问来自任何页面的变量，类似于 session
对象。不同之处在于，所有的用户分享一个 Application 对象，而 session 对象和用户的关系是一一对应的。</p>
<p>在翻阅PHP资料之后，我终于在ChinaUNIX找到一些蛛丝马迹 <a href="http://bbs.chinaunix.net/viewthread.php?tid=79537">全局变量，在多个页面的可以使用吗？ - Php - ChinaUnix.net</a>
。文中一位读者给了很肯定的回答&quot;php中没有基于整个网站的全局变量，一般用数据库什么的替代方案。&quot;。</p>
<p>我再检查一个基于PHP的聊天系统，果然是通过数据库的 online_users来实现在线用户的保存。</p>
<p>吃亏吃在用传统的Java思想做PHP，并且PHP接触时间太短，以后学习的时候必须多用用心了~</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用Firebug和FirePHP调试PHP[译文]</title>
      <link>https://blog.alswl.com/2010/03/use-firebug-and-firephp-debugging-php/</link>
      <pubDate>Mon, 15 Mar 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/03/use-firebug-and-firephp-debugging-php/</guid>
      <description>这是我第一篇译文，在写WordPress 主题时候偶尔看到的FirePHP插件，看都这篇文章，不知道为什么，动了翻译的念头。 原文链接：Debug PHP with Firebug and FirePHP 译言的链接：译言网 | 使用Firebug和FirePHP调试PHP ×××××以下译文×××××× 如果你和我一样，你会在开发网页项目时候完全无法离开FireBug。这个小巧的&amp;quot;臭虫&amp;quot;是一个神奇而有用的H TML/CSS/JavaScr</description>
      <content:encoded><![CDATA[<p>这是我第一篇译文，在写WordPress 主题时候偶尔看到的FirePHP插件，看都这篇文章，不知道为什么，动了翻译的念头。</p>
<p>原文链接：<a href="http://www.sitepoint.com/blogs/2010/02/09/debug-php-firebug-firephp/">Debug PHP with Firebug and FirePHP</a></p>
<p>译言的链接：<a href="http://article.yeeyan.org/view/119553/94520">译言网 | 使用Firebug和FirePHP调试PHP</a></p>
<p>×××××以下译文××××××</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201612/404.png" alt="image"  />

</p>
<p>如果你和我一样，你会在开发网页项目时候完全无法离开<a href="http://getfirebug.com/">FireBug</a>。这个小巧的&quot;臭虫&quot;是一个神奇而有用的H
TML/CSS/JavaScript/Ajax调试器。但是你也许不知道这个还可以用来调试PHP，没错，它可以，感谢一款名为FirePHP的FireFox插件
。</p>
<p>通过一个小小的服务端库，和这款在Firebug上的插件，你的PHP脚本能够发送调试信息到浏览器，轻易的通过HTTP相应头编码。一旦你设置，你可以在Fiire
bug的控制台获得PHP脚本警告和错误，就感觉像直接调试JavaScript一样</p>
<p>使用这个工具，首先你需要安装<a href="https://addons.mozilla.org/en-US/firefox/addon/6149">FirePHP插件</a>
。这个插件需要你已经安装FireBug。装好FirePHP之后，重新打开Firebug面板时候，你会看到新加了一个蓝色的臭虫图标。点击这个图标会出现一个开启
或者关闭FirePHP的菜单。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201612/404.png" alt="FirePHP Menu"  />

</p>
<p>当然，这时候我们还无法做任何事，你还需要安装FirePHP的服务端，点击<a href="http://www.firephp.org/HQ/Install.htm">这里</a>下载。这是一个独立的版本，你可以手动下载或者使用PEAR。装后之后，你可是轻松的将这个库加入你的代码。它被设计了很多版本来整合入多个框架或者管理系统，比如
<a href="http://wordpress.org/extend/plugins/wp-firephp/">WP-FirePHP plugin for WordPress</a> 和 <a href="http://joomlacode.org/gf/project/kunena/frs/?action=FrsReleaseView&amp;release_id=11823">JFirePHP plugin for Joomla</a>。暂时不管这些，我们将把精力集中在独立的功能上。</p>
<p>一旦你在你服务器上部署了FirePHP库，你还需要在你的代码中加入以下的代码：</p>
<p><code>require_once('FirePHPCore/fb.php');</code></p>
<p>这是因为FirePHP通过HTTP头发送记录的数据，你需要缓存你的代码产生的输出，从而来响应头信息从这里获取代码生成的内容。这个可以通过在代码头部的<code>ob_ start</code>来实现。</p>
<p><code>ob_start();</code></p>
<p>当这些步骤完成后，你可以开始使用FirePHP了。你需要做的只是调用<code>fb</code>函数在任何你想要记录的地方。同时你也可以使用一个可选的标签和常量去定义预定义信息
，一个错误，一个警告，或者一条信息。</p>
<pre tabindex="0"><code>$var=array(&#39;a&#39;=&gt;&#39;pizza&#39;,&amp;nbsp_place_hold
er;&#39;b&#39;=&gt;&#39;cookies&#39;,&#39;c&#39;=&gt;&#39;celery&#39;);

fb($var);

fb($var,&#34;Anarray&#34;);

fb($var,FirePHP::WARN);

fb($var,FirePHP::INFO);

fb($var,&#39;Anarraywith&amp;
nbsp_place_holder;anErrortype&#39;,&amp;nbsp_pla
ce_holder;FirePHP::ERROR);

    
    $var = array(&#39;a&#39;=&gt;&#39;pizza&#39;, &#39;b&#39;=&gt;&#39;cookies&#39;, &#39;c&#39;=&gt;&#39;celery&#39;);fb($var);fb($var, &#34;An array&#34;);fb($var, FirePHP::WARN);fb($var, FirePHP::INFO);fb($var, &#39;An array with an Error type&#39;, FirePHP::ERROR);
</code></pre><p>这些代码将在Firebug控制台输出如下所示</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201612/404.png" alt="FirePHP Console Output"  />

</p>
<p>你也可以使用FirePHP来跟踪你程序的执行情况：通过使用<code>FirePHP::TRACE常量，你可以在</code> <code>fb被调用的地方查看``行数、类名和方法名</code></p>
<pre tabindex="0"><code>1

functionhello(){

2

fb(&#39;HelloWorld!&#39;,&amp;nbs
p_place_holder;FirePHP::TRACE);

3

}

4

functiongreet(){

5

hello();

6

}

7

greet();

    
    function hello() { fb(&#39;Hello World!&#39;, FirePHP::TRACE);}function greet() { hello();}greet();
</code></pre><p>产生的输出如下</p>
<p>


<img loading="lazy" src="http://www.sitepoint.com/blogs/wp-content/uploads/2010/02/Screen-shot-2010-02-09-at-3.00.40-PM.png" alt="FirePHP Trace Output"  />


</p>
<p>这个跟踪功能可以完美的调试更复杂的代码，让你精确的知道你的方法是在哪里被调用的。</p>
<p>当然，别忘了你需要在你代码发布之前移除你的调试语句。</p>
<p>这里还有很多FirePHP的内容没有涉及到。我只是向你简单展示一下FirePHP的API，还有很多高级的面向对象API。你可以获得更多相关内容在
<a href="http://www.firephp.org/HQ/Use.htm">FirePHP site</a>，要记得看它哦～</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
