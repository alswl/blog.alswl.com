<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on Log4D</title>
    <link>https://blog.alswl.com/tags/java/</link>
    <description>Recent content in Java on Log4D</description>
    <generator>Hugo -- 0.125.3</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 22 Mar 2014 18:31:55 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/java/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 运行参数调整</title>
      <link>https://blog.alswl.com/2014/03/java-options/</link>
      <pubDate>Sat, 22 Mar 2014 18:31:55 +0800</pubDate>
      <guid>https://blog.alswl.com/2014/03/java-options/</guid>
      <description>JVM 在线上运行的时候，可以调整一些运行参数，查看参数帮助如下： 运行 java -h 可以看到 Java 运行可调整的参数。 运行 java -X 可以查看 Java 支持的额外参数。 注意一些参数的默认开启在 JDK6 和 JDK7 之间会有差异，甚至在 JDK7 的不同 update 也会有差异，运行 java -XX:+PrintFlagsFinal 查看默认的参数配置。 参考： Java HotSpot VM Options The most complete list of -XX options for Java JVM Tuning JVM Garbage Collection for Production Deployments JVM -XX: 参数介绍 以下是一些经验调整： -d64 # 运行在 64 位数据模式下 -server # 选择 server VM -Xms1024m # 初始堆大小，直接固定到 Xmx -Xmx1024m # 最大堆大小，根据服务器</description>
      <content:encoded><![CDATA[<p>JVM 在线上运行的时候，可以调整一些运行参数，查看参数帮助如下：</p>
<p>运行 <code>java -h</code> 可以看到 Java 运行可调整的参数。
运行 <code>java -X</code> 可以查看 Java 支持的额外参数。
注意一些参数的默认开启在 JDK6 和 JDK7 之间会有差异，甚至在 JDK7 的不同 update
也会有差异，运行 <code>java -XX:+PrintFlagsFinal</code> 查看默认的参数配置。</p>
<p>参考：
<a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">Java HotSpot VM Options</a>
<a href="http://stas-blogspot.blogspot.com/2011/07/most-complete-list-of-xx-options-for.html">The most complete list of -XX options for Java JVM </a>
<a href="http://docs.oracle.com/cd/E13209_01/wlcp/wlss30/configwlss/jvmgc.html"> Tuning JVM Garbage Collection for Production Deployments </a>
<a href="http://www.jvmer.com/jvm-xx-%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/">JVM -XX: 参数介绍</a></p>
<!-- more -->
<p>以下是一些经验调整：</p>
<pre tabindex="0"><code>-d64
# 运行在 64 位数据模式下

-server
# 选择 server VM

-Xms1024m
# 初始堆大小，直接固定到 Xmx

-Xmx1024m
# 最大堆大小，根据服务器性能和请求量调整，太大了会导致 GC 时间太长

-XX:+DoEscapeAnalysis:
# 支持逃逸分析（将局部对象实例存储在栈上）
# http://www.iteye.com/topic/473355

-XX:+UseTLAB
# Use thread-local object allocation
# 使用本地线程实例存储，可以减少堆共享锁的竞争

-XX:-RelaxAccessControlCheck
# Relax the access control checks in the verifier
# JDK7 默认不开启

-XX:+AggressiveOpts
# Enable aggressive optimizations - see arguments.cpp
# 启用最新 JVM 调优成果

-XX:+UseBiasedLocking
# Enable biased locking in JVM
# 偏向锁（建议去了解一下轻量级锁和偏向锁）
# 优化单线程程序下面锁资源速度，不适合多线程（所以到底 +/- 我存疑）
# http://www.iteye.com/topic/518066

-XX:+UseFastAccessorMethods
# Use fast method entry code for accessor methods
# 优化 get/set 方法

-XX:ThreadStackSize
# Thread Stack Size (in Kbytes)
# 经验值 4096

-XX:+UseLargePages
# Use large page memory
# 大内存分页

-XX:+UseStringCache
# Enables caching of commonly allocated strings.
# 启用缓存常用的字符串

-XX:+UseCompressedStrings: Use a byte[] for Strings which can be represented as pure ASCII. (Introduced in Java 6 Update 21 Performance Release)
# 降低内存消耗，浪费一点 CPU
# http://stackoverflow.com/questions/8833385/is-support-for-compressed-strings-being-dropped

-XX:+OptimizeStringConcat: Optimize String concatenation operations where possible. (Introduced in Java 6 Update 20)
# 优化字符串连接，对模板渲染操作应该会很有意义

-XX:MaxPermSize
# Maximum size of permanent generation (in bytes)
# 经验值 128m
</code></pre>]]></content:encoded>
    </item>
    <item>
      <title>Maven 下 Jetty 启动</title>
      <link>https://blog.alswl.com/2011/04/run-jetty-in-maven/</link>
      <pubDate>Mon, 04 Apr 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/04/run-jetty-in-maven/</guid>
      <description>部门最近开发的产品使用的开发服务器是 Jetty（挂载在 GWT 中），启动方法是通过 Eclipse 的 External Tool 执行。我对此表示很好奇，特意在自己电脑下面组建了一个 Jetty 开发环境，发现 Maven 和 Jetty 合作起来非常愉快，现在小记之。 准备 Maven 配置文件 我使用 Maven 推荐的标准 webapp 结构，结构如下，官方文档可以参考 Maven - Introduction to the Standard Directory Layout src/main/java Application/Library sources src/main/resources Application/Library resources src/main/filters Resource filter files src/main/assembly Assembly descriptors src/main/config Configuration files src/main/webapp Web application sources src/test/java Test sources src/test/resources Test resources src/test/filters Test resource filter files src/site Site LICENSE.txt Project&amp;rsquo;s license NOTICE.txt Notices and attributions required by libraries that the project depends on README.txt Project&amp;rsquo;s readme 使用的 pom.xml 主要添加了 build- plugins 的 Jetty 插</description>
      <content:encoded><![CDATA[<p>部门最近开发的产品使用的开发服务器是 Jetty（挂载在 GWT 中），启动方法是通过 Eclipse 的 External
Tool 执行。我对此表示很好奇，特意在自己电脑下面组建了一个 Jetty 开发环境，发现 Maven 和 Jetty 合作起来非常愉快，现在小记之。</p>
<h2 id="准备-maven-配置文件">准备 Maven 配置文件</h2>
<p>我使用 Maven 推荐的标准 webapp 结构，结构如下，官方文档可以参考 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Maven - Introduction to the Standard Directory Layout</a></p>
<ul>
<li>src/main/java
<ul>
<li>Application/Library sources</li>
</ul>
</li>
<li>src/main/resources
<ul>
<li>Application/Library resources</li>
</ul>
</li>
<li>src/main/filters
<ul>
<li>Resource filter files</li>
</ul>
</li>
<li>src/main/assembly
<ul>
<li>Assembly descriptors</li>
</ul>
</li>
<li>src/main/config
<ul>
<li>Configuration files</li>
</ul>
</li>
<li>src/main/webapp
<ul>
<li>Web application sources</li>
</ul>
</li>
<li>src/test/java
<ul>
<li>Test sources</li>
</ul>
</li>
<li>src/test/resources
<ul>
<li>Test resources</li>
</ul>
</li>
<li>src/test/filters
<ul>
<li>Test resource filter files</li>
</ul>
</li>
<li>src/site
<ul>
<li>Site</li>
</ul>
</li>
<li>LICENSE.txt
<ul>
<li>Project&rsquo;s license</li>
</ul>
</li>
<li>NOTICE.txt
<ul>
<li>Notices and attributions required by libraries that the project depends on</li>
</ul>
</li>
<li>README.txt
<ul>
<li>Project&rsquo;s readme</li>
</ul>
</li>
</ul>
<p>使用的 pom.xml 主要添加了 build-
plugins 的 Jetty 插件，另外修改了 outputDirectory，从而实现自动编译到<code>targert/projectName/WEB- INF/classes</code>目录，实现 <a href="http://wiki.eclipse.org/FAQ_What_is_hot_code_replace%3F">Eclipse Hot Code</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;directory&gt;</span>${project.basedir}/target<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;finalName&gt;</span>${project.artifactId}-${project.version}<span class="nt">&lt;/finalName&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/${project.build.finalName}/WEB-INF/classes<span class="nt">&lt;/outputDirectory&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-eclipse-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.7<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;sourceIncludes&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;sourceInclude&gt;</span>*<span class="nt">&lt;/sourceInclude&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/sourceIncludes&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-plugin-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p>准备几个测试用的 Servlet，外加 web.xml。运行<code>mvn install</code>即可在 target/war 下面生成 war 包，同时在 target/projectName/ 下会生成项目文件。</p>
<p>如果有 m2eclipse，那这个动作很容易就可以完成，如果没有，也可以参照我之前的<a href="http://log4d.com/2011/03/maven-eclipse">在 Eclipse 中使用 Maven</a>。</p>
<h2 id="撰写-eclipse-external-tool">撰写 Eclipse External Tool</h2>
<p>建立可以运行的 Jetty 实例分为两步，建立 Jetty 的 Java Application 和创建 jetty.xml 配置文件。</p>
<p>1、在 Run-Run Configurations 中的 Java Application 中建立一个新的应用，起名为&quot;jetty&quot;, 使用 Main
class 为<code>org.mortbay.xml.XmlConfiguration</code>，在 Arguments - Program arguments 中加入<code>${p roject_loc}/jetty.xml</code>，其中<code>${project_loc}</code>是动态参数，指向当前项目目录，jetty.xml 为我们随后要创建的 jett
y 配置文件。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201104/run_configurations.png" alt="image"  />


</p>
<p>如果想将这个应用保存成文件，可以修改 Common - Sava
as 到当前目录，就可以保存为 jetty.launch 文件了。（没错，就是 launch 文件，Eclipse 的运行配置文件）</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201104/eclipse_common.png" alt="image"  />


</p>
<p>2、准备 jetty.xml 文件</p>
<p>Jetty 是一款轻量形的 Web 服务器，轻到甚至仅仅靠 Maven 插件即可运行，不过我们依然需要通过 jetty.xml 文件进行配置。在项目根目录下建立 jetty
.xml（此路径与 Java Application 中的 Arguments 相对应，有些朋友可能更习惯放在 WEB-INF 下面）。</p>
<p>官方说从 <code>$JETTY_HOME/webapps/test/WEB-INF/jetty-web.xml</code> 可以取到 jetty-xml 的范例，我这里就提供下载好了。</p>
<p>点击下载 <a href="../../static/images/upload_dropbox/201104/jetty.xml">jetty.xml</a>，这里面写了 hard
code<code>&lt;Set name=&quot;resourceBase&quot;&gt;./target/study_web-1.0-SNAPSHOT&lt;/Set&gt;</code>，请记得替换。</p>
<p>配置好 Jetty 之后，就可以运行 Jetty 了，在 Run - Run
As 中找到名为 jetty 的运行命令，不出意外的话，Jetty 会在 4000 端口建立一个实例。</p>
<p>当我们在 Debug 模式运行时，由于我们修改 java 代码会动态更新到 classes 目录，所以我们可以在运行时修改代码，不信你可以在 Debug 时候修改 Servl
et 中代码试试，这就是所谓 Hot code。</p>
<p>Enjoy it!</p>
<h2 id="参考文章">参考文章</h2>
<p><a href="http://www.daniel-journey.com/archives/214">Eclipse 中运行 Jetty</a></p>
<p><a href="http://www.blogjava.net/alwayscy/archive/2007/05/19/118584.html">天生一对&quot;Maven2+Jetty&quot; &ndash; Maven2 创建并管理 WebApp，并使用 Maven Jetty Plugin 在 Eclipse 中调试</a></p>
<p><a href="http://www.blogjava.net/alwayscy/archive/2007/09/13/144969.html">目前发现的最好最快的直接在 ECLIPSE 中 JETTY 调试方式</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>在Eclipse中使用Maven</title>
      <link>https://blog.alswl.com/2011/03/maven-eclipse/</link>
      <pubDate>Fri, 18 Mar 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/03/maven-eclipse/</guid>
      <description>一提到Eclipse中使用Maven，都会想到m2eclipse这个插件。其实在Ecli pse下使用Maven不用插件也能完成，我们只需要使用bin/mvn下面的mvn即可。 3分钟Maven Maven官方提供了[Getting Started in 5 Minutes](http://maven.apache.org/guides /getting-started/maven-in-five-minutes.html)和[Getting Started in 30 Minutes](http://maven.apache.org/guides/getting- started/index.html)两种教程，我这</description>
      <content:encoded><![CDATA[<p>一提到Eclipse中使用Maven，都会想到<a href="http://m2eclipse.codehaus.org/">m2eclipse</a>这个插件。其实在Ecli
pse下使用Maven不用插件也能完成，我们只需要使用bin/mvn下面的mvn即可。</p>
<h2 id="3分钟maven">3分钟Maven</h2>
<p>Maven官方提供了[Getting Started in 5 Minutes](<a href="http://maven.apache.org/guides">http://maven.apache.org/guides</a>
/getting-started/maven-in-five-minutes.html)和[Getting Started in 30
Minutes](<a href="http://maven.apache.org/guides/getting-">http://maven.apache.org/guides/getting-</a>
started/index.html)两种教程，我这里再简化一下，记录一下常用命令。</p>
<pre><code>#建立一个空项目，包含一个HelloWorld，可以通过
#-DarchetypeGroupId=&lt;archetype-groupId&gt; -DarchetypeArtifactId=&lt;archetype-artifactId&gt;
#命令创建更多类型项目
mvn archetype:create -DgroupId=com.dddspace.java -DartifactId=helloworld
</code></pre>
<p>#编译打包到jar或者war，根据pom中定义</p>
<p>maven package</p>
<p>#jUnit跑跑</p>
<p>mvn test</p>
<p>#神奇的命令，帮助创建Eclipse项目，配置path，默认使用M2_REPO这个变量作为目录</p>
<p>mvn eclipse:eclipse</p>
<p>大约跑完花费3分钟~嗯，有这几个命令，Maven简单操作就OK了，更多的话，去Maven文档溜溜吧。</p>
<p>PS：为了防止Maven编码错误，建议在bin/mvn里面加入一句话<code>set MAVEN_OPTS=-Dfile.encoding=UTF-8</code>
这样强制Maven使用UTF-8进行编码。</p>
<h2 id="配置eclipse环境">配置Eclipse环境</h2>
<h3 id="加入m2_repo">加入M2_REPO</h3>
<p>进入Eclipse-&gt;preferences-&gt;java-&gt;build path-&gt;classpath
variables，添加M2_REPO这个变量，指向C:/Documents and Settings/userName/.m2/repository，这个
路径是默认的Maven仓库，如果你想搬到其他地方，需要修改mavenconfsetting.xml里面的localRepository。</p>
<h3 id="配置string-substitution">配置String Substitution</h3>
<p>通过配置String
Subsitution我们就可以使用Eclipse的lanuch来启动Maven，而不是Eclipse插件启动。首先我们要告诉Eclipse
Maven在哪里。配置Eclipse-&gt;preferences-&gt;Run/Debug-&gt;String Subsitution，加入mvn
=D:/dotj_dev/tools/apache-maven-2.2.1/bin/mvn.bat。</p>
<h3 id="建立launch文件">建立Launch文件</h3>
<p>Launch其实是Eclipse的Launcher框架的配置文件，可以定义Application的启动方式。新建一个mvn-war.launch如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;launchConfiguration type=&quot;org.eclipse.ui.externaltools.ProgramLaunchConfigurationType&quot;&gt;
&lt;stringAttribute key=&quot;bad_container_name&quot; value=&quot;helloworldmvn-war.launch&quot;/&gt;
&lt;stringAttribute key=&quot;org.eclipse.ui.externaltools.ATTR_LOCATION&quot; value=&quot;${mvn}&quot;/&gt;
&lt;stringAttribute key=&quot;org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS&quot; value=&quot;clean compile war:war -U&quot;/&gt;
&lt;stringAttribute key=&quot;org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY&quot; value=&quot;${workspace_loc:/helloworld}&quot;/&gt;
&lt;/launchConfiguration&gt;
</code></pre>
<p>Update（2011/03/21）：后来测试发现<code>bad_container_name</code>没有也可以正常运行；<code>${workspace_loc:/hello world}</code>修改为<code>${project_loc}</code>更为方便。</p>
<p>这个.launch文件内容其实是XML格式的，里面定义了几个属性，用来告诉Eclipse执行什么命令，重要的属性是ATTR_LOCATION和ATTR_TO
OL_ARGUMENTS，我们分别赋值为${mvn}和Maven参数，就可以正确执行了。</p>
<p>类似的，我们可以建立mvn eclipse:eclipse的Launch文件，用来生成Eclipse类型的项目。</p>
<p>PS：使用Substitution的目的其实是为了避免不同开发环境下面Maven位置不相同，保持.launch文件统一。</p>
]]></content:encoded>
    </item>
    <item>
      <title>最近在学的技术</title>
      <link>https://blog.alswl.com/2010/04/recent-study-technologys/</link>
      <pubDate>Sun, 18 Apr 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/04/recent-study-technologys/</guid>
      <description>根据这篇日志的题目，必然是一篇水文，我思量再三，还是把它放出来，这些技术的接触把我带入了另一个广阔的天堂。这是我学Java以来的第二个里程碑。 使用Java1年半，1年前开始JSP编程，一直是我和周围的朋友自己摸索，学校没有开Java课，也没有参加什么培训课程，面对庞大的Java开源分支，我一直摸索 ，不能登堂入室。 万分感谢倪经理这1个月来的教导，他给了我一个不一样的Java。 iBatis 如果说Hibernat</description>
      <content:encoded><![CDATA[<p>根据这篇日志的题目，必然是一篇水文，我思量再三，还是把它放出来，这些技术的接触把我带入了另一个广阔的天堂。这是我学Java以来的第二个里程碑。</p>
<p>使用Java1年半，1年前开始JSP编程，一直是我和周围的朋友自己摸索，学校没有开Java课，也没有参加什么培训课程，面对庞大的Java开源分支，我一直摸索
，不能登堂入室。</p>
<p>万分感谢倪经理这1个月来的教导，他给了我一个不一样的Java。</p>
<h3 id="ibatis">iBatis</h3>
<p>如果说Hibernate是一款自动化的导弹，那么iBatis则是一款轻型的半自动步枪，简介、高效、方便配置。加上iBator这个神器，iBatis可以使开发
效率几倍提升。</p>
<p>年前开始学习iBatis，想借其思想自己完成一个简单的ORM系统，3月份时候，公司的一个新框架采用了iBatis，更是给我提供了一个绝佳的Playgroun
d。Hibernate和iBatis有各自的适合使用的领域，不能单纯的说谁好谁不好，不过iBatis绝对值得尝试。</p>
<p>动软的.net生成器使用的DAL接入层也是使用的iBats.net做数据接入。</p>
<h3 id="jaas">Jaas</h3>
<p>我对权限控制的理解，从最早的单表用户字段管理，到贴吧的基于角色权限控制，直到后来公司使用的基于权限+菜单控制，最好到现在的Jaas提供的资源-角色-权限-
菜单 控制体系。细化到原子级的权限控制带来了莫大的好处，这个很大程度归功于Jaas。</p>
<blockquote>
<p>Java Authentication Authorization Service（JAAS，Java验证和授权API）提供了灵活和可伸缩的机制来保证客
户端或服务器端的Java程序。Java早期的安全框架强调的是通过验证代码的来源和作者，保护用户避免受到下载下来的代码的攻击。JAAS强调的是通过验证谁在运行
代码以及他／她的权限来保护系统面受用户的攻击。它让你能够将一些标准的安全机制，例如Solaris NIS（网络信息服务）、Windows
NT、LDAP（轻量目录存取协议），Kerberos等通过一种通用的，可配置的方式集成到系统中。</p>
</blockquote>
<p>我对这套权限系统的学习还不透彻，还有很多地方需要琢磨和研究，学无止境啊。</p>
<h3 id="esb">ESB</h3>
<p>很惭愧，知道现在才知道这个名词，ESB的思想其实在很多地方得到了灌输，我一直自认经常会跟进主流技术，现在才发现果然还是自己道行不够。</p>
<blockquote>
<p>ESB全称为Enterprise Service
Bus，即企业服务总线。它是传统中间件技术与XML、Web服务等技术结合的产物。ESB提供了网络中最基本的连接中枢，是构筑企业神经系统的必要元素</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>ESB的出现改变了传统的软件架构，可以提供比传统中间件产品更为廉价的解决方案，同时它还可以消除不同应用之间的技术差异，让不同的应用服务器协调运作，实现了
不同服务之间的通信与整合。从功能上看，ESB提供了事件驱动和文档导向的处理模式，以及分布式的运行管理机制，它支持基于内容的路由和过滤，具备了复杂数据的传输能
力，并可以提供一系列的标准接口。</p>
</blockquote>
<h3 id="mule">Mule</h3>
<p>Mule是一个企业服务总线(ESB)消息框架，也就是上面所说的ESB的一个开源框架实现。Mule的优势体现在：</p>
<p>1.基于J2EE1.4的企业消息总线(ESB)和消息代理(broker).</p>
<p>2.可插入的连接性:比如 Jms,jdbc,tcp,udp,multicast,http,servlet,smtp,pop3, file,xmpp等.</p>
<p>3.支持任何传输之上的异步，同步和请求响应事件处理机制.</p>
<p>4.支持Axis或者Glue的Web Service.</p>
<p>5.灵活的部署结构 [Topologies]包括Client/Server, P2P, ESB 和Enterprise Service Network.</p>
<ol start="6">
<li>与Spring 框架集成:可用作ESB 容器，也可以很容易的嵌入到Spring应用中.</li>
</ol>
<p>7.使用基于SEDA处理模型的高度可伸缩的企业服务器.</p>
<p>8.强大的基于EIP模式的事件路由机制等.</p>
<p>Mule发布最新版本1.1，这个发布包括集成了JBI，对 BPEL的支持,还增加一些新的传输器(transport)Quartz,FTP,RMI与EJB等。</p>
<h3 id="tiles">Tiles</h3>
<p>我之前认识是<include>已经是一种比较好的页面实现方式，Tiles的出现粉碎了我的认识。Tiles框架提供了一种模板机制，模板定义了网页的布局，同一模
板可以被多个Web页面共用。通过配置文件进行协调，把页面文件的分层应用到极致。</p>
<blockquote>
<p>Apache Tiles 是一个创建简单的网络应用用户界面的模板框架，Tiles让用户可以在运行中使用定义好的小模块装配成完整的页面。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>采用基本的JSP语句创建复合式网页 -&gt; 采用JSP的include指令创建复合式网页 -&gt; 采用Tiles:Insert标签创建复合式网页 -&gt;
采用Tiles模板创建复合式网页</p>
</blockquote>
<h3 id="web压力测试">Web压力测试</h3>
<p>这是我在翻阅大学里软件工程课孙老师给05届毕业生的PPT时候发现的内容。PPT体面推荐了3种Web压力测试工具。</p>
<p>Web Application Stress Tool, Microsoft</p>
<p><a href="http://jakarta.apache.org/jmeter/">JMeter, Java Apache Project</a></p>
<p><a href="http://www.broadgun.com">LoadItUp, BroadGun Software</a></p>
<p>上述三种，我只试用了JMeter，还在继续研究中。</p>
<h3 id="web测试自动化">Web测试自动化</h3>
<p>这也是从那堆PPT中学习的东西，我把他们列到我的GTD计划中，还没来得及实现。</p>
<h4 id="watir">[Watir</h4>
<p>](<a href="http://wtr.rubyforge.org/">http://wtr.rubyforge.org/</a>)</p>
<p>一个使用 Ruby 实现的开源Web 自动化测试框架。</p>
<h4 id="selenium">[Selenium</h4>
<p>](<a href="http://selenium.openqa.org/">http://selenium.openqa.org/</a>)</p>
<p>ThoughtWorks 专门为 Web 应用而开发的自动化测试工具，适合进行功能测试、验收测试 。</p>
<h4 id="jwebunit">[jWebUnit</h4>
<p>](<a href="http://jwebunit.sourceforge.net/">http://jwebunit.sourceforge.net/</a>)</p>
<p>为 Web 应用程序创建测试用例的一个开源框架，它可以容易地插入到大多数 Java IDE 中。</p>
<h3 id="last">Last</h3>
<p>啥也不说了，埋头学习吧～</p>
<p>路漫漫其修远兮，吾将上下而求索。</p>
]]></content:encoded>
    </item>
    <item>
      <title>管理WebLogic服务</title>
      <link>https://blog.alswl.com/2010/03/manage-weblogic-service/</link>
      <pubDate>Sat, 06 Mar 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/03/manage-weblogic-service/</guid>
      <description>注册WebLogic成 windows服务 1、执行Domain目录下的 installService.cmd [USER_NAME] [PASSWORD]命令，就会在windows服务中生成一个beasvc domainname_adminservername的服务启动类型为&amp;quot;自动&amp;quot;，手动将它设置为启动就可以每次开机自动启动了。 2、在创建新的域的时候有这个选项的，服务名字为beasvc domainname-servername。 删除WebL</description>
      <content:encoded><![CDATA[<h2 id="注册weblogic成-windows服务">注册WebLogic成 windows服务</h2>
<p>1、执行Domain目录下的 <code>installService.cmd [USER_NAME] [PASSWORD]</code>命令，就会在windows服务中生成一个<code>beasvc domainname_adminservername</code>的服务启动类型为&quot;自动&quot;，手动将它设置为启动就可以每次开机自动启动了。</p>
<p>2、在创建新的域的时候有这个选项的，服务名字为beasvc domainname-servername。</p>
<h2 id="删除weblogic服务">删除WebLogic服务</h2>
<p>1.执行Domain目录下的 <code>stopWebLogic.cmd</code>命令就可以删除服务</p>
<p>2.删除服务之后，可以直接删除Domain下的所有文件～</p>
]]></content:encoded>
    </item>
    <item>
      <title>DWR2.0在JDK1.4下的配置</title>
      <link>https://blog.alswl.com/2010/03/dwr2-0-jdk1-4-configuration/</link>
      <pubDate>Mon, 01 Mar 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/03/dwr2-0-jdk1-4-configuration/</guid>
      <description>服务器的WebLogic版本是8.1，使用自带的JDK1.4 MyEclipse版本是6.6，项目文件的Compiler compliance level设置为1.4 MyEclipse自带Tomcat使用MyEclipse6.6自带的JDK5 开发时候系统运行无误。 部署到应用服务器之后，使用WebLogic自带的JDK1.4，登录之后的一些页面一旦访问，会导致服务器报错停止。我检查了一下错误信息。 &amp;ldquo;ListenThread.Default&amp;rdquo; listening on port 7001, ip address .&amp;gt; DWR Version 2.0.5 starting. Servlet</description>
      <content:encoded><![CDATA[<p>服务器的WebLogic版本是8.1，使用自带的JDK1.4</p>
<p>MyEclipse版本是6.6，项目文件的<strong>Compiler compliance level</strong>设置为1.4</p>
<p>MyEclipse自带Tomcat使用MyEclipse6.6自带的JDK5</p>
<p>开发时候系统运行无误。</p>
<p>部署到应用服务器之后，使用WebLogic自带的JDK1.4，登录之后的一些页面一旦访问，会导致服务器报错停止。我检查了一下错误信息。</p>
<blockquote>
<p>&ldquo;ListenThread.Default&rdquo; listening on port 7001, ip address <em>.</em>&gt;</p>
</blockquote>
<ul>
<li>
<p>DWR Version 2.0.5 starting.</p>
</li>
<li>
<ul>
<li>Servlet Engine: WebLogic XMLX Module 8.1 SP1 Fri Jun 20 23:06:40 PDT 2003 27<br />
1009 with</li>
</ul>
</li>
<li>
<ul>
<li>Java Version: 1.4.1_03</li>
</ul>
</li>
<li>
<ul>
<li>Java Vendor: Sun Microsystems Inc.</li>
</ul>
</li>
<li>
<p>Line=19 The content of element type &ldquo;dwr&rdquo; must match &ldquo;(init?,allow?,signatures<br />
?)&rdquo;.</p>
</li>
</ul>
<p>Unexpected Signal : EXCEPTION_ACCESS_VIOLATION occurred at PC=0x6D3F8887</p>
<p>Function=JVM_RegisterPerfMethods+0x11C42</p>
<p>Library=C:beaJDK141~1jrebinclientjvm.dll</p>
<p>Current Java thread:</p>
<p>&amp;n
bsp_place_holder; at
java.lang.Class.getName(Native Method)</p>
<p>&amp;n
bsp_place_holder; at
org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactory</p>
<p>Impl.java:246)</p>
<p>&amp;n
bsp_place_holder; at
org.apache.commons.logging.LogFactory.getLog(LogFactory.java:395)</p>
<p>&amp;n
bsp_place_holder; at
org.directwebremoting.util.CommonsLoggingOutput.<init>(CommonsLogging</p>
<p>Output.java:35)</p>
<p>&amp;n
bsp_place_holder; at
org.directwebremoting.util.Logger.<init>(Logger.java:62)</p>
<p>&amp;n
bsp_place_holder; at
org.directwebremoting.util.Logger.getLogger(Logger.java:33)</p>
<p>&amp;n
bsp_place_holder; at
org.directwebremoting.annotations.AnnotationsConfigurator.<clinit>(An</p>
<p>notationsConfigurator.java:335)</p>
<p>&amp;n
bsp_place_holder; at
sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</p>
<p>可以发现，错误是运行到DWR这里发生了报错，好，那么我们从这里下手。</p>
<p>狗狗之后，得知DWR 2.0需要的JDK是1.5+，如果使用JDK1.4则要换成DWR1.x。不过，随后我看到两篇文章提供了两种解决方案。</p>
<p>[在JDK1.4中正确使用 DWR AJAX框架_永无止境_百度空间](<a href="http://hi.baidu.com/mcjyellow/blog/item/7b">http://hi.baidu.com/mcjyellow/blog/item/7b</a>
654d544dd0025ed109068f.html)中配置web.xml来添加一个init-param，我测试之后发现对我无效，原因会在下面贴出。</p>
<p>随后我在[DWR的BUG - 一点凉月的日志 - 网易博客](<a href="http://71322560.blog.163.com/blog/static/567209">http://71322560.blog.163.com/blog/static/567209</a>
75200919102327784/)看到标题为<strong>在JDK1.4中运行和部署DWR2和hibernate3出现的问题</strong>的文字，提供了删除annotati
ons的方法，经过我测试，的确有效，方法如下。（友情提醒，操作之前请记得备份哦）</p>
<blockquote>
<p>在DWR2.0中提供了一些JDK5中才能使用的annotations的功能。然而，这个
功能在JDK1.4的环境中进行启动或者部署会发生错误。抱歉的是这个错误信息我没有及时记录，日后补上。这个错误在网上可以轻易地搜索到解决方案，即在
dwr.jar中删除掉org.directwebremoting.annotations.AnnotationsConfigurator这个类再
重新部署就可以了。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>同样的问题出现在hibernate3中，hibernate3对annotations的 支持在JDK1.4中也可能出现异常
，解决的办法就是在部署文件中删除掉hibernate-annotations.jar就可以了。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>另外值得说明的是，以上2个问题并不是每次都会出现的。它们就如同幽灵一样有时出现有时不出
现，因此我们并不需要总是删除这个类和jar包，只是在发生错误时才删除。</p>
</blockquote>
<p>按照上述所说操作，在加载DWR时候，服务器会提示**AnnotationsConfigurator is
missing. Are you running from within an IDE?**但是已经可以正常运行了。</p>
<p>为什么第一个无效，因为这个错误引起的原因是JDK5中才能使用的annotations的功能，就算在web.xml配置了java.lang.Object的cl
ass，依然没有办法找到annotations，错误依然会存在。</p>
<p>有朋友问怎么删除一个.jar的类，呵呵，其实直接用7-Zip或者WinRAR此类的工具打开jar文件，进去删除即可，jar文件本质上其实就是一个带Meta-
INF的zip压缩包。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java笔记 使用反射来改进BaseDao</title>
      <link>https://blog.alswl.com/2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/</link>
      <pubDate>Tue, 17 Nov 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/</guid>
      <description>关于反射 反射的定义（via Wiki）：在计算机科学中，反射是指一种特定类型的计算机程序能够在运行时以一种依 赖于它的代码的抽象特性和它的运行时行为的方式被更改的特性。用比喻来说，那种程式能够&amp;quot;观察&amp;ldquo;并且修改自己的行为。 Java中的反射示例如下： package dddspace.job.exercise1116; public class Foo { public void fun(String str) { System.out.println(str); } } package dddspace.job.exercise1116; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class ReflectionDemo { public static void main(String[] args) throws SecurityException, NoSuchMethodException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { // 不使用反射 Foo foo = new Foo(); foo.fun(&amp;#34;no reflection&amp;#34;); // 使用反射 String className = &amp;#34;dddspace.job.exercise1116.Foo&amp;#34;; String funName = &amp;#34;fun&amp;#34;; // 获取类</description>
      <content:encoded><![CDATA[<h2 id="关于反射">关于反射</h2>
<p>反射的定义（via <a href="http://zh.wikipedia.org/zh-cn/%E5%8F%8D%E5%B0%84_%28%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%29">Wiki</a>）：在计算机科学中，反射是<strong>指一种特定类型的计算机程序能够在运行时以一种依
赖于它的代码的抽象特性和它的运行时行为的方式被更改</strong>的特性。用比喻来说，那种程式能够&quot;<strong>观察</strong>&ldquo;并且修改自己的行为。</p>
<p>Java中的反射示例如下：</p>
<pre tabindex="0"><code>    package dddspace.job.exercise1116;

public class Foo {

public void fun(String str) {

System.out.println(str);

}

}


    package dddspace.job.exercise1116;

import java.lang.reflect.InvocationTargetException;

import java.lang.reflect.Method;

public class ReflectionDemo {

public static void main(String[] args) throws SecurityException,

NoSuchMethodException, ClassNotFoundException, InstantiationException,

IllegalAccessException, IllegalArgumentException,

InvocationTargetException {

// 不使用反射

Foo foo = new Foo();

foo.fun(&#34;no reflection&#34;);


// 使用反射

String className = &#34;dddspace.job.exercise1116.Foo&#34;;

String funName = &#34;fun&#34;;

// 获取类名

Class cls = Class.forName(className);

// 创建Object实例

Object foo2 = cls.newInstance();

// 创建Method hello

Method method = cls.getMethod(&#34;fun&#34;, String.class);

// 使用反射来调用Method的invode方法，参数是目标对象+参数

method.invoke(foo, &#34;use reflection&#34;);

}

}
</code></pre><h2 id="原始basedao设计">原始BaseDao设计</h2>
<p>我先阐述一下BaseDao的设计想法：BaseDao是一个<strong>抽象类</strong>，提供一系列Dao方法&rdquo;<strong>get()/getAll()/add()/update()/delete()/getCount()</strong>&quot;，通过<strong>泛型匹配</strong>的获取类，我取出一个方法来做示例。</p>
<pre tabindex="0"><code>    public int getCount()
    {
    	int count = 0;
    	Session session = null;
    	Transaction tx = null;
    	String Tstr = getClass().getSimpleName().substring (0,
    			getClass().getSimpleName().length() - 3);
    	String hql = &#34;select count(*) from &#34; + Tstr;
    	try {
    		session = HibernateSessionFactory.currentSession();
    		tx = session.beginTransaction();
    		Query query = session.createQuery(hql);
    		count = Integer.parseInt(query.uniqueResult().toString());
    		query = null;
    		tx.commit();
    	} catch (HibernateException e) {
    		if (tx != null) {
    			tx.rollback();
    		}
    		throw e;
    	} finally {
    		HibernateSessionFactory.closeSession();
    	}				
    	return count;
    }
</code></pre><p>其中有一段<strong>dirty work</strong>，就是TStr的获取，这段TStr是想从实现Dao类获取实体类的类型名称，也就是
从&quot;TopicDao&quot;获取&quot;Topic&quot;这个类型名称。整个BaseDao的泛型设计不错，但是在这一段上面存在一段dirty work，始终让我不爽。</p>
<h2 id="重构basedao和topicdao">重构BaseDao和TopicDao</h2>
<p>我今天复习完抽象类/接口/反射这些内容，又在纸上画了一个模型，觉得用这种新方法解决会更好一点。</p>
<p>给抽象类BasoDao加入新的变量Class c，然后在TopicDao初始化时候对Class
c进行设置为Topic.class，这样就比原来的拼字符串好的多。耦合也显得漂亮了</p>
<pre tabindex="0"><code>    public abstract class BaseDAO&lt;T&gt; {
    	
    	protected Class c;
    	
    	private Logger logger = Logger.getLogger(this.getClass());
    	
    	/**
    	 * 根据某个Bean的beanId取出Bean
    	 * @param tId
    	 * @return Bean
    	 */
    	public T get(int tId)
    	{
    		T t=null;
    		Session session = null;
    		Transaction tx = null;
    		// 原始设计
    //		String Tstr = getClass().getSimpleName().substring (0,
    //				getClass().getSimpleName().length() - 3);
    		// 获取c的名称
    		String Tstr = c.getSimpleName();
    		String TstrId = Tstr+&#34;Id&#34;;
    		String hql = &#34;from &#34; + Tstr + &#34; where &#34; +
    			TstrId.substring(0, 1).toLowerCase() + TstrId.substring(1) + &#34; = ?&#34;;
    		try {
    			session = HibernateSessionFactory.currentSession();
    			tx = session.beginTransaction();
    			Query query = session.createQuery(hql);
    			query.setInteger(0,tId);
    			t = (T)query.uniqueResult();
    			query = null;
    			tx.commit();
    		} catch (HibernateException e) {
    			if (tx != null) {
    				tx.rollback();
    			}
    			throw e;
    		} finally {
    			HibernateSessionFactory.closeSession();
    		}		
    		return t;
    	}
    
    public class TopicDAO extends BaseDAO&lt;Topic&gt;{
    		
    	private Logger logger = Logger.getLogger(this.getClass());
    	/**
    	 * 根据froumId取出某一吧内的所有没被屏蔽的帖子
    	 * @param froumId
    	 * @return ArrayList&lt;Topic&gt; 
    	 * @throws HibernateException
    	 */
    	// 在构造函数中进行c的设置
    	public TopicDAO () {
    		c = Topic.class;
    	}
    	//doSomething
    }
</code></pre><p>这样完成之后，就完成了一次简单的重构，实现了<strong>变化点分离</strong>，而且不那么dirty。</p>
<p>本文的代码来源自PostBar项目。这里有<a href="http://code.google.com/p/postbar/">Google Code链接</a>，v1.0.1的代码并没有上文的实现，本文中的修改还在trunk中。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java入门好书《Java JDK6学习笔记》</title>
      <link>https://blog.alswl.com/2009/11/getting-started-with-java-books-java-jdk6-study-notes/</link>
      <pubDate>Mon, 16 Nov 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/11/getting-started-with-java-books-java-jdk6-study-notes/</guid>
      <description>《Java JDK6学习笔记》(via 豆瓣，via ChinaPub)是我最近在看的一本书。虽然名为Java学习笔记，其实** 深入浅出的讲解了Java这门语言。书中的语言颇有白文风格**，适合没有语言基础的同学学习，也适合对一些概念不清楚的开发人员。 我很快的翻阅了半本书，作者的范例代码简单精要(&amp;ldquo;Java笔记split/不定长度参数/泛型类型通配符&amp;rdquo;中示例代码就是改编自本书)。</description>
      <content:encoded><![CDATA[<p><a href="http://img3.doubanio.com/lpic/s2518833.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200911/s2518833.jpg" alt="Java JDK6学习笔记"  />


</a></p>
<p>《Java JDK6学习笔记》(via <a href="http://www.douban.com/subject/2057790/">豆瓣</a>，via
<a href="http://www.china-pub.com/34512&amp;ref=ps">ChinaPub</a>)是我最近在看的一本书。虽然名为Java学习笔记，其实**
深入浅出<strong>的讲解了Java这门语言。书中的语言颇有</strong>白文风格**，适合没有语言基础的同学学习，也适合对一些概念不清楚的开发人员。</p>
<p>我很快的翻阅了半本书，作者的范例代码简单精要(<a href="http://log4d.com/2009/11/java-notes-_split-variable-length-parameter-generic-type-wildcard">&ldquo;Java笔记split/不定长度参数/泛型类型通配符&rdquo;</a>中示例代码就是改编自本书)。我现在正在阅读线程、反射和Annotation这三块内容，看得我酣畅淋漓啊。</p>
<p>我算是概念模糊的开发者，现在准备笔试/面试所以恶补一下平时接触比较少的概念。我虽然也有《<strong>Think in
Java</strong>》这本至尊级的书，但是显然这本书研究过深，不适合快速复习。《Java JDK6学习笔记》就成了我首选了。（感谢CUMT图书馆！）</p>
<p>豆瓣简介：</p>
<blockquote>
<p>本书是作者良葛格本人近几年来学习Java的心得笔记，结构按照作者的学习脉络依次展开，从什么是Java、如何配置Java开发环境、基本的Java语法到程序
流程控制、管理类文件、异常处理、枚举类型、泛型、J2SE中标准的API等均进行了详细介绍。本书还安排了一个&quot;文字编辑器&quot;的专题制作。此外，Java
SE6的新功能，对Java lang等套件的功能加强，以及JDBC4.0、Apache Derby纯Java数据库等新增功能，本书也都予以介绍。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>本书门槛很低，只要您了解Windows基本操作，无须有其他程序语言的基础，甚至没有接触过Java，都可以通过本书扎扎实实地学习Java。而对于一些曾经学
习过Java，但概念和基础仍不扎实的读者，本书也准备了一些面向对象的观点与进阶的议题可供参考。</p>
</blockquote>
<p>作者在书中其中有几句话我颇为欣赏：</p>
<blockquote>
<p>学习一个新的事物时，如果遇到一些概念无法很快理解，这可能是因为要理解概念会需要其他概念先建立起来，所以先暂时放下这个疑问也是一个学习方法，称之为&quot;存疑&quot;
，在以后的学习过程中待必要的概念学会后，目前的疑问自然也会解开。</p>
</blockquote>
<p>下面是豆瓣<a href="http://www.douban.com/people/snable/">snable</a>的评论，深得我心。</p>
<blockquote>
<p>每当有学习java的人让我推荐书籍的时候，我都会毫不犹豫地向他推荐《Java学习笔记》。这本书的上一版是前几年读的了，当时还是按jdk1.5写的。本书最
大特点是：</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>1、内容翔实。说翔实不是说它厚，java书里有很多厚而无物的滥书，本书基本覆盖了javaSE的内容，总体说达到中偏高的层次，有些高级内容没有涉及。每一部
分都有其他书籍里没有介绍或者介绍不全面的东西，可以说言之有物。</p>
</blockquote>
<p>2、叙述清楚。对于一些易错或难易理解的概念，作者总是能用通俗的语言讲明白，而不像某些书那样&quot;遮遮掩掩&quot;。这对于初学者无疑是最有帮助的。我读这本书上一版时已经
学过java，当时的目的是为了了解jsk1.5的新变化，但在读的过程中才发现自己对很多点的理解是模糊的。所以个人认为这本书不止适合初学者。</p>
<p>3、例题有力。例题是最容易帮助我们理解问题的工具，本书的例题都非常有针对性。所选例题有一定实用性，难度适中，不是Toy Program。</p>
<blockquote>
</blockquote>
<blockquote>
<p>每个人的理解方向不一样，不可能有一本书适合所有学习者，但我坚信好书最终总会被大多数人承认的，这也是我推荐此书的目的。书的价格略高，但物有所值，有条件可以
去图书馆借或者读电子版。</p>
</blockquote>
<p>另外再多写几句吧，其他推荐的java书籍还有两本：</p>
<blockquote>
</blockquote>
<blockquote>
<p>1、《Java2核心技术》，此书分上下两卷（基础、高级），优点在于层次比上边那本书要高，话说回来，书也厚了一倍，适合当手册用。此书版本变化频繁，现在已经
到了中文第八版，但个人感觉没有超越第六版翻译的高度。</p>
</blockquote>
<p>2、《Java编程思想》，大名鼎鼎，作者对java的理解程度让人五体投地，优点是就是内容相当深入。个人认为本书试图一次性全面解释清楚某些问题，不适合初学者读
。这种书必须长期反复地阅读，常读常新。</p>
<blockquote>
</blockquote>
<blockquote>
<p>再多说一句吧，有一本《JAVA实例技术手册》是我买过最失败的一本书，缺点在于：1、内容不深入；2实例没有想象中的实用，或者有的根本就没有实用价值。</p>
</blockquote>
<p>如果你还没有学过Java却想学，我强烈推荐此书。￥59.9绝对物有所值，呃，电子书嘛，给个<a href="http://www.google.cn/search?hl=zh-CN&amp;newwindow=1&amp;q=Java+JDK6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0+%E7%94%B5%E5%AD%90%E4%B9%A6&amp;btnG=Google+%E6%90%9C%E7%B4%A2&amp;aq=f&amp;oq=">Google搜索链接</a>吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java笔记 split/不定长度参数/泛型类型通配符</title>
      <link>https://blog.alswl.com/2009/11/java-notes-_split-variable-length-parameter-generic-type-wildcard/</link>
      <pubDate>Sun, 15 Nov 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/11/java-notes-_split-variable-length-parameter-generic-type-wildcard/</guid>
      <description>今天看了一下午《Java学习笔记》，作者林信良，花名良葛格。从书中所获颇 多，正所谓温故而知新，我就把今天的&amp;quot;新&amp;quot;总结一下，加深记忆。良葛格也提倡&amp;quot;在网上写文章是我记录所学的一种方式&amp;quot;。 split的正则式和其中的正则式 C语言其中有函数strtok，就是按某些char对字符串进行切割。下面给出一个C下面的范例 char str[] = &amp;#34;now # is the time for all # good men to come to the # aid of their country&amp;#34;; char delims[] = &amp;#34;#&amp;#34;; char</description>
      <content:encoded><![CDATA[<p>今天看了一下午《<a href="http://www.douban.com/subject/2057790/">Java学习笔记</a>》，作者林信良，花名良葛格。从书中所获颇
多，正所谓温故而知新，我就把今天的&quot;新&quot;总结一下，加深记忆。良葛格也提倡&quot;在网上写文章是我记录所学的一种方式&quot;。</p>
<h2 id="split的正则式和其中的正则式">split的正则式和其中的正则式</h2>
<p>C语言其中有函数strtok，就是按某些char对字符串进行切割。下面给出一个C下面的范例</p>
<pre tabindex="0"><code>    char str[] = &#34;now # is the time for all # good men to come to the # aid of their country&#34;;
    char delims[] = &#34;#&#34;;
    char *result = NULL;

result = strtok( str, delims );

while( result != NULL ) {

printf( &#34;result is &#34;%s&#34;n&#34;, result );

result = strtok( NULL, delims );

}
</code></pre><p>在Java中也有类似的StringTokenizer，但是在JDK5中，已经被标记为Legacy
Class(遗产类)，推荐使用String.split(String regex)，可以接受正则表达式。范例如下。</p>
<pre tabindex="0"><code>    private void init() {
    	Scanner scanner = new Scanner(System.in);

System.out.println(&#34;input n and data&#34;);

n = scanner.nextInt();

data = new int[n];

String input = scanner.next().trim();

//String[] strData = splitByTokenizer(input);

String[] strData = input.split(&#34;[,\s]&#34;);

int i = 0;

for (String t : strData) {

data[i] = Integer.parseInt(t);

i++;

}

}

//已过时，Legacy Class(遗产类)

private String[] splitByTokenizer (String input, String regex) {

String [] result = null;

if (input != null &amp;&amp; !input.equals(&#34;&#34;)) {

StringTokenizer commaToker = new StringTokenizer(input, &#34;,&#34;);

result = new String[commaToker.countTokens()];

int i = 0;

while (commaToker.hasMoreTokens())

{

result[i] = commaToker.nextToken();

i++;

}

}

return result;

}
</code></pre><h2 id="不定长度参数">不定长度参数</h2>
<p>听名字这东西就相当有用，也是JDK5开始支持的。（话说现在都JDK6.0了，我们很多童鞋对Java的概念还停留在最开始，其中也包括我，咱们要与时俱进嘛）直接
上代码，就知道怎么用了。</p>
<pre tabindex="0"><code>package dddspace.job.exercise1115;

/**

* 使用不定长度参数  
* 参考《Java学习笔记》P153相关内容  
*   
*/  
public class VarArgs {

public static void main(String[] args) {


int sum = 0;

sum = VarArgs.sum(1, 2);

System.out.println(sum);


sum = VarArgs.sum(1, 3, 5, 7);

System.out.println(sum);

}

//关键在 &#34;int...&#34;

private static int sum(int... nums) {

int sum = 0;

for (int num : nums) {

sum += num;

}

return sum;

}

}
</code></pre><h2 id="泛型类型通配符">泛型类型通配符</h2>
<p>如果你还不知道泛型是什么，那么最好补一下基础(via [Baidu Zhidao](<a href="http://baike.baidu.com/view/965887.h">http://baike.baidu.com/view/965887.h</a>
tml?wtp=tt))，这个在C++中运用广泛，在JDK5.0加入Java大家族。我这里要解释的是泛型类型的通配符，呃，有点绕口。其实就是让泛型T这个T通
过支持一个接口来支持其实现类。</p>
<p>咱们还是让代码来反应思想吧。</p>
<pre tabindex="0"><code>package dddspace.job.exercise1115;

import java.util.ArrayList;

import java.util.LinkedList;

import java.util.List;

/**

* 泛型类型通配符  
* 参考《Java学习笔记》P249相关内容  
*  
*/  
public class WildcardTest&lt;T&gt; {

public static void main(String[] args) {


/*想定义泛型为List接口，错误

WildcardTest&lt;List&gt; wildcardTestW= null;

wildcardTestW = new WildcardTest&lt;ArrayList&gt;();

wildcardTestW = new WildcardTest&lt;LinkedList&gt;();

*/  

//关键词 &#34;&lt;? extends Class&gt;&#34;匹配正确

WildcardTest&lt;? extends List&gt; wildcardTest= null;

wildcardTest = new WildcardTest&lt;ArrayList&gt;();

wildcardTest = new WildcardTest&lt;LinkedList&gt;();

}

}
</code></pre><h2 id="补遗关于stringstringbuilderstringbuffer">补遗：关于String/StringBuilder/StringBuffer</h2>
<p>简单来说，String是不可变的，每次都是指向不同的内存空间。StringBuilder是可变的，线程不安全。StringBuffer是可变的并且线程安全。
StringBuilder是JDK5.0加入的。（今天5.0开心了，都是推它的）</p>
<p>A.shun有一篇关于String/StringBuilder/StringBuffer的文，可以移步到<a href="http://www.a18zhizao.cn/y2009/1060_string-stringbuffer-and-stringbuilders-the-difference.html">这里</a>看详细介绍。</p>
]]></content:encoded>
    </item>
    <item>
      <title>DAO的设计-使用泛型来避免重复DAO</title>
      <link>https://blog.alswl.com/2009/07/dao-design-the-use-of-generics-to-avoid-duplication-of-dao/</link>
      <pubDate>Fri, 10 Jul 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/07/dao-design-the-use-of-generics-to-avoid-duplication-of-dao/</guid>
      <description>DAO的全称是Data Access Object数据访问接口。数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。 我大二时候写的一个小型管理系统，那时候老师开始强调分层和MVC的思想，当时我将DAO层分了开来，把所有与数据库的交互操作封装成对应的DAO类，这样最大的好处 是实现了封装和隔离，方便系统的迁移和重构。 分层、封装、接口化是一种基本的解决思路，无论是TCP/IP协议族，还是软件工程，都是</description>
      <content:encoded><![CDATA[<p>DAO的全称是Data Access Object数据访问接口。数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。</p>
<p>我大二时候写的一个小型管理系统，那时候老师开始强调分层和MVC的思想，当时我将DAO层分了开来，把所有与数据库的交互操作封装成对应的DAO类，这样最大的好处
是实现了封装和隔离，方便系统的迁移和重构。</p>
<p>分层、封装、接口化是一种基本的解决思路，无论是TCP/IP协议族，还是软件工程，都是很值得使用的方案。</p>
<p>那么接下来的问题就是DAO类的设计，我当时遇到的问题就是DAO类之间存在大量的冗余代码，用敏捷的角度来思考，这绝对是不允许存在的。</p>
<p>讲相同的方法抽象出来，这也是最常见的解决方案，最简单的例子就是函数的产生，其实也是对程序的一种抽象和提炼，避免冗余，达到复用效果。</p>
<p>在Java1.5出来之前，用Object来操作对象，实现方法复用，就可以达到上面的目的，但是，存在类型安全的问题。Java1.5提出了泛型的概念，类似与C+
+中的Template，Java运行环境帮助会检查类型的安全。</p>
<p>这里有一篇IBM资料库的文章，详细阐述了泛型在DAO设计的使用「不要重复DAO」&lt;<a href="http://www.ibm.com/developerworks/cn/java/j-genericdao.html">猛击这里打开</a>&gt;，作者[PerMellqvist (http://www.ibm.com/developerworks/cn/java/j-genericdao.html#author)
(<a href="mailto:per@mellqvist.name?subject=%E4%B8%8D%E8%A6%81%E9%87%8D%E5%A4%8D%20DAO%EF%BC%81">per@mellqvist.name</a>), 系统架构师, 自由作家</p>
<p>我的贴吧里面DAO最后的UML类图设计如下：</p>
<p><a href="../../static/images/upload_dropbox/200907/DAO_UML.JPG">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200907/DAO_UML-254x300.jpg" alt="DAO_UML"  />


</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>贴吧小结报告</title>
      <link>https://blog.alswl.com/2009/07/summary-report-of-post-bar/</link>
      <pubDate>Thu, 02 Jul 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/07/summary-report-of-post-bar/</guid>
      <description>终于完成了这个贴吧系统，虽然还有很多地方不完善，但是却包含了我很多心血和精力，也实践了我的很多想法。 具体的不说了，稍微说一下开发使用的技术：Java、Struts2、Hibernate、OGNL、Eclipse、Tomcat、MySQL、AJAX、jQue ry、SVN、UP开发模式、UML。 之中学习了很多内容，我恨兴奋，说起来这是我第一个完整写的一个网站系统，之前的asp啊，asp.NET多多少少</description>
      <content:encoded><![CDATA[<p>终于完成了这个贴吧系统，虽然还有很多地方不完善，但是却包含了我很多心血和精力，也实践了我的很多想法。</p>
<p>具体的不说了，稍微说一下开发使用的技术：Java、Struts2、Hibernate、OGNL、Eclipse、Tomcat、MySQL、AJAX、jQue
ry、SVN、UP开发模式、UML。</p>
<p>之中学习了很多内容，我恨兴奋，说起来这是我第一个完整写的一个网站系统，之前的asp啊，asp.NET多多少少借鉴了别人的代码。</p>
<p>终于知道其实资历代表着经验，很多东西只有自己试过才知道怎么做，这一块我太欠缺了，对于JaveEE开发，也终于开始有了接触，寒假回家3个星期，应该在Java的
本质技术上合Hibernate高级内容、设计模式上花时间了。</p>
<p>09_11_16 Update:</p>
<p>今天又check out了一下，然后加入About和Links，当初贴吧在课程设计之后就没有完善，现在加上这两个模块，也就能release了。</p>
<p>相关链接：</p>
<p><a href="http://code.google.com/p/postbar/">项目在Google Code托管 </a>（你可以check
out，不知道游客有没有权限，需要可以Mail我）</p>
<p><a href="http://log4d.com/tag/postbar">相关开发博客链接 </a></p>
]]></content:encoded>
    </item>
    <item>
      <title>再谈s:if的使用</title>
      <link>https://blog.alswl.com/2009/06/return-s-if-the-use-of/</link>
      <pubDate>Sun, 28 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/return-s-if-the-use-of/</guid>
      <description>上次遇到过&amp;lt;s:if&amp;gt;的问题，费了好久才弄好，这次又遇到，有了一点新的体验。 &amp;lt;s:if test=&amp;quot;&amp;quot;&amp;gt;中的判断，如果是数字判断一般都没有问题，问题会在字符串时候凸显出来。 尤其是中文字符串，几乎没有能够通过的，上一次是曲线救国，用了true和false着两个英文，如果非得用中文怎么办？ 其实使用&amp;lt;s:if test=&amp;lsquo;str==&amp;ldquo;中文&amp;rdqu</description>
      <content:encoded><![CDATA[<p>上次遇到过&lt;s:if&gt;的问题，费了好久才弄好，这次又遇到，有了一点新的体验。</p>
<p>&lt;s:if test=&quot;&quot;&gt;中的判断，如果是数字判断一般都没有问题，问题会在字符串时候凸显出来。</p>
<p>尤其是中文字符串，几乎没有能够通过的，上一次是曲线救国，用了true和false着两个英文，如果非得用中文怎么办？</p>
<p>其实使用&lt;s:if test=&lsquo;str==&ldquo;中文&rdquo;&rsquo;&gt;，就可以了，请注意，是单引号-双引号-中文-双引号-
单引号的顺序，这样才能够正确的解析中文字符串是否相等。</p>
<p>唔。。。终于可以做下一个部分了</p>
]]></content:encoded>
    </item>
    <item>
      <title>贴吧中期进度汇报</title>
      <link>https://blog.alswl.com/2009/06/affixed-to-it-the-progress-report-on-the-medium-term/</link>
      <pubDate>Sat, 27 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/affixed-to-it-the-progress-report-on-the-medium-term/</guid>
      <description>查看sql更新版本，我才发现这个项目已经做了将近2个月了。 之前一个多月都是我有空就做做，一边要写OpenSSL的模型，还要应付平时学习和考试，最近的1个星期，才开始全身心投入的，使这个项目变成了一个课程设计，但决不 止于课程设计。 由于鸡鸡的加入，而且对原先设计的一些不满意，我用UP的方式重新对系统进行了设计，从用例到实际类图，都重新设计并加以重构。 这是一个很有意义的过程，我花了很多时间在UML的使用</description>
      <content:encoded><![CDATA[<p>查看sql更新版本，我才发现这个项目已经做了将近2个月了。</p>
<p>之前一个多月都是我有空就做做，一边要写OpenSSL的模型，还要应付平时学习和考试，最近的1个星期，才开始全身心投入的，使这个项目变成了一个课程设计，但决不
止于课程设计。</p>
<p>由于鸡鸡的加入，而且对原先设计的一些不满意，我用UP的方式重新对系统进行了设计，从用例到实际类图，都重新设计并加以重构。</p>
<p>这是一个很有意义的过程，我花了很多时间在UML的使用上，用的是StarUML（开始使用Rose，发现太难入门了），继烨负责用例，我是在设计完第一个迭代过程之
后进行编写代码的。</p>
<p>原计划是尽量设计之后再编码，但是由于时间关系被迫提前编码，这样，整个过程相对的倾向于敏捷，这其实也是我最开始想要的效果。</p>
<p>写着写着，越发的理解设计的重要性，往往一个小错误会影响很多改变，很多东西没有一定经验真的很难做优秀。</p>
<p>今天的代码提交到Google
Code之后，基本接近我之前自己完成的程度，但我觉得这次的重构，使我学到了很多平时没接触到的东西。两个人的协作也使我完全体会到SVN的好处。</p>
<p>以上是贴吧中期报告。</p>
<h4 id="相关链接">相关链接：</h4>
<p>PostBar in Google Project Host&lt;<a href="http://code.google.com/p/postbar/">猛击这里打开</a>&gt;</p>
<p>PostBar svn-readonly&lt;<a href="http://postbar.googlecode.com/svn/trunk/postbar-read-only">猛击这里打开</a>&gt;</p>
]]></content:encoded>
    </item>
    <item>
      <title>校内踩踩小工具v0.1</title>
      <link>https://blog.alswl.com/2009/06/xiaoneicaicai-gadget-v0-1/</link>
      <pubDate>Sun, 14 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/xiaoneicaicai-gadget-v0-1/</guid>
      <description>明天要考数据库应用了，今天仍然忍不住把校内踩踩小工具写完。 上次被打击了，人家刷人气的工具是建立一个平台进行互踩，但是安全性存在问题。我自己写的这个小东西能在校内限制范围内刷50个相同区域的页面(校内限制次数是100 ，可以执行两次，以后再执行就必须到网页输入验证码)，然后通过他人回踩来提高人气。 纯粹是自己写着玩，几乎没有什么应用价值，不过既然写了这么久，也就放上来，大家把玩一下。 压缩包内两个文件，一</description>
      <content:encoded><![CDATA[<p>明天要考数据库应用了，今天仍然忍不住把校内踩踩小工具写完。</p>
<p>上次被打击了，人家刷人气的工具是建立一个平台进行互踩，但是安全性存在问题。我自己写的这个小东西能在校内限制范围内刷50个相同区域的页面(校内限制次数是100
，可以执行两次，以后再执行就必须到网页输入验证码)，然后通过他人回踩来提高人气。</p>
<p>纯粹是自己写着玩，几乎没有什么应用价值，不过既然写了这么久，也就放上来，大家把玩一下。</p>
<p>压缩包内两个文件，一个xml保存帐号密码，用文本编辑器就可以编辑，另外一个是jar文件，在cmd下面用&quot;java -jar
XiaoneiCaiCai.jar&quot;运行。</p>
<p>纯属娱乐，水平很菜，大家不要喷我。</p>
<p><a href="../../static/images/2009/06/xiaoneicaicai.rar">猛击这里下载xiaoneicaicai</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>校内小工具告一段落</title>
      <link>https://blog.alswl.com/2009/06/xiaonei-gadgets-come-to-an-end/</link>
      <pubDate>Fri, 12 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/xiaonei-gadgets-come-to-an-end/</guid>
      <description>这段时间在写校内小工具，开心农场小外挂，刷刷人气的小外挂。 结果开心农场的FramKey改了算法，由时间参数改为flash中(5, 3)这点RGB颜色，而且返回的JSON也重新加密了。我对AS3不懂，而且破解算法也不是我强项，就暂停开心农场外挂的开发。 想把这个工具转为校内刷人气的，原理就是访问大量用户，可能会有一定几率其他用户回访。这个不难写，我只要用爬虫去爬就可以获得大量相关用户，但是爬着爬着，发现</description>
      <content:encoded><![CDATA[<p>这段时间在写校内小工具，开心农场小外挂，刷刷人气的小外挂。</p>
<p>结果开心农场的FramKey改了算法，由时间参数改为flash中(5,
3)这点RGB颜色，而且返回的JSON也重新加密了。我对AS3不懂，而且破解算法也不是我强项，就暂停开心农场外挂的开发。</p>
<p>想把这个工具转为校内刷人气的，原理就是访问大量用户，可能会有一定几率其他用户回访。这个不难写，我只要用爬虫去爬就可以获得大量相关用户，但是爬着爬着，发现校内
只允许在一段时间内查看100用户页面，否则会有验证码，而且爬时候还不能并发。这样一来，就需要手工输入验证码，刷的效率会大打折扣。</p>
<p>我同学下了一个刷人气的，输入帐号后几乎人气是1秒一个，把玩了一会，感觉是在服务器上存储了所有使用这个软件的人的账号，然后在服务器上进行互刷，这个想法相当于D
ispatch刷人气了，那完全不是我这个单机小工具能够媲美的了。</p>
<p>这种速度狠狠的打击了我，再继续开发就不得不加入图形界面来输入验证码，本来想写着玩的一个小工具，会成为一个复杂的开发。我只能暂时停止继续写这个工具，投身到课程
设计的洪流中去了。</p>
<p>当然，这小东西花了我三天时间，也不是一点收获没有，我学会了用XOM持久化对象来保存信息，学会了用正则来获取Html中的信息，学会了用java.net.*操作
Get/Post，学会了操作cookie，学习正确使用I/O系统，学习操作文件，理解Try/Catch更深一点，学会使用注解生成javadoc。</p>
<p>我所在的学校并没有开设Java课程，自己学习时候是直接写jsp的，通过这一次学习，掌握了很多原来不会的知识。</p>
<p>好了，再写就成报告了，就这样了，美好的一天又开始了，海绵宝宝，我们去抓水母吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用XOM类库对Java对象进行序列化</title>
      <link>https://blog.alswl.com/2009/06/xom-class-library-to-use-java-objects-serialization/</link>
      <pubDate>Wed, 10 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/xom-class-library-to-use-java-objects-serialization/</guid>
      <description>校内工具需要保存用户名和帐号，我就想把帐号信息作为一个XiaoneiUser类，然后对其进行对象持久化。 Google下的方法有好几种方法进行持久化，JDOM， DOM4J, SAX等。我看了之后，感觉都比较麻烦，我个人比较喜欢使用jdk自带的工具，但是查阅jdk api之后，感觉使用 javax.xml.* 下工具开发更加困难。 我仅仅是需要对一个简单的对象进行持久化来保存数据，并不需要太多太复杂的功能。最后我决定使用《Thinking in</description>
      <content:encoded><![CDATA[<p>校内工具需要保存用户名和帐号，我就想把帐号信息作为一个XiaoneiUser类，然后对其进行对象持久化。
Google下的方法有好几种方法进行持久化，JDOM， DOM4J,
SAX等。我看了之后，感觉都比较麻烦，我个人比较喜欢使用jdk自带的工具，但是查阅jdk api之后，感觉使用 <code>javax.xml.*</code> 下工具开发更加困难。
我仅仅是需要对一个简单的对象进行持久化来保存数据，并不需要太多太复杂的功能。最后我决定使用《Thinking in Java》推荐的开源类库：XOM
<a href="http://www.xom.nu">猛击这里打开www.xom.nu</a> 友情提示一下，网站可以打开，但是下载的连接貌似被墙了，至少我教育网连不上去。推荐
一个在线代理服务器古狗在线代理（<a href="http://www.ggproxy.com/">猛击这里打开</a>），通过它就可以下载类库了。
使用类库非常简单，我这里提供个小例子。XiaoneiUser类</p>
<pre tabindex="0"><code>package cn.dddspace.xiaonei.bean;

import java.io.OutputStream;

import nu.xom.*;

public class XiaoneiUser {

    /**

    * 用户Email  
    */
    private String userEmail;

    /**

    * 用户Password  
    */
    private String userPassword;

    public String getUserEmail() {

        return userEmail;

    }

    public void setUserEmail(String userEmail) {

        this.userEmail = userEmail;

    }

    public String getUserPassword() {

        return userPassword;

    }

    public void setUserPassword(String userPassword) {

        this.userPassword = userPassword;

    }

    /**

    * 将类转换为XML  
    *   
    * @return  
    */
    public Element getXML() {

        Element userE = new Element(&#34;xiaoneiUser&#34;);

        Element userEmailE = new Element(&#34;userEmail&#34;);

        userEmailE.appendChild(userEmail);

        Element userPasswordE = new Element(&#34;userPassword&#34;);

        userPasswordE.appendChild(userPassword);

        userE.appendChild(userEmailE);

        userE.appendChild(userPasswordE);

        return userE;

    }

    /**

    * 复制构造函数  
    *   
    * @param xiaoneiUser  
    */
    public XiaoneiUser(Element xiaoneiUser) {

        userEmail = xiaoneiUser.getFirstChildElement(&#34;userEmail&#34;).getValue();

        userPassword = xiaoneiUser.getFirstChildElement(&#34;userPassword&#34;)

            .getValue();

    }

    /**

    * 构造函数  
    *   
    * @param userEmail  
    * @param userPassword  
    */
    public XiaoneiUser(String userEmail, String userPassword) {

        this.userEmail = userEmail;

        this.userPassword = userPassword;

    }

    /**

    * Format输出函数  
    *   
    * @param os  
    * @param doc  
    * @throws Exception  
    */
    public void format(OutputStream os, Document doc) throws Exception {

        Serializer serializer = new Serializer(os, &#34;UTF-8&#34;);

        serializer.setIndent(4);

        serializer.setMaxLength(60);

        serializer.write(doc);

        serializer.flush();

    }

}
</code></pre><p>Test类入口函数</p>
<pre tabindex="0"><code>/**
 * @title Test.java
 * @author ddd
 * @time 2009-6-10 16:35:36
 * @site http://log4d.com
 */
package cn.dddspace.xiaonei.test;

import java.io.BufferedOutputStream;

import java.io.File;

import java.io.FileNotFoundException;

import java.io.FileOutputStream;

import cn.dddspace.xiaonei.bean.XiaoneiUser;

import nu.xom.*;

public class Test {

/**

* @param args  
* @throws Exception   
* @throws FileNotFoundException   
*/  
public static void main(String[] args) throws FileNotFoundException, Exception
{

XiaoneiUser user = new XiaoneiUser(&#34;a@a.com&#34;, &#34;123&#34;);

  
//序列化user为xml文档

Document doc = new Document(user.getXML());

//输出到屏幕

user.format(System.out, doc);

//输出到XML文件user.xml

user.format(new BufferedOutputStream(new FileOutputStream(

&#34;user.xml&#34;)), doc);

  
//反序列化XML文件为XiaoneiUser对象

Document doc2 = new Builder().build(&#34;user.xml&#34;);

Element element = doc2.getRootElement();

XiaoneiUser user2 = new XiaoneiUser(element);

//输出对象信息，验证对象

System.out.println(user2.getUserEmail());

System.out.println(user2.getUserPassword());

}

}
</code></pre><p>代码非常简单，如果要进行简单的对象序列化，我觉得这个400kb的类库非常实用</p>
]]></content:encoded>
    </item>
    <item>
      <title>java.net.*操作session/GET/POST方法</title>
      <link>https://blog.alswl.com/2009/06/java-net-operation-session-get-post-method/</link>
      <pubDate>Tue, 09 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/java-net-operation-session-get-post-method/</guid>
      <description>终于又考完一门试，开始做课程设计了，结果课程设计给工作室一个尾气3个月的项目，而这次的先用我写的贴吧放上去，我变得暂时空闲了，开始着手写校内开心农场小工具- 全能拖拉机。 首先要解决的就是校内登录的问题，那就是Get/Post方法了，还有用户状态保存，就是session的操作。Java不同于C#，那位可以集成系统 的浏览器或者之间创建一个Browser。 开始写了自己的第一个版本。 import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.net.MalformedURLException; import java.net.ProtocolException; import java.net.URL;</description>
      <content:encoded><![CDATA[<p>终于又考完一门试，开始做课程设计了，结果课程设计给工作室一个尾气3个月的项目，而这次的先用我写的贴吧放上去，我变得暂时空闲了，开始着手写校内开心农场小工具-
全能拖拉机。 首先要解决的就是校内登录的问题，那就是Get/Post方法了，还有用户状态保存，就是session的操作。Java不同于C#，那位可以集成系统
的浏览器或者之间创建一个Browser。</p>
<p>开始写了自己的第一个版本。</p>
<pre tabindex="0"><code>import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.net.HttpURLConnection;

public class FarmerHelper {

/**

* @param args  
* @throws ProtocolException  
*/  
public static void main(String[] args) throws ProtocolException {

String loginUrlStr = &#34;http://login.xiaonei.com/Login.do&#34;;

String homeUrlStr = &#34;http://home.xiaonei.com/Home.do&#34;;

URL loginUrl = null;

URL homeUrl = null;

HttpURLConnection loginConn = null;

HttpURLConnection homeConn = null;

try {

loginUrl = new URL(loginUrlStr);

homeUrl = new URL(homeUrlStr);

try {

loginConn = (HttpURLConnection) loginUrl.openConnection();

homeConn = (HttpURLConnection) homeUrl.openConnection();

} catch (IOException e) {

print(&#34;Conn&#39;t open the url connection!&#34;);

e.printStackTrace();

}

} catch (MalformedURLException e) {

print(&#34;Illegal URL!&#34;);

e.printStackTrace();

return;

}

loginConn.setRequestMethod(&#34;POST&#34;);

loginConn.setRequestProperty(&#34;User-Agent&#34;,

&#34;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.0.10)&#34;

+ &#34; Gecko/2009042316 Firefox/3.0.10&#34;);

loginConn.setRequestProperty(&#34;Keep-Alive&#34;, &#34;300&#34;);

loginConn.setRequestProperty(&#34;Connection&#34;, &#34;keep-alive&#34;);

loginConn.setRequestProperty(&#34;email&#34;, &#34;alswlwangzi@163.com&#34;);

loginConn.setRequestProperty(&#34;password&#34;, &#34;xh77Gffb_i&#34;);

loginConn.setRequestProperty(&#34;submit&#34;, &#34;登录&#34;);

loginConn.setRequestProperty(&#34;Keep-Alive&#34;, &#34;300&#34;);

try {

loginConn.connect();

String headerName = null;

String cookie = &#34;&#34;;

/*

* for (int i=0; (headerName =  
* loginConn.getHeaderFieldKey(i))!=null; i++) { if  
* (headerName.equals(&#34;Set-Cookie&#34;)) { cookie =  
* loginConn.getHeaderField(i); print(cookie); } }  
*/  
cookie = loginConn.getHeaderField(&#34;Set-Cookie&#34;);

print(cookie);

homeConn.setRequestProperty(&#34;Cookie&#34;, cookie);

homeConn.setRequestMethod(&#34;GET&#34;);

homeConn.connect();

BufferedReader in = new BufferedReader(new InputStreamReader(

homeConn.getInputStream()));

String lineStr = null;

while ((lineStr = in.readLine()) != null) {

// print(lineStr);

print(new String(lineStr.getBytes(&#34;GBK&#34;), &#34;UTF-8&#34;));

}

} catch (IOException e) {

print(&#34;conn&#39;t connect to the server!&#34;);

e.printStackTrace();

}

}

private static void print(Object o) {

System.out.println(o);

}

}
</code></pre><p>想法总是好的，现实总是残酷的，调试很久，用WireShark抓包，都是有Length
Required错误，这个比较头疼，我感觉是我session传递的问题（其实不是，后来发现是Post的格式问题），于是网上找来一个Session操作类。</p>
<p><a href="../../static/images/upload_dropbox/200906/cookiemanager.java">猛击这里下载cookiemanager</a> 同时你可以参考这个类作者的文章
<a href="http://www.hccp.org/java-net-cookie-how-to.html">猛击这里打开HOW-TO: Handling cookies using the java.net.* API</a>，谢谢这位外国朋友的帮助。 可惜尽管有这个外国朋友帮助，我写了第二个版本，仍然遇到了相同问题，Length
Required&hellip; 崩溃了，开始查找网络编程书，同时参考WireShark的抓包，我惊讶的发现，我把数据域写到了Headers里面去了。
这个致命性的错误导致服务器不能找到正确的数据，并且没有提供数据域的大小Content-Length，所以导致服务器报错。
最后再借花献佛，送上一个完整操作Http GET/POST的类<a href="../../static/images/upload_dropbox/200906/httprequestproxy.java">猛击这里下载httprequestproxy</a>依然感谢原作者，</p>
<p><a href="http://benlsoft.javaeye.com/blog/97059">猛击这里打开原文链接</a>友情提示一下，这个类是07年写的，里面有一些注释说明在1.4和1.5下几个参数不一样，我没有亲测，建议使用1.5
的设置 嗯，有这两个类，明天工作应该会轻松一些，继续fighting!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Mp3Lrc的可执行文件</title>
      <link>https://blog.alswl.com/2009/05/the-executable-file-mp3lrc/</link>
      <pubDate>Tue, 26 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/the-executable-file-mp3lrc/</guid>
      <description>早上把代码输出成了Runnable Jar，生成一个jar格式的文件，只要是有JavaSE的电脑都可以运行了。 当然，不是双击运行，进入CMD，然后进入jar文件所在文件夹，运行＂java -jar Mp3Lrc.jar＂ 就会出来提示输入Mp3根目录和歌词根目录，把两个目录输入就可以运行了。 猛击这里下载Mp3Lrc.rar 这个程序是自己用的，可能存在Bug，由于会操作文件，请在使用前备份重要资料（虽然根本没有删</description>
      <content:encoded><![CDATA[<p>早上把代码输出成了Runnable Jar，生成一个jar格式的文件，只要是有JavaSE的电脑都可以运行了。</p>
<p>当然，不是双击运行，进入CMD，然后进入jar文件所在文件夹，运行＂java -jar Mp3Lrc.jar＂</p>
<p>就会出来提示输入Mp3根目录和歌词根目录，把两个目录输入就可以运行了。</p>
<p><a href="../../static/images/upload_dropbox/200905/mp3lrc.rar">猛击这里下载Mp3Lrc.rar</a></p>
<p>这个程序是自己用的，可能存在Bug，由于会操作文件，请在使用前备份重要资料（虽然根本没有删除命令，只有复制命令）</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java写的Mp3歌词复制器</title>
      <link>https://blog.alswl.com/2009/05/lyrics-written-in-java-replicator-mp3/</link>
      <pubDate>Mon, 25 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/lyrics-written-in-java-replicator-mp3/</guid>
      <description>大家可能会遇到这样的情况，Mp3里有很多歌，电脑上也有很多相同的歌，但是有歌词。把歌词同步到Mp3播放器非常麻烦，我以前用千千静听导入目录，然后逐个播放，或 者用一个软件从网上搜索到Mp3播放器。 千千静听或者其他播放器都会有一个选项是设置歌词存储位置的，一般来说，我们听过的歌都是会自动下载歌词到这个文件夹，其实 我们完全可以不必大费周折去找lrc，只要把这个歌词文件夹和Mp3播放器同步就可以了。 以前就</description>
      <content:encoded><![CDATA[<p>大家可能会遇到这样的情况，Mp3里有很多歌，电脑上也有很多相同的歌，但是有歌词。把歌词同步到Mp3播放器非常麻烦，我以前用千千静听导入目录，然后逐个播放，或
者用一个软件从网上搜索到Mp3播放器。 千千静听或者其他播放器都会有一个选项是设置歌词存储位置的，一般来说，我们听过的歌都是会自动下载歌词到这个文件夹，其实
我们完全可以不必大费周折去找lrc，只要把这个歌词文件夹和Mp3播放器同步就可以了。
以前就想写一个东西完成这个麻烦的工程，现在贴吧1.0完成了，可以休息几天，晚上花了一点时间用Java写了一个这样的小东西。
如果大家碰到和我一样的麻烦，可以试试。呃，时间仓促，没有图形界面，而且必须是Java程序员才能用，因为我这儿只提供了源码&hellip;.</p>
<pre tabindex="0"><code>package ddd;

import java.io.BufferedReader;

import java.io.File;

import java.io.IOException;

import java.io.InputStreamReader;

public class App {

/**

* @author alswl  
* @site dddspace.cn  
* @param args  
* @throws IOException  
*/  
public static void main(String[] args) throws IOException {

String pathMp3;

String pathLrc;

BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

print(&#34;请输入Mp3根目录&#34;);

pathMp3 = in.readLine();

print(&#34;请输入Lrc目录&#34;);

pathLrc = in.readLine();

copyLrc(pathMp3, pathLrc);

}

private static void copyLrc(String mp3sPath, String lrcsPath) {

String pathMp3 = mp3sPath;

String pathLrc = lrcsPath;

File folderMp3 = new File(pathMp3);

File folderLrc = new File(pathLrc);

if (!folderMp3.isDirectory() || !folderLrc.isDirectory()) {

print(&#34;文件夹错误&#34;);

return;

}

File[] mp3s = folderMp3.listFiles();

File[] lrcs = folderLrc.listFiles();

for (File mp3 : mp3s) {

if (mp3.isDirectory()) {

copyLrc(mp3.toString(), lrcsPath);

} else {

for (File lrc : lrcs) {

String mp3Name = mp3.getName().substring(0,

mp3.getName().length() - 4);

String lrcName = lrc.getName().substring(0,

lrc.getName().length() - 4);

if (mp3Name.equals(lrcName)) {

print(&#34;!&#34; + lrc.toString() + &#34;to &#34;

+ folderMp3.toString());

runCmd(&#34;&#34;&#34; + lrc.toString() + &#34;&#34;&#34;, &#34;&#34;&#34;

+ folderMp3.toString() + &#34;&#34;&#34;);

}

}

}

}

}

private static void print(Object s) {

System.out.println(s);

}

private static void runCmd(String s1, String s2) {

Runtime rt = Runtime.getRuntime();

try {

rt.exec(&#34;cmd /c copy &#34; + s1 + &#34; &#34; + s2);

} catch (Exception e) {

e.printStackTrace();

}

}

}
</code></pre><p>09_05_26新增 jar格式的可执行文件链接，<a href="http://log4d.com/2009/05/26/the-executable-file-mp3lrc">猛击这里打开</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Struts2中Ajax的使用</title>
      <link>https://blog.alswl.com/2009/05/struts2-in-the-use-of-ajax/</link>
      <pubDate>Sat, 23 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/struts2-in-the-use-of-ajax/</guid>
      <description>贴吧1.0差不多可以完成了，进入界面美化，我服务器验证写完之后，开始用jQuery写js。 使用了jQuery的UI，后来想加入Ajax验证，但是遇到了问题： 09-05-23 07:53 WARN [org.apache.struts2.dispatcher.Dispatcher] - Could not find action or result There is no Action mapped for namespace / and action name AjaxLogin. - [unknown location] 我整整找了一个多小时，曾以为是action name的问题或者是package name, package namespace 的问题，为此我特意重新学习了一下他们的使用方法，但是仍然没有效果。 最后，终于在Google找到了一些资料： struts2 json</description>
      <content:encoded><![CDATA[<p>贴吧1.0差不多可以完成了，进入界面美化，我服务器验证写完之后，开始用jQuery写js。</p>
<p>使用了jQuery的UI，后来想加入Ajax验证，但是遇到了问题：</p>
<p>09-05-23 07:53 WARN [org.apache.struts2.dispatcher.Dispatcher] - Could not
find action or result</p>
<p>There is no Action mapped for namespace / and action name AjaxLogin. -
[unknown location]</p>
<p>我整整找了一个多小时，曾以为是action name的问题或者是package name, package namespace
的问题，为此我特意重新学习了一下他们的使用方法，但是仍然没有效果。</p>
<p>最后，终于在Google找到了一些资料：</p>
<p><a href="http://huqilong.blog.51cto.com/53638/136802">struts2 json jquery 集成详解</a>来自
户起龙的博客</p>
<p>我本来以为Struts/lib下面的json-lib-2.1.jar就可以了，而且启动Tomcat没有任何报错，居然要另外一个jar，叫做json-
plugin</p>
<p>下载地址：<a href="http://code.google.com/p/jsonplugin/downloads/list">猛击这里下载</a></p>
<p>使用这个插件之后，本以为轻松搞定，但是仍然还是这个错误！！！</p>
<p>怎么可能？！我怒了，翻开Struts2的文档，文档用的是DWR，已经使用taglib封装了，再查看json-plugin的文档，仍然未果！！</p>
<p>最后逼急了，使用这篇文章 《在Struts 2中使用JSON Ajax支持》<a href="http://webservices.ctocio.com.cn/tips/424/7670924.shtml">猛击这里打开</a>，重新写了一个Action和一个简单的jsp页面，使用最淳朴的<submit>提交。终于可以成功了，数据交
换能够明显的在FireBug下看到。</p>
<p>这种情况的话，据我猜测，应该是我原来使用的&lt;s:form&gt;标签的问题，如果使用简单的<form>就应该可以避免了。</p>
<p>09_05_24修正</p>
<p>之前说是&lt;s:form&gt;的问题，而用<form>可以解决，结果我发现<form>也不行，直接返回当前页面，这就比较郁闷了，最后，我把<form>去除，只留下
<input type="submit">就可以了，不好意思，让Strut2蒙冤了。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
