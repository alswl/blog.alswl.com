<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>软件开发和项目管理 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 软件开发和项目管理 on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jan 2014 00:20:06 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从 SVN 到 Git，找回丢失的历史</title>
      <link>https://blog.alswl.com/2014/01/renamed-svn-to-git/</link>
      <pubDate>Tue, 21 Jan 2014 00:20:06 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2014/01/renamed-svn-to-git/</guid>
      <description>前段时间在将公司的 SVN 项目迁移到 Git 上面去，遇到一个很少见的问题： 有一个小伙伴使用 git-svn 做 rename 操作时候，将一个目录 svn mv 了， 导致新目录只存了最近几个月提交历史，丢失了历史信息。对团队开发而言， 历史提交是非常宝贵的财产，我们想了一些办法，把这些数据提取出来。
# 找出丢失之前的版本，列出丢失目录上层的操作记录。 svn log -l 2000 svn://log4d.com/trunk/apps/ios/ | less # 将重命名之前的版本拷贝到一个临时目录 svn copy svn://log4d.com/trunk/apps/ios/nami@43252 svn://log4d.com/trunk/apps/ios/nami_lost # 准备现有代码到 Git git svn clone svn://log4d.com/ -T trunk/apps/ios/nami -t tags -b branches -r 13532 nami # 修改 .git/config 来加入丢失的历史数据 Remote [svn-remote &amp;#34;svn-lost&amp;#34;] url = svn://log4d.com fetch = trunk/apps/ios/nami_lost:refs/remotes/trunk-lost # 并抓取 Remote 内容 git svn fetch # Rebase 新代码到恢复过来的历史记录上 git checkout master git rebase --committer-date-is-author-date trunk-lost 其中注意的是手动添加一个 svn-remote 地址为历史数据副本地址。 还有就是 rebase 时候参数 --committer-date-is-author-date 可以保证 rebase 不会造成提交时间被修改，方便回溯。</description>
    </item>
    
    <item>
      <title>读《人件》</title>
      <link>https://blog.alswl.com/2013/04/peopleware/</link>
      <pubDate>Wed, 10 Apr 2013 23:35:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/04/peopleware/</guid>
      <description>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要， 还是通过语言/工具来约束人重要」。 我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。 如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。 并不是静态编译和工具检查就能搞定了。
我愤愤的在 QQ 对话框中写道：
我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学 后来痛苦与代码质量，阅读了《重构》，开始坚信代码质量决定产品质量 现在痛苦于人和语言的冲突，动态和静态的冲突，我想读《人件》了
人件已经绝版，只能在找线上版，我花了两个星期把它读完。 书中给了我一部分答案，另外还有一些意外的收获。
《人件》其实讲了一件事情：怎样将脑力劳动者管理好，打造出一个高效的团队。
《人件》@豆瓣： http://book.douban.com/subject/1108725/
《人件》在线阅读地址： http://book.zi5.me/books/read/2206
吐槽：翻译太烂太烂太烂了，下次要看直接去看翻译版。
以人为本 我们工作的主要挑战，与其说来源于技术，不如说来源于团队成员本身
技术人员转成项目经理经理之后，往往继续用工程化思维管理人员， 认为人是可以设计成标准化接口，是可以替换的。很可惜，这种想法不是那么 有效。
因为脑力劳动和体力重复劳动不一样，不是在卖汉堡这种重复工作， 而是需要创造、思考和发明的工作。软件经理需要提供有限额的错误机会。 错误无法完全避免，并且是工作内容的健康组成部分。一旦硬性阻止犯错， 会让团队成员失去创造的勇气。 我相信这也是为什么 Facebook 早期会践行「Break it Down」。
何不双赢 西班牙人的理论坚持认为地球上只有一个固定数量的价值， 因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富。 而英国人的理论认为价值可以通过天才和技术创造出来。因此英国就产生了工业革命， 而西班牙人就转动起了车轮，开始开拓疆土和剥削在新大陆的印第安人。 他们从海上运回大量的黄金， 他们所有努力带来的却是通货膨胀（太多的金钱追逐太少的有用货物）。
我坚信公司和员工并不是对立面的，双赢才是正确的路线。 大部分情况下，我愿意牺牲个人时间和精力来完成公司的任务。 前提就是对产品有认同感，对公司有归属感。
最好和最坏 作者通过一个持续两年，有来自 92 个公司的 600 多名开发程序员参加的比赛， 分析出以下数据：
成绩最好与成绩最差的人之间的绩效比率是10 : 1。 最好选手成绩大约是中等成绩选手成绩的2.5倍。 成绩中等以上的一半选手与另外一半选手的绩效比是2 : 1 外刊 IT 评论的 为什么程序员的工作效率跟他们的工资不成比例 一文中也提供一些数据支持。
我离最好还有很长的距离，但是我相信个人能力是可以提升的， 并且在个人能力上面的投资汇报比极高。
高效工作的秘诀 进入顺流：咦？怎么时间过得这么快？！ 邮件比电话更不容易打乱人的思绪 团队的力量 团结起来，工作的更高效更开心 有目标的团队，1 + 1 &amp;gt; 2 为一个共同的目标走到一起 优秀的团队里的成员，不会因为钱、阶层、晋升的问题离开团队 优秀的团队往往是带有个性的 《人人都是产品经理》中当时讲了一个愿景（Vison）问题， 我相信一个好的愿景可以吸引更多高质量人才，为赚钱而创建的团队是不会长久的。</description>
    </item>
    
    <item>
      <title>软件开发中的角色扮演</title>
      <link>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</guid>
      <description>说到软件开发的过程、环节等等，我印象里只剩下一大堆术语和一些流程的大概，但是因为缺乏正规开发的经验，所以并没有对软件开发中每个人的角色有深入理解，今天在周末 检查Delicious Temp标签时候，看到 圆木菠萝头 的这片文章，收获颇丰，现在转载与大家分享。
原文链接：[ 软件开发中的角色扮演 - 软件开发 - 圆木菠萝罐](http://blog.boluotou.com/Developer/2009/06/S oftware_Role) （我稍微调了一下格式，没有修改文章内容 ^_^）
××××××XXX分哥线XXX×××××××
商业软件开发并不是只有一个编程的人，而是可以分为不同的角色。
不同的软件公司因为规模大小性质各不相同，所以围绕软件的角色也各不相同。这就好比在重点学校里面分级很明确，每科有个老师，每个年级每个班级都有各自的老师，也有主 任书记校长支持角色。而在电影《一个都不能少》级别的学校里面，往往一个老师兼职从语文教到体育，年级从一年级到六年级。类似的说，一个大型的软件外包企业，外资企业 ，往往分工明确细致，每个人像螺丝钉一样在一起工作，让整个大机器得以运转。而在一个小型创业企业里面，往往一个人从接触客户，到开发产品到交付产品＊＊＊走完，整个 产品周期就一个人，甚至几个产品周期就一个人。
所以解释角色要针对性。远的不说，就拿我们的项目组来举例。我们项目组可以说一共有5种角色，开发（DEV），测试（QA），质量监督（SQA），技术主管 （Tech-Lead）,开发经理（SDM）。
1. 开发 （DEV） 编程能力 ★★★★★
业务认知 ★★☆
沟通能力 ★★☆
管理能力 N/A
全局观 N/A
开发就是大家经常说的编程的人。工作主要是写代码，其次是跟团队成员客户沟通。前后者比例大概是7：3的关系。开发是整个软件开发团队当中的最重要的角色之一，道理很 简单，产品出自于他们的亲手。说到开发，大家的印象就是整天呆在电脑面前，目光呆滞，头发凌乱的计算机人士。确实，整天和计算机打交道的人的确容易变成这样，因为开发 首要解决的问题就是如何用技术能力去解决客户的需求，而不是自己的形象怎么样。事实上这种情况在现代中得到很大改善，很多IT人士都很注重自身形象。
具体的工作不仅要写代码用算法实现业务逻辑，更要有程序设计的思想，大到整个的程序框架，小到某个小模块的扩展性兼容性，都是在开发真正写代码之前着重要考虑的方面。
现在的编程不像以前打孔式编程那么艰涩，大厂商开发的强大的编程工具（IDE）让编程事半功倍。然而技术在变简单的同时，客户需求又在日趋复杂化。而技术就是为了实现 业务逻辑，将业务逻辑抽象建模用计算机程序的方式表现出来，所以一个不懂业务逻辑的开发不会了解模块和模块之间如何协同工作，这便给工作带来很大的局限性。而如果一个 开发只关注每个模块之内的细节实现，那在现实中便不是一个好开发，至少不是一个好用的开发。
沟通方面，开发需要和测试，技术主管，开发经理，甚至客户方面沟通，所以必要的沟通能力还是很需要的。现在的软件不再是一个人在战斗，在团队作战中，开发有时需要和测 试讨论&amp;quot;某个软件Bug（缺陷）是不是Bug&amp;quot;，有时需要和技术主管讨论客户的某个需求到底是要实现什么内容，有时需要和开发经理讨论项目的进度是否需要推迟。
就开发的工作本身而言，是不太需要管理能力和全局观的，如果能够做好编程的工作之外，这两方面也比较强，可能就离升职加薪不远了。
2. 测试（QA） 编程能力 ★★☆
业务认知 ★★★★
沟通能力 ★★★
管理能力 N/A
全局观 ★☆
任何一个产品都需要测试，就好比制造业中如果生产了一批电灯，我们不能听制灯师傅说信得过而信得过，而得通过一系列模拟用户的行为来对电灯进行测试，指标合格后方可出 厂投入市场。
软件测试也一样，需要对开发者开发出来的模块，产品进行全方位的测试。
原则是&amp;quot;做正确的事&amp;quot;，让客户需求功能得到满足。
基本做事方法就是模拟客户的一切日常行为，包括一些极其变态的行为，考验软件在各个方面的情况下的可用性和稳定性。而这些&amp;quot;日常行为&amp;quot;便称之为测试用例（Test case），一个好的QA会设计出一套可以覆盖所有检查点（check point），又不重叠的测试用例，这套功底可以参考MECE方法。既然如此，QA就需要对整 个软件的业务相当熟悉，因为她（他）要知道在某个用户行为下，软件是否做出了正确的反应。
既然是模拟用户行为，那么QA就需要去手动&amp;quot;跑&amp;quot;测试用例。当一个系统很大的时候，测试用例极其多，光用手点一遍是非常耗费时间和人力的，所以QA可以做自动化测试。 所谓自动化，便是QA编写一些脚本代码，让计算机帮助去实现一些人为的行为，而不用自己手动点。所以这就需要QA做有一些代码编写能力。
测试方面有个重要的概念是黑盒测试和白盒测试。简单的说，黑盒测试就是在软件界面上用手点，不管后面的代码写得怎么样，只要我点击某个按钮或者其他元件的时候，结果是 我想要的就OK。所以叫&amp;quot;黑盒&amp;quot;，意思是看不到&amp;quot;里面的代码&amp;quot;。而白盒测试就是要直接审阅（review）代码，通过看代码发现业务逻辑，代码效率，后台数据操作等等 ，可以说比黑盒测试要细致得多，当然成本可能也更多。所以叫&amp;quot;白盒&amp;quot;，意思是透明的盒子，可以看到里面的代码。所以，白盒测试是需要QA有一定的编程能力的。</description>
    </item>
    
    <item>
      <title>用户权限设计的问题</title>
      <link>https://blog.alswl.com/2009/06/design-of-user-rights/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/design-of-user-rights/</guid>
      <description>问题 用户权限设计这一块，一直是一个我觉得比较难解决的问题。
以前我用了「伪继承」，虽然管理员继承了普通用户，但是数据库却是分开设计的。又或者压根没有继承关系，是两个不同的实体。
解决方案 这次在贴吧系统，有三个用户角色：普通用户、吧主、管理员，想设计的符合OO，但又要利于数据库的实现。就有几个问题需要解决：1.需要继承么；2.数据库怎么设计； 3.Hibernate怎么映射。最后参考几篇文章，设计成如下。
使用User类，Roll类，User具有一般用户属性，Roll负责角色，他们是1对1关系，最好在数据库有一张User- Roll的对应关系表。来标明这个User具有哪个Roll。
在我这个系统，Roll类有三种，分别对应三种角色：普通用户，吧主和管理员。
这种独立出Roll角色类的方法被称为基于角色的用户权限设计方法。
[caption id=&amp;ldquo;attachment_12439&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;300&amp;rdquo; caption=&amp;ldquo;User Roll UML类图&amp;rdquo;] [/caption]
我给出的这个其实还不完善，完整的解决方案应该还包含ACL列表，可以定制Roll对应ACL列表的对应，来修改某一个角色的权限。因为我的系统角色固定，而且系统规 模比较小，我所说的三种发难已经能够满足我的要求了。
参考资料 用户权限设计&amp;lt;猛击这里打开&amp;gt;
基于角色的用户权限设计问题&amp;lt;[猛击这里打开](http://blog.csdn.net/seapen/archive/2006/03/15/624734.a spx)&amp;gt;</description>
    </item>
    
    <item>
      <title>用户界面设计黄金原则</title>
      <link>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</link>
      <pubDate>Tue, 02 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</guid>
      <description>在《用户界面设计要素》一书（1997）中，T.Mandel提出了3条「黄金」知道规则：
让用户驾驭软件，而不是软件驾驭用户。那种在给用户的操作加上许多约束和限制的界面虽然设计容易，却往往难学难用。 尽可能减少用户的记忆。为此可建立易记的快捷键（例如Ctrl+p启动「打印」）；采用演进形式显示「提示」信息，以免要用户一次记忆大量信息。 保持界面的一致性。例如在同类产品中使用相同的设计规则；尽可能不改变用户已熟悉的操作功能键（例如用Ctrl+S保存文件）；设定界面的缺省状态。 最近停下了贴吧的下一步开发，恶补软件工程，为下一步开发做理论基础。 一边啃Rober C.大人写的《敏捷软件开发》。白天都浪迹在考研自习室（很是安静啊），更新变慢，勿怪。</description>
    </item>
    
    <item>
      <title>软件自然理论</title>
      <link>https://blog.alswl.com/2009/05/natural-theory-of-software/</link>
      <pubDate>Sun, 31 May 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/05/natural-theory-of-software/</guid>
      <description>所谓软件自然理论，就是说：一个优秀的软件，他的功能模块设计，应该与用户在完全没有接触过这个系统时候所想要的功能设计一致，用户觉得他想要的功能在什么地方，应该 怎样实现，那么这个功能就是应该在那里，就是应该这样实现。
这么说感觉上会很绕口，那么举个例子。Office就是一个比较优秀的软件，如果一个用户完全没有接触过Office（当然，必须具备基本的电脑使用水平），如果该用 户想对字体进行设置，那么他就觉得字体设置属于格式，就应该在格式菜单里面，用户去点击这个菜单，就找到了自己需要的功能。
其他的，比如WinRAR，IE浏览器，都是出色的软件，他们的模块设计也都是符合用户的想法的。
如果一个软件功能过于复杂，或者说功能的安排有很多方案，那么用户往往会难于在短时间内找到自己想要的功能，就会产生对该软件的「惰性」，也就是不想用这个软件了。比 如说AutoCAD,3DMax，如果想熟练使用，往往要经过一段时间的学习的。
ps:这个理论你肯定找不到的，Google也不会有，因为&amp;hellip;.这是我編出来忽悠继烨、道哥的&amp;hellip;.很不幸，他们纷纷上当&amp;hellip;.</description>
    </item>
    
    <item>
      <title>我在看设计模式</title>
      <link>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</link>
      <pubDate>Sun, 18 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</guid>
      <description>花了6天时间把创建型5种模式看完了，很有感触，但是感触不意味着我理解，我甚至私下里觉得OOD的设计模式不适合我现在做的那些程序，那些都是一次成型，根本谈不上 需求的改变。没有改变，就不需要OO思想。因为我这样的想法，我看起来很累。 我知道这些思想对我以后的发展很有帮助，会从思想上把我解救出来，我被这些新的设计想法激动着（虽然出来很多年，可是对于我来说完全是新的，呵呵```）。
嗯，坚持下去
这几天我也在想以后走IT哪一条路。想了好久，现在的想法是：计算机本质上是一种工具，软件的存在是为了计算机更好的服务。既然是一个工具，就要有工具的觉悟，就必须 不断适应生产力的发展，需要完善自身功能，也就是需求的变化。正是因为需求的变化，使得敏捷软件开发成为现在的主流。
呃我才看了几天设计模式，就说的这么狂激动了，激动了```</description>
    </item>
    
  </channel>
</rss>
