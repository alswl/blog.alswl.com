<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>flex on Log4D</title>
    <link>https://blog.alswl.com/tags/flex/</link>
    <description>Recent content in flex on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 22 Aug 2010 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/flex/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AzaAjaxChat笔记-实现</title>
      <link>https://blog.alswl.com/2010/08/azaajaxchat-notes-implementation/</link>
      <pubDate>Sun, 22 Aug 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/08/azaajaxchat-notes-implementation/</guid>
      <description>唔，继续整理笔记，这些是在代码编写中遇到的问题和解决办法的总结，不是 Turtial，问题有针对性，内容枯燥，路人可以直接忽略~ 一、Comet 服务器推技术 Comet 推技术，一句话概括，就是形成一个不断开的连接，使得服务器能主动向客户端发送信息。这种技术在交互性强的 Web 产品中应用的非常多，比如 GMail。Co met 的实现方式有两种：基于 AJAX 的长轮询（long-polling）方式和基于 Iframe 及 htmlfile 的流（streaming）</description>
      <content:encoded><![CDATA[<p>唔，继续整理笔记，这些是在代码编写中遇到的问题和解决办法的总结，不是 Turtial，问题有针对性，内容枯燥，路人可以直接忽略~</p>
<h2 id="一comet-服务器推技术">一、Comet 服务器推技术</h2>
<p>Comet 推技术，一句话概括，就是形成一个不断开的连接，使得服务器能主动向客户端发送信息。这种技术在交互性强的 Web 产品中应用的非常多，比如 GMail。Co
met 的实现方式有两种：基于 AJAX 的长轮询（long-polling）方式和基于 Iframe 及 htmlfile
的流（streaming）方式，具体两种实现方式可以参考<a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">Comet：基于 HTTP 长连接的&quot;服务器推&quot;技术</a>。</p>
<p>我计划把这个技术引入，成为一个亮点，第二种 Comet 实现方式过于复杂（GMail 使用的就是这种），我就尝试第一种。我在测试环境测试了基于 AJAX 的长轮询
（long-polling）方式。这种方式说白了就是在 Ajax 获取返回数据时候，在状态吗为 4（数据传输完成）情况随后进行下次查询。进行循环的查询。</p>
<p>这种 Long-polling 的轮询方式有点伪 Comet。相对于常见的定时查询，不同点是将&quot;查询-&gt;返回-&gt;再查询&quot;中间的一段断开时间进行重连接。最后因为技术
实现和开发时间，我决定放弃了 Comet 的实现。</p>
<p>PS：一个系统应该不仅仅是技术的堆积，也应该考虑其他的一些因素，是否有确实需求，开发效率问题。虽然我做了一些前期准备，最终还是没有加入 Comet，蛮可惜的。</p>
<h3 id="相关链接">相关链接：</h3>
<ul>
<li><a href="http://www.javaeye.com/topic/652949">一步一步打造 WebIM（1） - .net - dotnet - JavaEye 论坛 </a>（.net 使用 IHttpAsyncHandler 的实现）</li>
<li><a href="http://ued.sohu.com/article/118/comment-page-1">Comet&ndash;&ldquo;服务器推&quot;技术 - 搜狐 UED</a>（搜狐 UED 团队的一个小介绍）</li>
</ul>
<h2 id="二用户状态的处理">二、用户状态的处理</h2>
<p>开发时候遇到一个逻辑问题，具体描述如下：&ldquo;一个用户登录长时间不活动（比如直接关闭浏览器），系统需要判定此用户为离线。&ldquo;按照一般设计思路，这个动作应该由后台每
过一段时间自动（比如说 5 分钟）触发一次，如果用 Java 或.net 实现，会考虑设计一个后台运行的进程进行管理。而现在用的 PHP，我查了一下，似乎没有找到相应的
解决办法。</p>
<p>我尝试在系统中设定一个页面每隔几分钟触发一个动作，放置在 index.php 页面中，但是感觉这个设计有点鸡肋。</p>
<p>这个问题困惑我很久，最后参考了<a href="https://blueimp.net/ajax/">AJAX Chat</a>的源码，它的思路是在一个新用户上线时候，进行检测所
有用户距离上次其活动的时间来判定每个用户的离线状态。这个也不是最优想法（万一长时间没有用户登录怎么办？），但是比上面那个定时页面要好多了。</p>
<p>如果有 PHP 达人看到这个，望不惜赐教。</p>
<h2 id="三rtmp">三、RTMP</h2>
<p>RTPM 是一个流媒体传输的协议，我在 AzaAjaxChat 中用它进行视频聊天画面和音频传输。这块内容可以洋洋洒洒的写一大篇日志，我在这里只是简单罗列一下我用
到的相关内容。</p>
<blockquote>
<p>Real Time Messaging Protocol（实时消息传送协议协议）概述，实时消息传送协议是 Adobe
Systems 公司为 Flash 播放器和服务器之间音频、视频和数据传输开发的私有协议。它有三种变种： 1)工作在 TCP 之上的明文协议，使用端口 1935；
2)RTMPT 封装在 HTTP 请求之中，可穿越防火墙； 3)RTMPS 类似 RTMPT，但使用的是 HTTPS 连接；</p>
<p>RTMP 协议是被 Flash 用于对象，视频，音频的传输.该协议建立在 TCP 协议或者轮询 HTTP 协议之上。</p>
<p>RTMP 协议就像一个用来装数据包的容器，这些数据可以是 AMF 格式的数据，也可以是 FLV 中的视/音频数据。一个单一的连接可以通过不同的通道传输多路网络流。
这些通道中的包都是按照固定大小的包传输的。</p>
</blockquote>
<p>我使用 FMS 作为 RTPM 容器，Adobe FMS（Flash Media Server）是一款能够提供出色的 Flash
Video 流媒体播放功能的服务器软件。</p>
<p>FMS 提供一个强大 Script 可定制脚本的服务器流媒体引擎，通过这个引擎，允许创建和交付面向互联网任何用户群体的交互媒体应用及服务。FMS 还是 Adobe 公司
跨媒体解决方案中的一部分，针对诸如数据库连接访问、文件系统操作、服务访问等要求，可以同 Adobe Flash Player 与 Adobe AIR 一起来实现。</p>
<h2 id="四基于-flex-的流媒体传输">四、基于 Flex 的流媒体传输</h2>
<h3 id="41-官方-sample-stratus">4.1 官方 Sample-Stratus</h3>
<p>AzaAjaxChat 中最技术含量的地方在于语音视频聊天。Adobe 官网在 Flex 子类中提供了一个 Demo 名叫<a href="http://labs.adobe.com/technologies/stratus/samples/">Stratus</a>，正是一个聊天系统。从教程上看，Adobe 公司目前开放的 Stratus 是同时支
持视频和语音 P2P 的，同时，未来的 FMS 也可能会支持 P2P。</p>
<p>Adobe 的某个专家博客还针对 Stratus 有一篇相当详细的讲解，原文在此<a href="http://www.adobe.com/devnet/flashplayer/articles/rtmfp_stratus_app.html">Stratus service for developing end-to- end applications using RTMFP in Flash Player 10 | Adobe Developer Connection</a>，文中分析了
RTMFP（比 RTMP 更高阶的流媒体传输协议，支持 P2P）和 Stratus 的相关核心代码。我本想把这篇文章翻译，完成 10%之后，意外发现已经有人翻译了，地址
在此【通过 Stratus 服务器在 Flash Player 中使用 RTMFP 开发 点对点应用（一） &ndash; Windows Live】(<a href="http://snowyrock.spaces.live.com/Blog/cns!B8CBEB7169880B1D!1279.entry?wa=wsignin1.0&amp;sa=18">http://snowyrock.spaces.live.com/Blog/cns!B8CBEB7169880B1D!1279.entry?wa=wsignin1.0&amp;sa=18</a>
3740112)，<a href="http://snowyrock.spaces.live.com/blog/cns!B8CBEB7169880B1D!1278.entry?_c=BlogPart">通过 Stratus 服务器在 Flash Player 中使用 RTMFP 开发 点对点应用（二） &ndash; Windows Live</a>
。</p>
<p>同时可以参考其他例子<a href="http://www.cnblogs.com/beniao/archive/2009/04/28/1444159.html">FMS3 系列（五）：通过 FMS 实现时时视频聊天（Flash|Flex） - Bēniaǒ成长笔记 - 博客园</a>。</p>
<h3 id="42-azaajaxchat-视频语音核心代码">4.2 AzaAjaxChat 视频语音核心代码</h3>
<p>下面是核心代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span> <span class="k">function</span> <span class="nf">starChat</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">MouseEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//同时开始监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">doReceive</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//初始化一个网络连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetConnection</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//开始连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span><span class="o">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">rtmpUrl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//为这个连接添加事件，这个事件有返回连接状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">publicNc</span><span class="o">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">NetStatusEvent</span><span class="o">.</span><span class="nx">NET_STATUS</span><span class="p">,</span><span class="nx">onPublishNetStatusHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">microphone</span> <span class="o">=</span> <span class="nx">Microphone</span><span class="o">.</span><span class="nx">getMicrophone</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="nx">camera</span> <span class="o">=</span> <span class="nx">Camera</span><span class="o">.</span><span class="nx">getCamera</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">camera</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Alert</span><span class="o">.</span><span class="nx">show</span><span class="p">(</span><span class="s1">&#39;没有开启摄像头或者没有安装摄像头&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="nx">videoPublish</span><span class="o">.</span><span class="nx">attachCamera</span><span class="p">(</span><span class="nx">camera</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">onPublishNetStatusHandler</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">NetStatusEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//根据连接返回的状态信息判断是滞连接成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="o">==</span><span class="s2">&#34;NetConnection.Connect.Success&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n 发布连接建立成功&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetStream</span><span class="p">(</span><span class="nx">publicNc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">attachAudio</span><span class="p">(</span><span class="nx">microphone</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">attachCamera</span><span class="p">(</span><span class="nx">camera</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">client</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicNs</span><span class="o">.</span><span class="nx">publish</span><span class="p">(</span><span class="nx">publicName</span><span class="p">,</span><span class="s2">&#34;live&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">doReceive</span><span class="p">()</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">receiveNc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetConnection</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//开始连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">receiveNc</span><span class="o">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">rtmpUrl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//为这个连接添加事件，这个事件有返回连接状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">receiveNc</span><span class="o">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">NetStatusEvent</span><span class="o">.</span><span class="nx">NET_STATUS</span><span class="p">,</span><span class="nx">onReceiveNetStatusHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span> <span class="k">function</span> <span class="nf">onReceiveNetStatusHandler</span><span class="p">(</span><span class="nx">event</span><span class="o">:</span><span class="nx">NetStatusEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//根据连接返回的状态信息判断是滞连接成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="o">==</span><span class="s2">&#34;NetConnection.Connect.Success&#34;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n 接受连接建立成功&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">receiveNs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NetStream</span><span class="p">(</span><span class="nx">publicNc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Video</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">230</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="mi">173</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">video</span><span class="o">.</span><span class="nx">attachNetStream</span><span class="p">(</span><span class="nx">receiveNs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="nx">videoReceive</span><span class="o">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">video</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="nx">receiveNs</span><span class="o">.</span><span class="nx">play</span><span class="p">(</span><span class="nx">receiveName</span><span class="p">,</span><span class="s2">&#34;live&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">appMessage</span><span class="o">.</span><span class="nx">text</span> <span class="o">+=</span> <span class="s2">&#34;n&#34;</span> <span class="o">+</span><span class="nx">　event</span><span class="o">.</span><span class="nx">info</span><span class="o">.</span><span class="nx">code</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><h3 id="43-管道-netconnectionconnect">4.3 管道 NetConnection.connect()</h3>
<p>Flex 流媒体传输通过通道传输，在 NetConnection 之上建立连接，由于 RTMP 和 FMS 的存在，我们可以很方便的在网络流上写入和读取流媒体信息。Net
Connection.connect()支持 FMS 流媒体和本地文件，官方解释如下。</p>
<blockquote>
<p>在 Flash Player 或 AIR AIR 应用程序和 Flash Media Server 应用程序之间创建双向连接，NetConnection
对象如同客户端与服务器之间的管道。</p>
<p>如果未使用 Flash Media Server，请调用 NetConnection.connect()，以便从本地文件系统或 Web</p>
</blockquote>
<p>服务器中播放视频和 MP3 文件。有关支持的编解码器和文件格式的信息，请参阅 <a href="http://www.adobe.com/go/hardware_scaling_cn">http://www.adobe.com/go/hardware_scali ng_cn</a>。</p>
<h3 id="44-flashnetnetconnection-上找不到属性-onbwdone">4.4 flash.net.NetConnection 上找不到属性 onBWDone</h3>
<p>这个问题参考<a href="http://blog.csdn.net/xiang08/archive/2009/07/13/4343551.aspx">在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。解决办法。 - Xiang - CSDN 博客</a>，解决如下。</p>
<blockquote>
<p>在 flash.net.NetConnection 上找不到属性 onBWDone，且没有默认值。</p>
<pre tabindex="0"><code>_nc = new NetConnection();
c.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);
c.client = this;
c.objectEncoding = ObjectEncoding.AMF0;
c.connect(&#34;rtmp://localhost/oflaDemo&#34;);
</code></pre><p>首先添加_nc.client = this.</p>
<p>然后新建一个方法：<code>public function onBWDone():void{}</code></p>
<p>问题解决。</p>
</blockquote>
<h2 id="五javascript-和-flex-的交互">五、JavaScript 和 Flex 的交互</h2>
<p>页面上的 Flex 必须响应页面 JavaScript 的触发事件，Adboe 在设计 Flex 时候，预留了相互调用的端口 ExternalInterface，详情可以 Google 之，类似代码如下。</p>
<pre tabindex="0"><code>if (ExternalInterface.available) {
    ExternalInterface.addCallback(&#34;initParams&#34;, initParams);
    ExternalInterface.addCallback(&#34;playSound&#34;, playSound);
} else {
    this.appMessage.text += &#34;nJS 无法调用 Flash，请检查 Flash 环境&#34;;
}
</code></pre><p>但是这种调用方法存在着一个致命的问题：创建一个 swf 的 Object，当对这个 swf 做隐藏/显示的时候(display:none,display:block)
的时候，swf 的所有的注册的 javascritp 函数都会被干掉（ExternalInterface.addCall 方法）。这个是 Flex 的一个 BUG，现在也
还没有解决。</p>
<p>相关讨论可以参见<a href="http://rwl6813021.javaeye.com/blog/236344">Javascript 无法访问 Flex 问题~ - rwl6813021 - JavaEye 技术网站</a>，文中详细讨论了这个问题，并给出一个解决方案。</p>
<p>有一个折中的方案：即通过 LocationConnection（本地通讯，利用两个 swf 来进行交互）来处理，初始化一个调用的 client
swf，负责调用被隐藏的 swf 中的方法，这样就避开了直接通过 javascript 调用被隐藏的 swf 中的方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//1：client 发送端：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="n">var</span> <span class="n">ucallswfconn</span><span class="o">:</span><span class="n">LocalConnection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">function</span> <span class="nf">init</span><span class="o">():</span><span class="kt">void</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ucallswfconn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//注册 Javascritp 方法，网页调用该 flex 的方法，通过该方法中转，调用另外一个 flex 的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ExternalInterface</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="s">&#34;selectCallControl&#34;</span><span class="o">,</span><span class="n">flexSelectCallControl</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">function</span> <span class="nf">flexSelectCallControl</span><span class="o">(</span><span class="n">method</span><span class="o">:</span><span class="n">String</span><span class="o">,</span><span class="n">param</span><span class="o">:</span><span class="n">String</span><span class="o">):</span><span class="kt">void</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Alert.show(method+param);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//调用另外一端 swf 中的方法，参数：1:receiver 端监听的服务名称 2:方法名称 3:参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ucallswfconn</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&#34;ucallexternconn&#34;</span><span class="o">,</span><span class="s">&#34;&#34;</span><span class="o">+</span><span class="n">method</span><span class="o">,</span><span class="s">&#34;&#34;</span><span class="o">+</span><span class="n">param</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//2：receiver 接收端：
</span></span></span><span class="line"><span class="cl"><span class="c1">//add by polarbear, 2008.09.04, 本地通讯
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="o">.</span><span class="na">ucallexternConn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="o">.</span><span class="na">ucallexternConn</span><span class="o">.</span><span class="na">allowDomain</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ucallexternConn</span><span class="o">.</span><span class="na">client</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">ucallexternConn</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="s">&#34;ucallexternconn&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">error</span><span class="o">:</span><span class="n">ArgumentError</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span><span class="o">(</span><span class="s">&#34;连接失败&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>注意被调用的函数必须是 public 的。</p>
<p>我使用这个方法并没有成功，最后我采用的是将视频画面直接放在界面上（很丑，不得已为之）。上文的解决方案只是给出一个思路，感兴趣的话可以自己试试。</p>
<h2 id="六last">六、Last</h2>
<p>其实还有很多细节地方可以讲讲，我就不一一展开了。整理的文章就是这样，也没什么花样和娱乐，我都懒得加图片了~</p>
<p>祝大家周末愉快，最近我睡眠很不好，每天 6 点就醒了，中午补个觉去……</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Flex Builder3中的launch path设置</title>
      <link>https://blog.alswl.com/2009/11/flex-builder3-in-the-launch-path-is-set/</link>
      <pubDate>Tue, 24 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/flex-builder3-in-the-launch-path-is-set/</guid>
      <description>在Flex Builder3中，想运行或者调试一个Flex项目，有Run/Debug/Profile三种运行方式。当我点击这三种方式的按钮时，都会报出一下警告： Flash Player Not Found Flex Builder cannot locate the required version of Flash Player. You might need to install Flash Player 9 or reinstall Flex Builder. Do you want to try to run your application with the current version? 大意就是说没有找到Flash Player，有两个选项Yes/No。如果是Yes，则开启FireFox打开一个html页面，其中内嵌着swf文件。这个警告框还给出一个</description>
      <content:encoded><![CDATA[<p>在Flex
Builder3中，想运行或者调试一个Flex项目，有Run/Debug/Profile三种运行方式。当我点击这三种方式的按钮时，都会报出一下警告：</p>
<blockquote>
<p>Flash Player Not Found</p>
</blockquote>
<p>Flex Builder cannot locate the required version of Flash Player. You might
need to install Flash Player 9 or reinstall Flex Builder.</p>
<p>Do you want to try to run your application with the current version?</p>
<p>大意就是说没有找到Flash
Player，有两个选项Yes/No。如果是Yes，则开启FireFox打开一个html页面，其中内嵌着swf文件。这个警告框还给出一个&quot;<code>Adobe Flash Player downloads</code>&ldquo;的下载链接。我下载安装后依然无法解决这个问题。</p>
<p>每次点一下倒并不是很麻烦，可恶的是如果这样，就无法对项目进行调试，<code>trace()</code>输出也不会在Console输出。</p>
<p>经过我尝试，我发现问题其实是出在项目的执行方式上，修改一下几个地方就可以了。</p>
<p>点击菜单栏的<code>Run-&gt;Run Configurations</code>，在打开的对话框中找到<code>Main</code>中的<code>URL or Path to launch</code>，里面默认是<code>Use defaults</code>，现在我们把Debug/Profile/Run手工改成项目文件夹下对应的swf文件即可。</p>
<p><a href="../../static/images/upload_dropbox/200911/flex_launch_path.jpg">




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/200911/flex_launch_path.jpg" alt="flex_launch_path"  />

</a></p>
<p>这样修改之后，无论是运行还是调试，都能在一个Flash Player中进行，比在Firefox中方便的多了。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PylexChat可行性分析</title>
      <link>https://blog.alswl.com/2009/11/pylexchat-feasibility-analysis/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/pylexchat-feasibility-analysis/</guid>
      <description>PylexChat介绍 PylexChat取名自Python+Flex+Chat部 分缩写，这就意味着这个系统是基于Python+Flex的聊天系统。之所以做这个系统，源自我大学的最后一次课程设计，我不想浪费这最后一次可以供我发 挥自己想象力的机会。年后估计要参加工作了，毕业设计也不敢做这么有想法的课程设计。那就最后一次潇洒一下，做一个我完全没有接触过的东西。 我几乎不会Python，是最近一个月迷上这门</description>
      <content:encoded><![CDATA[<h2 id="pylexchat介绍">PylexChat介绍</h2>
<p>PylexChat取名自<strong>Python</strong>+<strong>Flex</strong>+<strong>Chat</strong>部
分缩写，这就意味着这个系统是基于Python+Flex的聊天系统。之所以做这个系统，源自我大学的最后一次课程设计，我不想浪费这最后一次可以供我发
挥自己想象力的机会。年后估计要参加工作了，毕业设计也不敢做这么有想法的课程设计。那就最后一次潇洒一下，做一个我完全没有接触过的东西。</p>
<p>我几乎不会Python，是最近一个月迷上这门强悍而简单的语言，我完全不会Flex，是最近1周时间才开始接触Flex。这意味着这次课程设计的
风险挺大。我花了几天的时间做了详细的可行性分析，分析了系统框架和GAE能够提供的服务和限制以及Flex/AIR能做的内容，否决了几个方案，最后总
结了一篇简单可行性分析（本文是一周时间慢慢形成的，并没有遵循正规的开发文档风格）。</p>
<h2 id="几个基本的概念">几个基本的概念</h2>
<p>内容出自<a href="http://zh.wikipedia.org/">维基百科</a></p>
<h3 id="python">Python</h3>
<p>Python，是一种面向对象、直译式计算机程序设计语言，也是一种功能强大而完善的通用型语言，已经具有十多年的发展历史，成熟且稳定。</p>
<p>这种语言具有非常简捷而清晰的语法特点，适合完成各种高层任务，几乎可以在所有的操作系统中运行。</p>
<p>目前，基于这种语言的相关技术正在飞速的发展，用户数量急剧扩大，相关的资源非常多。</p>
<h3 id="flex">Flex</h3>
<p>Adobe Flex是最初由Macromedia公司在2004年3月发布的，基于其专有的Macromedia Flash平台，它是涵盖了支持RIA（Rich
Internet Applications）的开发和部署的一系列技术组合。</p>
<p>FLEX支持创建静态文件，该文件使用解释编译方式并且不需要购买服务器许可证就可以在线部署。</p>
<p>Flex的目标是让程序员更快更简单地开发RIA应用。在多层式开发模型中，Flex应用属于表现层。</p>
<p>Flex 采用GUI界面开发，使用基于XML的MXML语言。Flex 具有多种组件，可实现Web Services，远程对象，drag and
drop，列排序，图表等功能；FLEX内建动画效果和其它简单互动界面等。相对于基于HTML的应用（如PHP、ASP、JSP、ColdFusion
及CFMX等）在每个请求时都需要执行服务器端的模板，由于客户端只需要载入一次，FLEX应用程序的工作流被大大改善。FLEX的语言和文件结构也试图
把应用程序的逻辑从设计中分离出来。</p>
<p>Flex 服务器也是客户端和XML Web Services及远程对象（Coldfusion CFCs，或Java类，等支持Action Message
Format的其他对象）之间通讯的通路。</p>
<h3 id="air">AIR</h3>
<p>dobe AIR（AIR＝Adobe Integrated Runtime），开发代号为Apollo，是一个跨操作系统runtime
environment用来建造RIA，使用Flash、Flex、HTML与AJAX，可能部署为桌面应用程式。</p>
<p>AIR是Adobe针对网络与桌面应用的结合所开发出来的技术，可以不必经由浏览器而对网络上的云端程式做控制，也由于这是Adobe所开发的技术，因此能很顺利的与
Adobe旗下的Photoshop、Flash、Firework等应用程式来进行开发。</p>
<h3 id="google-app-engine">Google App Engine</h3>
<p>Google App Engine是一个开发、托管网络应用程序的平台，使用Google管理的数据中心。它在2008年4月发布了第一个beta版本。</p>
<p>Google App Engine使用了云计算技术。它跨越多个服务器和数据中心来虚拟化应用程序。 其他基于云的平台还有Amazon Web
Services和微软的Azure服务平台等。</p>
<p>Google App Engine在用户使用一定的资源时是免费的。支付额外的费用可以获得应用程序所需的更多的存储空间、带宽或是CPU负载。</p>
<h2 id="系统需要实现的功能">系统需要实现的功能</h2>
<p>我简单罗列一下：登录、群聊、私聊、注册（功能实现优先级由高到低排列）。</p>
<p>功能着实有点简单，不过这个系统的亮点在于跨平台，而不是功能的强大。我在设计时候会尽量考虑多些东西，方便以后扩展。</p>
<h2 id="数据交互实现方案">数据交互实现方案</h2>
<p>系统最主要也最难实现的部分是数据交互如何进行有效的交互。我总结了一下几种方法。</p>
<h3 id="1tcpip通信">1.TCP/IP通信</h3>
<p>一般的C/S模式程序都会考虑套接字连接方式，这是性能最高的交互方式。使用TCP/IP协议，能够有效的避免Python/Flex语言带来的数据交换问题。我查阅
了Flex文档，在<code>flash.net.Socket</code>下有套接字使用的API，这说明Flex在套接字支持上没有问题。接下来我查阅了GAE的文档，资料比较难找
，最后我查阅了[沙盒](<a href="http://code.google.com/intl/zh-CN/appengine/docs/java/runtime.html">http://code.google.com/intl/zh-CN/appengine/docs/java/runtime.html</a>
#The_Sandbox)的定义、Python/Java在GAE的限制（参考文献-[Will it play in AppEngine](<a href="http://groups.google.com/group/google-appengine-java/web/will-it-play-">http://groups.google.com/group/google-appengine-java/web/will-it-play-</a>
in-app-engine)），确定GAE不支持套接字和多线程。引用文字如下：<a href="http://groups.google.com/group/google-appengine-java/web/will-it-play-in-app-engine">via</a></p>
<blockquote>
<h4 id="沙盒">沙盒</h4>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>为了使得 App Engine
能够跨多个网络服务器分配对于应用程序的请求，并且防止应用程序彼此干扰，请在受限制的&quot;沙盒&quot;环境中运行应用程序。在这种环境中，该应用程序可执行代
码；可存储和查询 App Engine 数据存储区中的数据；可使用 App Engine 邮件、网址抓取和用户服务；可检查用户的网络请求以及准备响应。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>App Engine 应用程序无法：</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>向文件系统写入。应用程序必须使用 [App Engine 数据存储区](<a href="http://code.google.com/appengine/doc">http://code.google.com/appengine/doc</a>
s/java/datastore/)存储永久数据。允许从文件系统中读取，并且可使用与该应用程序一起上传的所有应用程序文件。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>打开套接字或直接访问另一主机。应用程序可使用 <a href="http://code.google.com/appengine/docs/java/urlfetch/">App Engine
网址抓取服务</a>分别向端口 80 和 443
上的其他主机发出 HTTP 和 HTTPS 请求。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>产生子进程或线程。必须在几秒钟内于单个进程中处理对应用程序的网络请求。响应时间很长的进程会被终止，以避免使网络服务器负载过重。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>进行其他类型的系统调用。</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<h5 id="线程">线程</h5>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>Java 应用程序无法新建 <code>java.lang.ThreadGroup</code> 或 <code>java.lang.Thread</code>。这些限制也适用于利用线程的 JRE
类。例如，应用程序无法新建 <code>java.util.concurrent.ThreadPoolExecutor</code> 或
<code>java.util.Timer</code>。应用程序可以对当前线程执行操作，如 <code>Thread.currentThread().dumpStack()</code>。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<h5 id="文件系统">文件系统</h5>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>Java 应用程序无法使用任何用来写入文件系统的类，如 <code>java.io.FileWriter</code>。应用程序可以使用诸如
<code>java.io.FileReader</code> 的类从文件系统中读取自己的文件。应用程序也可以通过例如 <code>Class.getResource()</code> 或
<code>ServletContext.getResource()</code> 来访问作为&quot;资源&quot;的自身文件。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>只有视为&quot;资源文件&quot;的文件才可以由应用程序通过文件系统访问。默认情况下，WAR 中的所有文件都是&quot;资源文件&quot;。您可以使用 [appengine-
web.xml](<a href="http://code.google.com/intl/zh-">http://code.google.com/intl/zh-</a>
CN/appengine/docs/java/config/appconfig.html) 文件将文件从该组中排除出去。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<h5 id="javalangsystem">java.lang.System</h5>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>禁用不适用于 App Engine 的 <code>java.lang.System</code> 类的功能。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>以下 <code>System</code> 方法在 App Engine
中不起作用：<code>exit()</code>、<code>gc()</code>、<code>runFinalization()</code>、<code>runFinalizersOnExit()</code></p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>以下 <code>System</code> 方法返回 <code>null</code>：<code>inheritedChannel()</code>、<code>console()</code></p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>应用程序无法提供或直接调用任何本机 JNI 代码。以下 <code>System</code> 方法引发
<code>java.lang.SecurityException</code>：<code>load()</code>、<code>loadLibrary()</code>、<code>setSecurityManager()</code></p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<h5 id="反射">反射</h5>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>允许应用程序对自己的类进行完全、无限制的反射访问。它可以查询任何私有成员，使用
<code>java.lang.reflect.AccessibleObject.setAccessible()</code>，以及读取/设置私有成员。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>应用程序还可以对 JRE 和 API 类（如 <code>java.lang.String</code> 和 <code>javax.servlet.http.HttpServletR equest</code>）进行反射。但是，它只可以访问这些类的公共成员，而不可以访问受保护成员或私有成员。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>应用程序无法对不属于自己的任何其他类进行反射，也无法使用 <code>setAccessible()</code> 方法来避开这些限制。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<h5 id="自定义类载入">自定义类载入</h5>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>App Engine 完全支持自定义类载入。但是请注意，App Engine 将覆盖所有的
ClassLoader，以将相同的权限分配给所有由应用程序载入的类。如果执行自定义类载入，在载入不信任的第三方代码时要小心。</p>
</blockquote>
<blockquote>
<h4 id="有没有-google-app-engine-不支持的-python-库">有没有 Google App Engine 不支持的 Python 库？</h4>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>只有很少一部分本机 C python 模块以及本机 C python 模块的子集不受 Google App Engine 支持。详述了本机 C
Python 模块支持的完整列表可在[此处](<a href="http://code.google.com/intl/zh-">http://code.google.com/intl/zh-</a>
CN/appengine/kb/libraries.html)找到。被禁用的模块属于以下类别：</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>用于维护磁盘上数据存储区的库未在 Google App Engine 的 Python 中启用</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Google App Engine 禁用套接字</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>系统不允许您调用子进程，结果某些操作系统模块方法被禁用</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>线程不可用</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>由于安全方面的原因，大多数基于 C 的模块都被禁用</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>其他受限制的功能：</li>
</ul>
</blockquote>
<blockquote>
<pre><code>* 封送已禁用
</code></pre>
</blockquote>
<blockquote>
<pre><code>* cPickle 又名 pickle
</code></pre>
</blockquote>
<blockquote>
<pre><code>* 系统调用已禁用
</code></pre>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>请记住，使用以上任意一种功能的第三方包（如 mysql、postgresql 等）都将无法在 Google App Engine 上运行。</p>
</blockquote>
<p>根据Google App Engine的文档描述，在云计算提供的服务器集群中，无法提供套接字和多线程的使用，这也是可以
遇见的，毕竟这么多服务器集群如果要实现套接字和多线程的同步，几乎是不可能完成的任务。</p>
<h3 id="使用web-servicexml通信">使用Web Service/XML通信</h3>
<p>Flex对Web Service/XML提供了原生的支持，也支持RPC协议（[什么是RPC](<a href="http://zh.wikipedia.org/zh-">http://zh.wikipedia.org/zh-</a>
cn/RPC)），也可以使用一种AMF(Action Message Format)的一种二进制协议来交换数据。我查看了《Flex
3权威指南》的一些范例代码，实现这些协议需要的操作步骤略多，但是能支持复杂的对象传送。</p>
<p>考虑到我接触Python/Flex的时间和经验，这种方式显然风险很大，我只能略过这个方案。</p>
<h3 id="使用ajax-poiling方式通信">使用Ajax Poiling方式通信</h3>
<p>如果写过Ajax聊天室的童鞋们应该很轻松理解这种Poiling方式，即频繁的向服务器发送post请求（通常是1s），然后读取返回数据来进行数据交换。这种方式
适合数据格式简单的通信，不适宜大文件的传送。</p>
<p>这个方案简单易操作，加上我之前对Web前段也有一些学习，在技术上只要攻克Python/Flex难关，就有一定可行性了。</p>
<p>采用Ajax
Poiling方式完全是基于Http协议，这个GAE能够完美支持，Flex在<code>flash.net.*</code>下也有很多对应的方法进行操作，实现应该没有问题。</p>
<h2 id="数据库的实现">数据库的实现</h2>
<p>在系统的后期，如果时间充裕，会考虑加入数据库的支持，实现简单的注册/登录和聊天记录存储。</p>
<p>GAE支持的数据库是BigTable，使用一种GQL的操作语言，与普通的关系型数据库还是有一些区别。下面是wiki的介绍</p>
<blockquote>
<p>BigTable is a compressed, high performance, and proprietary database system
built on Google File System (GFS), Chubby Lock Service, and a few other Google
programs; it is currently not distributed or used outside of Google, although
Google offers access to it as part of their Google App Engine.</p>
</blockquote>
<p>直接加入BigTable支持我怕会导致整个项目拖延，所以如果顺利则加入数据库支持，如果不顺利则放到以后再实现。</p>
<h2 id="相关链接">相关链接</h2>
<p>PylexChat in Google Project Host:
<a href="http://code.google.com/p/pylexchat/">http://code.google.com/p/pylexchat/</a></p>
<p>PylexChat in GAE:
<a href="http://pylexchat.appspot.com/">http://pylexchat.appspot.com/</a></p>
<p>先给出上面的网址，还没彻底部署好。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Eclipse3.5下使用Flex Builder 3</title>
      <link>https://blog.alswl.com/2009/11/the-eclipse3-5-using-flex-builder-3/</link>
      <pubDate>Wed, 18 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/the-eclipse3-5-using-flex-builder-3/</guid>
      <description>这次课程设计是我大学最后一次了，毕业设计会需要谨慎，所以这次课程设计我决定做一个新潮的系统。 我将系统命名为PylexChat，是一个基于Python+Flex的聊天系统，架构在GAE+AIR环境，支持多平台（Wi ndows+Linux+Web+手机）客户端登录。开发IDE为Eclipse+Flex Builder3插件，我的Eclipse Gelileo(v3.5)。在安装Flex Builder 3过程中就弹出需要</description>
      <content:encoded><![CDATA[<p>这次课程设计是我大学最后一次了，毕业设计会需要谨慎，所以这次课程设计我决定做一个新潮的系统。</p>
<p>我将系统命名为PylexChat，是一个基于<strong>Python</strong>+<strong>Flex</strong>的聊天系统，架构在<strong>GAE</strong>+<strong>AIR</strong>环境，支持多平台（<strong>Wi
ndows+Linux+Web+手机</strong>）客户端登录。开发IDE为<strong>Eclipse</strong>+<strong>Flex Builder3</strong>插件，我的<strong>Eclipse
Gelileo</strong>(v3.5)。在安装Flex Builder 3过程中就弹出需要3.4一下环境，我没在意，继续安装了。</p>
<p>安装之后出现了问题，Eclipse插件根本没有加载，我在[Getting Flex Builder 3 plugin to survive a new Eclipse Version](<a href="http://greylurk.com/index.php/2009/06/getting-flex-builder-3">http://greylurk.com/index.php/2009/06/getting-flex-builder-3</a>
-plugin-to-survive-a-new-eclipse-version/)找到了相应解决方案。</p>
<p>在<code>Eclipselinks</code>目录下面建立<code>com.adobe.flexbuilder.feature.core.link</code>文件，编辑内容为<code>d:/Stud y/Flex Builder 3 Plug-in</code>（记得修改目录），这样就可以正常加载并编写项目了。</p>
<p>在使用过程中，如果代码没有写好，会出现<code>An internal error occurred during: &quot;Removing compiler problem markers...&quot;.</code>这样的提示，此时无论我做如何动作，保存代码/清理项目/新建文件，都会出现如上错误，根本没法继续。经过我尝试，除了将
项目删除重新建立，没有其他的办法彻底解决这个问题。</p>
<p>这里有一个Adobe 官方论坛的讨论帖[http://forums.adobe.com/thread/90415](<a href="http://forums.adobe">http://forums.adobe</a>.  com/thread/90415)，似乎这个问题在当时Flex Builder 2就出现，现在出现在Eclpse 3.5 + Flex Builder
3下面。</p>
<p>看来得等Flex Builder3之后的版本发布才能修复这个Bug，否则的话，还是得换回Eclpse 3.4……</p>
<p>悲剧了，我刚使用Galileo一周时间……</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
