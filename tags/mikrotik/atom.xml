<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mikrotik on Log4D</title>
    <link>https://blog.alswl.com/tags/mikrotik/</link>
    <description>Recent content in mikrotik on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Dec 2016 20:16:26 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/mikrotik/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🔑 也谈 HTTPS - 如何内测</title>
      <link>https://blog.alswl.com/2016/12/https-2/</link>
      <pubDate>Thu, 08 Dec 2016 20:16:26 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2016/12/https-2/</guid>
      <description>(图片来自 茶杯中的可爱小白鼠 壁纸 - 2560x1920－堆糖，美好生活研究所)
在上篇文章 🔒 也谈 HTTPS - HTTPDNS + HTTPS 中， 我们谈了如何基于 HTTPDNS 来部署无坚不摧的 HTTPS 通信环境， 这次我们讨论另外一个比较头疼的问题：部署。
小站点部署 HTTPS 相对成本低，改改前端代码，就可以上线了。 但作为业务有一定复杂度的大网站，就没办法这么暴力上线了。
前端在基础库中调整 Scheme 之后，仍然可能存在很多边边角角没有覆盖到。 比如 JS 里面写死了 HTTP，那在 HTTPS 下请求 HTTP XHR 的话， 浏览器会将请求拦截掉。 一旦出现这种故障，用户就无法正常使用业务，小白用户往往也不懂得自己将 https:// 换成 http:// 使用。
解决的思路是足够的内测，找一群人帮我在 HTTPS 环境下使用足够长时间。 让他们当小白鼠，提前发现问题并解决。 于是，我把目光转向了身边的一大大群小白鼠，整个办公室的同事~😄
没错，我要强制所有同事使用 HTTPS 的公司网站，从而靠他们帮我发现问题。
靠发邮件、QQ 广播呼吁大家使用 HTTPS 站点的方法，估计是不行的。 没有利益驱动，推动力是不足的，我必须想点强制的手段让他们使用 HTTPS。
有三种方法来达到这个效果：
业务系统内入口判断用户身份，是雇员的话，切换到 HTTPS Nginx 入口系统判断 IP 来源，办公室 IP 则切换到 HTTPS 改造办公室网络，访问站点时候，自动切换到 HTTPS 为了避免对线上业务系统、基础设施造成影响，我采用了第三条方案。</description>
    </item>
    
  </channel>
</rss>
