<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cakephp on Log4D</title>
    <link>https://blog.alswl.com/tags/cakephp/</link>
    <description>Recent content in cakephp on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Aug 2010 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/cakephp/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AzaAjaxChat笔记-框架</title>
      <link>https://blog.alswl.com/2010/08/azaajaxchat-notes-frame/</link>
      <pubDate>Thu, 12 Aug 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/08/azaajaxchat-notes-frame/</guid>
      <description>1个月没有动PHP了，新装的系统甚至还没有配置PHP环境，今天看到BooguNote上有一个boo是专门记录AzaAjaxChat开发时候遇到的问题和解决办 法。于是把一些东西整理记录一下。
1. 从ThinkPHP开始 最早的AzaAjaxChat是基于ThinkPHP的，我当时在OpenSouce上看到ThinkPHP的介绍，有很多优点，看的我很心动：MVC模型，Ajax 支持，详细的文档和案例，国人开发的框架。我作为一个PHP新人一下子就被他吸引住了，决定用ThinkPHP做框架。
{# https://medium.com/@ardianta/writing-using-typora-on-hugo-based-blog-a1be8500774a #} 随着系统开发的推进，我却感觉到一些不自在，遇到一些问题却找不好太好的解决办法。比如ThinkPHP的模块和分组两个概念，让我比较疑惑，花费了大量时间重组目录 结构，两种方法各有优劣，让我很难选择（有选择了反而难办了 ^_^）。
最让我恼火的是相对目录带来的路径混乱，在JSP开发中，静态内容习惯性放在webcontent文件夹中，而ThinkPHP的CSS、图片、JS引用让我很疑惑， 要区分App的和Model的静态文件。
在开发过程中，我也遇到过框架本身的Bug，让我对这个框架失去信心。在这里我没有贬低ThinkPHP或者ThinkPHP开发者的意思，他们的&amp;quot;大道至简、开发由 我&amp;quot;的理念很值得欣赏。只是作为初学者因为遇到的一些问题，带来了一定的开发难度，不得已放弃。
2. 选择CakePHP 在遇到数次挫折之后，我终于下定决心换框架。工作室之前有过一个项目是用CakePHP开发的，保存着一些资料，阿贵强烈推荐CakePHP。我Google了几篇框 架的评测文章后，考虑了一下AzaAjaxChat的规模，决定选择CakePHP。
{# https://medium.com/@ardianta/writing-using-typora-on-hugo-based-blog-a1be8500774a #} CakePHP的脚手架(Scaffold)功能让我眼前一亮，让我脱离了大量CRUD繁琐的操作。而Cake Bake可以方便的根据数据库生成php代码，减少那 些没有逻辑意义的代码。AzaAjaxChat的定位是毕业设计，不是强健的产品，不会苛求太高的用户体验和安全特性，所以这个功能帮了我很多忙。
CakePHP能够处理关系型数据库之间的m-n关系，由于我的系统逻辑简单，并没复杂的多表操作，所以这里没有深究。从Cake Baker的生成代码菜单上应该能够看出CakePHP还是能够处理一定的多表关联问题。
CakePHP也不是那么十全十美，最麻烦的是文档少，我指的是中文文档，英文资源还是比较丰富的。其次是对Ajax的支持不如ThinkPHP那么原生，我一开始使 用JSON方案，后来使用XML方案实现Ajax数据序列化。
3. CakePHP &amp;amp; ThinkPHP 使用的框架最大的目的是提高效率，大幅度缩短工作时间，这两个框架都是为此而诞生的。我这里不说孰优孰劣，如果感兴趣，可以Google查看相关比较。这两个框架都使 用Ruby On Rails的Active Record理念进行开发，CakePHP更是被称为PHP版的RuR，我在编码中期还特意去图书馆查阅了RuR的相关资料，的确是高效的Web开发模型。
Active Record释义
ActiveRecord也属于ORM层，由Rails最早提出，遵循标准的ORM模型：表映射到记录，记录映射到对象，字段映射到对象属性。配合遵循的命名和配 置惯例，能够很大程度的快速实现模型的操作，而且简洁易懂。
我在答辩的PPT中写选择CakePHP的原因有三：一站式的MVC框架、约定优于配置、更少的代码，其实这也是RuR的优势。
4. 相关连接 Plod: [翻译]十款PHP开发框架横向比较 ChinaUnix一位网友写的CakePHP入门（我觉得比官方教材好上手） cakephp jquery ajax json_天知道_百度空间（CakePHP的Ajax操作方法） 老王的技术手册_博客_cakephp / zendframework_百度空间（挺多CakePHP相关资料） IBM developerWorks 中国 : 使用 CakePHP 快速打造 Web 站点（IBM的CakePHP教程） </description>
    </item>
    
    <item>
      <title>Cakephp的国际化和poEdit的使用</title>
      <link>https://blog.alswl.com/2010/06/cakephp-localization-internationalization-and-usage-of-poedit/</link>
      <pubDate>Thu, 03 Jun 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/06/cakephp-localization-internationalization-and-usage-of-poedit/</guid>
      <description>原文出处：在Cakephp中使用i18n本地化程序，并使用poedit编辑语言文件 | 程序如此灵动！
alswl: 官方的帮助手册都没有这篇文章来的详细，太赞了。这篇文章不仅介绍了CakePHP的使用，更多的介绍了PoEdit的使用，图文并茂，着实详细，感谢原作者苏南。
&amp;mdash;&amp;ndash; 以下为原文 &amp;mdash;&amp;ndash;
Cakephp的很强大的i18n功能就是用来实现本地化和国际化的。他通过使用语言配置文件使得程序能够很好的适应变化进行本地化。通过新建locale/chi/ LC_MESSAGES/default.po文件，并指定语言选项为&amp;quot;chi&amp;quot;实现。本文中说的就是如何实现这个本地化过程，当然本文中的poedit并不是必须的 ，但是他可以使得工作效率更高。
一、关于i18n和L10n 这2个东东其实头一次我看到的时候也是一头雾水，但是经过百度的一通搜索，得出的结论就是，不管是几个n，最终的目的就是实现程序本地化就好了，说白了，就是由很多的 语言配置文件，反正我是这么理解的。大家也可以去看看，[http://baike.baidu.com/view/372835.htm](http://baik e.baidu.com/view/372835.htm) 这里有很详细的说明。
二、在Cakephp里面，实现本地化的方法 目前为止，有2种配置方法。
2.1 方法一 在config/core.php中使用configure::write来制定语言文件。
Configure::write(&amp;lsquo;Config.language&amp;rsquo;,&amp;ldquo;chi&amp;rdquo;);
2.2 方法二 官方说明：http://book.cakephp.org/view/162/Localizing-Your- Application
貌似很复杂的说哦。
App::import(&#39;Core&#39;, &#39;l10n&#39;); class TestsController extends AppController{ $name=&amp;quot;Tests&amp;quot;; function test_function(){ $this-&amp;gt;L10n-&amp;gt;new L10n(); $this-&amp;gt;L10n-&amp;gt;get(&amp;quot;chi&amp;quot;); ..... } } 2.3 做上边设置改动后需要做的： 当然在上面做修改后，还需要修改对应的ctp文件等哦，
所有的直接输出字符串，没有返回值的地方像这样：
__(``&amp;quot;english&amp;quot;``);
间接输出字符串，有返回的地方：
__(``&amp;quot;english&amp;quot;``,``true``);
还有input要加个label来使他出现中文。
(&amp;ldquo;english&amp;rdquo;);echo $form-&amp;gt;input(&amp;rsquo;name&amp;rsquo;,array(&amp;rsquo;label&amp;rsquo;=&amp;gt;(&amp;rsquo;name&amp;rsquo;,true)));
2.4 最最重要的一步 就是要编辑这个文件了，locale/chi/LC_MESSAGES/default.po。中间的chi就是语言文件的标志位了。这个文件的格式也很简单，
msgid &amp;ldquo;Chinese&amp;rdquo;
msgstr &amp;ldquo;中国话&amp;rdquo;
这个的简单重复就行了。
三、使用poedit 使用poedit不是必须的，但是可以使工作变得简单的多。官方网站是：[http://www.poedit.net/](http://www.poedit.n et/)
他的主要功用就是使得编辑语言配置文件更加方便和快捷。下面是使用poedit的一些简单的截图和说明。
3.1 头一次使用需要选择界面语言 {# https://medium.com/@ardianta/writing-using-typora-on-hugo-based-blog-a1be8500774a #} {# https://medium.</description>
    </item>
    
    <item>
      <title>CakePHP的全局变量</title>
      <link>https://blog.alswl.com/2010/05/cakephp-global-variables/</link>
      <pubDate>Mon, 17 May 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/05/cakephp-global-variables/</guid>
      <description>毕业设计AzaAjaxChat 中有一个功能，记录当前在线用户，直观的看，用Application对象就可以解决。
忙了一会发现，原来PHP没有Application对象这个概念，于是我想到了全局变量，噩梦便开始了。（Application 和全局变量其实完全不是同一个概念）
我使用的框架是CakePHP，查找资料后，找到了几种CakePHP中使用全局变量的方法。
一、使用bootstrap.php文件 在app/config 下面，有一个bootstrap文件，从名字就可以看出，这个是在控制器之前加载的文件，根据官方的描述，有下面几个用法。
定义方便的函数 注册全局常量 定义新增的控制器，视图，控制器路径 通过这个文件可以实现全局变量的声明。
if (!isset ($globalAAC)) { global $globalAAC; $globalAAC = array ( &#39;currentMessageId&#39; =&amp;gt; -1, &#39;onlineUsers&#39; =&amp;gt; array() ); } 在其他文件中就可以调用这个全局变量了。
二、通过Configure 类 Configure类是CakePHP用来进行配置文件的地方，通过write() 和read()方法，也能实现全局变量的读写操作。
Configure::write(&#39;Aac.currentMessageId&#39;, -1); Configure::read(&#39;Aac.currentMessageId&#39;); 其中，还有一个使用Configure的偏门方法，我从 [Need to share global variables throughout your app? » Debuggable Ltd](http://debuggable.com/posts/need-to-share-global- variables-throughout-your-app:480f4dd5-6f64-4c88-812d-46d5cbdd56cb) 看到的。
$config =&amp;amp; Configure::getInstance(); $config-&amp;gt;myVariable = &#39;Hello World&#39;; $config =&amp;amp; Configure::getInstance();
debug($config-&amp;gt;myVariable);
其实就是通过引用操作Configure 类内部的getInstance() 方法，看源码就能看出来。
三、关于类似Application 对象的全局变量 以上两种方法都没错，都可以操作全局变量，但是我却都操作失败了，为此我折腾了整整一天。
我甚至一度把错误归结到CakePHP，后来才发现，原来我冤枉它了。问题的根本是在于，这个全局变量根本不是我所想的那个Application 对象。</description>
    </item>
    
  </channel>
</rss>
