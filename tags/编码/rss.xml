<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>编码 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E7%BC%96%E7%A0%81/</link>
    <description>Recent content in 编码 on Log4D</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 21 Feb 2010 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/%E7%BC%96%E7%A0%81/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解决WordPress升级后出现Warning: Cannot modify header information - headers already sent by</title>
      <link>https://blog.alswl.com/2010/02/wordpress-upgrade-to-resolve-after-warning-cannot-modify-header-information-headers-already-sent-by/</link>
      <pubDate>Sun, 21 Feb 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/02/wordpress-upgrade-to-resolve-after-warning-cannot-modify-header-information-headers-already-sent-by/</guid>
      <description>WordPress 2.9.2升级之后出现一个问题，在一些操作，比如删除垃圾留言、发表新的文章时候会提醒一下的错误。 Warning: Cannot modify header information - headers already sent by (output started at /home/alswl/public_html/wp-settings.php:1) in /home/alswl/public_html/wp-includes/pluggable.php on line 868 我简单查找了一下，这是一个简单的编码问题，1分钟可以搞定了。 1.Ftp下载wp-settings.php这个文件，用记事本打开这个文档。 2.另存为&amp;quot;ANSI&amp;quot;格式的文本。 3.重新上传覆盖原文件。 如果还有其他文件出现问题，继续修改编码有问题的文件</description>
      <content:encoded><![CDATA[<p>WordPress 2.9.2升级之后出现一个问题，在一些操作，比如删除垃圾留言、发表新的文章时候会提醒一下的错误。</p>
<blockquote>
</blockquote>
<p>Warning: Cannot modify header information - headers already sent by (output
started at /home/alswl/public_html/wp-settings.php:1) in
/home/alswl/public_html/wp-includes/pluggable.php on line 868</p>
<p>我简单查找了一下，这是一个简单的编码问题，1分钟可以搞定了。</p>
<p>1.Ftp下载wp-settings.php这个文件，用记事本打开这个文档。</p>
<p>2.另存为&quot;ANSI&quot;格式的文本。</p>
<p>3.重新上传覆盖原文件。</p>
<p>如果还有其他文件出现问题，继续修改编码有问题的文件。</p>
<p>这样问题就可以解决了，为了以防万一，建议在操作之前记得备份。</p>
<p>参考文章：<a href="http://poshi.org/post/401.html">解決Wordpress安裝時出現Warning: Cannot modify header information - headers already sent by - 新後園 - 德語學習部落格 - Poshi的網誌</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>编码: ASCII(ANSI), GB-2312, UNICODE, UTF-8，UTF-16</title>
      <link>https://blog.alswl.com/2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/</link>
      <pubDate>Sat, 12 Sep 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/09/encoding-ascii-ansi-gb-2312-unicode-utf-8-utf-16/</guid>
      <description>ASCII字符集 7位的编码方案，总共表示128个字符，其中包括了大小写英文字母、数字、标点符号等常用字符。英语世界已经足够应付。 ISO-8859-1字符集 也称ISO-Latin字符集，它扩展了ASCII字符集，用到了8bit字节里的最高一位，这样它就有256个字符，前128个字符和ASCII字符集相同 。有了ISO-Latin字符集，西方世界的一些其它语言，如西班牙语、法语、德语、意大利语都够用了。</description>
      <content:encoded><![CDATA[<h2 id="ascii字符集">ASCII字符集</h2>
<p>7位的编码方案，总共表示128个字符，其中包括了大小写英文字母、数字、标点符号等常用字符。英语世界已经足够应付。</p>
<h2 id="iso-8859-1字符集">ISO-8859-1字符集</h2>
<p>也称ISO-Latin字符集，它扩展了ASCII字符集，用到了8bit字节里的最高一位，这样它就有256个字符，前128个字符和ASCII字符集相同
。有了ISO-Latin字符集，西方世界的一些其它语言，如西班牙语、法语、德语、意大利语都够用了。</p>
<h2 id="gb系列字符集gb2312gbkgb18030">GB系列字符集（GB2312，GBK，GB18030）</h2>
<p>由于一个字节是无论如何也表达不了哪怕是最长用的汉字字符集的，所以为了用计算机存储汉字，必须使用多个字节。</p>
<p>多字节字符集就是使用可变长的编码长度来编码字符，有的字符用一个字节编码，比如ASCII字符，有的字符用两个字节编码，比如汉字。在VC里，多字节字符集等同于双
字节字符集，VC不支持多于2个字节编码长度的字符。GB系列的字符集和ISO-Latin字符集一样，前128个字符和ASCII字符集相同。GB系列字符集是兼容
的，相同的中文字符在这3个字符集里有相同的编码。GB2312和GBK一个字符最多2个字节表示，GB18030可多达4个字节。在这种编码里表示汉字时，需要一个
leading byte，它总是大于127，这个字节的含义是说明它和后面的字节（们）一起表示一个字符。</p>
<p>这些字符集（ISO-Latin字符集，GB系列字符集）都是以ASCII为基础扩展而来，统称为ANSI字符集。</p>
<p>记事本在默认情况下（选择ANSI编码）就是使用多字节字符集保存文件的，至于使用的是GB2312，GBK，还是GB18030我不清楚。</p>
<h2 id="unicode字符集">Unicode字符集</h2>
<p>每个地区的人都试图扩展ASCII编码来支持本地的语言，最终的结果是导致互不兼容。因为除了最低的128个字符相同以外，其它的字符都使用自己特殊的编码方案。</p>
<p>当使用与文件保存时的编码方案不同的编码来读取文件时，就会产生错误——比如Windows记事本那个著名的「联通BUG」。</p>
<p>统一所有字符的编码是Unicode被设计出来的初衷。</p>
<p>长久以来，Unicode在我心中的概念就是：使用2个字节来编码字符，使用Unicode可以表示世界上所有的字符。但这种理解并不准确！</p>
<p>其实Unicode可以看成是一种理想：这种理想就是世界上的所有字符都只有一个唯一的标识！至于怎样去实现这种理想，有很多的实现方式：UTF-
8,UTF-16,UTF-32,甚至在Unicode标准里还介绍了一种压缩的实现方式。Unicode把这个唯一的标识称之为代码点（code
point），字符的代码点以U+XXXX的方式表示，这个可以打开Windows自带的字符映射表看得到。</p>
<p>Unicode最初被设计出来的时候希望使用2个字节就可以表示世界上的所有字符。因此，实现Unicode最直接的想法就是用两个字节来存储一个字符，如果大家都这
么想就好了，这样一个字符就可以用2个字节长的短整形来存储。但是偏偏还有一个叫做大端小端东西存在，这样2个字节的短整型在内存中的表示顺序就有2种可能，这就是为
什么当用记事本保存文本文件时可以选择Unicode或者Unicode big endian的原因。</p>
<p>1个字符=2个字节在现实中却遇到了麻烦。一方面，用2个字节表示一个字符，浪费了大量的空间（如果仅仅用来存储ISO-
Latin字符集里的字符的话），而且还会有大端小端的问题，解决的方案是UTF-
8编码；另一方面，人们在实践中发现即使用2个字节编码也无法表示所有字符，因此出现了UTF- 16。UTF-16除了使用2个字节编码外，还使用一对2个字节来表
示Unicode里很少用到的字符；另外还有UTF-32，它使用单独的4个字节来编码所有的Unicode字符。</p>
<h2 id="utf-8编码">UTF-8编码</h2>
<p>我想最早提出UTF-8的一定是美国人，「用2个字节来表示一个英语字母这太浪费了！」，他们肯定会这么说的。顾名思义，那个8说明UTF-
8编码中最小的单位是8bit的字节。采用UTF-
8编码，Unicode代码点中U+007F以下（包含U+007F）的字符用一个字节编码，其它的字符用多个字节编码，最多一个字符用4个字节编码。这样UTF-
8兼容ASCII，但是不兼容ISO-Latin字符集。</p>
<h3 id="unicode字符采用utf-8编码方案时的对照表">Unicode字符采用UTF-8编码方案时的对照表</h3>
<p>U-00000000 - U-0000007F:  0xxxxxxx</p>
<p>U-00000080 - U-000007FF:  110xxxxx 10xxxxxx</p>
<p>U-00000800 - U-0000FFFF:  1110xxxx 10xxxxxx 10xxxxxx</p>
<p>U-00010000 - U-001FFFFF:  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p>
<p>U-00200000 - U-03FFFFFF:  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</p>
<p>U-04000000 - U-7FFFFFFF:  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
10xxxxxx</p>
<p>网上的很多文章都有这个表，可以看到一个Unicode代码点采用UTF-8编码时最多可达6个字节。但是从Unicode官方网站上看到的是UTF-
8编码的最大字节长度是4个字节。也就是说最下面的两行没有了。</p>
<p>UTF-8编码的实现方式比较好理解：例如「汉」字的Unicode编码是6C49，6C49在0800-FFFF之间，所以最终编码应该是3个字节。
6C49的二进制位串是：110110001001001，把这个位串从右向左填充到那3个字节的x部分，高位不够的用0补。最终得到的3个字节是：11100110
10110001 10001001，即E6 B1 89。注意由于UTF-
8的最小编码单元是字节，所以不存在大端小端的问题。在各种Unicode编码方案之间转换的标准算法（诸如从UTF-16到UTF-
8或者反过来）已经有了，在Unicode的官方网站上可以找到。</p>
<p>这样Unicode至少就有5种编码方案了（UTF-8，UTF-16两种，UTF-32两种），怎么区分它们呢？</p>
<p>区分各种不同Unicode编码方案的技巧被称为Byte Order Mark（BOM）</p>
<p>Byte order mark     Description</p>
<p>EF BB BF     UTF-8</p>
<p>FF FE     UTF-16, little endian</p>
<p>FE FF     UTF-16, big endian</p>
<p>FF FE 00 00     UTF-32</p>
<p>「像记事本、EditPlus这些软件，如果另存为unicode类型，会在文件最开头添加BOM码，如果一个文件没有BOM码，那么就很难识别，需要人工识别了。另
外，一般说Unicode编码，其实和Unicode-le(小头端)一个概念，Unicode Big endian会单独作为一种编码类型放置的。」-alswl</p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL Command Line Client乱码问题及解决方案</title>
      <link>https://blog.alswl.com/2009/07/mysql-command-line-client-garbled-problems-and-solutions/</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/07/mysql-command-line-client-garbled-problems-and-solutions/</guid>
      <description>以前用MySQL时候都是可视化界面，如MySQL Admin使用，现在学着使用MySQL Command Line client，初次接触，就遇到乱码问题。 乱码是中文字符串的，Google后，找到一些解决方案。摘录如下： 引用自今天去祸害哪家的闺女呢？&amp;lt;猛击这里打开&amp;gt; 1:改变数据库的默认编码配置，在MYSQL的安装目录中，找到my.ini，修改默认编 码为：default-character-set=utf8 2:建</description>
      <content:encoded><![CDATA[<p>以前用MySQL时候都是可视化界面，如MySQL Admin使用，现在学着使用MySQL Command Line client，初次接触，就遇到乱码问题。</p>
<p>乱码是中文字符串的，Google后，找到一些解决方案。摘录如下：</p>
<p>引用自今天去祸害哪家的闺女呢？&lt;<a href="http://leonel.javaeye.com/blog/315090">猛击这里打开</a>&gt;</p>
<p>1:改变数据库的默认编码配置，在MYSQL的安装目录中，找到my.ini，修改默认编</p>
<p>码为：default-character-set=utf8</p>
<p>2:建立数据库时，CREATE DATABASE ms_db CHARACTER SET utf8 COLLATE</p>
<p>utf8_general_ci;</p>
<p>3:执行脚本：指定编码格式set names utf8(注意，不是UTF-8)</p>
<p>4:如果你采用的是外部接入的方式，在连接中确定请求的编码格式如：</p>
<p>jdbc:mysql://localhost:3306 /ms_db?</p>
<p>useUnicode=true&amp;characterEncoding=UTF-8(不要出现任何空格，否则出错)</p>
<p>我使用的是第3种方法，由于我的数据库是Hibernate生成的，所以编码集改为utf8依然乱码，使用gbk就可以了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>乱码之战</title>
      <link>https://blog.alswl.com/2009/05/battle-of-garbled/</link>
      <pubDate>Fri, 22 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/battle-of-garbled/</guid>
      <description>今天重新设计了贴吧的数据库，参考了WordPress的无外键，设置default的值，我取消了两个外键，仅保留一个对应CategoryId的外键。 修改数据库时候发现MySQL的charset还是&amp;rsquo;latin&amp;rsquo;，就顺手修改成&amp;rsquo;utf-8&amp;rsquo;来保证统一，结果就出事了。 因为我修改了DAO，单元测试之后重新走一遍网页测试流程，结果发帖时候遇到乱码。 一回生两回熟</description>
      <content:encoded><![CDATA[<p>今天重新设计了贴吧的数据库，参考了WordPress的无外键，设置default的值，我取消了两个外键，仅保留一个对应CategoryId的外键。</p>
<p>修改数据库时候发现MySQL的charset还是&rsquo;latin&rsquo;，就顺手修改成&rsquo;utf-8&rsquo;来保证统一，结果就出事了。</p>
<p>因为我修改了DAO，单元测试之后重新走一遍网页测试流程，结果发帖时候遇到乱码。</p>
<p>一回生两回熟，咱也不怕。</p>
<p>在Action里面设置logger，输出相应的数据，发现那里就是乱码，说明在Severlet或者Interceptor那里就出了问题。</p>
<p>仿照上次设置Tomcat字符集，详情见<a href="../2009/05/12238.html">Eclipse中开发的Jave EE项目在Tomcat的部署
</a>，但是测试发现没有效果。</p>
<p>接着查看web.xml，发现里面还有Spring的filter，贴吧现阶段还没有加入Spring，删除，有一个编码过滤器org.apache.struts2
.dispatcher.FilterDispatcher，采用org.apache.struts2.dispatcher.FilterDispatcher可
以不适用，删除。</p>
<p>这么一删，就发现乱码问题解决了。</p>
<p>呵呵，只要人类还有很多语言，乱码仍然会存在，遇到了不要怕，慢慢调试就出来了</p>
]]></content:encoded>
    </item>
    <item>
      <title>Eclipse中开发的Jave EE项目在Tomcat的部署</title>
      <link>https://blog.alswl.com/2009/05/eclipse-in-the-development-of-jave-ee-projects-in-the-deployment-of-tomcat/</link>
      <pubDate>Wed, 20 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/eclipse-in-the-development-of-jave-ee-projects-in-the-deployment-of-tomcat/</guid>
      <description>贴吧最基本的功能写完了，正好可以应付数据库设计课的实验。于是我准备把贴吧的项目从Eclipse的开发环境中移植出来，在Tomcat中进行部署。 也许是习惯了Eclipse提供的便利，这个小小的移植，居然难倒了我，直接把Eclipse里的PostBar考出，根本不能运行，直接报404错误。Google 上也没有提供详细的步骤，也许大家都觉得这个问题很简单吧，呵呵。 我琢磨了一会，终于整理出了头绪。 1.修改</description>
      <content:encoded><![CDATA[<p>贴吧最基本的功能写完了，正好可以应付数据库设计课的实验。于是我准备把贴吧的项目从Eclipse的开发环境中移植出来，在Tomcat中进行部署。</p>
<p>也许是习惯了Eclipse提供的便利，这个小小的移植，居然难倒了我，直接把Eclipse里的PostBar考出，根本不能运行，直接报404错误。Google
上也没有提供详细的步骤，也许大家都觉得这个问题很简单吧，呵呵。</p>
<p>我琢磨了一会，终于整理出了头绪。</p>
<p>1.修改Apache-conf-server.xml这个文件，修改其中一段<Host>&hellip;</Host>如下所示</p>
<pre><code>&lt;host appbase=&quot;webapps&quot; name=&quot;localhost&quot;
    unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;
    xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;
	&lt;context debug=&quot;0&quot; docbase=&quot;F:T3&quot; path=&quot;/postbar&quot;&gt;
		  reloadable=&quot;true&quot; crossContext=&quot;true&quot;&gt;
	&lt;/context&gt;
&lt;/host&gt;
</code></pre>
<p>这一段的作用是在原先webapps的目录下添加虚拟目录/postbar，并且指定实际目录是&quot;F:T3&quot;</p>
<p>2.打开目录listtings功能，这样能帮助调试，正式发布可以关闭。 在Apache-conf-web.xml中找到</p>
<pre><code>&lt;init-param&gt;
	&lt;param-name&gt;listings&lt;/param-name&gt;
	&lt;param-value&gt;false&lt;/param-value&gt;
&lt;/init-param&gt;
</code></pre>
<p>把其中的false改为true就可以了。</p>
<p>3.打包Java EE项目。其实与其我们花时间考虑classes的位置，tld文件位置等繁琐的问题，可以直接使用Eclipse的输出功能，具体是项目右键-
Export 然后选择WAR file，就可以输出一个打包的项目文件。</p>
<p>4.在Tomcat的index.jsp里有stauts，输入管理密码后，可以进入一个状态页面，这里提供上传WAR文件并配置，可以这么做，但是其实可以直接用W
inRAR解压缩WAR文件，然后复制到之前设置的目录中。</p>
<p>这样，就可以再Tomcat使用项目，而不用考虑太多的部署问题了。 当然，我更建议初学者好好研究一下Java EE项目的部署要求，而不是简单的会用。
我也该认真看看孙鑫大大的Java EE前面的基础章节了&hellip;</p>
<p>本以为这样就可以使用项目，结果半路杀出一个程咬金，表单提交的中文都是乱码。</p>
<p>又遇到乱码问题了，呵呵，幸好不是初哥，我用Log4j调试一下，查看Tomcat/logs/，检查下面相应的txt文件，发现Action读取时候就出现了乱码，
数据库也是乱码，说明乱码产生原因在服务器端获取数据时候，我Google一下，发现Connector可以设置编码集，具体设置是Tomcat/conf/serv
er.xml</p>
<pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot;/&gt;
</code></pre>
<p>将其修改为</p>
<pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;  connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;utf-8&quot; /&gt;
</code></pre>
<p>重新测试表单数据发送，一切没有问题了。 细节决定一切啊.</p>
]]></content:encoded>
    </item>
    <item>
      <title>乱码！又见乱码！</title>
      <link>https://blog.alswl.com/2009/05/garbled-see-also-garbled/</link>
      <pubDate>Sat, 09 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/garbled-see-also-garbled/</guid>
      <description>今天解决了贴吧发帖的问题，可以正确的发送到正确的分类了。 随后遇到的问题是发帖完毕返回 Category.action 时候，无法读取争取的贴吧分类数据，经过在 struts.xml 里的Category.action 里的 result 后面的url加入参数，可以读取正确categoryId了 本来想在result中加入param元素而不是在url后面加 ？categoryId=0来实现，但是尝试了好久，Google和官方文档都没有什么解决方案 其中遇到的一个问题是「&amp;a</description>
      <content:encoded><![CDATA[<p>今天解决了贴吧发帖的问题，可以正确的发送到正确的分类了。</p>
<p>随后遇到的问题是发帖完毕返回 Category.action 时候，无法读取争取的贴吧分类数据，经过在 struts.xml
里的Category.action 里的 result 后面的url加入参数，可以读取正确categoryId了</p>
<p>本来想在result中加入param元素而不是在url后面加 ？categoryId=0来实现，但是尝试了好久，Google和官方文档都没有什么解决方案</p>
<p>其中遇到的一个问题是「&amp;」这个符号不能直接使用，需要进行转义，用「&amp;」来替代。</p>
<p>最后是categoryName的问题了，本来以为很简单，却遇到了编码问题，之前从Home.action转到Category.action能正确编码，像 ht
tp://localhost:8080/PostBar/Category.action?categoryId=4&amp;categoryName=%E9%9F%B
3%E4%B9%90 ，而现在的categoryName后面却有乱码</p>
<p>最恨乱码问题，整整花了我将近2小时，仍然没有完美解决方法，只能勉强在PostTopic.action转到Category.action时进行Encode编码
，但是这十足dirty work，而且不方便再次读取categoryName。</p>
<p>我尝试在struts.xml用OGNL语言进行转换，但是却无法运行，找不出问题。</p>
<p>实在没有办法了，现在我准备用Baidu这种url形式，只传递categoryId，而在此用Hibernate读取数据库去除categoryName来获得内容</p>
<p>当初之所以考虑多次传递时怕读取数据库会导致性能大幅度下降，今天又学习了一下Hibernate的缓存机制，感觉是我多虑了，二级缓存应该能大大缓解多次读取的问题
。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Struts2的编码问题</title>
      <link>https://blog.alswl.com/2009/05/struts2-encoding-problem/</link>
      <pubDate>Fri, 08 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/struts2-encoding-problem/</guid>
      <description>继续昨天的编码问题 我一直全部采用UTF-8格式，而且在jUnit测试中并没有问题，说明是在Struts进行数据收集时候出错。 Google之后，根据网上一些建议修改web.xml struts.xml 但都没有效果。 网上建议在web.xml中添加 ： &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;struts-cleanup&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.apache.struts2.dispatcher.ActionContextCleanUp &amp;lt;/filter-class&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;struts-cleanup&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; 来设定本地化和编码，然后在struts.xml中添加过滤器 &amp;lt;constant value=&amp;quot;UTF-8&amp;quot; name=&amp;quot;struts.i18n.encoding&amp;quot;&amp;gt;&amp;lt;/constant&amp;gt; &amp;lt;constant value=&amp;quot;UTF-8&amp;quot; name=&amp;quot;struts.locale&amp;quot;&amp;gt;&amp;lt;/constant&amp;gt; 根据我测试，都没有效果。 我检查完JSP页面编码和本地文件编码，也都不存在问题。 最后我在一</description>
      <content:encoded><![CDATA[<p>继续昨天的编码问题 我一直全部采用UTF-8格式，而且在jUnit测试中并没有问题，说明是在Struts进行数据收集时候出错。</p>
<p>Google之后，根据网上一些建议修改web.xml struts.xml 但都没有效果。</p>
<p>网上建议在web.xml中添加 ：</p>
<pre><code>&lt;filter&gt;
	&lt;filter-name&gt;struts-cleanup&lt;/filter-name&gt;
	&lt;filter-class&gt;org.apache.struts2.dispatcher.ActionContextCleanUp
	&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
	&lt;filter-name&gt;struts-cleanup&lt;/filter-name&gt;
	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre>
<p>来设定本地化和编码，然后在struts.xml中添加过滤器</p>
<pre><code>&lt;constant value=&quot;UTF-8&quot; name=&quot;struts.i18n.encoding&quot;&gt;&lt;/constant&gt;
&lt;constant value=&quot;UTF-8&quot; name=&quot;struts.locale&quot;&gt;&lt;/constant&gt;
</code></pre>
<p>根据我测试，都没有效果。</p>
<p>我检查完JSP页面编码和本地文件编码，也都不存在问题。
最后我在一片帖子中看到讲WebWork2和Struts2的一些过滤器不一样，那位高手遇到和我几乎一样的问题，然后他使用另外一个Filter ：</p>
<pre><code>&lt;filter&gt;
	&lt;filter-name&gt;struts2&lt;/filter-name&gt;
	&lt;filter-class&gt;org.apache.struts2.dispatcher.FilterDispatcher
	&lt;/filter-class&gt;
&lt;/filter&gt;
</code></pre>
<p>在Struts2中War文件解压出来的.xml中使用的是
org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
我并不清楚两者的区别，但是在采用 org.apache.struts2.dispatcher.FilterDispatcher 之后，问题迎刃而解。
然后查看手头的Struts2书，上面也是用的org.apache.struts2.dispatcher.FilterDispatcher
嗯，自己水平实在太菜，继续努力。</p>
<p>-技术改变世界，创新驱动中国-</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
