<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>重构 on Log4D</title>
    <link>https://blog.alswl.com/tags/%E9%87%8D%E6%9E%84/</link>
    <description>Recent content in 重构 on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Nov 2009 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/%E9%87%8D%E6%9E%84/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java笔记 使用反射来改进BaseDao</title>
      <link>https://blog.alswl.com/2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/</link>
      <pubDate>Tue, 17 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/note-the-use-of-java-reflection-to-improve-the-basedao/</guid>
      <description>关于反射 反射的定义（via Wiki）：在计算机科学中，反射是指一种特定类型的计算机程序能够在运行时以一种依
赖于它的代码的抽象特性和它的运行时行为的方式被更改的特性。用比喻来说，那种程式能够&amp;quot;观察&amp;ldquo;并且修改自己的行为。
Java中的反射示例如下：
package dddspace.job.exercise1116; public class Foo {
public void fun(String str) {
System.out.println(str);
}
}
package dddspace.job.exercise1116; import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
public class ReflectionDemo {
public static void main(String[] args) throws SecurityException,
NoSuchMethodException, ClassNotFoundException, InstantiationException,
IllegalAccessException, IllegalArgumentException,
InvocationTargetException {
// 不使用反射
Foo foo = new Foo();
foo.fun(&amp;ldquo;no reflection&amp;rdquo;);
// 使用反射
String className = &amp;ldquo;dddspace.job.exercise1116.Foo&amp;rdquo;;
String funName = &amp;ldquo;fun&amp;rdquo;;
// 获取类名
Class cls = Class.forName(className);
// 创建Object实例</description>
    </item>
    
  </channel>
</rss>
