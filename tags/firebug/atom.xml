<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>firebug on Log4D</title>
    <link>https://blog.alswl.com/tags/firebug/</link>
    <description>Recent content in firebug on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2011 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/firebug/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Html元素事件查看器Eventbug</title>
      <link>https://blog.alswl.com/2011/07/eventbug/</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/07/eventbug/</guid>
      <description>Chrome的开发者工具里面有一个小功能：查看当前元素的Event，比如onclick/onblur等事件。
一直想在Firefox里面也找到类似的插件，今天正好看到这么一个好东西，叫做EventBug。
官方的介绍如下
Eventbug是一款能够列出所有绑定事件的Firebug扩展，它将这些事件按事件类型排列。
需要Firebug1.5 源码沿用Firebug的BSD风格协议 请使用Firebug的Bug报告列表来提交问题 请使用Firebug的新闻列表来提出问题 作者：John J. Barton, Jan Odvarko
测试发现在Firefox5下面没有问题。
这么一款插件在调试js或者对别人的页面做一些js hack特别有用，强烈推荐之。
Eventbug官方地址 Eventbug介绍博文（En） Eventbug下载链接 </description>
    </item>
    
    <item>
      <title>使用Firebug和FirePHP调试PHP[译文]</title>
      <link>https://blog.alswl.com/2010/03/use-firebug-and-firephp-debugging-php/</link>
      <pubDate>Mon, 15 Mar 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/03/use-firebug-and-firephp-debugging-php/</guid>
      <description>这是我第一篇译文，在写WordPress 主题时候偶尔看到的FirePHP插件，看都这篇文章，不知道为什么，动了翻译的念头。
原文链接：Debug PHP with Firebug and
FirePHP
译言的链接：译言网 |
使用Firebug和FirePHP调试PHP
×××××以下译文××××××
如果你和我一样，你会在开发网页项目时候完全无法离开FireBug。这个小巧的&amp;quot;臭虫&amp;quot;是一个神奇而有用的H
TML/CSS/JavaScript/Ajax调试器。但是你也许不知道这个还可以用来调试PHP，没错，它可以，感谢一款名为FirePHP的FireFox插件
。
通过一个小小的服务端库，和这款在Firebug上的插件，你的PHP脚本能够发送调试信息到浏览器，轻易的通过HTTP相应头编码。一旦你设置，你可以在Fiire
bug的控制台获得PHP脚本警告和错误，就感觉像直接调试JavaScript一样
使用这个工具，首先你需要安装FirePHP插件
。这个插件需要你已经安装FireBug。装好FirePHP之后，重新打开Firebug面板时候，你会看到新加了一个蓝色的臭虫图标。点击这个图标会出现一个开启
或者关闭FirePHP的菜单。
当然，这时候我们还无法做任何事，你还需要安装FirePHP的服务端，点击这里下载。这是一个独立的版本，你可以手动下载或者使用PEAR。装后之后，你可是轻松的将这个库加入你的代码。它被设计了很多版本来整合入多个框架或者管理系统，比如
[WP-FirePHP plugin for WordPress](http://wordpress.org/extend/plugins/wp-
firephp/) 和 [JFirePHP plugin for Joomla](http://joomlacode.org/gf/project/kune
na/frs/?action=FrsReleaseView&amp;amp;release_id=11823)。暂时不管这些，我们将把精力集中在独立的功能上。
一旦你在你服务器上部署了FirePHP库，你还需要在你的代码中加入以下的代码：
require_once(&#39;FirePHPCore/fb.php&#39;);
这是因为FirePHP通过HTTP头发送记录的数据，你需要缓存你的代码产生的输出，从而来响应头信息从这里获取代码生成的内容。这个可以通过在代码头部的ob_ start来实现。
ob_start();
当这些步骤完成后，你可以开始使用FirePHP了。你需要做的只是调用fb函数在任何你想要记录的地方。同时你也可以使用一个可选的标签和常量去定义预定义信息
，一个错误，一个警告，或者一条信息。
$var=array(&amp;lsquo;a&amp;rsquo;=&amp;gt;&amp;lsquo;pizza&amp;rsquo;,&amp;amp;nbsp_place_hold
er;&amp;lsquo;b&amp;rsquo;=&amp;gt;&amp;lsquo;cookies&amp;rsquo;,&amp;lsquo;c&amp;rsquo;=&amp;gt;&amp;lsquo;celery&amp;rsquo;);
fb($var);
fb($var,&amp;ldquo;Anarray&amp;rdquo;);
fb($var,FirePHP::WARN);
fb($var,FirePHP::INFO);
fb($var,&amp;lsquo;Anarraywith&amp;amp;
nbsp_place_holder;anErrortype&amp;rsquo;,&amp;amp;nbsp_pla
ce_holder;FirePHP::ERROR);
$var = array(&#39;a&#39;=&amp;gt;&#39;pizza&#39;, &#39;b&#39;=&amp;gt;&#39;cookies&#39;, &#39;c&#39;=&amp;gt;&#39;celery&#39;);fb($var);fb($var, &amp;quot;An array&amp;quot;);fb($var, FirePHP::WARN);fb($var, FirePHP::INFO);fb($var, &#39;An array with an Error type&#39;, FirePHP::ERROR); 这些代码将在Firebug控制台输出如下所示
你也可以使用FirePHP来跟踪你程序的执行情况：通过使用FirePHP::TRACE常量，你可以在 fb被调用的地方查看``行数、类名和方法名
1
functionhello(){
2</description>
    </item>
    
  </channel>
</rss>
