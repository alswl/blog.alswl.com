<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Codesmith on Log4D</title>
    <link>https://blog.alswl.com/tags/codesmith/</link>
    <description>Recent content in Codesmith on Log4D</description>
    <generator>Hugo -- 0.125.6</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 26 Feb 2011 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/tags/codesmith/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CodeSmith使用心得</title>
      <link>https://blog.alswl.com/2011/02/codesmith/</link>
      <pubDate>Sat, 26 Feb 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/02/codesmith/</guid>
      <description>CodeSmith是一款著名的代码生成器，可以帮助开发者完成一些重复性的劳动，并且能够保证更高的代码质量。CodeSmith使用Template（*.cst ）模板进行基础代码片段的定义，支持语言包括C#, Java, VB, PHP, ASP.NET, SQL等等。 一个简单的Sample CodeSmith使用的模板使用方式类似于aspx/jsp页面，也就是基础代码+脚本的方式，大致代码如下（官方的sample2）。 &amp;lt;%@ CodeTemplate Language=&amp;quot;C#&amp;quot; TargetLanguage=&amp;quot;Text&amp;quot; Description=&amp;quot;This template demonstrates using properties in your template.&amp;quot;</description>
      <content:encoded><![CDATA[<p>CodeSmith是一款著名的代码生成器，可以帮助开发者完成一些重复性的劳动，并且能够保证更高的代码质量。CodeSmith使用Template（*.cst
）模板进行基础代码片段的定义，支持语言包括C#, Java, VB, PHP, ASP.NET, SQL等等。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201612/404.png" alt="CodeSmith"  />


</p>
<h2 id="一个简单的sample">一个简单的Sample</h2>
<p>CodeSmith使用的模板使用方式类似于aspx/jsp页面，也就是基础代码+脚本的方式，大致代码如下（官方的sample2）。</p>
<pre><code>&lt;%@ CodeTemplate Language=&quot;C#&quot; TargetLanguage=&quot;Text&quot; Description=&quot;This template demonstrates using properties in your template.&quot; %&gt;
&lt;%@ Property Name=&quot;Person&quot; Type=&quot;System.String&quot; Description=&quot;This will show up at the bottom of the property grid when the property is selected.&quot; %&gt;
&lt;%-- 
This template demonstrates using properties in your template.
--%&gt;
This is some static content (just like the static HTML in a ASP page).
&lt;%= &quot;Hello &quot; + this.Person + &quot;!&quot; %&gt;
This is more static content.
</code></pre>
<p>这个结构熟悉吧，几行代码分别表示模板属性，参数，脚本（注释），脚本（输出），静态文本。</p>
<p>通过上面这个例子可以直观看到CodeSmith使用方式，无非是在固有的代码片段上面进行一些动态的输出。</p>
<p>例子使用了一个名为Person的属性，其类型是String。在CodeSmith中，所有.net的基础属性都能够使用，除此之外，CodeSmith还封装了一
些特殊的属性类型，方便用户使用，像多行文本，文件选择，XML序列化文件、Key-Value键值对等等。</p>
<p>通过&lt;%@ Assembly Name=&ldquo;SchemaExplorer&rdquo; %&gt;和&lt;%@ Import Namespace=&ldquo;SchemaExplorer&rdquo;
%&gt;，我们能够使用自定义的dll和命名空间，托.net平台类库的福，系统的灵活性大大提高了。</p>
<h2 id="数据接入">数据接入</h2>
<p>仅仅拥有上面这些特性，CodeSmith还不足以成为一个趁手的工具。真正让自定义功能发挥到极致的是CodeSmith中的SchemaExplorer。</p>
<p>SchemaExplorer的作用是给CodeSmith提供各类基础数据，比如字段的设计、表结构的设计。SchemaExplorer下面有两个比较常用的类，
TableSchema和ViewSchema，能够读取表信息和视图信息。</p>
<p>官方代码片段如下：</p>
<pre><code>&lt;%@ Property Category=&quot;1.Database&quot; Name=&quot;Tables&quot; Optional=&quot;False&quot;
    Type=&quot;SchemaExplorer.TableSchemaCollection&quot; 
    Description=&quot;Database to create SQLite DDL from.&quot; %&gt;
&lt;% foreach (TableSchema table in Tables) { %&gt;
-- Table &lt;%= string.Format(EscapeFormat, table.Name) %&gt; data
&lt;% string columnDefinition = BuildColumns(table); %&gt;
&lt;% string tableName = BuildTableName(table); %&gt;
&lt;% DataTable data = table.GetTableData(); %&gt;
&lt;% foreach (DataRow row in data.Rows) { %&gt;
INSERT INTO &lt;%= tableName %&gt;&lt;%= columnDefinition %&gt; VALUES (&lt;%= BuildInsert(row) %&gt;);
&lt;% } // for each row%&gt;
</code></pre>
<p>&lt;% } // for each table%&gt;</p>
<p>上面代码通过便利Table，生成了一系列INSERT语句。</p>
<p>细心的童鞋可能发现了，描述中提到了&quot;Database to create SQLite DDL from&quot;，没错，通过SchemaExplorer，Code
Smith屏蔽了数据库差异，所以能够使用各大主流数据库，从MySQL到MSSQL，从SQLite到PostreSQL，并且，只要把提供实现了SechemaE
xplorer接口的dll放入CodeSmith/SchemaProviders目录下面，就能够理论上实现各种数据接入（其实。。。官方的SQLite接入都有
问题，反正我死活没成功，最后还是用了原生支持的MSSQL）。</p>
<h2 id="我使用的数据接入">我使用的数据接入</h2>
<p>CodeSmith提供的SechemaExplorer虽然强大，但是却有一个弊端：它设计用来读取数据库结构，而不是其中的数据。TableSchema类型只提
供字段类型信息，而不提供具体数据内容。</p>
<p>我需要读取的数据并不是表结构，而是里面具体的数据，我需要根据这些数据生成具体代码，所以需求和CodeSmith的设计思路不一致，我早起使用了ViewSche
ma来曲线实现读取数据库内容的功能。（ViewSchema可以读取具体内容）</p>
<p>通过DataRow row in this.V_JOB.GetViewData().Rows，我可以获取视图里面所有数据列。这种方法比较取巧，缺点也显而易见
：每次不同的SQL需要定义一个额外的视图，很快我就放弃了这种办法。</p>
<p>最后我决定使用原生的SQL来获取数据，例子如下</p>
<pre><code>&lt;%@ Assembly Name=&quot;Microsoft.ApplicationBlocks.Data&quot; %&gt;
&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;
&lt;%@ Import Namespace=&quot;System.Data.SqlClient&quot; %&gt;
&lt;%@ Import Namespace=&quot;Microsoft.ApplicationBlocks.Data&quot; %&gt;
&lt;%
StringBuilder  sql = new StringBuilder();
sql.Append(&quot;SELECT * n&quot;);
sql.Append(&quot;FROM   TASK n&quot;);
sql.Append(&quot;       LEFT  JOIN CONTROLER n&quot;);
sql.Append(&quot;         ON TASK.guid = CONTROLER.taskGuid n&quot;);
sql.AppendFormat(&quot;WHERE  TASK.confirmId = '{0}' n&quot;, ConfirmId);
sql.AppendFormat(&quot;       AND TASK.id = '{0}' n&quot;, TaskId);
sql.Append(&quot;       AND CONTROLER.bodyNo IS NULL n&quot;);
sql.Append(&quot;        OR CONTROLER.bodyNo = 0 &quot;);
</code></pre>
<p>SqlConnection connection = new SqlConnection(databaseSchema.ConnectionString);</p>
<p>connection.Open();</p>
<p>DataTable dataTable = SqlHelper.ExecuteDataset(connection, CommandType.Text,
sql.ToString()).Tables[0];</p>
<p>foreach (DataRow row in dataTable.Rows) {</p>
<p>} %&gt;</p>
<p>这个例子就是引用原生的System.Data.SqlClient完成读数据，另外为了简化操作，我使用了微软的SqlHelper进行数据操作封装，即Micro
soft.ApplicationBlocks.Data这个类库。（SqlHelper可以在微软官网下载到）需要引用的类库记得放入CodeSmith/bin目
录下面。</p>
<p>最后，如果Template过于复杂，记得把Template进行分割成小模块，再使用Register关键字引用，以提高复用，DRY。</p>
<pre><code>&lt;%@ Register Name=&quot;DscHideField&quot; Template=&quot;../Controler/DscHideField.cs.cst&quot; %&gt;
</code></pre>
<p>相关链接</p>
<p><a href="http://www.codesmithtools.com/">CodeSmith官网</a></p>
<p>[CodeSmith 介绍 - 代码生成之路 - 博客园](<a href="http://www.cnblogs.com/lxf120/archive/2007/04/03">http://www.cnblogs.com/lxf120/archive/2007/04/03</a>
/698707.html)里面有个很详细的Tutorial</p>
<p><a href="http://terrylee.cnblogs.com/archive/2005/12/28/306254.aspx">CodeSmith开发系列资料总结 - TerryLee&rsquo;s Tech
Space</a> -
博客园李银河的CodeSmith系列文章，有几个高级议题</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
