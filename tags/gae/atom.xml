<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>gae on Log4D</title><link>https://blog.alswl.com/tags/gae/</link><description>Recent content in gae on Log4D</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Mar 2012 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/gae/atom.xml" rel="self" type="application/rss+xml"/><item><title>GAE 编程指南读书笔记</title><link>https://blog.alswl.com/2012/03/gae/</link><pubDate>Sat, 24 Mar 2012 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2012/03/gae/</guid><description>GAE 和我蛮有缘分，我初学 Python 的其中一个原因就是当时 GAE 刚推出， 当时想法是免费的应用要用起来，要不然就浪费了。随后也假模假样的看文档， 就是没有什么产出。
去年写了一个小应用 dbevent2gc ， 期间发现 GAE 和普通程序开发的诸多不同，又遭遇 GAE 配额大幅缩水， 写出来的应用运转的不太稳定。在南京图书馆的架上看见这本《GAE 编程指南读书笔记》， 立即借回家仔细阅读。
GAE 的简介
运行时环境 Python / Java 数据存储 Datastore（实体 / 查询 / 索引 / 事务） 服务（Memcache / GAccount / 任务队列 / 计划任务） 工具（SDK / appcfg / dev_appserver / 控制台） 入门（安装 / GAccount / webapp / app.yaml / /_ah/admin / 注册部署 / login:required）
处理流程：请求 - 前端 - 引用服务器 / 静态文件服务器 - 服务
配额限制：请求限制 / CPU 限制 / 服务限制 / 部署限制 （最新配额：http://code.</description></item><item><title>dbevent2gc v0.1发布</title><link>https://blog.alswl.com/2011/11/dbevent2gc-v0-1-released/</link><pubDate>Fri, 25 Nov 2011 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2011/11/dbevent2gc-v0-1-released/</guid><description>重要通知：Log4D的域名由 http://dddspace.com 迁移到 http://log4d.com 。
订阅地址现在改为 http://log4d.com/feed 和 http://feeds.feedburner.com/dddspace 。（FeedBurner的地址未发生变化）
http://feed.dddspace.com 弃用
请订阅我博客的朋友更新一下订阅地址。
关于dbevent2gc A application to sync douban.com events to Google Calendar.
dbevent2gc是一个GAE应用，它将豆瓣同城的活动同步到Google Calendar的日历， 允许用户订阅活动而知道最近几周周边将发生活动。
dbevent2gc是基于Python/web.py/mako/iCalendar的，源代码地址在 https://github.com/alswl/dbevent2gc
使用方法 目前dbevent2gc运行在GAE上面，地址是 http://dbevent2gc.appspot.com （墙外） http://dbevent2gc.log4d.com/ （我做的本地反向代理） 登录这个地址可以选择需要订阅的城市和活动类型，然后会生成一个按钮， 点击这个按钮可以直接将选择的活动订阅到Google日历。
如果你无法翻墙，可以使用 [http://dbevent2gc.appspot.com/event/location/beijing?type=all](h ttp://dbevent2gc.appspot.com/event/location/beijing?type=all) 这样的地址添加到你的Google Calender里面。
接受的参数：
城市（把最后的beijing替换成你想要的城市拼音， 更多城市拼音查看这里 活动类型 type，支持all, commonweal, drama, exhibition, film, music, others, party, salon, sports, travel. 可选参数,默认为all 安装方法 如果想自己搭建GAE应用，也很简单，直接使用 git://github.com/alswl/dbevent2gc.git 就可以获取最新代码， 然后嘛去GAE注册一个应用，上传即可运行了。
dbevent2gc看上去可以用了，我昨晚发布了v0.1版本。
感兴趣的同学可以试试，现在的问题是获取的活动可能太多了，我后期会加上过滤功能（update 2011-11-26，我已经添加了活动类型选择功能）。</description></item><item><title>最简陋的GAE代理</title><link>https://blog.alswl.com/2011/01/a-simple-gae-proxy/</link><pubDate>Tue, 11 Jan 2011 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2011/01/a-simple-gae-proxy/</guid><description>年前换了一次服务器，之后发现Lifestream的Errors飙升到1000+错误，检查一下，发现是获 取不了豆瓣的rss链接。正好这台主机支持SSH，连入之后CURL了一下豆瓣服务器，发现Time out。
紧接着发现中国内的所有域名都无法使用CURL获取，联系小张之后，得知该主机曾经被入侵过，于是屏蔽了中国大陆的ip段（囧~入侵和中国ip有毛关系）
遂想用GAE做个代理服务器，反正获取RSS也只要Get一下，代码没几句。把这项任务放入Toodledo之后，就一直没去弄，今天发现GAE Laucher升级了，就部署到自己GAE上了。
地址格式如http://jasontiproxy.appspot.com/proxy?url=www.douban. com/feed/people/alswl/interests，url参数名后面跟着具体的url。
代码其实就是用urllib2获取一下html，核心如下。
#!/usr/bin/env python from google.appengine.ext import webapp
from google.appengine.ext.webapp import util
import urllib2
class MainHandler(webapp.RequestHandler):
def get(self):
url = self.request.get(&amp;lsquo;url&amp;rsquo;)
if url.find(&amp;lsquo;http://&amp;rsquo;) &amp;lt; 0:
url = &amp;lsquo;http://&amp;rsquo; + url
conn = urllib2.urlopen(url)
html = conn.read()
encoding = conn.headers[&amp;lsquo;content-type&amp;rsquo;].split(&amp;lsquo;charset=&amp;rsquo;)[-1]
html = html.decode(encoding).encode(&amp;lsquo;utf-8&amp;rsquo;)
self.response.out.write(html)
def main():
application = webapp.WSGIApplication([(&amp;rsquo;/proxy&amp;rsquo;, MainHandler)],
debug=True)
util.run_wsgi_app(application)
if name == &amp;lsquo;main&amp;rsquo;:
main()
申请一个空间，部署上去就行了，这个小应用可以临时获取一下网页内容，不支持Post和替换url，所以称之为&amp;quot;最简陋的GAE代理&amp;quot;。</description></item><item><title>PylexChat可行性分析</title><link>https://blog.alswl.com/2009/11/pylexchat-feasibility-analysis/</link><pubDate>Mon, 23 Nov 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/11/pylexchat-feasibility-analysis/</guid><description>PylexChat介绍 PylexChat取名自Python+Flex+Chat部 分缩写，这就意味着这个系统是基于Python+Flex的聊天系统。之所以做这个系统，源自我大学的最后一次课程设计，我不想浪费这最后一次可以供我发 挥自己想象力的机会。年后估计要参加工作了，毕业设计也不敢做这么有想法的课程设计。那就最后一次潇洒一下，做一个我完全没有接触过的东西。
我几乎不会Python，是最近一个月迷上这门强悍而简单的语言，我完全不会Flex，是最近1周时间才开始接触Flex。这意味着这次课程设计的 风险挺大。我花了几天的时间做了详细的可行性分析，分析了系统框架和GAE能够提供的服务和限制以及Flex/AIR能做的内容，否决了几个方案，最后总 结了一篇简单可行性分析（本文是一周时间慢慢形成的，并没有遵循正规的开发文档风格）。
几个基本的概念 内容出自维基百科
Python Python，是一种面向对象、直译式计算机程序设计语言，也是一种功能强大而完善的通用型语言，已经具有十多年的发展历史，成熟且稳定。
这种语言具有非常简捷而清晰的语法特点，适合完成各种高层任务，几乎可以在所有的操作系统中运行。
目前，基于这种语言的相关技术正在飞速的发展，用户数量急剧扩大，相关的资源非常多。
Flex Adobe Flex是最初由Macromedia公司在2004年3月发布的，基于其专有的Macromedia Flash平台，它是涵盖了支持RIA（Rich Internet Applications）的开发和部署的一系列技术组合。
FLEX支持创建静态文件，该文件使用解释编译方式并且不需要购买服务器许可证就可以在线部署。
Flex的目标是让程序员更快更简单地开发RIA应用。在多层式开发模型中，Flex应用属于表现层。
Flex 采用GUI界面开发，使用基于XML的MXML语言。Flex 具有多种组件，可实现Web Services，远程对象，drag and drop，列排序，图表等功能；FLEX内建动画效果和其它简单互动界面等。相对于基于HTML的应用（如PHP、ASP、JSP、ColdFusion 及CFMX等）在每个请求时都需要执行服务器端的模板，由于客户端只需要载入一次，FLEX应用程序的工作流被大大改善。FLEX的语言和文件结构也试图 把应用程序的逻辑从设计中分离出来。
Flex 服务器也是客户端和XML Web Services及远程对象（Coldfusion CFCs，或Java类，等支持Action Message Format的其他对象）之间通讯的通路。
AIR dobe AIR（AIR＝Adobe Integrated Runtime），开发代号为Apollo，是一个跨操作系统runtime environment用来建造RIA，使用Flash、Flex、HTML与AJAX，可能部署为桌面应用程式。
AIR是Adobe针对网络与桌面应用的结合所开发出来的技术，可以不必经由浏览器而对网络上的云端程式做控制，也由于这是Adobe所开发的技术，因此能很顺利的与 Adobe旗下的Photoshop、Flash、Firework等应用程式来进行开发。
Google App Engine Google App Engine是一个开发、托管网络应用程序的平台，使用Google管理的数据中心。它在2008年4月发布了第一个beta版本。
Google App Engine使用了云计算技术。它跨越多个服务器和数据中心来虚拟化应用程序。 其他基于云的平台还有Amazon Web Services和微软的Azure服务平台等。
Google App Engine在用户使用一定的资源时是免费的。支付额外的费用可以获得应用程序所需的更多的存储空间、带宽或是CPU负载。
系统需要实现的功能 我简单罗列一下：登录、群聊、私聊、注册（功能实现优先级由高到低排列）。
功能着实有点简单，不过这个系统的亮点在于跨平台，而不是功能的强大。我在设计时候会尽量考虑多些东西，方便以后扩展。
数据交互实现方案 系统最主要也最难实现的部分是数据交互如何进行有效的交互。我总结了一下几种方法。
1.TCP/IP通信 一般的C/S模式程序都会考虑套接字连接方式，这是性能最高的交互方式。使用TCP/IP协议，能够有效的避免Python/Flex语言带来的数据交换问题。我查阅 了Flex文档，在flash.net.Socket下有套接字使用的API，这说明Flex在套接字支持上没有问题。接下来我查阅了GAE的文档，资料比较难找 ，最后我查阅了[沙盒](http://code.google.com/intl/zh-CN/appengine/docs/java/runtime.html #The_Sandbox)的定义、Python/Java在GAE的限制（参考文献-[Will it play in App Engine](http://groups.</description></item><item><title>Google App Engine搭建Twitter API Proxy教程</title><link>https://blog.alswl.com/2009/10/google-app-engine-to-build-twitter-api-proxy-tutorial/</link><pubDate>Wed, 14 Oct 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/10/google-app-engine-to-build-twitter-api-proxy-tutorial/</guid><description>来源：Google App Engine搭建Twitter API Proxy教程
alswl:今天我本来想使用GAppProxy搭建自己的[服务器](http://j asontiproxy.appspot.com/fetch)，不过失败了，似乎客户端有些问题，也可能是我配置的问题。之后就正好看到月光大大的这篇文章，欣喜之 极，搭建了自己的Twitter birdnest服务器，并转载之。
本文将介绍如何通过Google App Engine搭建基于Python 2.5的BirdNest环境，建好的BirdNest可以在TwitterFox或twhirl中使用。
环境准备：Google App Engine 先要注册Google App Engine，注册地址 http://appengine.google.com/ ，然后建立一个applicatio n，目前第一次使用需要验证用户手机，输入手机号码就收验证码即可，之后，就可以用yourid.appspot.com来访问你的app应用。
此外，还需要下载安装Google APP Engine的开发环境，注意Python的版本，需要是2.5系列的，不能使用2.6或更高的版本，否则运行会出错。
Google App Engine SDK 下载地址 [http://code.google.com/intl/zh- CN/appengine/downloads.html](http://code.google.com/intl/zh- CN/appengine/downloads.html)
Python 2.5.4 下载地址 [http://www.python.org/download/releases/2.5.4/](http://www. python.org/download/releases/2.5.4/)
关于Google App Engine的详细使用说明请参见[这个地址](http://www.williamlong.info/archives/1880. html)，这里我就不再累赘。
环境准备：BirdNest 下载birdnest要注意是下载[分支branches/gae](http://birdnest.googlecode.com/svn/branches/g ae)，别下载主干trunk，否则更新到GAE上也不能用，会报错。可以使用一个SVN工具下载。例如[TortoiseSVN](http://www.will iamlong.info/archives/1878.html)等。将其放到一个目录中，进入目录，编辑app.yaml文件，将第一行的application 里的参数修改为自己的应用名。（alswl:我使用Eclipse获取了SVN的内容）
发布应用到GAE 准备好了上面的一切后，就可以发布这个应用到自己的Appspot上了，执行 appcfg.py update 目录名，中间会要求输入Gmail的用户名和密码，之后就可以使用了。你创建的API地址应该是yourid.appspot.com/api/ 。
使用BirdNest 在twhirl里的使用方法是，打开账号管理Accounts manager，选择laconi.ca账户类型，输入：[你的twitter帐号名]@yourid .appspot.com，密码为Twitter密码，即可使用。（alswl:我使用的是twhirl，需要安装Adobe AIR环境）
在twitterfox里的使用方法是，打开 C:Documents and SettingsAdministratorApplication DataMozillaFirefoxProfiles 随机信息 .defaultextensionstwitternotifier@naan.netcomponents目录，编辑 nsTwitterFox.js文件，找不到的话直接在Documents and Settings中搜索nsTwitterFox.js文件，编辑该文件的38行，将其修改为 var TWITTER_API_URL = http://yourid.</description></item><item><title>GAE+校内App初接触</title><link>https://blog.alswl.com/2009/09/gae-initial-contact-with-the-school-app/</link><pubDate>Mon, 28 Sep 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/09/gae-initial-contact-with-the-school-app/</guid><description>下午刚有了在Google App Engine上写校内（人人网）App的想法，下午就迫不及待的开始动手。下面我以一个简单的Hello World来介绍一个开发步骤。
1.创建GAE应用 建立一个Google App Engine空间，需要一个Google帐号，仅此而已。拥有帐号，进入 App Engine ，激活这个服务，就可以创建新的应用。如何创建不是我这里要讲的重点，现在GAE支持简体中文版本，应该没有任何问题。
一个简单的App控制台
2.部署GAE App 刚才建立的GAE App其实还是空的，如果访问xxx.appspot.com时候，你会发现什么都出不来（按理应该是404页面，但是由于连404页面都没有设置 ，所以Nothing,检查http状态会发现返回的是404状态）。
这时候我们就要开始部署这个GAE App了：1.下载一个Google App Engine SDK for Python-Win，这样就可以在本地测试项目，然后发布到 GAE。
用这个GAE Launcher在本地创建了一个Application，注意标识符和你网上申请的要一致。然后会自动生成一个包含&amp;quot;」Hello Word!「的main.py和app.yaml的文件夹。其中app.yaml的内容是用来配置项目的。
相关链接：app.yaml的具体设置
我创建了一个名为jasontidemo的App，并且启动服务器，可以进行浏览。
在一切没有问题之后，我们就可以惦记Deploy部署这个项目了，这时候要输入帐号和密码，然后出现console控制台等待信息。出现下面提示时候，就说明上传成功 了。
Closing update: new version is ready to start serving. Uploading index definitions. Password for alswlwangzi@gmail.com: 2009-09-27 16:00:36 (Process exited with code 0) 这时候我们就可以打开xxx.appspot.com查看刚才部署的网站。
3.校内应用 拥有校内帐号，就可以创建校内应用。第一步是需要安装一个名为「开发者」 的应用。通过这个应用，可以链接到其他一些有帮助的内容：开放平台文档、测试工具、讨论区。
第二步是创建一个新的应用，按部就班的填上相关资料。
校内开发者，右上角可以申请开发应用（看讨论区貌似童鞋们都不满意这个开发平台呢）
我的应用程序，在这里可以编辑应用的属性
创建之后，就可以填上Canvas的基本选项中的「应用展示地址」和「Canvas Callback URL」，后者就是实际的地址，我们将填上刚才的xxx.appspot.com这种形式的网址。
最后测试自己的应用，也就是刚才「应用展示地址」，形式类似于apps.renren.com/xxx/，就可以看到我们的应用了，这时候基本框架就差不多了。
4.噩耗 此时当满天欢喜时候打开刚才的「应用展示地址」，你会惊奇的发现校内居然报错了，直接报了405错误。什么是405错误，就是服务器没有权限访问。
我花了一下午时间才解决这个问题，因为问题可能出在校内，也可能是GAE的功能限制上。
在appspot上测试这个应用是没有任何问题的
显示的源码，其中的xnml校内服务器自己可以解析出来的，这段代码在校内测试工具也能通过</description></item><item><title>当Google APP Engine遇上校内</title><link>https://blog.alswl.com/2009/09/when-google-app-engine-encounter-campus/</link><pubDate>Sun, 27 Sep 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/09/when-google-app-engine-encounter-campus/</guid><description>昨天看《程序员》时候看到一篇讲开放接口的文章，是FaceBook的一个开发人员写的，讲了很多关于开放平台的东西 。其中提到Google App Engine的云计算支持，FaceBook的FBML（校内的称为XNML，一种标记性语言）。
Google App Engine(GAE) Google App Engine让用户可以在 Google 的基础架构上运行的网络应用程序。Google App Engine 应用程序易于构建和维护，并可根据用户的访问量和数据存储需要的增长轻松扩展。使用 Google App Engine，将不再需要维护服务器：用户只需上传用户的应用程序，它便可立即为用户的用户提供服务。
通俗的说，App Engine就像是免费提供的一个500M高性能的空间，和一个appspot.com二级域名。在Google强大的云计算能力下，服务器的速度 和质量毋容置疑。现在App Engine支持Python和Java（似乎Java有些限制，具体的细节我没有看）。
XNML XNML（xiao nei market language）是以种标记性语言，如果学过JavaEE，就会发现它和OGNL语言很像。XNML大概的形式是&amp;lt;xnml:iframe ….&amp;gt;这种形式，校内服务器会负责解析这种格式的语法生成相应的内容。其实这是把一些功能性内容封装成接口，为了安全和方便。
在校内提供的开发平台写应用需要自己的一个地址，肯定不能是192.168.0.X这种本机地址了。这时候Google App Engine就派上了大用场，把应用的文件和数据存储在GAE里，那是相当的爽，可以放心的开发自己的第三方应用了。
我一直对开放平台的开发有兴趣，现在有了GAE这个利器，正好写一个自己的小应用玩玩，顺便练习练习自己的Python。
相关链接： 校内开发者（校内开发人员必须安装的应用）：http://app.renren.com/developers/home.do
校内开放平台文档：http://wiki.dev.renren.com/wiki/%E9%A6%96%E9%A1%B5
Google App Engine相关下载：http://code.google.com/appengine/downloads.html
Google App Engine SDK for Python-Win：GoogleAppEngine_1.2.5.msi
Google App Engine SDK for Java：appengine-java- sdk-1.2.5.zip
Google App Engine Documentation：google-appengine-docs-20090921.zip
最后一个小图标： ，呵呵，Google的图标都那么帅</description></item></channel></rss>