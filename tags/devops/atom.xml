<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>devops on Log4D</title>
    <link>https://blog.alswl.com/tags/devops/</link>
    <description>Recent content in devops on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 09 Sep 2018 23:21:40 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/devops/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DevOps 和 SRE</title>
      <link>https://blog.alswl.com/2018/09/devops-and-sre/</link>
      <pubDate>Sun, 09 Sep 2018 23:21:40 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2018/09/devops-and-sre/</guid>
      <description>最近有一位朋友和我聊职业发展方向问题，聊了不少 DevOps 和 SRE 话题。 我几年前刚接触这两个概念时也常常将之混淆，可惜当时没有人来解答我困惑。 现在这虽然已经极为流行，但是我发现我这位朋友对这两个职位还存在一些误区。 于是我给了一些见解并整理成文章以饕大众。
最常见的误区：
DevOps 新概念，好高级哦 SRE 是高级版 DevOps 运维可以轻松转身 DevOps 工程师 让我一一给你讲解吧。
image via YouTube
DevOps 和 SRE 定义 DevOps 是字面上 Dev 开发 / Ops 运维两者组合， 严格意义上 DevOps 如下（via DevOps - Wikipedia）：
DevOps（Development 和 Operations 的组合词）是一种重视“软件开发人员（Dev） ”和“IT 运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。
SRE 全称是 Site Reliability Engineering，最早是由 Google 提出，并且在其工程实践中发扬光大。 他们还出了一本同名书籍「Site Reliability Engineering」， 让这个理念在互联网工程师圈子里广泛传播。
Google 对 SRE 解释是（via Site Reliability Engineering - Wikipedia）：
Site reliability engineering (SRE) is a discipline that incorporates aspects of software engineering and applies that to operations whose goals are to create ultra-scalable and highly reliable software systems.</description>
    </item>
    
    <item>
      <title>👷如何做年前大扫除</title>
      <link>https://blog.alswl.com/2017/01/spring-cleaning/</link>
      <pubDate>Tue, 03 Jan 2017 23:20:50 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2017/01/spring-cleaning/</guid>
      <description>今年过年特别早，离春节只剩下二十多天了。 为期 7 天的春节里，工程师们不上班，那万一线上业务出现了故障怎么办？ 大公司的朋友们会安排专门的人进行值班（此处心疼一下那些需要大年三十还要值班保证高峰的工程师们）， 而作为创业团队人少，难做到在线值守，就需要对线上进行一些整理盘点，找出潜在问题，为春节长假做一些准备。
我们称之为年前大扫除。
大扫除需要做些什么呢，且听我一一道来。
PS: 冷知识，大扫除英文是 spring cleaning，所以春节大扫除是 Spring Festival spring cleaning。
大扫除的内容 大扫除其实是一个查漏补缺+囤积粮草的事情。
查漏补缺，即找出潜在的问题。这些问题平时可能不会特意去查看， 借助大扫除这个运动，恰好进行盘点。 计算机的世界里，有一个方法论非常好使，在极多场景可以见到其身影：分层。 TCP 的七层模型，架构设计的 N 层 模型，都是对分层思想的使用。 查漏补缺也不例外，我们可以按照业务访问流程，将需要排查的问题拆分为：业务、应用、中间件、网络、物理、存储 etc。
通过分层，不仅仅完成了自上而下地遍历整个技术栈，也同时将不同模块的内容交给不同的责任方， 确保任务的分割。
分完模块，还要告知大家如何具体查找问题。 这里我介绍一个通用的方法：USE1：
For every resource, check Utilization, Saturation, and Errors.
USE 方法是从 Brend Gregg 那里学来的。 在技术设施的领域里，Resource 即是指各种类型的资源，比如 CPU、磁盘、网络、内存， Utilization 指的是使用率，可以简单分为百分制和非百分制。 Saturation 是指饱和率，支持 queue 的资源，就会有这个指标。 Error 即错误，可以从错误统计和日志得知。2
业务领域里面，USE 也有相对应的含义。以审核系统举例， 对应的 USE 可以理解为「审核应用实例跑的 CPU 占用如何，任务队列是否塞满，业务日志是否有异常」。
除了 USE 里面提到的指标，还有几个指标特别重要： TPS 、Latency 和 Capacity。 这几个指标对性能敏感的尤为重要。 检查 USE 的同时，我们必须关注一下这三个指标， 确保 TPS / Latency 是否满足我们预期的 SLA。 哦？压根没有制定 SLA，不要慌，和历史数据对比，先制定一个粗糙的 SLA。 哦？连历史数据都没有？那只能找你 Leader 让他考量一下了。</description>
    </item>
    
  </channel>
</rss>
