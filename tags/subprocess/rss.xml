<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>subprocess on Log4D</title>
    <link>https://blog.alswl.com/tags/subprocess/</link>
    <description>Recent content in subprocess on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 16 Oct 2012 00:42:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/subprocess/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with Python subprocess[译文]</title>
      <link>https://blog.alswl.com/2012/10/working-with-python-subprocess/</link>
      <pubDate>Tue, 16 Oct 2012 00:42:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/10/working-with-python-subprocess/</guid>
      <description>8月底到魔都开始新工作，头一个月当然各种忙，都没时间来更新博客。 这篇文章是在写 Btrace 脚本时候查资料看到的， 看着不错就顺手翻译，没想到差点烂在草稿箱出不来啊出不来。 熬了一个月才磨出来，媳妇都快成婆了有木有。 原文链接：Working with Python subprocess - Shells, Processes, Streams, Pipes, Redirects and More 注意 关于「执行命令时候发生了什么」这个问题，可以在 http://en.wikipedia.org/wiki/Redirection_(computing) 找到更多最新信息。这篇文章遵循 GFDL 协议。 在我的上一篇日志中，我写到如何 build a command line interface with sub-commands in Python。 这次</description>
      <content:encoded><![CDATA[<p>8月底到魔都开始新工作，头一个月当然各种忙，都没时间来更新博客。</p>
<p>这篇文章是在写 <a href="http://kenai.com/projects/btrace/pages/Home">Btrace</a> 脚本时候查资料看到的，
看着不错就顺手翻译，没想到差点烂在草稿箱出不来啊出不来。
熬了一个月才磨出来，媳妇都快成婆了有木有。</p>
<p>原文链接：<a href="http://jimmyg.org/blog/2009/working-with-python-subprocess.html">Working with Python subprocess - Shells, Processes, Streams, Pipes, Redirects and More</a></p>
<hr />
<p>注意</p>
<blockquote>
<p>关于「执行命令时候发生了什么」这个问题，可以在
<a href="http://en.wikipedia.org/wiki/Redirection_(computing)">http://en.wikipedia.org/wiki/Redirection_(computing)</a>
找到更多最新信息。这篇文章遵循 <a href="http://www.gnu.org/copyleft/fdl.html">GFDL</a> 协议。</p>
</blockquote>
<p>在我的上一篇日志中，我写到如何
<a href="http://jimmyg.org/blog/2009/python-command-line-interface-%28cli%29-with-sub-commands.html">build a command line interface with sub-commands in Python</a>。
这次我来尝试如何通过 Python 的 <code>subprocess</code> 模块来和命令行指令进行交互。</p>
<p>我想达到的目标是：</p>
<ul>
<li>查看当你键入命令时究竟发生了什么</li>
<li>如何确认一个命令是否存在并找出到底在哪</li>
<li>通过 Python 或 shell 执行命令</li>
<li>向一个运行中的进程读取 STDOUT 或写入 STDIN</li>
<li>检查进程的退出返回状态</li>
<li>理解 Bash 在命令中断中扮演的角色，并如何将它们发送给程序</li>
</ul>
<!-- more -->
<h2 id="执行程序时发生了什么">执行程序时发生了什么</h2>
<p>当你双击桌面上的终端程序图标时，就会打开一个载入 <code>shell</code> 的程序。
你键入的命令不会直接在内核执行，而是先和 shell 进行交互。</p>
<pre tabindex="0"><code>    Command      (eg. `ls -l&#39;)
       ↓
Terminal Program (eg. `gnome-terminal&#39;)
       ↓
     Shell       (eg Bash)
       ↓
     Kernel      (eg. Linux 2.6.24)
</code></pre><p>更多关于 shell 的信息：</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Unix_shell">http://en.wikipedia.org/wiki/Unix_shell</a></li>
</ul>
<p>更多关于进程如何运行的信息：</p>
<ul>
<li><a href="http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html">http://pangea.stanford.edu/computerinfo/unix/shell/processes/processes.html</a></li>
</ul>
<p>当你通过 Python 执行程序时候，你可以选择直接从内核执行或者通过 shell。
如果你选择直接执行，你就没办法和 bash 同样方式执行命令。</p>
<p>我们先看看怎么使用 shell 和那些好玩的特性功能，
然后再通过 <code>subprocess</code> 来实现同样的功能，</p>
<h3 id="数据流">数据流</h3>
<p>在 UNIX 和 Linux 下，有三个被称作 <em>流</em> 的 I/O 通道，它们通过文本终端
（比如用 gnome-terminal 运行 Bash）和其他应用程序（比如通过 Python 的
<code>subprocess</code> ）这类环境来连接程序。
这几个 I/O 通道分别称为 <em>标准输入</em>， <em>标准输出</em>，和 <em>标准错误输出</em> ,
它们的 <em>文件描述符</em> 分别为 0，1，2。</p>
<table>
  <thead>
    <tr>
      <th> 句柄 </th> <th> 名称 </th> <th> 描述 </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> 0 </td> <td> stdin </td> <td> 标准输入 </td>
    </tr>
    <tr>
      <td> 1 </td> <td> stdout </td> <td> 标准输出 </td>
    </tr>
    <tr>
      <td> 2 </td> <td> stderr </td> <td> 标准错误输出 </td>
    </tr>
  </tbody>
</table>
<p>这里你能看到标准输入叫做 <code>stdin</code>，标准输出称作 <code>stdout</code>，标准错误输出叫做
<code>stderr</code> 。</p>
<p>流是这样工作的：从终端输出获取输入并通过标准输入发送到程序，
程序返回的正常输出从标准输出输出，错误则返回到环境上下文的标准错误输出。
维基百科有幅图将描述这个过程：</p>
<p><a href="http://en.wikipedia.org/wiki/File:Stdstreams-notitle.svg">


<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201209/Stdstreams-notitle.svg.png" alt="Stdstreams-notitle.svg"  />


</a></p>
<p>如果你想将流从一个程序重定向到另一个地方，请看下文分解。</p>
<h2 id="使用-shell">使用 Shell</h2>
<h3 id="重定向标准输入和输出到文件">重定向标准输入和输出到文件</h3>
<p>你可以在 Bash 中使用 <code>&gt;</code> 操作符将一个程序的标准输出重定向到一个文件
（在其他 Shell 也许略有语法差异）。这里有个范例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &gt; file1
</span></span></code></pre></div><p><code>program1</code> 执行后的输出结果从标准输出流写入 <code>file1</code>，并将 <code>file1</code>
其中现有的内容所替换。如果你只是想追加内容，你可以使用 <code>&gt;&gt;</code> 操作符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &gt;&gt; file1
</span></span></code></pre></div><p><code>&lt;</code> 操作符可以被用来从文件中读取数据并传输到程序的标准输入流：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &lt; file1
</span></span></code></pre></div><p>同样的，<code>program1</code> 会被执行，但是此时 <code>file1</code> 取代了键盘，
成为了标准输入的数据源。</p>
<p>你可以组合 shell 操作符以完成更复杂的操作。
下面这个范例中，<code>program1</code> 从 <code>file1</code> 获取数据并发送到标准输入。标准输出则从
<code>program1</code> 输出到 <code>file2</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &lt; file1 &gt; file2
</span></span></code></pre></div><p>也许有时候你需要从一个程序获取输出并将其作为另一个程序的输入。
你可以通过一个临时文件来实现这个操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 &gt; tempfile1
</span></span><span class="line"><span class="cl">program2 &lt; tempfile1
</span></span><span class="line"><span class="cl">rm tempfile1
</span></span></code></pre></div><p>这种方法有点累赘，因此 shell 提供了方便的机制，称为 <em>管道</em></p>
<h3 id="管道">管道</h3>
<p>管道允许一个程序的标准输出直接输入到另一个程序的标准输入流中，
而无须创建临时文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 <span class="p">|</span> program2
</span></span></code></pre></div><p>操作符 <code>|</code> 被称作 <em>管道</em> 符号，因此这种操作就被称为 <em>管道</em>。</p>
<p>这里有一幅来自维基百科的图片来描述管道：</p>
<p><a href="http://en.wikipedia.org/wiki/File:Pipeline.svg">


<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201209/Pipeline.svg.png" alt="Pipeline.svg"  />


</a></p>
<p>这里有个使用 <code>find .</code>（遍历当前目录下的文件和目录）的例子，将输出定向到 <code>grep</code>
程序来查找特定文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find . <span class="p">|</span> grep <span class="s2">&#34;The file I&#39;m after.txt&#34;</span>
</span></span></code></pre></div><p>第一个程序产生的数据是一行一行地导向第二个程序的，所以在第一个程序运行结束之前，
第二个程序就可以开始使用它们。</p>
<h3 id="从文件重定向标准输入和输出">从文件重定向标准输入和输出</h3>
<p>在重定向标准输出的同时，你也可以重定向其他流，
比如重定向标准错误输出到标准输出。我们已经讨论过在 Bash 中，
可以在文件描述符之前使用 <code>&gt;</code>，<code>&lt;</code> 和 <code>&gt;&gt;</code> 操作符来重定向数据流
（还记得之前讨论的数字 0，1，2 么）。如果把标准输出代表的数字 1 省略掉看，
会发现我们一直在使用标准输出。</p>
<p>下面这条命令执行 <code>program1</code> 并将所有标准 <em>错误</em> 数据输出到 <code>file1</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">program1 2&gt; file1
</span></span></code></pre></div><p>执行 <code>program1</code>，错误信息就被重定向到 <code>file</code> 了。</p>
<p>这里有个范例程序让你来测试，将它保存成 <code>redirect1.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">input</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Echo to stdout: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Echo to stderr: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">KeyboardError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span></code></pre></div><p>这个程序始终将接受到的输入数据并同时输出到 stdout 和 stderr 。</p>
<p>在 csh 衍生出来的 shell 中，语法则是在重定向符号之后加上 <code>&amp;</code> 符号，
可以达到同样的效果。（译者注：即 <code>|&amp;</code>）</p>
<p>另一个常用的特性是将一个输出流重定向到定一个。
最常见的用法是将标准错误输出重定向到标准输出，
这样就可以把错误信息和正确信息合并在一起，比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find / -name .profile &gt; results 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span></code></pre></div><p>命令将会找出所有名叫 <code>.profile</code> 的文件。
如果没有重定向，它将输出命中信息到 stdout，错误信息到 stderr
（比如有些目录无权限访问）。如果标准输出定向到文件，错误信息则会显示在命令行上。
为了在结果文件中可以同时看到命中信息和错误信息，我们需要使用 <code>2&gt;&amp;1</code>
将标准错误输出（2）输出到标准输出（1）。（这次即使在 Bash 中也需要 <code>&amp;</code> 符。）</p>
<p>虽然语法上可以将 <code>2&gt;&amp;1</code> 放到 <code>&gt;</code> 前面，但这样不能正常工作。
事实上，当解析器读取 <code>2&gt;&amp;1</code> 时候，它还不知道标准输出将重定向到哪里，
所以标准错误输出就不会被合并。</p>
<p>如果使用管道合并输出流，那么合并符号 <code>2&gt;&amp;1</code> 需要在管道符号 <code>|</code> 之前。比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find / -name .profile 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> less
</span></span></code></pre></div><p>Bash 中的合并输出简写形式是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">command</span> &gt; file 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span></code></pre></div><p>为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">command</span> <span class="p">&amp;</span>&gt;file
</span></span></code></pre></div><p>或者：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">command</span> &gt;<span class="p">&amp;</span>file
</span></span></code></pre></div><p>但是最好别用简写形式，否则你会弄糊涂。我提倡宁愿麻烦但是要清晰。</p>
<p><code>&amp;&gt;</code> 操作符同时重定向标准输出和标准错误输出。
它的作用和在 Bourne Shell 中的 <code>command &gt; file 2&gt;&amp;1</code> 一样。</p>
<h3 id="管道链">管道链</h3>
<p>重定向可以和管道连接起来组成复杂的命令，比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls <span class="p">|</span> grep <span class="s1">&#39;\.sh&#39;</span> <span class="p">|</span> sort &gt; shlist
</span></span></code></pre></div><p>列出当前目录下所有文件，然后过滤剩下仅包含 .sh 的内容，根据文字编码排序，
然后将最终结果输出到 shlist。这种类型的命令经常在 shell 脚本和批处理文件中使用。</p>
<h3 id="多重输出重定向">多重输出重定向</h3>
<p>标准命令 <code>tee</code> 可以重定向一个命令到多个地方。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls -lrt <span class="p">|</span> tee xyz
</span></span></code></pre></div><p>这将文件列表同时输出到标准输出和文件 <code>xyz</code> 中。</p>
<h3 id="here-文档">Here 文档</h3>
<p>大部分 Shell，包括 Bash 都支持 <em>Here 文档</em>，它允许你使用 <code>&lt;&lt;</code>
操作符和一些文本作为分隔符将文本块嵌入到命令之中。</p>
<p>在下面的范例中，文本块被传送给 <code>tr</code> 命令，同时使用 <code>END_TEXT</code> 作为 Here
文档分隔符来指明文本的开始和结束。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tr a-z A-Z <span class="s">&lt;&lt;END_TEXT
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; one two three
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; uno dos tres
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; END_TEXT</span>
</span></span><span class="line"><span class="cl">ONE TWO THREE
</span></span><span class="line"><span class="cl">UNO DOS TRES
</span></span></code></pre></div><p>经过 <code>tr</code> 处理后，输出的结果是 <code>ONE TWO THREE</code> 和 <code>UNO DOS TRES</code>。</p>
<p>一种常用用法是用 Here 文档向文件添加文本。
默认情况下，文本中的变量是会被替换成真实值的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat <span class="s">&lt;&lt; EOF
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; Working dir $PWD
</span></span></span><span class="line"><span class="cl"><span class="s">&gt; EOF</span>
</span></span><span class="line"><span class="cl">Working dir /home/user
</span></span></code></pre></div><p>通过在 Here 文档标签引上单引号或者双引号，就可以避免这种转义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat &lt;&lt; <span class="s2">&#34;EOF&#34;</span>
</span></span><span class="line"><span class="cl">&gt; Working dir <span class="nv">$PWD</span>
</span></span><span class="line"><span class="cl">&gt; EOF
</span></span><span class="line"><span class="cl">Working dir <span class="nv">$PWD</span>
</span></span></code></pre></div><h2 id="介绍-subprocess">介绍 <code>subprocess</code></h2>
<p>刚才我们讨论过了一些命令行提供的功能，现在让我们体验一下 <code>subprocess</code> 模块。
你可以在命令行中运行下面这条简单的命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;Hello world!&#34;</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span></code></pre></div><p>让我们试着在 Python 中运行它。</p>
<p>以前我们需要使用一堆各异的标准库来实现进程管理。
从 Python 2.4 开始，所有功能都被精心地整理到 <code>subprocess</code> 这个模块，
其中的 <code>Popen</code> 类可以提供所有我们需要的。</p>
<p>注意</p>
<blockquote>
<p>如果你对新的 <code>Popen</code> 如何替换旧模块，[subprocess-doc][subprocess-documentation]
有一个章节解释过去是如何作用以及当前是如何作用。</p>
</blockquote>
<p><code>Popen</code> 可以接受一下参数，详情可以在 [using-the-subprocess-module][http://docs.python.org/library/subprocess.html#using-the-subprocess-module]：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">subprocess.Popen<span class="o">(</span>args, <span class="nv">bufsize</span><span class="o">=</span>0, <span class="nv">executable</span><span class="o">=</span>None, <span class="nv">stdin</span><span class="o">=</span>None,
</span></span><span class="line"><span class="cl">    <span class="nv">stdout</span><span class="o">=</span>None, <span class="nv">stderr</span><span class="o">=</span>None, <span class="nv">preexec_fn</span><span class="o">=</span>None, <span class="nv">close_fds</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">    <span class="nv">shell</span><span class="o">=</span>False, <span class="nv">cwd</span><span class="o">=</span>None, <span class="nv">env</span><span class="o">=</span>None, <span class="nv">universal_newlines</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">    <span class="nv">startupinfo</span><span class="o">=</span>None, <span class="nv">creationflags</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><h2 id="使用-shell-1">使用 Shell</h2>
<p>让我们以 Hello World! 这个例子开始。和之前类似，通过
Python shell 执行下列命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import subprocess
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo &#34;Hello world!&#34;&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span></code></pre></div><p>如你所见，标准输出和同样打印出 <code>Hello world!</code> ，
区别在于命令行显示了一个我们创建的 <code>subprocess.Popen</code> 实例。</p>
<p>如果你将代码保存为 <code>process_test.py</code> ，然后在命令行执行，你会得到一样的结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python process_test.py
</span></span><span class="line"><span class="cl">Hello world!
</span></span></code></pre></div><p>看上去运行 OK。</p>
<p>你可能在琢磨我们到底使用了哪个 shell。Unix 的默认 shell 是 <code>/bin/sh</code> ，
而 Windows 下面则取决于 <code>COMSPEC</code> 这个环境变量。
如果你设置 <code>shell=True</code> ，则可以通过 <code>executable</code> 参数来自定义 shell。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo &#34;Hello world!&#34;&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True, <span class="nv">executable</span><span class="o">=</span><span class="s2">&#34;/bin/bash&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span></code></pre></div><p>和我们之前看到的一样，但是如果你使用特定的 shell ，
你也许会发现不同的地方。</p>
<p>让我们探索一下通过 Python 使用 shell 的其他特性：</p>
<p>变量解析：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo $PWD&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">/home/james/Desktop
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span></code></pre></div><p>管道和重定向：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">subprocess.Popen<span class="o">(</span><span class="s1">&#39;echo &#34;Hello world!&#34; | tr a-z A-Z 2&gt; errors.txt&#39;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0x...&gt;
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; HELLO WORLD!
</span></span></code></pre></div><p><code>errors.txt</code> 应该是空的，因为没有任何错误产生。
有趣的是在我电脑上，<code>Popen</code> 实例在 <code>HELLO WORLD!</code> 被打印到标准输出
<em>之前</em> 出现。
恩，管道和重定向都可以正常工作。</p>
<p>Here 文档：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; subprocess.Popen<span class="o">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">... cat &lt;&lt; EOF &gt; new.txt
</span></span></span><span class="line"><span class="cl"><span class="s2">... Hello World!
</span></span></span><span class="line"><span class="cl"><span class="s2">... EOF
</span></span></span><span class="line"><span class="cl"><span class="s2">... &#34;&#34;&#34;</span>, <span class="nv">shell</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">&lt;subprocess.Popen object at 0xb7dbbe2c&gt;
</span></span></code></pre></div><p><code>new.txt</code> 文件正常生成，并且包含内容 <code>Hello World!</code> 。</p>
<p>如我们预料，在 shell 中正常运行的命令同样可以在 Python shell 中运行。</p>
<h2 id="字符串和参数列表">字符串和参数列表</h2>
<p>现在可以轻松地在 Python 中执行命令行了，你也许会需要传递变量过去。
假设我们要用 <code>echo</code> 重写刚才那个函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_string</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span> <span class="n">string</span>
</span></span></code></pre></div><p>你也许想当然这样写：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_string</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="s1">&#39;echo &#34;</span><span class="si">%s</span><span class="s1">&#34;&#39;</span><span class="o">%</span><span class="n">string</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>这种写法，当字符串是 <code>Hello World!</code> 时候没问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span></code></pre></div><p>但这样就有问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;nasty &#34; example&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">/bin/sh: Syntax error: Unterminated quoted string
</span></span></code></pre></div><p>这个命令会被执行成 <code>echo &quot;nasty&quot; example&quot;</code> ，唔，这里的转义有问题。</p>
<p>一种解决方式是在代码里面做好转义，但这样会很麻烦，
你需要处理所有可能出现的转义字符和空格等等。</p>
<p>Python 可以帮你处理好，条件是你不能直接操作 shell，
如何操作看下文。</p>
<h2 id="shell-之外">Shell 之外</h2>
<p>现在让我们试试不操作 shell 来实现同样的效果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">def print_string<span class="o">(</span>string<span class="o">)</span>:
</span></span><span class="line"><span class="cl">	subprocess.Popen<span class="o">([</span><span class="s1">&#39;echo&#39;</span>, string<span class="o">]</span>, <span class="nv">shell</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">Hello world!
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; print_string<span class="o">(</span><span class="s1">&#39;nasty &#34; example&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">nasty <span class="s2">&#34; example
</span></span></span></code></pre></div><p>现在你可以看到它正常地处理了转义。</p>
<p>注意</p>
<blockquote>
<p>实际上你也可以在 <code>shell=False</code> 那里直接使用一个单独的字符串作为参数，
但是它必须是命令程序本身，这种做法和在一个列表中定义一个 <code>args</code>
没什么区别。而如果当 <code>shell=False</code> 时候直接执行字符串命令，则会报错：</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="s1">&#39;echo &#34;Hello world!&#34;&#39;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">594</span><span class="p">,</span> <span class="ow">in</span> <span class="fm">__init__</span>
</span></span><span class="line"><span class="cl">	<span class="n">errread</span><span class="p">,</span> <span class="n">errwrite</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1147</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_execute_child</span>
</span></span><span class="line"><span class="cl">	<span class="k">raise</span> <span class="n">child_exception</span>
</span></span><span class="line"><span class="cl"><span class="ne">OSError</span><span class="p">:</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">2</span><span class="p">]</span> <span class="n">No</span> <span class="n">such</span> <span class="n">file</span> <span class="ow">or</span> <span class="n">directory</span>
</span></span></code></pre></div><p>如果我们还是坚持使用一个字符串，Python 会认为这个 <em>完整的字符串</em>
是一个可执行的程序名，而实际上没有一个叫做 <code>echo &quot;Hello world!&quot;</code>
的程序，所以报错了。正确的做法要用 list 分开传送参数。</p>
<h3 id="检查-path-中的程序">检查 PATH 中的程序</h3>
<p>这里有个方法可以找出程序真正的位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">whereis</span><span class="p">(</span><span class="n">program</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">program</span><span class="p">))</span> <span class="ow">and</span> \
</span></span><span class="line"><span class="cl">		   <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">program</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">program</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><p>让我们用它来找出 <code>echo</code> 程序在哪里：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">location</span> <span class="o">=</span> <span class="n">whereis</span><span class="p">(</span><span class="s1">&#39;echo&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">if</span> <span class="n">location</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span> <span class="n">location</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">echo</span>
</span></span></code></pre></div><p>这个方法同样可以检查用户的 <code>PATH</code> 里面是否有 Python 需要的程序。</p>
<p>当然你也可以使用命令行中的程序 <code>whereis</code> 来找出程序的路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ whereis <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">echo: /bin/echo /usr/share/man/man1/echo.1.gz
</span></span></code></pre></div><p>注意</p>
<blockquote>
<p>无论我们使用 <code>shell</code> 为 <code>True</code> 或者 <code>False</code> ，
我们都没有指定执行程序的全路径。
如果这个程序在上下文环境的 <code>PATH</code> 变量中，我们才可以执行。
当然如果你愿意，指定全路径也没问题。</p>
</blockquote>
<p>你也可以坚持指定 <code>executable</code> 为想要执行的程序，
然后 <code>args</code> 就不设定程序。虽然没看到明确的文档，不过我电脑上面可以这么执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">executable</span><span class="o">=</span><span class="s1">&#39;echo&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb776f56c</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>不直接使用 shell 会导致不能直观地使用重定向、管道、here 文档、shell
参数或其他那些可以在命令行使用的技巧。接下来我们会看看怎么使用这些功能。</p>
<h2 id="从标准输出和错误重定向">从标准输出和错误重定向</h2>
<p>当你使用 <code>Popen</code> 执行程序时候，输出内容通常被发送到 stdout，
这也是为什么你能看到这些内容。</p>
<p>当你想尝试从某个程序读取标准输出信息时候，则需要在调用 <code>Popen</code> 之前设定
<code>stdout</code> 参数。要设定的值是 <code>subprocess.PIPE</code>：</p>
<p><code>subprocess.PIPE</code></p>
<blockquote>
<p>可以为 <code>Popen</code> 指定标准输入、标准输出和标准错误输出的参数，
需要注意的是标准输出流需要打开可写。</p>
</blockquote>
<p>这里有个范例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;echo&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello World!&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span></code></pre></div><p>To read the output from the pipe you use the <code>communicate()</code> method:</p>
<p>为了从管道获取输出，你可以使用 <code>communicate()</code> 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Hello World!</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></div><p><code>communicate()</code> 的返回值是一个 tuple，第一个值是标准输出的数据，
第二个输出是标准错误输出的内容。</p>
<p>这里有段脚本能让我们测试标准输出和标准错误输出的表现行为，
将它存为 <code>test1.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Message to stdout</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Message to stderr</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>执行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test1.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Message</span> <span class="n">to</span> <span class="n">stderr</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Message to stdout</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></div><p>注意标准错误输出在被生成后就打印了，而标准输出则被管道传输了。
这是因为我们只设定了标准输出的管道，让我们同时也设定标准错误输出。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test1.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s1">&#39;Message to stdout</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;Message to stderr</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>这次标准输出和标准错误输出都被 Python 获取到了。</p>
<p>现在所有的消息能被打印出来了，如果我们再次调用 <code>communicate()</code>，
则会得到一个错误信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">668</span><span class="p">,</span> <span class="ow">in</span> <span class="n">communicate</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_communicate</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;/usr/lib/python2.5/subprocess.py&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1207</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_communicate</span>
</span></span><span class="line"><span class="cl">	<span class="n">rlist</span><span class="p">,</span> <span class="n">wlist</span><span class="p">,</span> <span class="n">xlist</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">read_set</span><span class="p">,</span> <span class="n">write_set</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="ne">ValueError</span><span class="p">:</span> <span class="n">I</span><span class="o">/</span><span class="n">O</span> <span class="n">operation</span> <span class="n">on</span> <span class="n">closed</span> <span class="n">file</span>
</span></span></code></pre></div><p><code>communicate()</code> 方法读取标准输出和标准错误输出时候，遇到结束符（EOF）
就会结束。</p>
<h3 id="重定向-stderr-到-stdout">重定向 stderr 到 stdout</h3>
<p>如果你想将错误信息重定向到标准输出，只需要给 <code>stderr</code>
参数指定一个特殊值： <code>stderr=subprocess.STDOUT</code> 即可。</p>
<h2 id="写入标准输入">写入标准输入</h2>
<p>写数据入一个进程和之前所述比较类似。为了要写入数据，需要先打开一个管道到标准输入。
通过设定 <code>Popen</code> 参数 <code>stdin=subproces.PIPE</code> 可以实现。</p>
<p>为了测试，让我们另外写一个仅输出 <code>Received:</code> 和输入数据的程序。
它在退出之前会输出消息。调用这个 <code>test2.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Received: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span></code></pre></div><p>为了发送消息到标准输入，把你想发送的信息作为 <code>communicate()</code> 的参数 <code>input</code> 。让我们跑起来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test2.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="s1">&#39;How are you?&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="n">How</span> <span class="n">are</span> <span class="n">you</span><span class="err">?</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></div><p>注意 <code>test2.py</code> 发送的信息被打印到标准输出，随后的是 <code>(None, None)</code> ，
这是因为标准输出和标准错误输出没有设定输出管道。</p>
<p>你可以和之前那样指定 <code>stdout=subprocess.PIPE</code>
和 <code>stderr=subprocess.PIPE</code> 来设定输出管道。</p>
<h3 id="类文件属性">类文件属性</h3>
<p><code>Popen</code> 拥有 <code>stdout</code> 和 <code>stderr</code> 属性，从而可以当作文件一样写出数据，同时 <code>stdin</code> 属性可以像文件一样读取数据。
你可以使用他们来替换 <code>communicate()</code>。下面我们将看如何用它们。</p>
<h3 id="读写同一个进程">读写同一个进程</h3>
<p>这里有个例子，将它保存为 <code>test3.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;Received: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="o">%</span><span class="nb">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span></code></pre></div><p>这个程序也是简单的响应接受到的数据，让我们把它跑起来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;test3.py&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">process</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%d</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">output</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span> <span class="n">output</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Received</span><span class="p">:</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span></code></pre></div><p>每隔一秒钟会输出一行。</p>
<p>现在你应该掌握了所有需要通过 Python 来跟 Shell 交互需要的知识。</p>
<h2 id="获取返回值-poll-和-wait">获取返回值， <code>poll()</code> 和 <code>wait()</code></h2>
<p>当一个程序退出时候，他会返回一个正整数来表明它的退出状态。
0 代表「成功地结束」，非零则表示「非正常结束」。
大部分系统要求返回值在 0-127 之间，其他都是未定义的结果。
一些系统会有事先定义好的错误对应关系，但一般不被拿出来用。
Unix 程序通常使用 2 作为命令语法错误，1 作为其他错误。</p>
<p>你可以通过 <code>Popen</code> 的 <code>.returncode</code> 属性获取程序返回值。这儿有个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s1">&#39;echo&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello world!&#39;</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span><span class="o">.</span><span class="n">poll</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">returncode</span>
</span></span><span class="line"><span class="cl"><span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">process</span><span class="o">.</span><span class="n">poll</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span> <span class="n">process</span><span class="o">.</span><span class="n">returncode</span>
</span></span><span class="line"><span class="cl"><span class="mi">0</span>
</span></span></code></pre></div><p>这个 <code>returncode</code> 并不是一开始就设定好的，最初是默认值 <code>None</code>，
它会一直是 <code>None</code> 知道你调用 <code>subprocess</code> 的方法比如 <code>poll()</code> 和 <code>wait()</code>。
这些方法会设定 <code>returncode</code>。因此，如果你想知道返回值，那就调用 <code>poll()</code>
和 <code>wait()</code>。</p>
<p><code>poll()</code> 和 <code>wait()</code> 方法区别很小：</p>
<dl>
<dt><code>Popen.poll()</code></dt>
<dd>检查子进程是否结束。并设置和返回 <code>.returncode</code> 属性。
<code>Popen.wait()</code></dd>
<dd>等待子进程结束。并设置和返回 <code>.returncode</code> 属性。</dd>
</dl>
<h2 id="便捷的方法">便捷的方法</h2>
<p><code>subprocess</code> 模块还提供了很多方便的方法来使得执行 shell 命令更方便。
我没有全部试试。（译者：意思是让读者自己挖掘？）</p>
<h2 id="理解-sysargv">理解 <code>sys.argv</code></h2>
<p>如果你想写一个 Python 脚本来接受命令行参数，
那么命令行的参数会被传送并成参数 <code>sys.argv</code>。
这里有个小范例，将它保存成 <code>command.py</code> 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;Executable: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Arg: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">arg</span>
</span></span></code></pre></div><p><code>if __name__ == '__main__'</code> 这行确保代码在被执行是才运行，
而不是被引入时候运行。给这个文件执行权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ chmod <span class="m">755</span> command.py
</span></span></code></pre></div><p>这里是一些运行时的范例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python command.py
</span></span><span class="line"><span class="cl">Executable: command.py
</span></span><span class="line"><span class="cl">$ python command.py arg1
</span></span><span class="line"><span class="cl">Executable: command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">$ python command.py arg1 arg2
</span></span><span class="line"><span class="cl">Executable: command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">Arg: arg2
</span></span></code></pre></div><p>注意无论 Python 脚本怎么执行， <code>sys.argv[0]</code> 始终是脚本的名称。
<code>sys.argv[1]</code> 和之后的参数是命令行接受的参数。
你可以通过使用参数 <code>-m</code> 来强制 Python 脚本作为模块导入使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m <span class="nb">command</span>
</span></span><span class="line"><span class="cl">Executable: /home/james/Desktop/command.py
</span></span><span class="line"><span class="cl">$ python -m <span class="nb">command</span> arg1
</span></span><span class="line"><span class="cl">Executable: /home/james/Desktop/command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">$ python -m <span class="nb">command</span> arg1 arg2
</span></span><span class="line"><span class="cl">Executable: /home/james/Desktop/command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">Arg: arg2
</span></span></code></pre></div><p>如你所见，Python 将 <code>-m</code> 作为命令的一部分，因此 `sys.srgv[0] 包含了脚本的全路径。
现在我们来直接执行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./command.py
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">$ ./command.py arg1
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">$ ./command.py arg1 arg2
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: arg1
</span></span><span class="line"><span class="cl">Arg: arg2
</span></span></code></pre></div><p>看吧，<code>sys.argv[0]</code> 包含 Python 脚本的名称， <code>sys.argv[1]</code>
以及他的兄弟们还是老样子，包含各类参数。</p>
<h3 id="展开-shell">展开 Shell</h3>
<p>有时候，我们会在 shell 中使用通配符来设定一组参数，比如，
我们在 Bash 中运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./command.py *.txt
</span></span></code></pre></div><p>你可能觉得输出应该是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: *.txt
</span></span></code></pre></div><p>这不是你想要的结果。输出结果应该依赖当前文件夹中 <code>.txt</code> 文件的数目。执行效果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: errors.txt
</span></span><span class="line"><span class="cl">Arg: new.txt
</span></span><span class="line"><span class="cl">Arg: output.txt
</span></span></code></pre></div><p>Bash 会将 <code>\*.txt</code> 自动展开成所有符合 <code>.txt</code> 的参数。所以接受到的参数会超过你预期。</p>
<p>你可以通过将参数用引号抱起来来关闭 Shell 解释特性，
但是只要你用过，就会意识到在大多数情况下面这是非常有用的功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./command.py <span class="s2">&#34;*.txt&#34;</span>
</span></span><span class="line"><span class="cl">Executable: ./command.py
</span></span><span class="line"><span class="cl">Arg: *.txt
</span></span></code></pre></div><p>更多关于 Bash 解释信息，可以看 <a href="http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion">http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion</a></p>
<h2 id="拓展阅读">拓展阅读</h2>
<p>可以参考：</p>
<ul>
<li><a href="http://www.doughellmann.com/PyMOTW/subprocess/">http://www.doughellmann.com/PyMOTW/subprocess/</a> (and its O&rsquo;Reilly copy here)</li>
<li><a href="http://docs.python.org/library/subprocess.html">http://docs.python.org/library/subprocess.html</a></li>
<li><a href="http://webpython.codepoint.net/cgi_shell_command">http://webpython.codepoint.net/cgi_shell_command</a></li>
<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=4829">http://www.artima.com/weblogs/viewpost.jsp?thread=4829</a> (About writing main() functions)</li>
</ul>
<p>未来相关的文章：</p>
<ul>
<li>进程间信号通信</li>
<li>后台执行程序</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
