<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>eclipse on Log4D</title>
    <link>https://blog.alswl.com/tags/eclipse/</link>
    <description>Recent content in eclipse on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 16 May 2011 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/eclipse/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Eclipse中运行Pylons</title>
      <link>https://blog.alswl.com/2011/05/run-pylons-in-eclipse/</link>
      <pubDate>Mon, 16 May 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/05/run-pylons-in-eclipse/</guid>
      <description>官方中pylons都是通过在shell中运行paster serve &amp;ndash;reload development.ini来运行应用实例。而整天在任务栏跑着一个黑乎乎的shell很碍眼，通过一下步骤可以在Eclipse中运行pylons。 配置Run Configuration - Python Run如下。 Main页签中Main Module指向paster-script.py，可以使用绝对路径。 配置Arguments页签的参数，添加serve &amp;ndash;reload development.i</description>
      <content:encoded><![CDATA[<p>官方中pylons都是通过在shell中运行paster serve &ndash;reload
development.ini来运行应用实例。而整天在任务栏跑着一个黑乎乎的shell很碍眼，通过一下步骤可以在Eclipse中运行pylons。</p>
<p>配置Run Configuration - Python Run如下。</p>
<p>Main页签中Main Module指向paster-script.py，可以使用绝对路径。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201105/eclipse-main.png" alt="image"  />

</p>
<p>配置Arguments页签的参数，添加serve &ndash;reload development.ini，后面的ini配置文件可以使用绝对路径。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201105/eclipse-arguments.png" alt="image"  />

</p>
<p>勾选Common下的Allocate Console来进行paster调试信息输出。</p>
<p>在Windows - Preference - Pydev - Interpreter - Python中的PYTHONPATH加入pylons目标环境
，报过site-packages目录和site-packages目录下面的egg文件（理解为jar包，称之为蟒蛇蛋）。</p>
<p>不出意外的话，就可以通过Run跑起整个应用了。</p>
<p>很可惜的是，这样做还是不能对应用进行Debug，pylons的debug依然依赖于pylons的&quot;交互调试页面&quot;。</p>
<p>参考[http://stackoverflow.com/questions/147650/debug-pylons-application-through-
eclipse](<a href="http://stackoverflow.com/questions/147650/debug-pylons-application-">http://stackoverflow.com/questions/147650/debug-pylons-application-</a>
through-eclipse)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Maven 下 Jetty 启动</title>
      <link>https://blog.alswl.com/2011/04/run-jetty-in-maven/</link>
      <pubDate>Mon, 04 Apr 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/04/run-jetty-in-maven/</guid>
      <description>部门最近开发的产品使用的开发服务器是 Jetty（挂载在 GWT 中），启动方法是通过 Eclipse 的 External Tool 执行。我对此表示很好奇，特意在自己电脑下面组建了一个 Jetty 开发环境，发现 Maven 和 Jetty 合作起来非常愉快，现在小记之。 准备 Maven 配置文件 我使用 Maven 推荐的标准 webapp 结构，结构如下，官方文档可以参考 Maven - Introduction to the Standard Directory Layout src/main/java Application/Library sources src/main/resources Application/Library resources src/main/filters Resource filter files src/main/assembly Assembly descriptors src/main/config Configuration files src/main/webapp Web application sources src/test/java Test sources src/test/resources Test resources src/test/filters Test resource filter files src/site Site LICENSE.txt Project&amp;rsquo;s license NOTICE.txt Notices and attributions required by libraries that the project depends on README.txt Project&amp;rsquo;s readme 使用的 pom.xml 主要添加了 build- plugins 的 Jetty 插</description>
      <content:encoded><![CDATA[<p>部门最近开发的产品使用的开发服务器是 Jetty（挂载在 GWT 中），启动方法是通过 Eclipse 的 External
Tool 执行。我对此表示很好奇，特意在自己电脑下面组建了一个 Jetty 开发环境，发现 Maven 和 Jetty 合作起来非常愉快，现在小记之。</p>
<h2 id="准备-maven-配置文件">准备 Maven 配置文件</h2>
<p>我使用 Maven 推荐的标准 webapp 结构，结构如下，官方文档可以参考 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Maven - Introduction to the Standard Directory Layout</a></p>
<ul>
<li>src/main/java
<ul>
<li>Application/Library sources</li>
</ul>
</li>
<li>src/main/resources
<ul>
<li>Application/Library resources</li>
</ul>
</li>
<li>src/main/filters
<ul>
<li>Resource filter files</li>
</ul>
</li>
<li>src/main/assembly
<ul>
<li>Assembly descriptors</li>
</ul>
</li>
<li>src/main/config
<ul>
<li>Configuration files</li>
</ul>
</li>
<li>src/main/webapp
<ul>
<li>Web application sources</li>
</ul>
</li>
<li>src/test/java
<ul>
<li>Test sources</li>
</ul>
</li>
<li>src/test/resources
<ul>
<li>Test resources</li>
</ul>
</li>
<li>src/test/filters
<ul>
<li>Test resource filter files</li>
</ul>
</li>
<li>src/site
<ul>
<li>Site</li>
</ul>
</li>
<li>LICENSE.txt
<ul>
<li>Project&rsquo;s license</li>
</ul>
</li>
<li>NOTICE.txt
<ul>
<li>Notices and attributions required by libraries that the project depends on</li>
</ul>
</li>
<li>README.txt
<ul>
<li>Project&rsquo;s readme</li>
</ul>
</li>
</ul>
<p>使用的 pom.xml 主要添加了 build-
plugins 的 Jetty 插件，另外修改了 outputDirectory，从而实现自动编译到<code>targert/projectName/WEB- INF/classes</code>目录，实现 <a href="http://wiki.eclipse.org/FAQ_What_is_hot_code_replace%3F">Eclipse Hot Code</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;directory&gt;</span>${project.basedir}/target<span class="nt">&lt;/directory&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;finalName&gt;</span>${project.artifactId}-${project.version}<span class="nt">&lt;/finalName&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/${project.build.finalName}/WEB-INF/classes<span class="nt">&lt;/outputDirectory&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-eclipse-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.7<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;sourceIncludes&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;sourceInclude&gt;</span>*<span class="nt">&lt;/sourceInclude&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/sourceIncludes&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-plugin-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div><p>准备几个测试用的 Servlet，外加 web.xml。运行<code>mvn install</code>即可在 target/war 下面生成 war 包，同时在 target/projectName/ 下会生成项目文件。</p>
<p>如果有 m2eclipse，那这个动作很容易就可以完成，如果没有，也可以参照我之前的<a href="http://log4d.com/2011/03/maven-eclipse">在 Eclipse 中使用 Maven</a>。</p>
<h2 id="撰写-eclipse-external-tool">撰写 Eclipse External Tool</h2>
<p>建立可以运行的 Jetty 实例分为两步，建立 Jetty 的 Java Application 和创建 jetty.xml 配置文件。</p>
<p>1、在 Run-Run Configurations 中的 Java Application 中建立一个新的应用，起名为&quot;jetty&quot;, 使用 Main
class 为<code>org.mortbay.xml.XmlConfiguration</code>，在 Arguments - Program arguments 中加入<code>${p roject_loc}/jetty.xml</code>，其中<code>${project_loc}</code>是动态参数，指向当前项目目录，jetty.xml 为我们随后要创建的 jett
y 配置文件。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201104/run_configurations.png" alt="image"  />

</p>
<p>如果想将这个应用保存成文件，可以修改 Common - Sava
as 到当前目录，就可以保存为 jetty.launch 文件了。（没错，就是 launch 文件，Eclipse 的运行配置文件）</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201104/eclipse_common.png" alt="image"  />

</p>
<p>2、准备 jetty.xml 文件</p>
<p>Jetty 是一款轻量形的 Web 服务器，轻到甚至仅仅靠 Maven 插件即可运行，不过我们依然需要通过 jetty.xml 文件进行配置。在项目根目录下建立 jetty
.xml（此路径与 Java Application 中的 Arguments 相对应，有些朋友可能更习惯放在 WEB-INF 下面）。</p>
<p>官方说从 <code>$JETTY_HOME/webapps/test/WEB-INF/jetty-web.xml</code> 可以取到 jetty-xml 的范例，我这里就提供下载好了。</p>
<p>点击下载 <a href="../../static/images/upload_dropbox/201104/jetty.xml">jetty.xml</a>，这里面写了 hard
code<code>&lt;Set name=&quot;resourceBase&quot;&gt;./target/study_web-1.0-SNAPSHOT&lt;/Set&gt;</code>，请记得替换。</p>
<p>配置好 Jetty 之后，就可以运行 Jetty 了，在 Run - Run
As 中找到名为 jetty 的运行命令，不出意外的话，Jetty 会在 4000 端口建立一个实例。</p>
<p>当我们在 Debug 模式运行时，由于我们修改 java 代码会动态更新到 classes 目录，所以我们可以在运行时修改代码，不信你可以在 Debug 时候修改 Servl
et 中代码试试，这就是所谓 Hot code。</p>
<p>Enjoy it!</p>
<h2 id="参考文章">参考文章</h2>
<p><a href="http://www.daniel-journey.com/archives/214">Eclipse 中运行 Jetty</a></p>
<p><a href="http://www.blogjava.net/alwayscy/archive/2007/05/19/118584.html">天生一对&quot;Maven2+Jetty&quot; &ndash; Maven2 创建并管理 WebApp，并使用 Maven Jetty Plugin 在 Eclipse 中调试</a></p>
<p><a href="http://www.blogjava.net/alwayscy/archive/2007/09/13/144969.html">目前发现的最好最快的直接在 ECLIPSE 中 JETTY 调试方式</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Eclipse中使用Maven</title>
      <link>https://blog.alswl.com/2011/03/maven-eclipse/</link>
      <pubDate>Fri, 18 Mar 2011 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2011/03/maven-eclipse/</guid>
      <description>一提到Eclipse中使用Maven，都会想到m2eclipse这个插件。其实在Ecli pse下使用Maven不用插件也能完成，我们只需要使用bin/mvn下面的mvn即可。 3分钟Maven Maven官方提供了[Getting Started in 5 Minutes](http://maven.apache.org/guides /getting-started/maven-in-five-minutes.html)和[Getting Started in 30 Minutes](http://maven.apache.org/guides/getting- started/index.html)两种教程，我这</description>
      <content:encoded><![CDATA[<p>一提到Eclipse中使用Maven，都会想到<a href="http://m2eclipse.codehaus.org/">m2eclipse</a>这个插件。其实在Ecli
pse下使用Maven不用插件也能完成，我们只需要使用bin/mvn下面的mvn即可。</p>
<h2 id="3分钟maven">3分钟Maven</h2>
<p>Maven官方提供了[Getting Started in 5 Minutes](<a href="http://maven.apache.org/guides">http://maven.apache.org/guides</a>
/getting-started/maven-in-five-minutes.html)和[Getting Started in 30
Minutes](<a href="http://maven.apache.org/guides/getting-">http://maven.apache.org/guides/getting-</a>
started/index.html)两种教程，我这里再简化一下，记录一下常用命令。</p>
<pre><code>#建立一个空项目，包含一个HelloWorld，可以通过
#-DarchetypeGroupId=&lt;archetype-groupId&gt; -DarchetypeArtifactId=&lt;archetype-artifactId&gt;
#命令创建更多类型项目
mvn archetype:create -DgroupId=com.dddspace.java -DartifactId=helloworld
</code></pre>
<p>#编译打包到jar或者war，根据pom中定义</p>
<p>maven package</p>
<p>#jUnit跑跑</p>
<p>mvn test</p>
<p>#神奇的命令，帮助创建Eclipse项目，配置path，默认使用M2_REPO这个变量作为目录</p>
<p>mvn eclipse:eclipse</p>
<p>大约跑完花费3分钟~嗯，有这几个命令，Maven简单操作就OK了，更多的话，去Maven文档溜溜吧。</p>
<p>PS：为了防止Maven编码错误，建议在bin/mvn里面加入一句话<code>set MAVEN_OPTS=-Dfile.encoding=UTF-8</code>
这样强制Maven使用UTF-8进行编码。</p>
<h2 id="配置eclipse环境">配置Eclipse环境</h2>
<h3 id="加入m2_repo">加入M2_REPO</h3>
<p>进入Eclipse-&gt;preferences-&gt;java-&gt;build path-&gt;classpath
variables，添加M2_REPO这个变量，指向C:/Documents and Settings/userName/.m2/repository，这个
路径是默认的Maven仓库，如果你想搬到其他地方，需要修改mavenconfsetting.xml里面的localRepository。</p>
<h3 id="配置string-substitution">配置String Substitution</h3>
<p>通过配置String
Subsitution我们就可以使用Eclipse的lanuch来启动Maven，而不是Eclipse插件启动。首先我们要告诉Eclipse
Maven在哪里。配置Eclipse-&gt;preferences-&gt;Run/Debug-&gt;String Subsitution，加入mvn
=D:/dotj_dev/tools/apache-maven-2.2.1/bin/mvn.bat。</p>
<h3 id="建立launch文件">建立Launch文件</h3>
<p>Launch其实是Eclipse的Launcher框架的配置文件，可以定义Application的启动方式。新建一个mvn-war.launch如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;launchConfiguration type=&quot;org.eclipse.ui.externaltools.ProgramLaunchConfigurationType&quot;&gt;
&lt;stringAttribute key=&quot;bad_container_name&quot; value=&quot;helloworldmvn-war.launch&quot;/&gt;
&lt;stringAttribute key=&quot;org.eclipse.ui.externaltools.ATTR_LOCATION&quot; value=&quot;${mvn}&quot;/&gt;
&lt;stringAttribute key=&quot;org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS&quot; value=&quot;clean compile war:war -U&quot;/&gt;
&lt;stringAttribute key=&quot;org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY&quot; value=&quot;${workspace_loc:/helloworld}&quot;/&gt;
&lt;/launchConfiguration&gt;
</code></pre>
<p>Update（2011/03/21）：后来测试发现<code>bad_container_name</code>没有也可以正常运行；<code>${workspace_loc:/hello world}</code>修改为<code>${project_loc}</code>更为方便。</p>
<p>这个.launch文件内容其实是XML格式的，里面定义了几个属性，用来告诉Eclipse执行什么命令，重要的属性是ATTR_LOCATION和ATTR_TO
OL_ARGUMENTS，我们分别赋值为${mvn}和Maven参数，就可以正确执行了。</p>
<p>类似的，我们可以建立mvn eclipse:eclipse的Launch文件，用来生成Eclipse类型的项目。</p>
<p>PS：使用Substitution的目的其实是为了避免不同开发环境下面Maven位置不相同，保持.launch文件统一。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Web开发利器-Aptana</title>
      <link>https://blog.alswl.com/2010/04/web-development-tool-aptana/</link>
      <pubDate>Wed, 07 Apr 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/04/web-development-tool-aptana/</guid>
      <description>闲逛时候意外发现了一款开发利器Aptana，介绍说是JavaScript编辑利器，我冲着试一试的心理去官网溜达了一圈，发现那篇介绍问完完全全错了，Aptan a哪里只是JavaScript编辑器啊，完全是Web开发18般武艺样样精通啊。 废话不多说，来自open-open的介绍（alswl懒得翻译官方文字了 ^_^） Aptana是一个非常强大,开源,专注于JavaScript的Ajax开发IDE。它的特</description>
      <content:encoded><![CDATA[<p>闲逛时候意外发现了一款开发利器Aptana，介绍说是JavaScript编辑利器，我冲着试一试的心理去官网溜达了一圈，发现那篇介绍问完完全全错了，Aptan
a哪里只是JavaScript编辑器啊，完全是Web开发18般武艺样样精通啊。</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201612/404.png" alt="image"  />

</p>
<p>废话不多说，来自open-open的介绍（alswl懒得翻译官方文字了 ^_^）</p>
<blockquote>
<p>Aptana是一个非常强大,开源,专注于JavaScript的Ajax开发IDE。它的特性包括：
*JavaScript,JavaScript函数,HTML,CSS语言的Code Assist功能。
*Outliner(大纲)：显示JavaScript,HTML和CSS的代码结构。</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>*支持JavaScript，HTML，CSS代码提示，包括JavaScript 自定函数</p>
</blockquote>
<p>*代码语法错误提示。<br />
*支持Aptana UI自定义和扩展。<br />
*支持跨平台。</p>
<ul>
<li>支持FTP/SFTP<br />
*调试JavaScript<br />
*支持流行AJAX框架的Code Assist 功能：AFLAX, Dojo, JQuery, MochiKit, Prototype, Rico, script.aculo.us, Yahoo UI, Ext<br />
*Adobe AIR与iPhone开发工具</li>
</ul>
<blockquote>
</blockquote>
<blockquote>
<p>其主页上还提供如何使用该开发工具的视频。</p>
</blockquote>
<p>看得你心动心痒痒了么，我也恨没有早认识Aptana几年，马上下载下来试用吧，友情提示一下，Aptana其实是Eclipse的插件，需要Eclipse支持哦。</p>
<h3 id="官方链接">官方链接</h3>
<p><a href="http://www.aptana.org/">Aptana 官方网站</a></p>
<p><a href="http://www.aptana.org/studio/download">Aptana Studio 下载地址</a></p>
<h3 id="简单教程">简单教程</h3>
<p>其实我个人觉得Aptana装上去就可以用的很溜了，只要你用过Eclipse JavaEE模块或者DreamWeaver之类的IDE。</p>
<p>唯一一个问题可能是编码，参考[qop&rsquo;s blog: Aptana Studio 1.0 設定 UTF-8 編碼](<a href="http://qops.blogspot.com/2007/11/aptana-">http://qops.blogspot.com/2007/11/aptana-</a>
studio-10-utf-8.html)可以搞定（发布后发现这个链接是BlogSpot的，为了照顾墙内看客，我把原文转载过来）</p>
<p><a href="http://www.cnblogs.com/jackielin/archive/2006/11/05/550422.html">不可多得的Javascript(AJAX)开发工具 － Aptana - BLACK JACK - 博客园</a></p>
<p><a href="http://http://www.cnblogs.com/jackielin/archive/2006/11/07/Aptana1.html">Aptana使用入门一：Code Assist - BLACK JACK - 博客园</a></p>
<p><a href="http://www.kuqin.com/developtool/20090318/40850.html">在Eclipse安装Aptana插件-开发工具- 编程环境</a></p>
<h3 id="aptana-studio-10-设定-utf-8编码">Aptana Studio 1.0 设定 UTF-8编码</h3>
<p>下面是转载过来的文章，在修改全局编码为UTF-
8之后，可能导致之前用GBK编码文件乱码，在具体的项目属性中修改即可，或者，大不了咱们全部转成UTF-8，通用嘛～</p>
<p>×××××××××以下转载×××××××××</p>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201004/aptana_set_utf8.png" alt="image"  />

</p>
<ol>
<li>
<p>點選指令選單上 Window &gt; Preferences&hellip;</p>
</li>
<li>
<p>在面板左側點選 General &gt; Workspace</p>
</li>
<li>
<p>在右下方的 Text file encoding 點選 other, 設定為「UTF-8」即可。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用subclipse代理</title>
      <link>https://blog.alswl.com/2010/03/use-subclipse-with-proxy/</link>
      <pubDate>Wed, 03 Mar 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/03/use-subclipse-with-proxy/</guid>
      <description>公司网络必须使用代理，今天更新自己写的一个Utils到Google Project Host时候，出现无法打开SVN服务器的现象，我在浏览器测试了那几个目录，都没有问题，猜到是代理连接的问题。 Eclipse的代理设置在&amp;quot;General-Network Connections&amp;ldquo;中设置，很明显，Subclipse不在这里设定。 PS：在写的是一个DataBase-&amp;gt;Java 3层代码生成器，想仿</description>
      <content:encoded><![CDATA[<p>公司网络必须使用代理，今天更新自己写的一个Utils到Google Project
Host时候，出现无法打开SVN服务器的现象，我在浏览器测试了那几个目录，都没有问题，猜到是代理连接的问题。</p>
<p>Eclipse的代理设置在&quot;<strong>General-Network Connections</strong>&ldquo;中设置，很明显，Subclipse不在这里设定。</p>
<p>PS：在写的是一个DataBase-&gt;Java 3层代码生成器，想仿照<a href="http://www.maticsoft.com/"><strong>动软.NET生成器</strong></a>那
样写，今天刚写完生成Bean的一些版本，自己计划在半年时间内写一个beta版。</p>
<p>下面是解决办法，来自 <a href="http://blog.baimusenlin.com/83.html">百亩森林 »
解决windows下subclipse穿过代理连接subversion服务器</a></p>
<p>×××××&amp;&amp;以下原文&amp;&amp;×××××</p>
<p>解决windows下subclipse穿过代理连接subversion服务器</p>
<p>1、cmd命令提示符输入 echo %APPDATA%</p>
<p>2、进入第一步输出的目录下，并找到Subversion目录(如C:Documents and
SettingsAdministratorApplication DataSubversion)，注意此目录为隐藏目录。</p>
<p>3、在servers文件中的最后[global]后增加</p>
<pre><code>http-proxy-host =192.168.1.1
http-proxy-port =80
http-proxy-username =username
http-proxy-password =password
</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Eclipse中使用VSS</title>
      <link>https://blog.alswl.com/2010/02/the-use-of-vss-in-eclipse/</link>
      <pubDate>Wed, 24 Feb 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/02/the-use-of-vss-in-eclipse/</guid>
      <description>原文链接：Eclipse中安装配置VSS - 51CTO.COM alswl友情提示：**VSS Plugin for Eclipse **已经更新至1.6.2，链接在这里 -BOF- vss安装 1. 安装Vss服务器 在服务器上安装vss6.0d，安装好后，在服务器目录C:Program FilesMicrosoft Visual StudioCommonVSS下有个NETSETUP.EXE文件，共享这个目录，客户机就执行这个NETSETUP.EXE文件进行安装。 2. 创建源代码管理数据库 2-1. 在服务端要先创建一个源</description>
      <content:encoded><![CDATA[<p>原文链接：<a href="http://developer.51cto.com/art/200906/127171.htm">Eclipse中安装配置VSS -
51CTO.COM</a></p>
<p>alswl友情提示：**VSS Plugin for Eclipse
**已经更新至1.6.2，链接在<a href="http://sourceforge.net/projects/vssplugin/">这里</a></p>
<p><em><strong>-BOF-</strong></em></p>
<h2 id="vss安装">vss安装</h2>
<h3 id="1-安装vss服务器">1. 安装Vss服务器</h3>
<p>在服务器上安装vss6.0d，安装好后，在服务器目录C:Program FilesMicrosoft Visual
StudioCommonVSS下有个NETSETUP.EXE文件，共享这个目录，客户机就执行这个NETSETUP.EXE文件进行安装。</p>
<h3 id="2-创建源代码管理数据库">2. 创建源代码管理数据库</h3>
<p>2-1. 在服务端要先创建一个源代码管理数据库，以存储您的开发团队的共享文件的服务器版本。为源代码管理数据库创建共享网络文件夹。在源代码管理服务器中，打开
Windows 资源管理器，新建一个名为 test的文件夹。</p>
<p>2-2. 右击&quot;test&quot;，然后单击&quot;属性&quot;。</p>
<p>2-3. 在&quot;test 属性&quot;对话框中，单击&quot;共享&quot;选项卡，然后单击&quot;共享该文件夹&quot;。现在可以在共享的 test 中创建源代码管理数据库了。</p>
<h3 id="3-创建源代码管理数据库">3. 创建源代码管理数据库</h3>
<p>3-1. 在服务器，单击&quot;开始&quot;按钮，指向&quot;程序&quot;，指向&quot;Microsoft Visual SourceSafe&quot;，然后单击&quot;Visual
SourceSafe 6.0 Admin&quot;。</p>
<p>3-2. 在&quot;Visual SourceSafe Administrator&quot;对话框的&quot;Tools&quot;菜单中，单击&quot;Create Database&quot;。</p>
<p>3-3. 在&quot;Create new VSS Database in&quot;框中，找到上面建立的&quot;test&quot;目录</p>
<p>3-4. Visual Studio .NET
的源代码管理数据库已设置成功。然后添加用户，就是开发团队的人员都给分配一个账号，以后要打开这个数据库要进行身份认证的。</p>
<h2 id="在eclipse中配置vss">在eclipse中配置vss</h2>
<ol>
<li>到网站中下载免费的org.vssplugin_1.4.1-2.0-compability.zip到本机目录；</li>
</ol>
<p>下载地址：[http://sourceforge.net/projects/vssplugin](<a href="http://sourceforge.net/projec">http://sourceforge.net/projec</a>
ts/vssplugin)</p>
<ol start="2">
<li>
<p>将org.vssplugin_1.4.1-2.0-compability.zip解压缩；</p>
</li>
<li>
<p>将解完压缩后得到的org.vssplugin_1.4.1文件夹复制到ECLIPSE_PATHplugins下；（ECLIPSE_PATH是
eclipse的安装路径）</p>
</li>
<li>
<p>重新启动eclipse；；(如果找不到，就先推出并删除configuration文件中除INI文件的所有文件)</p>
</li>
<li>
<p>Help-&gt;About Eclipse Platform-&gt;Plug-In Details确认插件加入成功；</p>
</li>
<li>
<p>Window-&gt;Customize Perspective…，在对话框中的Window&gt;Show
View和Other中把VSS相关的选项打上钩，OK。</p>
</li>
</ol>
<h2 id="在eclipse中使用vss服务器">在Eclipse中使用VSS（服务器）：</h2>
<p>新建程序：</p>
<ol>
<li>
<p>将工具生成好的源文件建好工作路径，将整个工作路径拷贝到服务器的相应位置；</p>
</li>
<li>
<p>打开Eclipse-&gt;File-&gt;New-&gt;Project…选择服务器上的此本程序的工作路径建立新工程；</p>
</li>
<li>
<p>右键点选工程-&gt;Team-&gt;Share Project…；</p>
</li>
<li>
<p>选择VSS Configuration Wizard，点next；</p>
</li>
<li>
<p>User Name和Password输入你的用户名和密码；</p>
</li>
<li>
<p>在确保自己的计算机可以在不输入密码的情况下登录到服务器上的情况下，直接输入或点Browse…选择VSS Database目录</p>
</li>
</ol>
<p>（选择VSS文档库的目录：即有srcsafe.ini文件的那个数据库目录）；</p>
<ol start="7">
<li>
<p>打开VSS客户端，在总目录的下面建立一个自己子工程名称相对应的文件夹；</p>
</li>
<li>
<p>Realative mountpoint中选择刚刚在VSS中建好的文件夹后点确定(在VSS中建好的文件夹路径，即项目所要共享到vss的哪个目录下)；</p>
</li>
<li>
<p>将下面的那个多选框的钩打上，点Finish；</p>
</li>
<li>
<p>右键选择工程-&gt;Team-&gt;Add To VSS，输入相应注释后OK；（不可添加全项目）</p>
</li>
<li>
<p>这样就可以在Team中执行相应的Check-in、Check-out操作了。</p>
</li>
</ol>
<p>




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201002/vss.jpg" alt="image"  />

</p>
<h2 id="打开一个vss数据库中已有的工程客户端">打开一个VSS数据库中已有的工程（客户端）：</h2>
<ol>
<li>
<p>打开Eclipse-&gt;File-&gt;New-&gt;Project ；</p>
</li>
<li>
<p>右键点选工程-&gt;Team-&gt;Share Project…；</p>
</li>
<li>
<p>选择VSS Configuration Wizard，点next；</p>
</li>
<li>
<p>User Name和Password输入你的用户名和密码；</p>
</li>
<li>
<p>在确保自己的计算机可以在不输入密码的情况下登录到服务器上的情况下，直接输入或点Browse…选择VSS Database目录；</p>
</li>
<li>
<p>Realative
mountpoint中选择好相对应的VSS路径后点确定(在VSS中建好的放源代码的文件夹路径，即项目所要共享到vss的哪个目录下)；</p>
</li>
<li>
<p>将下面的那个多选框的钩打上，点Finish；</p>
</li>
<li>
<p>右键选择工程-&gt;Team-&gt;Refresh。</p>
</li>
</ol>
<p>计算机重起后打开工程：</p>
<p>确保本地计算机可以在不输入密码的情况下等录到服务器上；</p>
<p>在服务器上打开Eclipse，右键工程-&gt;Open Project；</p>
<p>右键点选工程-&gt;Team-&gt;Share Project…</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Eclipse3.5下使用Flex Builder 3</title>
      <link>https://blog.alswl.com/2009/11/the-eclipse3-5-using-flex-builder-3/</link>
      <pubDate>Wed, 18 Nov 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/11/the-eclipse3-5-using-flex-builder-3/</guid>
      <description>这次课程设计是我大学最后一次了，毕业设计会需要谨慎，所以这次课程设计我决定做一个新潮的系统。 我将系统命名为PylexChat，是一个基于Python+Flex的聊天系统，架构在GAE+AIR环境，支持多平台（Wi ndows+Linux+Web+手机）客户端登录。开发IDE为Eclipse+Flex Builder3插件，我的Eclipse Gelileo(v3.5)。在安装Flex Builder 3过程中就弹出需要</description>
      <content:encoded><![CDATA[<p>这次课程设计是我大学最后一次了，毕业设计会需要谨慎，所以这次课程设计我决定做一个新潮的系统。</p>
<p>我将系统命名为PylexChat，是一个基于<strong>Python</strong>+<strong>Flex</strong>的聊天系统，架构在<strong>GAE</strong>+<strong>AIR</strong>环境，支持多平台（<strong>Wi
ndows+Linux+Web+手机</strong>）客户端登录。开发IDE为<strong>Eclipse</strong>+<strong>Flex Builder3</strong>插件，我的<strong>Eclipse
Gelileo</strong>(v3.5)。在安装Flex Builder 3过程中就弹出需要3.4一下环境，我没在意，继续安装了。</p>
<p>安装之后出现了问题，Eclipse插件根本没有加载，我在[Getting Flex Builder 3 plugin to survive a new Eclipse Version](<a href="http://greylurk.com/index.php/2009/06/getting-flex-builder-3">http://greylurk.com/index.php/2009/06/getting-flex-builder-3</a>
-plugin-to-survive-a-new-eclipse-version/)找到了相应解决方案。</p>
<p>在<code>Eclipselinks</code>目录下面建立<code>com.adobe.flexbuilder.feature.core.link</code>文件，编辑内容为<code>d:/Stud y/Flex Builder 3 Plug-in</code>（记得修改目录），这样就可以正常加载并编写项目了。</p>
<p>在使用过程中，如果代码没有写好，会出现<code>An internal error occurred during: &quot;Removing compiler problem markers...&quot;.</code>这样的提示，此时无论我做如何动作，保存代码/清理项目/新建文件，都会出现如上错误，根本没法继续。经过我尝试，除了将
项目删除重新建立，没有其他的办法彻底解决这个问题。</p>
<p>这里有一个Adobe 官方论坛的讨论帖[http://forums.adobe.com/thread/90415](<a href="http://forums.adobe">http://forums.adobe</a>.  com/thread/90415)，似乎这个问题在当时Flex Builder 2就出现，现在出现在Eclpse 3.5 + Flex Builder
3下面。</p>
<p>看来得等Flex Builder3之后的版本发布才能修复这个Bug，否则的话，还是得换回Eclpse 3.4……</p>
<p>悲剧了，我刚使用Galileo一周时间……</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Eclipse代码统计插件</title>
      <link>https://blog.alswl.com/2009/06/statistics-eclipse-plug-in-code-to/</link>
      <pubDate>Tue, 30 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/statistics-eclipse-plug-in-code-to/</guid>
      <description>贴吧快完成主要功能了，想统计一下代码量，找到这么一个插件 我 自己试用了一下，发现需要注意两个地方：1.必须在JAVA透视图下使用才能有效；2.必须为项目的选项下的Metrics选择启动Metrics才能统 计；3.这个插件原意是分析代码质量、复杂性的，在分析结果中包含了代码量统计。4.只统计java代码，不统计jsp文件。 最后，Metrics可以以图形化的形式显示包的依赖关系，很好玩，大家可以试试。 转</description>
      <content:encoded><![CDATA[<p>贴吧快完成主要功能了，想统计一下代码量，找到这么一个插件</p>
<p>我 自己试用了一下，发现需要注意两个地方：1.必须在JAVA透视图下使用才能有效；2.必须为项目的选项下的Metrics选择启动Metrics才能统
计；3.这个插件原意是分析代码质量、复杂性的，在分析结果中包含了代码量统计。4.只统计java代码，不统计jsp文件。</p>
<p>最后，Metrics可以以图形化的形式显示包的依赖关系，很好玩，大家可以试试。</p>
<p>转载自：三亩地&lt;<a href="http://www.alexadaman.cn/program/eclipse-dai-ma-tong-ji-cha-jian.html/comment-page-1#comment-292569">猛击这里打开</a>&gt;，谢谢作者</p>
<p><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>以下为原文</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>**</p>
<p>Metrics插件可以从多个角度对Eclipse中的代码进行统计：</p>
<p><a href="http://image-001.yo2cdn.com/wp-content/uploads/0/38/2008/08/metrics.png">




<img loading="lazy" src="https://d05fae.dijingchao.com/upload_dropbox/201612/404.png" alt="metrics"  />

</a></p>
<p><strong>官方网站</strong>：<a href="http://metrics.sourceforge.net/">http://metrics.sourceforge.net/</a></p>
<p><strong>添加方法</strong>：Run Eclipse, go to Help menu -&gt; Software Updates -&gt; Find and Install &hellip; On the opening dialog choose Search for new features to install. Add a new Remote site with the following url <strong><a href="http://metrics.sourceforge.net/update">http://metrics.sourceforge.net/update</a></strong> and follow the instructions for installation.</p>
<p><strong>使用方法</strong>：To start using the Metrics View, use Windows -&gt; Show View -&gt; Other and navigate to the Metrics View, as shown in the next image.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Eclipse中JSP文件的编码设置</title>
      <link>https://blog.alswl.com/2009/02/eclipse-in-the-jsp-file-s-encoding-settings/</link>
      <pubDate>Tue, 24 Feb 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/02/eclipse-in-the-jsp-file-s-encoding-settings/</guid>
      <description>在Eclipse中新建JSP页面时候，contentType=&amp;ldquo;text/html; charset=utf-8&amp;rdquo;, pageEncoding=&amp;ldquo;utf-8&amp;rdquo;, content=&amp;ldquo;text/html; charset=utf-8&amp;rdquo;， 这样连中文字都无法保存 ，必须修改成UTF-8才能显示。 在网上找了很久都没有合适的方案，都是给出在General下面的Content Types修改编码，而且下面人留言还说有效，我自己试了去发现根本没有作用。。。 自己琢磨了很久，终于在Web - JSP Files 里面找到了正确</description>
      <content:encoded><![CDATA[<p>在Eclipse中新建JSP页面时候，<strong>contentType=&ldquo;text/html; charset=utf-8&rdquo;</strong>,
<strong>pageEncoding=&ldquo;utf-8&rdquo;</strong>, <strong>content=&ldquo;text/html; charset=utf-8&rdquo;</strong>， 这样连中文字都无法保存
，必须修改成UTF-8才能显示。</p>
<p>在网上找了很久都没有合适的方案，都是给出在General下面的Content Types修改编码，而且下面人留言还说有效，我自己试了去发现根本没有作用。。。</p>
<p>自己琢磨了很久，终于在Web - JSP Files 里面找到了正确的设置，把其中的<strong>Encoding</strong>由ISO改为UTF-8就一切完美解决。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Eclipse 的 TODO (tasks)</title>
      <link>https://blog.alswl.com/2009/01/eclipse-of-the-todo-tasks/</link>
      <pubDate>Sat, 24 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/01/eclipse-of-the-todo-tasks/</guid>
      <description>使用自动生成代码，如构造一个类时候，会出现 // TODO Auto-generated method stub 任务标记，很是碍眼。 特别是在使用Windows - Prefererences - Show views - Tasks管理任务时，经常会和代码中的TODO一起使用，混淆视线 我弄了好久，才晓得自动建立的Task才有Complete的复选框，而在代码中的TODO FIXME XXX 是没有复选框的。 反正我觉得这是个失误，只能删除TODO标签，然后保存才能刷新，很是麻烦&amp;hellip; 昨天晚上诈金花输了200，交了学费</description>
      <content:encoded><![CDATA[<p>使用自动生成代码，如构造一个类时候，会出现 // TODO Auto-generated method stub 任务标记，很是碍眼。</p>
<p>特别是在使用Windows - Prefererences - Show views - Tasks管理任务时，经常会和代码中的TODO一起使用，混淆视线</p>
<p>我弄了好久，才晓得自动建立的Task才有Complete的复选框，而在代码中的TODO FIXME XXX 是没有复选框的。</p>
<p>反正我觉得这是个失误，只能删除TODO标签，然后保存才能刷新，很是麻烦&hellip;</p>
<p>昨天晚上诈金花输了200，交了学费，今天看不进书，就看看Java代码，看到这个Eclipse的功能，感兴趣，花了好一会看资料，很少，然后参考了[http:/
/www.mooreds.com/wordpress/archives/000446](<a href="http://www.mooreds.com/wordpress/a">http://www.mooreds.com/wordpress/a</a>
rchives/000446)</p>
<p>随着现在看的书有点开发层次，英文越来越重要了，今天索性把Eclipse的汉化取消，在快捷方式后面加入&quot;-nl en&quot;，使用英文版本</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Eclipse的奇淫巧计【转】</title>
      <link>https://blog.alswl.com/2009/01/eclipse-of-the-odd/</link>
      <pubDate>Sat, 24 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/01/eclipse-of-the-odd/</guid>
      <description>代码篇： 1.在源代码中快速跳转: eclipse中的跳转甚至比VS.Net还方便，方法是按住Ctrl键，然后鼠标指向变量名，方法名，类名，就会出现链接，点击就可跳到定义处。 2.实时语法检查: 编辑区右侧如果有红色小方块，直接点击就可跳到有错的行；黄色小方块是警告，可以忽略，但最好检查一下；如果某个函数尚未完成，要提 醒自己注意怎么办？加上注释// TODO，右侧就会有蓝色小方块，提示你此处尚未完成。当一个</description>
      <content:encoded><![CDATA[<p>代码篇：</p>
<p>1.在源代码中快速跳转:</p>
<p>eclipse中的跳转甚至比VS.Net还方便，方法是按住Ctrl键，然后鼠标指向变量名，方法名，类名，就会出现链接，点击就可跳到定义处。</p>
<p>2.实时语法检查:</p>
<p>编辑区右侧如果有红色小方块，直接点击就可跳到有错的行；黄色小方块是警告，可以忽略，但最好检查一下；如果某个函数尚未完成，要提</p>
<p>醒自己注意怎么办？加上注释// TODO，右侧就会有蓝色小方块，提示你此处尚未完成。当一个源码的右侧没有任何提示时，说明这个文件已经</p>
<p>完成了。</p>
<p>3.自动生成getter/setter方法:</p>
<p>只需要申明protected，private类成员变量，然后在Package Explore中找到该类，右键点击，选择&quot;Source&quot;&ldquo;Generate
Getters and</p>
<p>Setters&rdquo;。</p>
<p>4.更改类名/变量名:</p>
<p>如果涉及到多处修改，不要直接在源码中更改，在Package Explore中找到要改名的类或变量，右键点击，选择&quot;Refactor&quot;&ldquo;Rename&rdquo;，</p>
<p>eclipse会自动搜索所有相关代码并替换，确保不会遗漏或改错。</p>
<p>5.匹配Try:</p>
<p>如果写的代码需要抛出或者捕捉异常，在JBuilder中，你需要首先引入这个异常类，然后再在写好的代码前后加try，catch或者在方法后面加</p>
<p>throws，在eclipse里完全不必要这样，只需要写好代码，然后按ctrl + 1，这时会出来提示，提示你是throw还是catch这个异常，选择你需要</p>
<p>的，按下enter就可以了。</p>
<p>6.快速书写循环代码：</p>
<p>在写循环或者选择条件的语句时，先写出关键字如if、while，然后按alt + /自己去看有什么好处吧。接下来会出来提示代码，按下tab可以在</p>
<p>框框中跳，按下确定跳出代码提示。</p>
<p>热键篇：</p>
<p>ctrl + D：删除行</p>
<p>ctrl + M：当前窗口的最大化或最小化</p>
<p>ctrl + L：跳到指定的行</p>
<p>ctrl + 1：代码纠错提示</p>
<p>alt + /：代码辅助提示</p>
<p>F11：运行上次运行的程序</p>
<p>Ctrl+E 会弹出下拉列表列出打开文件的名称，用户可以利用上下方向键选择要查看的文件或者敲入文件名，这样就会切换到相应的文件。</p>
<p>Alt+Left 和 Alt+Right，利用Alt+左右方向键的方式，可以在打开文件中进行切换，就像用户使用浏览器时一样。</p>
<p>Ctrl+Shift+E，当用户使用Ctrl+Shift+E时，会弹出一个窗口列出打开文件的名称，用户可以利用上下方向键选择要查看的文件。</p>
<p>Ctrl+F6，会弹出一个列表列出打开文件的名称，不要松开Ctrl键，列表会一直打开。用户可以利用上下方向键或者利用Ctrl+Shift+F6选择要</p>
<p>查看的文件。</p>
<p>Ctrl+Shift+R，会打开资源对话框，键入要查看的文件名，回车就会切换到相应的文件。</p>
<p>Alt+F，利用历史纪录也可以达到切换的目的。当使用Alt+F打开文件菜单时，输入历史纪录中的数值就可以了。</p>
<p>Template：Alt + /</p>
<p>修改处：Window-&gt;Preference-&gt;Workbench-&gt;Keys-&gt;Command-&gt;Edit-&gt;Content Assist。</p>
<p>个人习惯：Shift+SPACE(空白)。</p>
<p>简易说明：编辑程序代码时，打sysout +Template启动键，就会自动出现：System.out.println(); 。</p>
<p>设定Template的格式：窗口-&gt;喜好设定-&gt;Java-&gt;编辑器-&gt;模板。</p>
<p>程序代码自动排版：Ctrl+Shift+F</p>
<p>修改处：窗口-&gt;喜好设定-&gt;工作台-&gt;按键-&gt;程序代码-&gt;格式。</p>
<p>个人习惯：Alt+Z。</p>
<p>自动排版设定：窗口-&gt;喜好设定-&gt;Java-&gt;程序代码格式制作程序。</p>
<p>样式页面-&gt;将插入tab(而非空格键)以内缩，该选项取消勾选，下面空格数目填4，这样在自动编排时会以空格4作缩排。</p>
<p>快速执行程序：Ctrl + F11</p>
<p>个人习惯：ALT+X</p>
<p>修改处：窗口-&gt;喜好设定-&gt;工作台-&gt;按键-&gt;执行-&gt;启动前一次的启动作业。</p>
<p>简易说明：第一次执行时，它会询问您执行模式，</p>
<p>设置好后，以后只要按这个热键，它就会快速执行。</p>
<p>..我觉得很顺手^___^</p>
<p>自动汇入所需要的类别：Ctrl+Shift+O</p>
<p>简易说明：</p>
<p>假设我们没有Import任何类别时，当我们在程序里打入：</p>
<p>BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));</p>
<p>此时Eclipse会警示说没有汇入类别，这时我们只要按下Ctrl+Shift+O，它就会自动帮我们Import类别。</p>
<p>查看使用类别的原始码：Ctrl+鼠标左键点击</p>
<p>简易说明：可以看到您所使用类别的原始码。</p>
<p>将选取的文字批注起来：Ctrl+/</p>
<p>简易说明：Debug时很方便。</p>
<p>修改处：窗口-&gt;喜好设定-&gt;工作台-&gt;按键-&gt;程序代码-&gt;批注</p>
<p>将选取的文字取消批注：Ctrl+简易说明：同上。</p>
<p>修改处：窗口-&gt;喜好设定-&gt;工作台-&gt;按键-&gt;程序代码-&gt;取消批注</p>
<p>视图切换：Ctrl+F8</p>
<p>个人习惯：Alt+S。</p>
<p>修改处：窗口-&gt;喜好设定-&gt;工作台-&gt;按键-&gt;窗口-&gt;下一个视景。</p>
<p>简易说明：可以方便我们快速切换编辑、除错等视景。</p>
<p>3.0里Ctrl+Alt+H可以看到调用当前member的方法,而且可以一层一层上去.</p>
<p>Ctrl+O可以快速切到其他方法.</p>
<p>密技篇：</p>
<p>一套Eclipse可同时切换，英文、繁体、简体显示：</p>
<p>1.首先要先安装完中文化包。</p>
<p>2.在桌面的快捷方式后面加上参数即可，</p>
<p>英文-&gt; -nl &ldquo;zh_US&rdquo; ；繁体-&gt; -nl &ldquo;zh_TW&rdquo; ；简体-&gt; -nl &ldquo;zh_CN&rdquo;。(其它语系以此类推)</p>
<p>像我2.1.2中文化后，我在我桌面的Eclipse快捷方式加入参数-n1 &ldquo;zh_US&rdquo;。</p>
<p>&ldquo;C:Program Fileseclipseeclipse.exe&rdquo; -n &ldquo;zh_US&rdquo;</p>
<p>接口就会变回英文语系噜。</p>
<p>利用Eclipse，在Word编辑文书时可不必将程序代码重新编排：</p>
<p>将Eclipse程序编辑区的程序代码整个复制下来(Ctrl+C)，直接贴(Ctrl+V)到Word或WordPad上，您将会发现在Word里的程序代码格式，
跟</p>
<p>Eclipse所设定的完全一样，包括字型、缩排、关键词颜色。我曾试过JBuilder、GEL、NetBeans&hellip;使用复制贴上时，只有缩排格式一样，字型</p>
<p>、颜色等都不会改变。</p>
<p>外挂篇：</p>
<p>外挂安装：将外挂包下载回来后，将其解压缩后，您会发现features、plugins这2个数据夹，将里面的东西都复制或移动到Eclipse的features</p>
<p>、plugins数据夹内后，重新启动Eclipse即可。</p>
<p>让Eclipse可以像JBuilderX一样使用拖拉方式建构GUI的外挂：</p>
<p>1.Jigloo SWT/Swing GUI Builder ：</p>
<p><a href="http://cloudgarden.com/jigloo/index.html">http://cloudgarden.com/jigloo/index.html</a></p>
<p>下载此版本：Jigloo plugin for Eclipse (using Java 1.4 or 1.5)</p>
<p>安装后即可由档案-&gt;新建-&gt;其它-&gt;GUI Form选取要建构的GUI类型。</p>
<p>2.Eclipse Visual Editor Project：</p>
<p><a href="http://www.eclipse.org/vep/">http://www.eclipse.org/vep/</a></p>
<p>点选下方Download Page，再点选Latest Release 0.5.0进入下载。</p>
<p>除了VE-runtime-0.5.0.zip要下载外，以下这2个也要：</p>
<p>EMF build 1.1.1: (build page) (download zip)</p>
<p>GEF Build 2.1.2: (build page) (download zip)</p>
<p>我只测试过Eclipse 2.1.2版本，使用上是OK的！</p>
<p>3.0版本以上的使用者，请下载：</p>
<p>Eclipse build I20040324:</p>
<p>1.0.0 Stream Integration Build I20040325 Thu, 25 Mar 2004 &ndash; 12:09 (-0500)</p>
<p>1.0.0 Stream Nightly Build N20040323a Tue, 23 Mar 2004 &ndash; 13:53 (-0500)</p>
<p>注意：3.0以上版本，仅build I20040324可正常使用。</p>
<p>安装成功后，即可由新建-&gt;Java-&gt;AWT与Swing里选择所要建构的GUI类型开始进行设计。VE必须配合着对应版本，才能正常使用，否则即使安装</p>
<p>成功，使用上仍会有问题。</p>
<p>使用Eclipse来开发JSP程序：</p>
<p>外挂名称：lomboz(下载页面)</p>
<p><a href="http://forge.objectweb.org/project/showfiles.php?group_id=97">http://forge.objectweb.org/project/showfiles.php?group_id=97</a></p>
<p>请选择适合自己版本的lomboz下载，lomboz.212.p1.zip表示2.1.2版，lomboz.3m7.zip表示M7版本&hellip;.以此类推。lomb
oz安装以及设置教学：</p>
<p>Eclipse开发JSP-教学文件</p>
<p>Java转exe篇：</p>
<p>实现方式：Eclipse搭配JSmooth(免费)。</p>
<p>1.先由Eclipse制作包含Manifest的JAR。</p>
<p>制作教学</p>
<p>2.使用JSmooth将做好的JAR包装成EXE。</p>
<p>JSmooth下载页面：</p>
<p><a href="http://jsmooth.sourceforge.net/index.php">http://jsmooth.sourceforge.net/index.php</a></p>
<p>3.制作完成的exe文件，可在有装置JRE的Windows上执行。</p>
<p>Eclipse-Java编辑器最佳设定：</p>
<p>编辑器字型设定：工作台-&gt;字型-&gt;Java编辑器文字字型。</p>
<p>(建议设定Courier New -regular 10)</p>
<p>编辑器相关设定：窗口-&gt;喜好设定-&gt;Java-&gt;编辑器</p>
<p>外观：显示行号、强调对称显示的方括号、强调显示现行行、显示打印边距，将其勾选，Tab宽度设4，打印编距字段设80。</p>
<p>程序代码协助：采预设即可。</p>
<p>语法：可设定关键词、字符串等等的显示颜色。</p>
<p>附注：采预设即可。</p>
<p>输入：全部字段都勾选。</p>
<p>浮动说明：采预设即可。</p>
<p>导览：采预设即可。</p>
<p>使自动排版排出来的效果，最符合Java设计惯例的设定：</p>
<p>自动排版设定：窗口-&gt;喜好设定-&gt;Java-&gt;程序代码制作格式。</p>
<p>换行：全部不勾选。</p>
<p>分行：行长度上限设：80。</p>
<p>样式：只将强制转型后插入空白勾选。</p>
<p>内缩空格数目：设为4。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
