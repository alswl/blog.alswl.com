<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>django on Log4D</title>
    <link>https://blog.alswl.com/tags/django/</link>
    <description>Recent content in django on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 19 Nov 2012 00:06:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/tags/django/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何让 Instagram 在一百多万用户爆炸后稳定运行</title>
      <link>https://blog.alswl.com/2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/</link>
      <pubDate>Mon, 19 Nov 2012 00:06:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2012/11/keeping-instagram-up-with-over-a-million-new-users-in-twelve-hours/</guid>
      <description>原文链接：Keeping Instagram up with over a million new users in twelve hours 这周二我们发布了 Instagram for Android，反响空前强烈。 最近这几周我们一直（在基础设施方面）做负载计划，为所有可能发生的事故做准备。 尽管如此，在发布那天，最大的挑战仍然是如何快速定位问题，找到瓶颈并尽快修复他们。 在这里我们将分享一些帮助我们解决问题的工具和技术。 ##statsd## statsd 在 Instagram 很受欢迎。这是 Etsy 写的一个网络监控器， 能够统计并图形化数据。它有两种核心的统计方式：计数器和</description>
      <content:encoded><![CDATA[<p>原文链接：<a href="http://instagram-engineering.tumblr.com/post/20541814340/keeping-instagram-up-with-over-a-million-new-users-in">Keeping Instagram up with over a million new users in twelve hours</a></p>
<hr />
<p>这周二我们发布了 <a href="https://play.google.com/store/apps/details?id=com.instagram.android">Instagram for Android</a>，反响空前强烈。
最近这几周我们一直（在基础设施方面）做负载计划，为所有可能发生的事故做准备。
尽管如此，在发布那天，最大的挑战仍然是如何快速定位问题，找到瓶颈并尽快修复他们。
在这里我们将分享一些帮助我们解决问题的工具和技术。</p>
<!-- more -->
<p>##statsd##</p>
<p><a href="http://github.com/etsy/statsd/">statsd</a> 在 Instagram 很受欢迎。这是 <a href="http://github.com/etsy/">Etsy</a> 写的一个网络监控器，
能够统计并图形化数据。它有两种核心的统计方式：计数器和计时器。
我们用计数器来跟踪许多信息，从每秒钟注册数到喜欢数量统计。
同时我们使用计时器来跟踪 feeds 变化，用户停留在 feeds 多久，和其他的主要操作。</p>
<p>我们喜欢 statsd 的最大原因是它能迅速将状态显示并图形化出来。
Stats 几乎是实时的（在我们系统中有 10 秒钟的延时）
帮助我们评估系统状况和代码变化情况。
Stats 可以随意启用，当我们需要跟踪时，能够快速启用它。
你可以指定一个取样密度，来均匀的查看 web 应用概况，
而不会影响它运行效率。</p>
<p>总结：实时统计可以动态添加，帮助你线上诊断而无须等待问题重现。</p>
<p>##Dogslow##</p>
<p><a href="http://blog.bitbucket.org/2011/05/17/tracking-slow-requests-with-dogslow/">Bitbucket</a> 出品，Dogslow 是一个 Django middleware，它能监视运行的进程，
当发现有进程运行时间超过 <em>N</em> 秒时，会保存当前进程信息的快照到磁盘。
一直开着它很耗性能，但当去定位突发问题的瓶颈时，就会非常有用（我们在 web
服务器上加了一个开关控制）。</p>
<p>在发布那天，我们发现很多运行时间超过 1.5s 的进程都卡在 memcached 的 set()
和 get_many() 方法上。我们使用 Munin 跟踪我们的机器状态，发现 memcached
每秒有 5 万次请求，因此，尽管还没到达 CPU 上限，却被 memcached
拖慢了应用服务器速度。</p>
<p>总结：瓶颈往往是后台的一个短板造成的，定位到底哪里卡下来能帮助找出问题根源。</p>
<p>##Replication &amp; Read-slaves##</p>
<p>我们主要的两个数据源 <a href="http://redis.io">Redis</a> 和 <a href="http://postgresql.org/">PostgreSQL</a> 都可以方便地主从分离。
当我们的 Redis 数据库到达每秒 4 万请求时候，开始成为瓶颈。我们在另外一台服务器
打开 <a href="http://redis.io/topics/replication">SYNCing to the master</a>，然后将读请求发送到这台服务器，
这些操作仅耗时 20 分钟。根据几个案例，有些机器的负载会偏离了我们预期，
所以我们会提前准备好从服务器，从而快速地分离出读请求。</p>
<p>比方说 Postgres，我们混合使用 <a href="http://wiki.postgresql.org/wiki/Streaming_Replication">Streaming Replication</a> 和 Amazon EBS
快照来快速启动从服务器。所有从主 DB 到从服务器的数据不定时会有 EBS 快照。
根据这些快照，我们可以在 20 分钟内启动新的从服务器并通知主服务器。
在 AWS 这样的环境中，我们使用脚本和命令来很快的预判并部署新的从服务器。</p>
<p>总结：如果读能力会变成瓶颈，那就预先准备好从服务器，并让他们轮询服务。
一旦出现了新的读问题，要做的仅仅是加更多的读服务器到轮询中去。</p>
<h2 id="pgfouine">##PGFouine##</h2>
<p><a href="http://pgfouine.projects.postgresql.org/">PGFouine</a> 是一个分析 PostgreSQL 查询日志并生成查询结果的工具。
将最重、最常用、最慢的查询拆分出来。我们写了一个 Fabric 脚本来方便的使用它，
连接到一个数据库，然后等待 30 秒并记录下其中每条查询，把结果保存到本地再用
pgfouine 来分析，这里可以看到 <a href="https://gist.github.com/2307647">as a gist</a>。PGFouine
是我们用来分析数据库性能的核心工具。帮我们找出哪些查询应该被 memcached 缓存，
哪些查询了过度的数据等等。发布那天数据库出现了一点压力，我们就跑 PGFouine，
然后部署一些提升性能的代码来缓解压力，然后再跑一次 PGFouine 来确认效果。</p>
<p>知道平日里数据库表现性能很重要，因此我们也定期在无压力的服务器上统计信息。</p>
<p>总结：数据库日志分析（尤其注意迭代循环查询和缓存经常使用的数据）</p>
<h2 id="one-more-thing">One more thing</h2>
<p>另一个帮助我们顺利通过发布第一天的工具是我们自己写的一个 node.js 服务，node2dm，
用来推送通知消息到 Android C2DM 服务。它至今已经发送了 500 万条推送。</p>
<p>我们调查了一些支持 C2DM 的可用服务，但要么是开源包不那么被积极维护，
要么是不支持 Google 所有的功能。我们现在用 <a href="http://github.com/Instagram/node2dm">open sourcing node2dm</a>，
你可以随意 forlk / pull-request 来帮助我们改进。</p>
<h2 id="interested">Interested?</h2>
<p>如果你对这些很感兴趣，你可以跟我们联系来获得工作机会，<a href="http://instagram.jobscore.com/jobs/instagram/engineer/bXctey0Oir4kCZeJe4bk1X">drop us a note</a>，
我们需要知道你的想法。</p>
<p>你可以在 Hacker News 来 <a href="http://news.ycombinator.com/item?id=3804351">discuss this post</a>。</p>
<p>—</p>
<p><em>Mike Krieger, co-founder</em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>python&#43;django MTV框架 和php MVC框架</title>
      <link>https://blog.alswl.com/2009/10/python-django-mtv-framework-and-php-mvc-framework/</link>
      <pubDate>Thu, 01 Oct 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/10/python-django-mtv-framework-and-php-mvc-framework/</guid>
      <description>首先，祝福祖国60华诞，我爱这个国家。 刚才在GR读到Here Comes The Sun的[A shorten url app](http://www.classicning.com/blog/2009/09/a-shorten-url-app/-shorten-url- app/)，其中提到了Python下Django框架的一些问题，我很感兴趣，搜索了一下MTV模型，资料很少。但有一篇我读后很有启发，现在转载如下。 原文链接：python+django MTV框架 和php MVC框架的不同之处 - PHP+MYSQL+APACHE - ThinkPHP官方论坛 作者：乔峰 *残酷的分割线 python+django MTV框架 和php MVC框架的不同之处 最近</description>
      <content:encoded><![CDATA[<p>首先，祝福祖国60华诞，我爱这个国家。</p>
<p>刚才在GR读到<a href="http://www.classicning.com">Here Comes The Sun</a>的[A shorten url
app](<a href="http://www.classicning.com/blog/2009/09/a-shorten-url-app/-shorten-url-">http://www.classicning.com/blog/2009/09/a-shorten-url-app/-shorten-url-</a>
app/)，其中提到了Python下Django框架的一些问题，我很感兴趣，搜索了一下MTV模型，资料很少。但有一篇我读后很有启发，现在转载如下。</p>
<p>原文链接：<a href="http://bbs.thinkphp.cn/viewthread.php?tid=5022">python+django MTV框架 和php MVC框架的不同之处 - PHP+MYSQL+APACHE -
ThinkPHP官方论坛</a></p>
<p>作者：乔峰</p>
<p>*<em><strong><strong><strong><strong><strong><strong><strong><strong>残酷的分割线</strong></strong></strong></strong></strong></strong></strong></strong></em></p>
<h2 id="pythondjango-mtv框架-和php-mvc框架的不同之处">python+django MTV框架 和php MVC框架的不同之处</h2>
<p>最近学习了python语言和djangoMTV框架，感觉用的很爽啊。这里给大家粗略的介绍一下。</p>
<p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的设计模式，即模型M，模版T和视图控制器V。它最初是被开发来用于管理劳伦斯出版
集团旗下的一些以新闻内容为主的网站的。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p>
<p>Django的主要目标是使得开发复杂的、数据库驱动的网站变得简单。Django注重组件的重用性和「可插拔性」，敏捷开发和DRY法则（Don&rsquo;t Repeat
Yourself）。在Django中Python被普遍使用，甚至包括配置文件和数据模型。</p>
<p>关键一点是Django框架把控制层(Ctronl layer)给封装了，无非与数据交互这层都是数据库表的读,写,删除,更新的操作.在写程序的时候，只要调用方
法就行了.感觉很方便.用户可以用很少的代码完成很多的事情.代码可读性强.运行的速度比php要快.</p>
<p>python是嵌入式的语言,它可以把C和JAVA语言的写的东西结合在一起.也难怪Google公司主导议语言用python,c++,java的比较多.大的公司
比较重视系统管理和总体的架构.</p>
<p>有人说最有发展的语言是python,不过都值得大家去探讨的.因为结果都很预料,前段时间闹的很热的是Ruby语言,Ruby刚出来时,传说也很了得,现在看起来也
不怎么行了.</p>
<h2 id="python的前景">Python的前景</h2>
<p>Python在编程领域的占有率一直处于稳步上升之中，根据最新的数据，Python排名第七。前六名分别是Java,C,VB,C++,PHP和Perl.
作为一个很年轻的语言，Python的位置已经相当令人振奋了。随着微软将Python纳入.Net 平台，相信Python的将来会更加强劲发展。Python
很可能会成为.Net平台快速开发的主流语言。</p>
<p>欲了解这方面情况，请参考Iron Python的相关信息.</p>
<p>著名的搜索引擎 Google 也大量使用Python。 现在中国的搜狐(sohu)网站邮箱系统也是用python开发的.更加令人吃惊的是，在Nokia智能手
机所采用的Symbian操作系统上，Python成为继C++,Java之后的第三个编程语言！可见Python的影响力之巨大。</p>
<p>我在学python语言和django MTV框架的一点体会,拿来教程,都说该语言如何简单易学,都是乱说,入门很简单,想要学深点,都不容易的.</p>
<p>个人感觉还是学PHP入门时最简单,不过现在弄出哪么框架,组件,也变得越来越不简单,PHP也越来越像JAVA的儿子JSP(当然PHP是C语言的儿子),个人觉得
他们越来越接近,但又有好多差异.</p>
<p>python语言不仅可以做WEB应用,而且可以做桌面,服务器软件和手机软件开发(有的诺基亚手机系统就是用python做的),而PHP专注做WEB 应用的,P
HP开发祖师也为PHP为什么不能转向照顾到做桌面,服务器软件和手机软件开发的应用听说也苦耐了好久,但最终没能成功转型.哪是因为他们在最初的底层定位搞死了(网
上评论观点).</p>
<p>不过我看到网上语言排名,PHP在Python之前,也说明PHP在近期表现不俗.</p>
<p>我喜欢用Python,Django,也很喜欢用php,thinkphp,特别是升级后的1.5版,但是可不可也做成MTV的框架模式呢.用精良的代码完成很多工作
.加快开发速度呢.大家都要努力哦.加油兄弟们.</p>
<h3 id="2楼回复">2楼回复：</h3>
<p>美國太空總署NASA使用Python，Google使用Python，Youtube使用Python.阿里巴巴也用python开发,搜狐邮箱是用python2
.6开发的</p>
<h3 id="5楼回复">5楼回复：</h3>
<p>MVC与MTV有什么不同呢.</p>
<p>大家都知道</p>
<p>MVC 中的M是代表MODLE层,V代表VIEW层,C代表Contrl层.</p>
<p>MTV 中的M是代表MODLE层,T代表Template(模板层),V代表VIEW层.</p>
<p>Django 是MTV模式框架,它把Control控制层容合到   Django 框架里边了,</p>
<p>程序员把  Control控制层东西交给Django自动完成了,  只需要编写非常少的代码完成很多的事情.所以,它比MVC框架考虑的问题要深一步.因为我们程
序员大都写程序在Contrl层,现在这个工作交给了框架,仅需写很少的调用代码,自然工作效率就提高了.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
