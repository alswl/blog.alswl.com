<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Viewpoint on Log4D</title>
    <link>https://blog.alswl.com/categories/viewpoint/</link>
    <description>Recent content in Viewpoint on Log4D</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 09 Sep 2018 23:21:40 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/categories/viewpoint/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DevOps 和 SRE</title>
      <link>https://blog.alswl.com/2018/09/devops-and-sre/</link>
      <pubDate>Sun, 09 Sep 2018 23:21:40 +0800</pubDate>
      <guid>https://blog.alswl.com/2018/09/devops-and-sre/</guid>
      <description>&lt;p&gt;最近有一位朋友和我聊职业发展方向问题，聊了不少 DevOps 和 SRE 话题。
我几年前刚接触这两个概念时也常常将之混淆，可惜当时没有人来解答我困惑。
现在这虽然已经极为流行，但是我发现我这位朋友对这两个职位还存在一些误区。
于是我给了一些见解并整理成文章以饕大众。&lt;/p&gt;
&lt;p&gt;最常见的误区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DevOps 新概念，好高级哦&lt;/li&gt;
&lt;li&gt;SRE 是高级版 DevOps&lt;/li&gt;
&lt;li&gt;运维可以轻松转身 DevOps 工程师&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我一一给你讲解吧。&lt;/p&gt;
&lt;p&gt;




&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.alswl.com/images/upload_dropbox/201809/sre-and-devops.png&#34; alt=&#34;sre-and-devops.png&#34;  /&gt;



&lt;small&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uTEL8Ff1Zvk&#34;&gt;image via YouTube&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;devops-和-sre-定义&#34;&gt;DevOps 和 SRE 定义&lt;/h2&gt;
&lt;p&gt;DevOps 是字面上 Dev 开发 / Ops 运维两者组合，
严格意义上 DevOps 如下（via &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps - Wikipedia&lt;/a&gt;）：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近有一位朋友和我聊职业发展方向问题，聊了不少 DevOps 和 SRE 话题。
我几年前刚接触这两个概念时也常常将之混淆，可惜当时没有人来解答我困惑。
现在这虽然已经极为流行，但是我发现我这位朋友对这两个职位还存在一些误区。
于是我给了一些见解并整理成文章以饕大众。</p>
<p>最常见的误区：</p>
<ul>
<li>DevOps 新概念，好高级哦</li>
<li>SRE 是高级版 DevOps</li>
<li>运维可以轻松转身 DevOps 工程师</li>
</ul>
<p>让我一一给你讲解吧。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201809/sre-and-devops.png" alt="sre-and-devops.png"  />



<small><a href="https://www.youtube.com/watch?v=uTEL8Ff1Zvk">image via YouTube</a></small></p>
<!-- more -->
<h2 id="devops-和-sre-定义">DevOps 和 SRE 定义</h2>
<p>DevOps 是字面上 Dev 开发 / Ops 运维两者组合，
严格意义上 DevOps 如下（via <a href="https://en.wikipedia.org/wiki/DevOps">DevOps - Wikipedia</a>）：</p>
<blockquote>
<p>DevOps（Development 和 Operations 的组合词）是一种重视“软件开发人员（Dev）
”和“IT 运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。</p></blockquote>
<p>SRE 全称是 Site Reliability Engineering，最早是由 Google 提出，并且在其工程实践中发扬光大。
他们还出了一本同名书籍「<a href="https://landing.google.com/sre/book.html">Site Reliability Engineering</a>」，
让这个理念在互联网工程师圈子里广泛传播。</p>
<p>Google 对 SRE 解释是（via <a href="https://en.wikipedia.org/wiki/Site_Reliability_Engineering">Site Reliability Engineering - Wikipedia</a>）：</p>
<blockquote>
<p>Site reliability engineering (SRE) is a discipline that incorporates aspects of
software engineering and applies that to operations whose goals are to
create ultra-scalable and highly reliable software systems.</p></blockquote>
<p>我将其翻译翻译为中文：</p>
<blockquote>
<p>网站稳定性工程师是致力于打造「高扩展、高可用系统」，并将其贯彻为原则的软件工程师。</p></blockquote>
<p>从定义来看，DevOps 是文化、运动和惯例，而 SRE 是有严格任职要求的职位。
文化是软性定义，文化有更多概念可以捏造，而 SRE 定义精准，就少了想象空间（也可能 SRE 门槛高 😄）。
按 Google 给出的说法是，SRE 工程师实践了 DevOps 文化。这个观点没错，但是国内的 DevOps 逐步独立出 DevOps 工程师，
所以在本文，我着重讨论的是 DevOps 工程师和 SRE 工程师两种职位对比。</p>
<h2 id="两者产生背景和历史">两者产生背景和历史</h2>
<p>互联网需求催生了 DevOps 。在最传统软件企业中，是只有 Dev 没有 Ops，
那时 Ops 可能还是只是技术支持人员。开发按照瀑布流：需求分析、系统设计、开发、测试、交付、运行，
传统软件发布是一个重量级操作。一旦发布，Dev 几乎不再直接操作。
80 后可能会记得 QQ 每年都会有一个大版本发布吧，QQ 2000 / 2003 / 2004 等等。
此时 Ops 不用和 Dev 直接高频接触，甚至针对一些纯离线业务，压根没有设立 Ops 这个岗位。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201809/qq-2004.png" alt="qq-2004.png"  />


</p>
<p>互联网浪潮之后，软件由传统意义上桌面软件演变为面向网站、手机应用。
这时候业务核心逻辑，比如交易，社交行为都不在用户桌面完成，而是在服务器后端完成。
这给互联网企业给予了极大操作空间：随时可以改变业务逻辑，这促进了业务快速迭代变更。
但即便这样，Dev 和 Ops 是极其分裂的两个环节。Ops 不关心代码是如何运作的，Dev 不知道代码如何运行在服务器上。</p>
<p>当业界还沉浸在可以每周发布版本喜悦中时，2009 年，Flicker 提出了每天发布 10+ 次概念，大大震撼了业界。
Flicker 提出了几个核心理念：</p>
<ul>
<li>业务快速发展，需要拥抱变更，小步快跑</li>
<li>Ops 目标不是为了网站稳定和快速，而是推动业务快速发展</li>
<li>基于自动化工具提高 Dev / Ops 联接：代码版本管理、监控</li>
<li>高效沟通：IRC / IM Robot（现在那些 ChatBot 套路，10 年前就被 Flicker 玩过了）</li>
<li>信任、透明、高效、互助的沟通文化</li>
</ul>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201809/flicker.png" alt="flicker.png"  />


</p>
<p>原文 SlideShare 在这
<a href="https://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr">10+ Deploys Per Day: Dev and Ops Cooperation at Flickr</a></p>
<p>真是让人难以想象，今天各种培训公司和一些知名大 V 在呼唤这些 DevOps 理念，
竟然在 2009 年一份幻灯片中就展现淋漓尽致。经典总是不过时，在尘封下闪耀着智慧光芒。
有些人将 DevOps 和运维自动化等同，这是只看到表象。
DevOps 目标是提高业务系统交付速度，并为之提供相关工具、制度和服务。
一些个人或培训机构添油加醋和衍生含义，都是围绕这 DevOps 本质而发散。</p>
<p>接下来聊聊 SRE 历史， SRE 出现要晚一些。在 2003 年时候 Google 的 Ben Treynor
招募了几个软件工程师，这个团队设立目的是帮助 Google 生产环境服务运行更稳定、健壮、可靠。
不同于中小型规模公司，Google 服务于十几亿用户服务，短暂服务不可用会带来致命后果。
因此 Google 走在了时代最前面，SRE 产生了。</p>
<p>这个职位为大规模集群服务，小型团队不需要这样职位设定（可能也招不起真正 SRE 😊）。
Google 在探索若干年之后，SRE 团队开始将自己心得体会写在线上，并在 2016 年将此书出版。</p>
<h2 id="两者的职能不同">两者的职能不同</h2>
<p>DevOps 文化，那么就没有一个具象职能要求。现在不少公司将 DevOps 职能单独抽取出来，称之为 DevOps 工程师。
那让我们看看 DevOps 工程师关心什么：DevOps 文化目的是提交交付速度， DevOps 工程师就自然会关心软件 / 服务的整个生命周期。</p>
<p>一个简单的公式：<code>速度 = 总量 / 时间</code>，添上工程行业术语，即 <code>交付速度 = （（功能特性 * 工程质量） / 交付时间） * 交付风险</code>。</p>
<p>功能特性交给产品经理和项目经理管理，DevOps 工程师需要关心剩下几个因素：工程质量 / 交付时间 / 交付风险。
DevOps 工程师职能如下：</p>
<ul>
<li>管理应用全生命周期（需求、设计、开发、QA、发布、运行）</li>
<li>关注全流程效率提升，挖掘瓶颈点并将其解决</li>
<li>自动化运维平台设计和研发工作（标准化、自动化、平台化）</li>
<li>支持运维系统，包括 虚拟化技术、资源管理技术、监控技术、网络技术</li>
</ul>
<p>SRE 关键词是「高扩展性」「高可用性」。高扩展性是指当服务用户数量暴增时，
应用系统以及支撑其服务（服务器资源、网络系统、数据库资源）可以在不调整系统结构，不强化机器本身性能
，仅仅增加实例数量方式进行扩容。高可用性是指，应用架构中任何环节出现不可用时，比如应用服务、网关、数据库
等系统挂掉，整个系统可以在可预见时间内恢复并重新提供服务。当然，既然是「高」可用，
那么这个时间一般期望在分钟级别。SRE 职能可以概括为以下：</p>
<ul>
<li>为 应用、中间件、基础设施等提供 选型、设计、开发、容量规划、调优、故障处理</li>
<li>为业务系统提供基于可用性、可扩展性考虑决策，参与业务系统设计和实施</li>
<li>定位、处理、管理故障，优化导致故障发生相关部件</li>
<li>提高各部件资源利用率</li>
</ul>
<h2 id="工作内容不同">工作内容不同</h2>
<p>职责不同导致两个职位工作内容也不尽相同，我将 DevOps 工程师和 SRE 工程师职能列举如下：</p>
<ul>
<li>DevOps
<ul>
<li>设定应用生命管理周期制度，扭转流程</li>
<li>开发、管理 开发工程师 /QA 工程师使用 开发平台系统</li>
<li>开发、管理 发布系统</li>
<li>开发、选型、管理 监控、报警系统</li>
<li>开发、管理 权限系统</li>
<li>开发、选型、管理 CMBD</li>
<li>管理变更</li>
<li>管理故障</li>
</ul>
</li>
<li>SRE
<ul>
<li>管理变更</li>
<li>管理故障</li>
<li>制定 SLA 服务标准</li>
<li>开发、选型、管理 各类中间件</li>
<li>开发、管理 分布式监控系统</li>
<li>开发、管理 分布式追踪系统</li>
<li>开发、管理 性能监控、探测系统（dtrace、火焰图）</li>
<li>开发、选型、培训 性能调优工具</li>
</ul>
</li>
</ul>
<p>很有趣的对比，DevOps 和 SRE 都会关心应用生命周期，特别是生命周期里面中变更和故障。
但是 DevOps 工作内容是主要为开发链路服务，一个 DevOps Team 通常会提供一串工具链，
这其中会包括：开发工具、版本管理工具、CI 持续交付工具、CD 持续发布工具、报警工具、故障处理。
而 SRE Team 则关注更为关注变更、故障、性能、容量相关问题，会涉及具体业务，产出工具链会有：
容量测量工具、Logging 日志工具、Tracing 调用链路跟踪工具、Metrics 性能度量工具、监控报警工具等。</p>
<h2 id="devops-和-sre-关系">DevOps 和 SRE 关系</h2>
<p>DevOps 首先是一种文化，后期逐渐独立成一个职位；SRE 一开始就明确是一个职位；
不少同学把 DevOps 和 SRE 搞混，是被两者表象锁迷惑，看上去这两者都有的工具属性、自动化要求也相似。
甚至有一些开发同学把这类运维工作都统一理解为：服务器 + 工具 + 自动化。这是盲人摸象，管中窥豹。</p>
<p>从技能上来说，两者都需要较强的运维技能。
在职业发展天花板上，DevOps 可能缺乏 SRE 在一些专业领域的技能：
计算机体系结构能力；高吞吐高并发优化能力；可扩展系统设计能力；复杂系统设计能力；业务系统排查能力。
两者都需要软实力，但是 SRE 面临复杂度更高，挑战更大，要求也更高：</p>
<ul>
<li>分析问题、解决问题能力</li>
<li>对业务系统更了解</li>
<li>具备高并发、高可用系统设计实施经验</li>
<li>对整个系统链路有更全面认识</li>
</ul>
<p>DevOps 具有普遍意义，现代互联网公司都需要 DevOps，但是并非所有团队对高可用性、高扩展性存在需求，它们不需要 SRE。
DevOps 工程师掌握相关技能之后，也有机会可以发展为 SRE 工程师。
而一位合格 SRE 工程师，在有选择情况下面，我相信不会去转型为 DevOps 工程师。</p>
<p>从专业背景来看，无论是 DevOps 还是 SRE 工程师，都需要研发背景，前者需要开发工具链，后者需要有较强架构设计经验。
如果有运维工程师想转型成为 DevOps 或者 SRE，那么需要补上相关技术知识。
毕竟，不是会搭建一套 Jenkins + Kubernetes 就可以自称为 DevOps / SRE 工程师。</p>
<p>怎么样，有没有解开这几个常见误区呢？希望你看到这里可以豁然开朗，最后附上两个工程师的技能点，
期望有志成为这两种工程师的同学，加油努力。</p>
<h2 id="附录技能点">附录：技能点</h2>
<p>DevOps：</p>
<ul>
<li>Operator 技能
<ul>
<li>Linux Basis
<ul>
<li>基本命令操作</li>
<li>Linux FHS（Filesystem Hierarchy Standard 文件系统层次结构标准）</li>
<li>Linux 系统（差异、历史、标准、发展）</li>
</ul>
</li>
<li>脚本
<ul>
<li>Bash / Python</li>
</ul>
</li>
<li>基础服务
<ul>
<li>DHCP / NTP / DNS / SSH / iptables / LDAP / CMDB</li>
</ul>
</li>
<li>自动化工具
<ul>
<li>Fabric / Saltstack / Chef / Ansible</li>
</ul>
</li>
<li>基础监控工具
<ul>
<li>Zabbix / Nagios / Cacti</li>
</ul>
</li>
<li>虚拟化
<ul>
<li>KVM 管理 / XEN 管理 / vSphere 管理 / Docker</li>
<li>容器编排 / Mesos / Kubernetes</li>
</ul>
</li>
<li>服务
<ul>
<li>Nginx / F5 / HAProxy / LVS 负载均衡</li>
<li>常见中间件 Operate（启动、关闭、重启、扩容）</li>
</ul>
</li>
</ul>
</li>
<li>Dev
<ul>
<li>语言
<ul>
<li>Python</li>
<li>Go（可选）</li>
<li>Java（了解部署）</li>
</ul>
</li>
<li>流程和理论
<ul>
<li>Application Life Cycle</li>
<li>12 Factor</li>
<li>微服务概念、部署、生命周期</li>
<li>CI 持续集成 / Jenkins / Pipeline / Git Repo Web Hook</li>
<li>CD 持续发布系统</li>
</ul>
</li>
<li>基础设施
<ul>
<li>Git Repo / Gitlab / Github</li>
<li>Logstash / Flume 日志收集</li>
<li>配置文件管理（应用、中间件等）</li>
<li>Nexus / JFrog / Pypi 包依赖管理</li>
<li>面向 开发 / QA 开发环境管理系统</li>
<li>线上权限分配系统</li>
<li>监控报警系统</li>
<li>基于 Fabric / Saltstack / Chef / Ansible 自动化工具开发</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>SRE：</p>
<ul>
<li>语言和工程实现
<ul>
<li>深入理解开发语言（假设是 Java）
<ul>
<li>业务部门使用开发框架</li>
<li>并发、多线程和锁</li>
<li>资源模型理解：网络、内存、CPU</li>
<li>故障处理能力（分析瓶颈、熟悉相关工具、还原现场、提供方案）</li>
</ul>
</li>
<li>常见业务设计方案和陷阱（比如 Business Modeling，N+1、远程调用、不合理 DB 结构）</li>
<li>MySQL / Mongo OLTP 类型查询优化</li>
<li>多种并发模型，以及相关 Scalable 设计</li>
</ul>
</li>
<li>问题定位工具
<ul>
<li>容量管理</li>
<li>Tracing 链路追踪</li>
<li>Metrics 度量工具</li>
<li>Logging 日志系统</li>
</ul>
</li>
<li>运维架构能力
<ul>
<li>Linux 精通，理解 Linux 负载模型，资源模型</li>
<li>熟悉常规中间件（MySQL Nginx Redis Mongo ZooKeeper 等），能够调优</li>
<li>Linux 网络调优，网络 IO 模型以及在语言里面实现</li>
<li>资源编排系统（Mesos / Kubernetes）</li>
</ul>
</li>
<li>理论
<ul>
<li>容量规划方案</li>
<li>熟悉分布式理论（Paxos / Raft / BigTable / MapReduce / Spanner 等），能够为场景决策合适方案</li>
<li>性能模型（比如 Pxx 理解、Metrics、Dapper）</li>
<li>资源模型（比如 Queuing Theory、负载方案、雪崩问题）</li>
<li>资源编排系统（Mesos / Kurbernetes）</li>
</ul>
</li>
</ul>
<h2 id="ref">Ref</h2>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/DevOps">DevOps - 维基百科，自由的百科全书</a></li>
<li><a href="https://en.wikipedia.org/wiki/Site_reliability_engineering">Site reliability engineering - Wikipedia</a></li>
<li><a href="http://skill-map.stuq.org/">StuQ 技能图谱</a></li>
<li><a href="https://12factor.net/zh_cn/">The Twelve-Factor App （简体中文）</a></li>
<li><a href="https://landing.google.com/sre/book/chapters/communication-and-collaboration.html">Google - Site Reliability Engineering</a></li>
<li><a href="https://www.youtube.com/watch?v=uTEL8Ff1Zvk">What&rsquo;s the Difference Between DevOps and SRE? - YouTube</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>加班那点事儿</title>
      <link>https://blog.alswl.com/2014/08/work-overtime/</link>
      <pubDate>Sat, 30 Aug 2014 17:39:19 +0800</pubDate>
      <guid>https://blog.alswl.com/2014/08/work-overtime/</guid>
      <description>&lt;p&gt;前段时间，一个好基友告诉我，他换了份工作，去了一家用户数据表现堪称吓人的创业公司去了。其中有一个细节引起了我的注意：他们在实行 996 的上班制度。即 9 点钟上班，9 点钟下班，一周工作 6 天。&lt;/p&gt;
&lt;p&gt;同样实行这种制度的还有阿里的来往团队。当年（其实就是去年）在抢占移动端 IM 入口时候，马云都使用了红包政策，来往的工程师在高压之下，也实行 996 了制度。
我问过阿里的朋友，他们表示，整体加班情况的确比较多。我追问了一下加班效率，证实了我的一个猜想，有些个人是晚上加班没事干，尤其有些测试工程师，白天没活干，晚上活多，还经常等到 9 点之后才有事情。这个现象也许不是普遍的，但的确存在。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>前段时间，一个好基友告诉我，他换了份工作，去了一家用户数据表现堪称吓人的创业公司去了。其中有一个细节引起了我的注意：他们在实行 996 的上班制度。即 9 点钟上班，9 点钟下班，一周工作 6 天。</p>
<p>同样实行这种制度的还有阿里的来往团队。当年（其实就是去年）在抢占移动端 IM 入口时候，马云都使用了红包政策，来往的工程师在高压之下，也实行 996 了制度。
我问过阿里的朋友，他们表示，整体加班情况的确比较多。我追问了一下加班效率，证实了我的一个猜想，有些个人是晚上加班没事干，尤其有些测试工程师，白天没活干，晚上活多，还经常等到 9 点之后才有事情。这个现象也许不是普遍的，但的确存在。</p>
<p>我自己是反感加班的，曾经面到一个开发工程师，表示工作三年来，加班时常为 0h。当时有点被这种表述惊讶了一下，然后我认为他是在标榜自己工作效率高。
这种表述也反映出他作为工程师，认为加班是一个负面的表现。
的确，一个团队再如何厉害，也不可能标榜他们是靠加班来获得核心竞争力的。知识劳动者又依靠劳动密集来获得产出。
雷布斯说过「你不要用战术上的勤奋掩盖战略上的懒惰」，在我看来，靠加班提高产出就属于战术上的勤奋。</p>
<p>从个人工作效率上来看，工作时长和产出并不是线性的。连续工作十几个小时，甚至可能将平均效率降低，有科学实验表明，连续注意力集中在 1.5h 为好，过长时间会造成注意力降低。
另外，过多工作时间把人累的和土狗一样，长期以往，工作会挤占了太多生活空间，生活本身也会变得紧张压抑，搞不好又一个程序猿过劳死。要完成既定目标有很多种办法，而增长时间工作时间一定不是最有效的那种。</p>
<p>我也特别讨厌所谓工作到凌晨三点的做法（除非特殊项目需要），我理解的加班是挤占掉个人娱乐、学习时间，投入到具体目标的实现上面去。而不是挤占休息时间，即便加班，也需要保持充分的休息，否则加个屁班，浑浑噩噩的，一点产出都没有。</p>
<p>我所在的团队并不提倡加班文化，虽然老板自己工作到很晚，但是从来没有在制度或任务安排上要求某某某加班。从个人生活和健康工作角度上，我觉得她还是挺关爱下属的。</p>
<p>但是（此处话锋一转），互联网变化速度太快，资本市场的青睐也是有固定的时间周期，特定项目的开发需要阶段性冲刺。毕竟机会对每个团队来说，都是转瞬即逝，有时候要抢占位置，或者短期内冲刺出成绩，比如说蘑菇街 3 个月上线商品购物平台，又或者淘宝双 11 活动。都需要在固定时间点之前完成必须做到的目标。这时候，战略的调整的同时，通过投入时间的增大也可以降低风险，争取更多的机会。
从团队需求角度来看，这种情况下面的加班不可避免。</p>
<p>还有一种被迫的情况是在系统不稳定和特殊意外事件发生时候，比如线上出现问题，需要有人立刻去解决。
说到这个话题，我就会想起我的同事小云姐（对他甚是怀念），系统遇到问题时候都会第一个冲上去解决问题，不但当场处理掉问题，在事后对问题的 Review 和处理也是推动力极强，真是不可多得的好员工。
一般来说，这类突发被迫的情况不应该是常态，作为后台工程师，需要在平时就做好预案，处理各类突发情况，做好高可用、容错、故障转移、故障降级等预备方案。而不是出了问题大家都忙起来。但突发的情况毕竟不能完全避免。当年世界格局稍微风吹草动，Twitter 就可能搁浅大鲸鱼，这时候，就也可能需要通过加班进行解决。</p>
<p>加班到底该不该，问题的本质，应该是这个加班有没有意义，是否对团队有贡献。
从目标导向的角度来看，没有设定产出或者无贡献的加班。如果老板哪天说，「不管你干什么，都必须留下来加班」，那就是该跟他说拜拜的时候了。</p>
<p>从员工自身的角度来看这个事情，需要意识到作为团队的成员，不应该固守自己的一亩三分田，而应该考虑在团队需要的地方提高贡献度。Facebook 的工程师的高自由度，亚马逊内部称之为 SDE（Someone Do Everythind）的文化，都说明在给予工程师自由平等透明时候，需要工程师自身意识到目标设立和全局思考的重要性。</p>
<p>加班的洋文叫做 work overtime，即正常的 work time 之外的工作时间。那可以思考一下，一个知识工作者，在一个 24h 需要对外服务的行业里，严格定义 work time，到底是对团队有益的，还是对团队不利？</p>
<p>说完这段话，我是有点惭愧的，似乎站在了周扒皮或资本家的角度来看待加班这点事。站在雇员的角度看，虽然短期痛苦一些，但是提高了对团队的贡献度，提高团队竞争力，让组织可以活得更健康，对双方的成长都是有利的。</p>
<p>我反对无意义的加班，加班是为了不加班，加班是为了目标冲刺。</p>
<p>嗯，文章开头中提到的好基友，在朋友圈表示，最近鸡血打的有点满，做产品设计如何开心云云，这种状态就是非常棒的状态。在竞争激烈的互联网行业，如何理性激发团队战斗力，是一件难做但是必须做好的事情。</p>
]]></content:encoded>
    </item>
    <item>
      <title>面试小记</title>
      <link>https://blog.alswl.com/2012/08/interview/</link>
      <pubDate>Thu, 16 Aug 2012 05:46:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/08/interview/</guid>
      <description>&lt;p&gt;最近在上海找工作面试，这两天就要出结果了。早晨5点多就醒过来，睡不着觉，
那就写篇这段时间面试感觉的小记。&lt;/p&gt;
&lt;h2 id=&#34;选择&#34;&gt;选择&lt;/h2&gt;
&lt;p&gt;我在台风「海葵」登录上海那天离开南京，已经约好了几个面试，
这几个团队都是我慎重筛选的。招聘消息来源于各大社区：
&lt;a href=&#34;http://python.cn/&#34;&gt;Python-CN 邮件列表&lt;/a&gt; / &lt;a href=&#34;http://www.v2ex.com/&#34;&gt;V2EX&lt;/a&gt; /
&lt;a href=&#34;http://ruby-china.org/&#34;&gt;Ruby-China&lt;/a&gt; / &lt;a href=&#34;http://www.douban.com/group/&#34;&gt;豆瓣小组&lt;/a&gt;。
来源于社区的招聘信息会更靠谱，在社区投递的很有可能是直接主管，而不是人事 HR。
仅仅在 51job 上投放招聘，而不参到社区来的公司，很可能氛围不是那么有活力。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;我尽量避免被分散注意力，只选择自己认可的公司，几乎是清一色创业团队。
个人的精力是有限的，找到最适合自己的是我的核心原则。使用所有手段：「Google /
社区 / 业内人士咨询 / 微博 / 新闻报道」的方法，
来了解自己想去团队的产品和文化。来对比公司理念和自己理念的异同，
自己是否认可一些团队文化，还有创始人和主管的性格和技术取向是否和自己偏差很大。
有些人会觉得这有偷巧之嫌，但在我看来，这是对双方负责的表现。
贸贸然的选择，会浪费双方的时间和精力。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近在上海找工作面试，这两天就要出结果了。早晨5点多就醒过来，睡不着觉，
那就写篇这段时间面试感觉的小记。</p>
<h2 id="选择">选择</h2>
<p>我在台风「海葵」登录上海那天离开南京，已经约好了几个面试，
这几个团队都是我慎重筛选的。招聘消息来源于各大社区：
<a href="http://python.cn/">Python-CN 邮件列表</a> / <a href="http://www.v2ex.com/">V2EX</a> /
<a href="http://ruby-china.org/">Ruby-China</a> / <a href="http://www.douban.com/group/">豆瓣小组</a>。
来源于社区的招聘信息会更靠谱，在社区投递的很有可能是直接主管，而不是人事 HR。
仅仅在 51job 上投放招聘，而不参到社区来的公司，很可能氛围不是那么有活力。</p>
<!-- more -->
<p>我尽量避免被分散注意力，只选择自己认可的公司，几乎是清一色创业团队。
个人的精力是有限的，找到最适合自己的是我的核心原则。使用所有手段：「Google /
社区 / 业内人士咨询 / 微博 / 新闻报道」的方法，
来了解自己想去团队的产品和文化。来对比公司理念和自己理念的异同，
自己是否认可一些团队文化，还有创始人和主管的性格和技术取向是否和自己偏差很大。
有些人会觉得这有偷巧之嫌，但在我看来，这是对双方负责的表现。
贸贸然的选择，会浪费双方的时间和精力。</p>
<p>一个技巧是，可以把自己觉得拿 Offer 可能性大的公司安排在面试前面，
到时候如果拿一个现场 Offer，对自己的信心是一种极大的鼓励。</p>
<h2 id="准备">准备</h2>
<p>面试需要详细的准备，但同时，最长的准备阶段其实是上一份乃至上上份工作历程。
这个不是通过短短几天能够伪造的。优秀的面试官能通过三言两语来轻松判断出面试者
平时的工作状态。简历上的文字，仅仅是让面试官找一些发问的方向，
最大的简历我们一直在书写，也就是面试者本身。</p>
<p>在日常工作生活中，对周围的事物保持思考的习惯，热忱并负责对待工作职责，
不被当下环境僵化，保持学习和创新的能力，这些才是「简历」中需要准备的东西。</p>
<p>我喜欢和面试官家常式的聊天，可以放松自己，将自己状态更原生的表现出来。
我不喜欢笔试和智力测试，它们作用是减少面试成本，但也增加了交流的距离。</p>
<h2 id="天花板">天花板</h2>
<p>在面试过程中，可能被一些问题问得手足无措，甚至浑身冒冷汗。这其实是好事，
说明自己在面试官的帮助下撞到天花板了。面试官有责任将面试者的能力上限测试出来，
如果没测出来，会无法安排合适的岗位，甚至导致在以后工作中无法发挥面试者的全部能力。</p>
<p>在碰到天花板时候，我的经验是不要急，尽量老实诚恳地回答。有些面试官不喜欢打太极，
很直接了当，有些面试官则会观察在这种情况下面的应急能力。依据不同的人，
用不同的方式做出诚实的回答。</p>
<p>能发现自己的天花板或者短板，对成长也是非常有帮助的。
所以面试过程不但是对个人的考验，也是向前辈学习的机会
（好好使用「你有什么问题要问我么？」这个问题），还是对自身进行总结，
对行业进行思考，寻找自己瓶颈的过程。</p>
<h2 id="机会">机会</h2>
<p>在合适的时间，以合适的状态，加入合适的团队，这是我对机会的理解。
个人只能给机会做「状态」准备，而无法改变这种如同命运丝线般的交叉。</p>
<p>谁都不知道下次有没有更好的机会出现。尝试抓住这种交叉，就是把握住时机了。
然后就是全力以赴，做到最好。</p>
<p>暂时就想这么多啦，没更多干货了，小菜鸟的上海生活即将开始。</p>
]]></content:encoded>
    </item>
    <item>
      <title>想和做</title>
      <link>https://blog.alswl.com/2012/06/do-and-think/</link>
      <pubDate>Fri, 15 Jun 2012 16:02:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/06/do-and-think/</guid>
      <description>&lt;p&gt;一年前，我在草稿箱里面写了这篇文章的开头，那时的我正在为工作而烦闷，却一筹莫展。
最近在读《人人都是产品设计师》，其中提到了「产品经理」和「项目经理」的区别，
又引发了我一些思考，我决定把这篇文章重新写完。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这篇文章准备讨论普通程序员在工作中容易滋生的错误，以及解决的方法。&lt;/p&gt;
&lt;p&gt;传统意义上，大家会提倡「不能光想，还要去做」，即强调行动力的重要性。
而在实际工作中，&lt;strong&gt;大部分人都不缺乏这个行动力，反而缺少对自己工作的思考&lt;/strong&gt;。
比如我为什么要这么做？有没有更优美的办法？能不能通过自动化减少工作强度？
流程是否可以改善？&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>一年前，我在草稿箱里面写了这篇文章的开头，那时的我正在为工作而烦闷，却一筹莫展。
最近在读《人人都是产品设计师》，其中提到了「产品经理」和「项目经理」的区别，
又引发了我一些思考，我决定把这篇文章重新写完。</p>
<hr />
<p>这篇文章准备讨论普通程序员在工作中容易滋生的错误，以及解决的方法。</p>
<p>传统意义上，大家会提倡「不能光想，还要去做」，即强调行动力的重要性。
而在实际工作中，<strong>大部分人都不缺乏这个行动力，反而缺少对自己工作的思考</strong>。
比如我为什么要这么做？有没有更优美的办法？能不能通过自动化减少工作强度？
流程是否可以改善？</p>
<h2 id="我和产品">我和产品</h2>
<p>在聊上面几个问题之前，我先确定一个既有现实：<strong>「每个程序员都曾经是产品经理」</strong>。
诸位是否还记得当年在学校里面学习时候，应该都做过 XX 管理系统吧，
那时候我们也许单枪匹马，也许结对组团去完成「项目」：获取需求，设计系统和
撰写代码，在这些工作中，我们首先担任的就是产品经理一职。</p>
<!-- more -->
<p>我还清晰的记得大二时候我用 SSH 模仿了一个百度贴吧系统，现在看来，也就是个
CRUD 级别的粗糙作品，用 RoR 花几天时间就可以达到那时候两个月的完成度。
虽然粗糙，但那时候我不仅仅是程序员，还负责了整个「产品」的信息架构，
用户体验设计，系统结构设计。
虽然作品很是幼稚，但也充分证明了，我在里面起到的作用远不止程序员。</p>
<p><strong>那种自己亲手实现的第一个系统的那种欣喜，很久没有过了。</strong></p>
<p>PS：我完成这个系统过程中，发现项目进行中的交流不畅，系统的臃肿。
请教老师之后，开始学习《UML 与模式设计》和《重构》，
当时也像模像样地花了一些时间写用例和各种图。</p>
<h2 id="残酷的现实">残酷的现实</h2>
<p>工作后，码农们进入自己的工作岗位，按部就班的工作。
很多人开始丧失自己对产品的归属感，这也许和工作环境有关。</p>
<p>我任职的上一家公司，有一种「代工」模式，上游提出定制任务，下游完成它。
每支任务都是独立的个体，在大产品上进行个性化定制，下游无法看到全貌，
甚至连自己完成的任务，如何在客户那里起作用都无法得知。久而久之，
<strong>必然将自己当作一个代码机器，只知完成任务，而对产品没有归属感</strong>。
尽管团队建设仍在进行，但是仅有的「团队归属感」还不够。</p>
<p>有些公司属于项目型公司，特别是中小型公司，领导靠各种办法接到项目订单，
然后项目组立项开始工作。整个项目过程中也有完善的需求分析、系统设计等必要流程，
程序员也能充分或不充分地参与到整个过程中。但项目式开发会存在一次性的问题，
整个项目生命周期很短，最怕出现「能用就行，反正一次开发就完事了」的想法。
这种想法会在<strong>高层只求有钱赚，中层只求维稳，底层只求工资</strong>时候出现。</p>
<p>最佳的情况是做产品，尤其是互联网产品，产品生命周期长，快速开发，持续改进，
改进的结果能得到直接的反映。还有比这个更振奋人心的么？
代码的价值可以迅速转变成商业价值。</p>
<p>几个特征可以反映出程序员开始被「残酷的现实」所征服，即我所说的<strong>只做不想</strong>：</p>
<ul>
<li>不了解同事在做什么：对团队漠不关心</li>
<li>不看文档就下手：懒，怕麻烦，看现有代码而不追「求最佳实践」</li>
<li>不尝试使用新技术，害怕引入新特性</li>
<li>Ctrl + C / Ctrl +V：只知道复制代码，而不进行重构和优化</li>
<li>字符串拼接：只想尽快完成任务，而不顾代码质量</li>
</ul>
<p>出现这些症状时候，团队管理人就需要警惕了，产品的质量会受到严重影响。
我没有在互联网公司干过，所属的行业一直是传统软件公司，
就我周围的情况来看，这种情况出现的频率很高。</p>
<h2 id="三观中的价值观">三观中的价值观</h2>
<p>既然每个程序员都曾经亲手打造过自己的产品，
那怎么会有人在步入工作岗位后就失去去产品的归属感？
在我看来，这属于三观中的价值观迷失了方向。</p>
<p>我相信每个人都渴望创造价值，渴望被认同。
我很庆幸我是个程序员，这个职位相比传统的技术人员，更像个艺术家。
我们一直在创造艺术品，用自己的键盘。每每想到自己撰写的代码不仅仅只是代码，
还有更多的商业价值，会被千千万万的用户所使用，内心会涌上一种愉悦。</p>
<p>工作并不仅仅为了挣钱，还是一种自我价值实现极佳途径，
这种自我实现之后的愉悦程度会远远高于到手的薪水所带来的。
马斯洛人类需求层次中最高级的两种即「尊重」和「自我实现」，
这一切只要靠手中的键盘就可以达成。</p>
<p>这东西不能多说，多说了就成了向别人灌输「成功学」，还是靠自己慢慢感悟。
但愿大家不要被现实的压力磨平了心中的价值观。
最不济，人总会渴望金钱、渴望成功吧，做好产品，好好工作，就能加薪升职！</p>
<blockquote>
<p><strong>好的产品对我们的帮助会远远大于我们对产品的帮助 - 《人人都是产品经理》</strong></p></blockquote>
<h2 id="怎么做">怎么做</h2>
<p>最简单的方法莫过于寻找一个好环境：好老板、好团队、好公司。
老板有眼力、魄力和财力，团队尊重个人、营造团队氛围，
公司虽然最终还是以盈利为目标，但有自己的公司文化。</p>
<p>这种公司是有的，行业内的 Google / Facebook / Github 都是这种类型的公司。
但这种公司人才筛选极为严格，普通程序员很难进入。</p>
<p>在与之相反极端的情况下，可以尝试以下的方法，帮助自己进行提升，完善产品：</p>
<ul>
<li>在自己控制的小范围内做到最好，每人都有自己能够控制的资源，权限大小不同而已。
就算无法影响别人，也要保证自己的产出质量</li>
<li>尝试影响团队：比如给主管推荐新的技术，发现当前产品问题向相关人员提出，
给团队宣传技术上的最佳实践</li>
<li>阅读：如果团队无法提供相关培训，就需要自己进行额外的阅读，内容可以是书籍
也可以是网上订阅的信息源（产品论坛、个人博客）</li>
<li>参与社区项目：很多社区开源项目的质量很高，可以尝试加入他们，
未必是作为程序员加入，也可以是运营、推广、产品设计等等。</li>
<li>参与本地行业社区活动：线下活动可以开阔自己的视野，结交志同道合的朋友</li>
</ul>
<hr />
<p>人生短短数十载，Live With Passion。</p>
]]></content:encoded>
    </item>
    <item>
      <title>《开源和自由》幻灯片</title>
      <link>https://blog.alswl.com/2012/05/opensource-and-freedom/</link>
      <pubDate>Sun, 27 May 2012 19:35:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2012/05/opensource-and-freedom/</guid>
      <description>&lt;p&gt;周末回学校一趟，和几个老同学、老师聚会，然后给学弟学妹们做了一个分享。&lt;/p&gt;
&lt;p&gt;我的主题是《开源与自由》。
为了让同学们不瞌睡，几乎是当一个故事讲的，没太多技术内容。&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;355&#34; marginheight=&#34;0&#34; marginwidth=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;http://www.slideshare.net/slideshow/embed_code/13092676&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0&#34; width=&#34;425&#34;&gt;&lt;/iframe&gt;</description>
      <content:encoded><![CDATA[<p>周末回学校一趟，和几个老同学、老师聚会，然后给学弟学妹们做了一个分享。</p>
<p>我的主题是《开源与自由》。
为了让同学们不瞌睡，几乎是当一个故事讲的，没太多技术内容。</p>
<iframe allowfullscreen="" frameborder="0" height="355" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/13092676" style="border:1px solid #CCC;border-width:1px 1px 0" width="425"></iframe>
]]></content:encoded>
    </item>
    <item>
      <title>关于我</title>
      <link>https://blog.alswl.com/2011/11/about-me/</link>
      <pubDate>Fri, 11 Nov 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/11/about-me/</guid>
      <description>&lt;p&gt;重要通知：Log4D的域名由 &lt;a href=&#34;http://dddspace.com&#34;&gt;http://dddspace.com&lt;/a&gt; 迁移到
&lt;a href=&#34;http://log4d.com&#34;&gt;http://log4d.com&lt;/a&gt; 。 订阅地址现在改为
&lt;a href=&#34;http://log4d.com/feed&#34;&gt;http://log4d.com/feed&lt;/a&gt; 和
&lt;a href=&#34;http://feeds.feedburner.com/dddspace&#34;&gt;http://feeds.feedburner.com/dddspace&lt;/a&gt;
。（FeedBurner的地址未发生变化）&lt;/p&gt;
&lt;p&gt;博客的关于我还是两年前的，现在更新一下关于我，顺便整理成文。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我是alswl，这个词是我在小学2、3年级左右，来源于我臆想出来的一部小说的主人公。&lt;/p&gt;
&lt;h2 id=&#34;标签&#34;&gt;标签&lt;/h2&gt;
&lt;p&gt;☑Geek ☑Code ☑ArchLinux ☑Vim ☑Python ☑Nanjing ☑1988 ☑log4d.com ☑野生放养男 ☑轻度宅 ☑无背景
☑红烧肉/茄子/小笼包 ☑echo &amp;lsquo;YWxzd2x4QGdtYWlsLmNvbQo=&amp;rsquo; | base64 -d&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>重要通知：Log4D的域名由 <a href="http://dddspace.com">http://dddspace.com</a> 迁移到
<a href="http://log4d.com">http://log4d.com</a> 。 订阅地址现在改为
<a href="http://log4d.com/feed">http://log4d.com/feed</a> 和
<a href="http://feeds.feedburner.com/dddspace">http://feeds.feedburner.com/dddspace</a>
。（FeedBurner的地址未发生变化）</p>
<p>博客的关于我还是两年前的，现在更新一下关于我，顺便整理成文。</p>
<hr />
<p>我是alswl，这个词是我在小学2、3年级左右，来源于我臆想出来的一部小说的主人公。</p>
<h2 id="标签">标签</h2>
<p>☑Geek ☑Code ☑ArchLinux ☑Vim ☑Python ☑Nanjing ☑1988 ☑log4d.com ☑野生放养男 ☑轻度宅 ☑无背景
☑红烧肉/茄子/小笼包 ☑echo &lsquo;YWxzd2x4QGdtYWlsLmNvbQo=&rsquo; | base64 -d</p>
<h2 id="工作技术">工作技术</h2>
<ul>
<li>Python程序员</li>
<li>会一些与Web相关的技能，HTML / CSS / JavaScript， 在缺前端工程师时候也能勉强顶上</li>
<li>熟悉Python /Java / .net</li>
</ul>
<h2 id="个人偏好">个人偏好</h2>
<ul>
<li>ArchLinux &gt; Ubuntu &gt; Windows</li>
<li>Python &gt; Java &gt; .net</li>
<li>Vim / Vimperator</li>
<li>asciidoc</li>
<li>git</li>
<li>Chrome &gt; Firefox &gt; IE</li>
<li>双拼使用者</li>
</ul>
<h2 id="兴趣">兴趣</h2>
<ul>
<li>阅读 计算机书籍、通俗小说、玄幻小说、科幻小说</li>
<li>商业娱乐电影</li>
<li>Top100流行乐 / 古典乐</li>
<li>艺术设计 平面设计</li>
<li>烹饪</li>
<li>闻香</li>
</ul>
<h2 id="博客记录">博客记录</h2>
<ul>
<li>2005年5月30日在MSN Space创建博客</li>
<li>Baidu Hi空间混迹多年</li>
<li>使用Yo2博客空间</li>
<li>2009年05月14日创建dddspace.cn</li>
<li>2009年12月24日出国到dddspace.com</li>
<li>2011年11月02日使用VPS，更换域名log4d.com</li>
</ul>
<h2 id="找到我">找到我</h2>
<p>Email: echo &lsquo;YWxzd2x4QGdtYWlsLmNvbQo=&rsquo; | base64 -d</p>
<p><a href="https://plus.google.com/113699049322300593030/posts?hl=zh_cn">Google</a>
<a href="http://twitter.com/alswl/">Twitter</a> <a href="http://www.zhihu.com/people/alswl">知乎</a>
<a href="http://renren.com/profile.do?id=222354387">人人网</a>
<a href="http://www.douban.com/people/alswl/">豆瓣</a> <a href="http://weibo.com/alswlx">新浪微博</a>
<a href="http://cn.last.fm/user/alswl">LastFM</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>ERP叛逃者</title>
      <link>https://blog.alswl.com/2011/04/erp-defectors/</link>
      <pubDate>Mon, 25 Apr 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/04/erp-defectors/</guid>
      <description>&lt;p&gt;大四实习时候，跑去驻厂开发，当时主管跟我说&amp;quot;我们做的是企业信息化软件&amp;quot;。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/
电子商务平台等ERP软件附属产品）的开发和二次开发。&lt;/p&gt;
&lt;p&gt;在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到
瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>大四实习时候，跑去驻厂开发，当时主管跟我说&quot;我们做的是企业信息化软件&quot;。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/
电子商务平台等ERP软件附属产品）的开发和二次开发。</p>
<p>在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到
瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。</p>
<p>我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50
年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我
想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。</p>
<p>可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。</p>
<p>我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这
个想法和主管进行交流，主管也认同我们提供的是service而不是soft。</p>
<p>我简单比较了互联网企业和传统行业软件企业的差异。</p>
<h3 id="目标人群不一样">目标人群不一样</h3>
<p>行业软件：企业用户</p>
<p>互联网产品：个人用户更多，也有企业用户</p>
<p>由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE
6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。</p>
<p>另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很
容易在不同产品之间进行更换。</p>
<h3 id="盈利点不一样">盈利点不一样</h3>
<p>互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。</p>
<p>行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。</p>
<p>盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。</p>
<h3 id="核心竞争力">核心竞争力</h3>
<p>行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难
培养（行业/领域专家）。</p>
<p>互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务）
，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。</p>
<p>互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重
，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家
都知道怎么做，没什么核心竞争力，只是拼模拟速度了）</p>
<p>我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。</p>
]]></content:encoded>
    </item>
    <item>
      <title>没有银弹</title>
      <link>https://blog.alswl.com/2011/02/no-silver-bullet/</link>
      <pubDate>Fri, 25 Feb 2011 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2011/02/no-silver-bullet/</guid>
      <description>&lt;p&gt;最近为工作中和学习中遇到一些问题而发愁，夜不能寐，做梦都在寻求方法。&lt;/p&gt;
&lt;p&gt;问题简单的来说，就是开发过程中遇到很多本觉得不该遇到的问题，比如数据关系在数据表的设计，比如说自动化测试无法接入，ORM接入设计，开发流程如何优化，Web标
准性问题等等。我罗列了大约30条会导致开发效率降低的因素，也一直在思考怎么解决他们，如果让我来设计他们，会用什么方式来提高效率，让系统更优美。&lt;/p&gt;
&lt;p&gt;读完《人月神话》和《走出软件作坊》之后，似乎有了一些明悟。今天wiki到&lt;a href=&#34;http://zh.wikipedia.org/zh-cn/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9&#34;&gt;没有银弹&lt;/a&gt;这个话题，我意识到自己太过于追求一步到位了。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近为工作中和学习中遇到一些问题而发愁，夜不能寐，做梦都在寻求方法。</p>
<p>问题简单的来说，就是开发过程中遇到很多本觉得不该遇到的问题，比如数据关系在数据表的设计，比如说自动化测试无法接入，ORM接入设计，开发流程如何优化，Web标
准性问题等等。我罗列了大约30条会导致开发效率降低的因素，也一直在思考怎么解决他们，如果让我来设计他们，会用什么方式来提高效率，让系统更优美。</p>
<p>读完《人月神话》和《走出软件作坊》之后，似乎有了一些明悟。今天wiki到<a href="http://zh.wikipedia.org/zh-cn/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9">没有银弹</a>这个话题，我意识到自己太过于追求一步到位了。</p>
<blockquote>
<p>Brooks 认为，附加性的困难会随着工具的改善而逐渐淡化，反而是本质性的困难最难以解决，因为大部分的活动是发生在人们的脑海里，缺乏有效的辅助工具。依造
Brooks 的说法有下列几项：[2]</p></blockquote>
<p>复杂性（complexity）：软件要解决的问题，通常牵扯到计算步骤，这是一种人为、抽象化的智能活动，多半是复杂的。</p>
<p>不可见性（invisibility）：尚未完成的软件是看不见的，即使利用图示说明，也常无法充分呈现其结构，使得人们在沟通上面临极大的困难。</p>
<p>协同性（conformity）：在大型软件环境中，各子系统的接口必须协同一致。由于时间和环境的演变，要维持这样的一致性通常十分困难。</p>
<p>变异性（changeability）：软件所应用的环境常是由人群、法规、硬件设备、应用领域等，各因素所汇集而成，而这些因素皆会快速变化。</p>
<p>没有银弹这句话大学时候就听过了，作为伪完美主义者，我一直觉得有完美的解决办法。一度认为OO就是解决之道。现在回首来看，的确是没有银弹。</p>
<p>改变不了大环境，就改变小环境，改变不了小环境，就等待改变的机会~</p>
]]></content:encoded>
    </item>
    <item>
      <title>一路走来，师恩难忘</title>
      <link>https://blog.alswl.com/2010/08/teachers/</link>
      <pubDate>Wed, 04 Aug 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/08/teachers/</guid>
      <description>&lt;p&gt;毕业答辩的最后一天，我以AzaAjaxChat聊天系统完成答辩。在走下答辩桌之后，得知自己成绩是3个优秀，我长嘘一口气，这个成绩终于给自己的大学生活划上了最
后一个比较完美的句号。总算没有对不起自己喜爱的计算机专业。&lt;/p&gt;
&lt;p&gt;晚上是和灵动工作室的同学们、系主任杨老师和工作室负责人孙老师一起聚会的，回来的路上，我一直在想，哪些人在我前进的路上给了我帮助呢？&lt;/p&gt;
&lt;p&gt;晃了晃有喝晕的头，想起那些在我计算机成长路上给了我巨大帮助和前进方向的老师们，回忆起和他们在一起的点点滴滴。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>毕业答辩的最后一天，我以AzaAjaxChat聊天系统完成答辩。在走下答辩桌之后，得知自己成绩是3个优秀，我长嘘一口气，这个成绩终于给自己的大学生活划上了最
后一个比较完美的句号。总算没有对不起自己喜爱的计算机专业。</p>
<p>晚上是和灵动工作室的同学们、系主任杨老师和工作室负责人孙老师一起聚会的，回来的路上，我一直在想，哪些人在我前进的路上给了我帮助呢？</p>
<p>晃了晃有喝晕的头，想起那些在我计算机成长路上给了我巨大帮助和前进方向的老师们，回忆起和他们在一起的点点滴滴。</p>
<h3 id="高中班主任-老张">高中班主任-老张</h3>
<p>这是列出来第一个也是唯一一个不是做IT的老师。老张是我高中班主任，典型的陕西人，他老婆也是我英语老师，我一直很难想象身材魁梧的老张怎么骗到娇小的小郭。高中时
候学校管理特别严格，教室里有一台教学用电脑，我仗着自己电脑技术还可以，整天偷偷玩电脑。老张为了不让我玩电脑，甚至放下话说谁逮到我玩电脑，就奖励举报人5块钱。
不过到高考之后也没有人举报我。</p>
<p>虽然老张对我进行军事管制，不过还是让我参加了江苏省奥林匹克信息比赛，幸运的是，我还拿到一个不错的名次，其实里面很多猫腻，不过培养了我对计算机的浓厚兴趣。（过
几天等我写计算机生涯时候再详细透露）</p>
<p>今年过年时候，我大年初一就到老张家里拜年，老张也带着他刚2个月的老婆孩子大年初二到我家拜年，老张还提到我当时晚上偷偷去网吧魔兽公测，偷偷用班级电脑下载BT的
事情，我就汗颜了，原来都知道啊～</p>
<p>祝福老张的孩子健康成长哈，到时候还要喊我哥的～</p>
<h3 id="高中计算机老师-徐老师">高中计算机老师-徐老师</h3>
<p>徐老师是高中的计算机老师，上文提到的江苏省奥林匹克信息比赛就是他带着我去参加的。我是不知道其他城市的高中信息化教育普及是什么程度，反正我那时候高中就是教教怎
么用Windows和Word，简单几句VB，而且有一半的计算机课会被数理化等科目强制霸占。私底下认为，这种教育方法泯灭了多少人才啊～</p>
<p>当时徐老师不光要教学，还负责学校的机器维护，班里电脑出了我解决不了的问题，到了他那里肯定可以解决，当时看到他一手拿着一个硬盘，一手做着Ghost真是崇拜不已
。现在想起来，高中我那会的计算机水平纯粹也就是把玩把玩各种新奇的软件，看《电脑报》看得一头是劲。</p>
<p>高考填完志愿之后，偶遇徐老师，问我填的什么专业，我如实回答，他叹了一口气。。。唔～～～我至今不知道这口气什么意思～</p>
<h3 id="编程启蒙-杨老师">编程启蒙-杨老师</h3>
<p>杨老师是我们的系主任，上课时候妙语连珠，带过我们3门课，都留下了非常深刻的印象。</p>
<p>大一入学之后第一门课是计算机基础，就是杨老师带的，当时我上课特别活泼，又喜欢显摆，挺出风头，其实那课也没什么技术含量。真正的编程入门时大一下学期的C++，也
是杨老师教的，印象中对C++的指针非常头疼。真是这门C++帮我打开了走进编程的大门，向我展现了精彩的计算机世界。</p>
<p>现在想来，同学们以后的方向就在那里开始分叉，我很庆幸杨老师带来精彩的入门，没让我在大一上学期的真三生活中继续堕落下去。这门课从某种程度上拯救了我的大学生活，
甚至是整个人生。</p>
<p>大三时的系统安全也是杨老师带的，那时候我刚和他完成了一个基于OpenSSL的分级Web服务器，我书写了全部的代码，这门课最高分通过～当时上课上到SSL安全链
路那一章，杨老师都让我上台讲了一会，嘿嘿～</p>
<p>当时<a href="http://log4d.com/tag/openssl">很多OpenSSL的资料汇总</a>，以前在BaiduHi的文章，后来移植过来的。</p>
<h3 id="编程思想-孙老师">编程/思想-孙老师</h3>
<p>孙老师也是大学老师，带过离散数学、软件工程和网络编程。离散数学就不提了，我数学上了高中之后就其差无比，勉强才及格。软件工程就给我深深的上了一课。孙老师备课极
为认真而且涉猎范围又广，虽然软件工程课我有时候也昏昏欲睡，但是却帮我换了一种姿态看软件，从PR上升到SD。之所以昏昏欲睡，是因为我当时沉迷于敏捷开发，对面向
过程的软件工程不屑一顾。</p>
<p>孙老师的网络编程课是在大三时候，这是一门让我能相当得意的课。那年暑假我参加ACM暑期培训，但是到后期我退出ACM转为帮孙老师准备网络编程的课件Demo，以至
于上课时候的那些协议和Socket编程相当熟悉。最让我骄傲的是在我下一届学弟们上这门课时候，孙老师感慨&quot;以前还有alswl听得懂，你们这一届谁听的懂&quot;。</p>
<p>孙老师最大的贡献是拓展了我的视野，强化了我网络编程能力，并完成了一定的自我价值实现。</p>
<p><a href="http://log4d.com/tag/netprogram">一些零碎的网络编程资料</a>，当时还在BaiduHi，资料挺乱而且不完全。</p>
<h3 id="倪经理">倪经理</h3>
<p>我去年年末到今年（2010）在广东待了半年时间，做一个企业信息化的项目。当时完全是作坊式工作，加上属于出差性质，管理有点混乱。技术上面也不能提供发展空间，我
做Java开发，却没有Java项目经理，很多东西甚至要我自己摸索。繁重的工作一度导致我对程序开发有抵触心理。那段时间，我也写了[保持IT工作兴趣](http
://log4d.com/2010/04/keep-it-work-interest)这样的文章。</p>
<p>到3月份的时候，倪经理加入了我们，给我带来一个崭新的Java感官。具体细节[最近在学的技术](<a href="http://log4d.com/2010/04">http://log4d.com/2010/04</a>
/recent-study-technologys)从可以看出来。</p>
<p>虽然和倪经理共事的时间不长，但是他在那段极端的日子里面给我很大的帮助，感谢他无私的付出。</p>
<h3 id="last">Last</h3>
<p>其实还有更多的老师和朋友给了我帮助，比如刘昆老师，初中时候那位计算机老师，现在的同事等等，这里不能一一道明。</p>
<p>这篇文章一直拖了一个多月，今天看完XDash的[我的互联网生涯（上）](<a href="http://www.fanbing.net/my-internet-">http://www.fanbing.net/my-internet-</a>
career-1.html)才从BooguNote中拉出完成，真的很对不起诸位老师～</p>
]]></content:encoded>
    </item>
    <item>
      <title>保持IT工作兴趣</title>
      <link>https://blog.alswl.com/2010/04/keep-it-work-interest/</link>
      <pubDate>Sat, 24 Apr 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/04/keep-it-work-interest/</guid>
      <description>&lt;p&gt;




&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.alswl.com/images/upload_dropbox/201004/keyboard_help.jpg&#34; alt=&#34;image&#34;  /&gt;


&lt;/p&gt;
&lt;p&gt;参加工作4个月以来，我完成了由学校人到社会人的转变，成为了一名光荣的码农。但是在长时间的工作和加班中，带来一些烦躁的情绪，特别是在项目比较紧张、客户又催的急
，很容易对电脑产生&amp;quot;反胃&amp;quot;的感觉，完全没了在学校那时候一个晚上通宵编程都依然兴奋的感觉。&lt;/p&gt;
&lt;p&gt;又或者与某某朋友一比较，人家轻轻松松赚很多钱，而自己拿着可怜的几个工资，就容易心理不平衡，成天抱怨，搞不好成为马加爵v2了。&lt;/p&gt;
&lt;p&gt;前段时间我也遇到了上文描述的状态，整天没有精神，看到Bug就头疼。我努力尝试着脱离这种状态，进行了一系列的尝试，现在就和大家分享一下。下面是我稍微总结的一些
方法。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201004/keyboard_help.jpg" alt="image"  />


</p>
<p>参加工作4个月以来，我完成了由学校人到社会人的转变，成为了一名光荣的码农。但是在长时间的工作和加班中，带来一些烦躁的情绪，特别是在项目比较紧张、客户又催的急
，很容易对电脑产生&quot;反胃&quot;的感觉，完全没了在学校那时候一个晚上通宵编程都依然兴奋的感觉。</p>
<p>又或者与某某朋友一比较，人家轻轻松松赚很多钱，而自己拿着可怜的几个工资，就容易心理不平衡，成天抱怨，搞不好成为马加爵v2了。</p>
<p>前段时间我也遇到了上文描述的状态，整天没有精神，看到Bug就头疼。我努力尝试着脱离这种状态，进行了一系列的尝试，现在就和大家分享一下。下面是我稍微总结的一些
方法。</p>
<p>ps:我还是一名未毕业的学生，受个人阅历和学识限制，只是一些心得分享，未必适合每个人。从业几年的大牛们就可以直接忽略了。</p>
<h2 id="一-寻找朋友">一、 寻找朋友</h2>
<p>关注同龄的佼佼者，找到志同道合的人，无论是行业的大牛，还是刚出道的小朋友，都有很多值得自己学习的地方。通过交流，一方面让自己明白差距，从而产生动力，另一方面
能够关注别人关注的内容，扩大自己的知识面和眼界，补充一些其他领域的知识。</p>
<p>建立博客的童鞋，大抵都是愿意输出价值并分享的人。</p>
<p>下面我分享一下我Google Reader 里面标记为同龄人的个人博客。</p>
<h3 id="1-刘未鹏--mind-hacks">1. [刘未鹏 | Mind Hacks</h3>
<p>](<a href="http://mindhacks.cn/">http://mindhacks.cn/</a>)</p>
<p>这是绝对要放到第一个的，虽然我昨天才知道他的博客。</p>
<p>他原来的博客是 <a href="http://blog.csdn.net/pongba">刘未鹏|C++的罗浮宫 - CSDN博客</a>，在CSDN众多大牛中排名17，拥有共
1747591次访问，可想而知有多大的影响力和个人魅力。</p>
<p>他建立的Google Group:
<a href="https://groups.google.com/group/pongba">TopLanguage</a>，一个很有活力的讨论社区。</p>
<p>他研究的方向虽然是C++和一些算法，但是博客里还有很多思想的方法，甚至在一定程度上把哲学和算法联系到一起，这让我惊为天人。</p>
<h3 id="2-xdash">2. XDash</h3>
<p>一位设计专业的Geek，<a href="http://www.syncoo.com">同步控</a>的创建者。我一直搞不懂高艺术的怎么和计算机扯上关系了，后来才发现他高中时候就
搞编程了。</p>
<h3 id="3-lightory">3. Lightory</h3>
<p>南大小百合成员，前段设计强人，BooguNote就是从他那里获知的。</p>
<h3 id="4-圆木菠萝罐">4. <a href="http://blog.boluotou.com/">圆木菠萝罐</a></h3>
<p>经常对软件工程进行一些系统的思考，每次阅读完他的文章，都受益匪浅。</p>
<h3 id="5-showfom">5. <a href="http://zou.lu/">Showfom&rsquo;s Blog</a></h3>
<p>一个很真实很有趣的IT潮人。</p>
<h3 id="6-leeiio-chaos-made">6. <a href="http://leeiio.me/">Leeiio™ Chaos Made.</a></h3>
<p>前端设计师，他的主题我非常欣赏。</p>
<h3 id="7-幸福收藏夹">7. <a href="http://www.happinesz.cn/">幸福收藏夹</a></h3>
<p>sofish，应该很多人知道吧，不用多介绍了，前段设计师，貌似就职于腾讯。</p>
<h3 id="8-邪罗刹的菠萝阁">8. <a href="http://www.evlos.org/">邪罗刹的菠萝阁</a></h3>
<p>后生可畏，PHP达人，我之前的一个正则表达式的零宽断言还是他帮我解决的。</p>
<h2 id="二-发掘新奇的软件和工具">二、 发掘新奇的软件和工具</h2>
<p>发掘新奇的软件和工具，特别是一些新奇的工具，提供工作效率，保持对工作的兴趣，享受创造价值的乐趣。这些工具不一定需要是开发中需要用到的工具，也可以是一些其他工
具，比如说理财，又或是GTD工具，对他们进行适当的研究和创造，给自己创造价值，并分享传播价值，得到别人的认可。</p>
<p>下面是最近我折腾的一些工具，可以参考一下哈，估计码农们应该都略有涉及 ^_^</p>
<h3 id="1-boogunote">1. BooguNote</h3>
<p>BooguNote是一款收集和整理信息的新概念工具。</p>
<p>[BooguStudio - Collecting, Organizing and Sharing</p>
<p>](<a href="http://boogu.me/">http://boogu.me/</a>)</p>
<p>[桌面记录神器-BooguNote - Log4D</p>
<p>](<a href="http://log4d.com/2010/04/desktop-recording-tool-boogunote">http://log4d.com/2010/04/desktop-recording-tool-boogunote</a>)</p>
<h3 id="3-mockups">3. Mockups</h3>
<p>Mockups是一款UI设计工具，提供了 9 大类共 50 多个控件，涵盖了几乎所有常用的 UI 控件。不管是桌面软件、手机软件还是 Web
站点，都能搞定。平时没事干，涂鸦也可以，画风非常不错哦～</p>
<p>[Balsamiq Mockups For Desktop | Balsamiq</p>
<p>](<a href="http://www.balsamiq.com/products/mockups/desktop">http://www.balsamiq.com/products/mockups/desktop</a>)</p>
<p>[界面设计利器-Balsamiq Mockups - Log4D</p>
<p>](<a href="http://log4d.com/2010/04/ui-design-tool-balsamiq-mockups">http://log4d.com/2010/04/ui-design-tool-balsamiq-mockups</a>)</p>
<h3 id="4-aptana">4. Aptana</h3>
<p>Web开发人员一定非常喜欢的工具，和Eclipse双剑合璧，提高好多工作效率。非常喜欢他的格式化～</p>
<p>[Web开发利器-Aptana</p>
<p>](<a href="http://log4d.com/2010/04/web-development-tool-aptana">http://log4d.com/2010/04/web-development-tool-aptana</a>)</p>
<h3 id="5-autohotkey">5. AutoHotKey</h3>
<p>大名鼎鼎的AHK，一直听说，一直没去折腾，最近抽了点时间用了一下，奇爽无比啊，很多自定义键都把我Google 输入法中的lua 代码编写的功能都替换了。</p>
<h3 id="last">Last.</h3>
<p>最后，给大家分享一个非常不错的站点，提供大量的免费绿色的犀利软件。</p>
<p><a href="http://www.appinn.com">小众软件</a>[-分享免费 小巧 实用 有趣 绿色的软件</p>
<p>](<a href="http://www.appinn.com">http://www.appinn.com</a>)</p>
<h2 id="三-发掘一些新的技术">三、 发掘一些新的技术</h2>
<p>给自己建立一个WorkSpace，做一些和行业相关而却和和领域无关的事情。对我而言，比如熟悉一下UI设计、自动化测试工具、ORM系统、Python、Java
EE一些新技术。</p>
<p>所谓和领域无关，就是说别把自己的目光限定在那一亩三分地上，做企业信息化软件的可以去看看Web前端设计，做Web
前端设计的可以去看看数据库优化，做数据库优化的可以看看一些脚本语言。总之，扩大自己的知识面，全方位把握行业脉搏。</p>
<p>参看我的 <a href="http://log4d.com/2010/04/recent-study-technologys">最近在学的技术</a></p>
<h2 id="四-跟进新技术发展">四、 跟进新技术发展</h2>
<p>技术这东西是永不止歇的发展，跟进当前主流的技术非常重要。</p>
<p>个人需要把握一个度，既能跟进技术又能不至于花太多的精力去大范围深入研究，做到知识面博而专精。</p>
<p>推荐几个我常去的几个地方。</p>
<h3 id="javaeye">[JavaEye</h3>
<p>](<a href="http://www.javaeye.com/">http://www.javaeye.com/</a>)</p>
<p>虽然名字是JavaEye，但是关注的内容早已超出了Java的范畴，而且相对而言，里面的文章内容质量还是挺高的（CSDN的.aspx效率太差了，而且闲杂人员很
多）</p>
<h3 id="cnbeta">[cnBeta</h3>
<p>](<a href="http://www.cnbeta.com/">http://www.cnbeta.com/</a>)</p>
<p>cnBeta是国内业界第一资讯网络，有很多新鲜的科技和业界技术产品趋势走向报告。</p>
<p>另外，里面有相当多的犀利评论***</p>
<h2 id="五-建立自己的根据地输出自己的价值">五、 建立自己的根据地，输出自己的价值</h2>
<p>总的来说，我认为这种职业焦虑症更多的是因为精神上获取无法满足自己。所以解决之道就是创造信心，获得认可（让我想起了鸣人～）。</p>
<p>在这个Web 2.0的时代，博客是一个相当不错的展示自己价值的地方，用Google Reader订阅他人的价值观，输出自己的价值，在分享的同时也加强了交流，
提升了自己的网络品牌价值。按期更新博客，也能对自己所学的东西进行归纳总结，起到一个监督作用。</p>
<h2 id="last-last">Last Last</h2>
<p>最后的最后说明一点，其实有时候不是因为我们主观上不够努力，而是某些客观原因达不到我们的期望值，比如项目因素，公司因素，生活环境因素，那就不在本文的讨论范围之
内了，这需要和决策制定者进行更多的沟通和协调。</p>
<p>希望大家过得开心，提高自己的生活质量，不让工作把自己的兴趣磨灭，而是要保持兴趣从而快乐的工作。</p>
<p>后天回南京咯，然后可以回学校了，哇咔咔～兴奋嘞～</p>
]]></content:encoded>
    </item>
    <item>
      <title>程序员责任很重</title>
      <link>https://blog.alswl.com/2010/02/programmer-a-heavy-responsibility/</link>
      <pubDate>Wed, 03 Feb 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/02/programmer-a-heavy-responsibility/</guid>
      <description>&lt;p&gt;昨天项目第一天上线，早晨我7：30就到了会议室，和同事们奔赴生产线。&lt;/p&gt;
&lt;p&gt;虽然之前已经在车间参观过，可一圈跑下来，还是发现车间好大，跑的腰酸背疼，汗流浃背。&lt;/p&gt;
&lt;p&gt;新系统上线，不可避免的出现一些意料之外的问题，生产线是不能停的，所以会出现成品堆压的问题，工人很是恼火，我还要耐心的做工作。&lt;/p&gt;
&lt;p&gt;看到生产线上繁忙的工人，我突然意识到自己的工作是多么伟大，好的产品将减轻他们的工作量，提高他们的效率，劣质的产品会给他们带来劳动量的增加和经济的损失。我感觉
自己肩膀的责任沉甸甸的。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>昨天项目第一天上线，早晨我7：30就到了会议室，和同事们奔赴生产线。</p>
<p>虽然之前已经在车间参观过，可一圈跑下来，还是发现车间好大，跑的腰酸背疼，汗流浃背。</p>
<p>新系统上线，不可避免的出现一些意料之外的问题，生产线是不能停的，所以会出现成品堆压的问题，工人很是恼火，我还要耐心的做工作。</p>
<p>看到生产线上繁忙的工人，我突然意识到自己的工作是多么伟大，好的产品将减轻他们的工作量，提高他们的效率，劣质的产品会给他们带来劳动量的增加和经济的损失。我感觉
自己肩膀的责任沉甸甸的。</p>
<p>现在现在最怕我手机唱&quot;从来就没有什么救世主&quot;的音乐，就意味着生产线出问题了……</p>
<p>恩～顺便推荐一下我的铃声，是《我是MT》的主题曲&quot;地狱咆哮的挽歌&quot;和&quot;我叫MT&quot;片头曲，很激昂的音乐哦～</p>
]]></content:encoded>
    </item>
    <item>
      <title>由学Python所想到的</title>
      <link>https://blog.alswl.com/2009/09/python-comes-to-mind-by-learning/</link>
      <pubDate>Fri, 25 Sep 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/09/python-comes-to-mind-by-learning/</guid>
      <description>&lt;p&gt;开始学Python大概有1个多月了，深深的被这门简单的语言所吸引着，简单却强大，是一门非常精彩的语言。特别是它的设计理念：「在允许性能牺牲的范围内，提高开发
效率，简化开发方法」。（呃…这个原文我找不到了，我自己总结了一下）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;../../static/images/upload_dropbox/200909/python-logo.gif&#34;&gt;




&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.alswl.com/images/upload_dropbox/200909/python-logo.gif&#34; alt=&#34;image&#34;  /&gt;


&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;细细数来，我现在掌握的语言应该有C++, Java, C#, Asp, Asp.Net,
Python，我所说的掌握并不是具体到多细节，而是自己大概知道怎么去用，如果给我一本Manual，也能大概也一个小型的软件。&lt;/p&gt;
&lt;p&gt;我以前经常和学弟学妹们说「语言不是问题」，当时面对的是学弟们对Java,
.NET两大体系的选择。如果现在再让我对语言进行选择，我就会慎重的多了。在公司一个半月的实习后，我越来越觉得「语法不是问题，语言跨越是个问题」。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>开始学Python大概有1个多月了，深深的被这门简单的语言所吸引着，简单却强大，是一门非常精彩的语言。特别是它的设计理念：「在允许性能牺牲的范围内，提高开发
效率，简化开发方法」。（呃…这个原文我找不到了，我自己总结了一下）</p>
<p><a href="../../static/images/upload_dropbox/200909/python-logo.gif">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200909/python-logo.gif" alt="image"  />


</a></p>
<p>细细数来，我现在掌握的语言应该有C++, Java, C#, Asp, Asp.Net,
Python，我所说的掌握并不是具体到多细节，而是自己大概知道怎么去用，如果给我一本Manual，也能大概也一个小型的软件。</p>
<p>我以前经常和学弟学妹们说「语言不是问题」，当时面对的是学弟们对Java,
.NET两大体系的选择。如果现在再让我对语言进行选择，我就会慎重的多了。在公司一个半月的实习后，我越来越觉得「语法不是问题，语言跨越是个问题」。</p>
<p>之所以说语法不是问题，是因为我觉得如果掌握了C/C++之后，其他的主流语言的语法都应该能够在短时期内学会，毕竟思想是相同的，只需要手头有一本Manual。特
别是Java/.NET，双方语法上面相似度，有时候看某一片代码段就分辨不出来。</p>
<p>我觉得语言的跨度在开发系统的架构上面，比如JavaEE和Asp.NET开发模式上面有很多东西完全不同，Python作为一门解释性语言跟C/C++相比也有很多
的区别（我很喜欢Python的动态执行，调试太爽了，完全没有内存报错啥的），这时候就显示出语言的不同。</p>
<p>我不建议计算机专业新手学习Python，如果没有一点扎实的语言功底，会被这门强大的语言带坏的。还是用C来做ACM的题目能够长进一些。</p>
<p>唔，一家之言，贻笑大方了```</p>
]]></content:encoded>
    </item>
    <item>
      <title>某大H1N1中的某个小门</title>
      <link>https://blog.alswl.com/2009/09/a-large-h1n1-in-a-door/</link>
      <pubDate>Thu, 24 Sep 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/09/a-large-h1n1-in-a-door/</guid>
      <description>&lt;p&gt;这个小门呢，是我们平时买饭时候必经之地，大约有30-40家左右的摊头卖盖浇饭、煮面、快餐、炒饭这些杂七杂八的。这次为了迎接校庆，学校特别在意H1N1的事情，
这个月开始封校，所谓封校，就是进入大门需要体检温度，小门关闭。&lt;/p&gt;
&lt;p&gt;这小门平时晚上10点关门，我们也翻的挺勤快的，现在完全封锁，翻都不让，拿树枝堵上了小门上的缝隙。&lt;/p&gt;
&lt;p&gt;虽然这个措施很影响我们生活，但是为了安全，我们还是能理解的。&lt;/p&gt;
&lt;p&gt;下面上几张图片。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;../../static/images/upload_dropbox/200909/20090924002.jpg&#34;&gt;




&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.alswl.com/images/upload_dropbox/200909/20090924002.jpg&#34; alt=&#34;20090924(002)&#34;  /&gt;


&lt;/a&gt;
隐约能看到外面很多移动饭店，现在卖饭的只能派专员在门口蹲点服务。机灵的已经把「菜单」挂到小门上了。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>这个小门呢，是我们平时买饭时候必经之地，大约有30-40家左右的摊头卖盖浇饭、煮面、快餐、炒饭这些杂七杂八的。这次为了迎接校庆，学校特别在意H1N1的事情，
这个月开始封校，所谓封校，就是进入大门需要体检温度，小门关闭。</p>
<p>这小门平时晚上10点关门，我们也翻的挺勤快的，现在完全封锁，翻都不让，拿树枝堵上了小门上的缝隙。</p>
<p>虽然这个措施很影响我们生活，但是为了安全，我们还是能理解的。</p>
<p>下面上几张图片。</p>
<p><a href="../../static/images/upload_dropbox/200909/20090924002.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200909/20090924002.jpg" alt="20090924(002)"  />


</a>
隐约能看到外面很多移动饭店，现在卖饭的只能派专员在门口蹲点服务。机灵的已经把「菜单」挂到小门上了。</p>
<p><a href="../../static/images/upload_dropbox/200909/20090924.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200909/20090924.jpg" alt="20090924"  />


</a>
现在刚下课，还不是最高峰，很多人看了一眼，感觉人太多就犹豫了。</p>
<p><a href="../../static/images/upload_dropbox/200909/20090924001.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200909/20090924001.jpg" alt="20090924(001)"  />


</a> 横幅是：台湾小吃：XX肉扣夹膜</p>
<p><a href="../../static/images/upload_dropbox/200909/20090924003.jpg">




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200909/20090924003.jpg" alt="20090924(003)"  />


</a> 门口的告示，门卫在预防同学翻墙。</p>
]]></content:encoded>
    </item>
    <item>
      <title>方向</title>
      <link>https://blog.alswl.com/2009/08/direction/</link>
      <pubDate>Mon, 31 Aug 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/08/direction/</guid>
      <description>&lt;p&gt;系主任在QQ上面的一句话：「没有方向的船，速度再快也抵达不了目的地」。我现在就是这么一条没有方向的船。&lt;/p&gt;
&lt;p&gt;一直以来，我都能为自己规划一个阶段性的目标：大二时候在学生会做工作，花了很多时间在网络编程和MFC上面；大三上学期开始Java，做了一个小项目，赚了人生的第
一桶金；下学期做一个SSL VPN的项目，自己挣扎了一个月，不过学到很多东西，之后又开始用Strut2+Hibernate完成了一个贴吧系统，虽然简陋，但是
受益匪浅；大四的这个暑假虽然北京CSDN之行泡汤了，但在实习的公司开始做.NET方向项目，熟悉了公司的流程，学会了.NET一些开发步骤。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>系主任在QQ上面的一句话：「没有方向的船，速度再快也抵达不了目的地」。我现在就是这么一条没有方向的船。</p>
<p>一直以来，我都能为自己规划一个阶段性的目标：大二时候在学生会做工作，花了很多时间在网络编程和MFC上面；大三上学期开始Java，做了一个小项目，赚了人生的第
一桶金；下学期做一个SSL VPN的项目，自己挣扎了一个月，不过学到很多东西，之后又开始用Strut2+Hibernate完成了一个贴吧系统，虽然简陋，但是
受益匪浅；大四的这个暑假虽然北京CSDN之行泡汤了，但在实习的公司开始做.NET方向项目，熟悉了公司的流程，学会了.NET一些开发步骤。</p>
<p>现在开学了，出于种种理由，我应该不会在实习的这家公司继续做下去。这样一来，我拥有了将近2个月的空余时间，直到11月份去找工作。如何有效的分配这两个月，成为我
的难题。</p>
<p>现在对技术似乎缺乏一种激情，再没有大二时候写程序能一边说服自己早点睡吧，一边在床上写到凌晨4点那种对代码的渴望。我开始把自己往设计上面放，阅读一些这类相关书
籍，但是我又深切得体会到自己的经验和学识完全不能提供一个完整的设计方案。这让我为自己感到沮丧。</p>
<p>我的精力分配的也过于分散，网络编程、MFC、JaveEE、.NET都略有涉及，但是都不是很精通。我以前的观点是在大学期间，应该涉猎广泛，但是现在越发感觉到自
己精力不足。之前答应和一个老师做一个机房控制系统，基于MFC的，涉及的东西很多，我刚跟老师解释了一下，这个项目交给别人：我在B/S上面已经花了很多时间，不能
再切换到C/S上花大段时间了。</p>
<p>想的我头疼，我考虑了一下，先去花一个月时间考驾照吧，这东西工作之后就完全没时间了（真的，我实习时候就感觉精力已经不足了，周末想睡觉还来不及，哪来时间考驾照）
。</p>
<p>ps:最近开学，事情比较多，更新不勤快。</p>
<p>谢谢关注~~</p>
]]></content:encoded>
    </item>
    <item>
      <title>我的简历</title>
      <link>https://blog.alswl.com/2009/07/my-cv/</link>
      <pubDate>Sat, 25 Jul 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/07/my-cv/</guid>
      <description>&lt;p&gt;明天准备去找单位实习，今天急急忙忙把简历赶出来了，各位大大看了帮忙拍拍&lt;/p&gt;
&lt;p&gt;没有任何水分，内行也能看出来，虽然有两张纸，但是技术含量真的不高~~~&lt;/p&gt;
&lt;p&gt;明天早晨联系老师，问问推荐信的事，然后再联系公司…&lt;/p&gt;
&lt;p&gt;第一次唉，有点兴奋，还有点害怕~&lt;/p&gt;
&lt;p&gt;北京反正去不了了，最后一个暑假了，fighting!&lt;/p&gt;
&lt;p&gt;XXX个人简历&lt;/p&gt;
&lt;p&gt;基本信息&lt;/p&gt;
&lt;p&gt;姓名：&lt;/p&gt;
&lt;p&gt;XXX&lt;/p&gt;
&lt;p&gt;性别：&lt;/p&gt;
&lt;p&gt;男&lt;/p&gt;
&lt;p&gt;Email:&lt;/p&gt;
&lt;p&gt;XXX&lt;/p&gt;
&lt;p&gt;手机：&lt;/p&gt;
&lt;p&gt;XXX&lt;/p&gt;
&lt;p&gt;个人网站：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;../../../../../&#34;&gt;http://log4d.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工作经历：&lt;/p&gt;
&lt;p&gt;无&lt;/p&gt;
&lt;p&gt;出生日期：&lt;/p&gt;
&lt;p&gt;XXX&lt;/p&gt;
&lt;p&gt;学历：&lt;/p&gt;
&lt;p&gt;本科&lt;/p&gt;
&lt;p&gt;求职意向：&lt;/p&gt;
&lt;p&gt;程序员&lt;/p&gt;
&lt;p&gt;居住地：&lt;/p&gt;
&lt;p&gt;XXX&lt;/p&gt;
&lt;p&gt;自我评价&lt;/p&gt;
&lt;p&gt;本人对编程充满激情，自学能力、接受能力较强，能在短时间内接受新的知识，补充原有知识体系框架。有较强分析问题、解决问题能力。坚信「技术改变世界，创新驱动中国」
。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>明天准备去找单位实习，今天急急忙忙把简历赶出来了，各位大大看了帮忙拍拍</p>
<p>没有任何水分，内行也能看出来，虽然有两张纸，但是技术含量真的不高~~~</p>
<p>明天早晨联系老师，问问推荐信的事，然后再联系公司…</p>
<p>第一次唉，有点兴奋，还有点害怕~</p>
<p>北京反正去不了了，最后一个暑假了，fighting!</p>
<p>XXX个人简历</p>
<p>基本信息</p>
<p>姓名：</p>
<p>XXX</p>
<p>性别：</p>
<p>男</p>
<p>Email:</p>
<p>XXX</p>
<p>手机：</p>
<p>XXX</p>
<p>个人网站：</p>
<p><a href="../../../../../">http://log4d.com</a></p>
<p>工作经历：</p>
<p>无</p>
<p>出生日期：</p>
<p>XXX</p>
<p>学历：</p>
<p>本科</p>
<p>求职意向：</p>
<p>程序员</p>
<p>居住地：</p>
<p>XXX</p>
<p>自我评价</p>
<p>本人对编程充满激情，自学能力、接受能力较强，能在短时间内接受新的知识，补充原有知识体系框架。有较强分析问题、解决问题能力。坚信「技术改变世界，创新驱动中国」
。</p>
<p>IT技能与语言</p>
<ol>
<li>Java良好</li>
<li>C#良好</li>
<li>C/C++良好</li>
<li>网络编程良好，熟悉OpenSSL/WinPcap/Socket</li>
<li>开源框架Struts2/Hibernate良好</li>
<li>Html/CSS良好</li>
<li>JavaScript/AJAX/jQuery良好</li>
<li>MySQL/SQLServer一般</li>
<li>敏捷开发/UML一般</li>
<li>项目管理/设计模式一般</li>
<li>软件测试一般</li>
<li>英语一般</li>
</ol>
<p>项目经验</p>
<p>贴吧系统（2009年4月至今）</p>
<p>l        基于Struts2/Hibernate的开放式系统</p>
<p>l        采用敏捷过程开发，有相应的文档制品</p>
<p>l        本人独立完成0.1版本开发，之后采用结对编程方式进行重构，本人负责系统结构设计、UML设计和页面设计，不参与Java编码</p>
<p>l        使用了OGNL, Ajax, jQuery, SVN相关技术</p>
<p>l        使用MVC模型</p>
<p>l        项目托管于Google Code，准备持续开发</p>
<p>l
相关链接：<a href="http://code.google.com/p/postbar/">http://code.google.com/p/postbar/</a></p>
<p>基于OpenSSL的按需分级加密SSL VPN网关（2009年3月-2009年4月）</p>
<p>l        参与老师课题研究，负责模型制作与测试</p>
<p>l        使用第三方开源库OpenSSL，实现一个小型支持HTTPS的Web服务器</p>
<p>l        实现了Http服务、安全握手、文件传输、身份认证、内容认证模块。</p>
<p>l        相关链接：[http://log4d.com/category/i_programer/ssl](../../../../../categ
ory/i_programer/ssl)</p>
<p>XXX职业培训中心网站（2008年12月-2009年1月）</p>
<p>l        基于ASP的小型企业网站</p>
<p>l        自学了Html, CSS相关知识，本人专业方向没有ASP课程和Html相关课程</p>
<p>l        负责界面层和部分逻辑层代码</p>
<p>l        相关链接：XXX</p>
<p>XXX计算机系网站（2009年5月）</p>
<p>l        对原有系统进行重构和美化</p>
<p>l        短时间内完成并交付使用</p>
<p>l        相关链接：XXX</p>
<p>网络编程小作品（2008年8月-2008年12月）</p>
<p>l        白防火墙（只允许某些ip通过的防火墙，整合于机房考试系统）</p>
<p>l        Tcp局域网端口扫描系统</p>
<p>l        ARP欺骗程序</p>
<p>l        基于Java的校内刷人气程序</p>
<p>l        相关链接：[http://log4d.com/category/i_programer/net](../../../../../categ
ory/i_programer/net)</p>
<p>基于C#的聊天室系统（2008年6月-2008年7月）</p>
<p>l        采用C#进行开发，实现了基于socket的C/S模式的聊天室系统，实现用户管理、私聊、群聊、自定义图片、抖动窗口功能。</p>
<p>l        采用数据服务器/聊天服务器两层服务器设计</p>
<p>l        独自完成设计、编码，自学socket相关知识，当时还未开《网络程序设计》这门课程</p>
<p>l        阅读了大量英文资料，学习使用第三方库文件操作RTF格式文档</p>
<p>教育背景</p>
<p>2006年9月至今  XXX计算机系</p>
<p>主修课程：软件设计环境（C#） 97，计算机系统安全 97，数据库原理 90， 网络程序设计 92，网络工程 94， 大型数据库应用 91，
网络攻防技术与工具 98</p>
<p>软件课程设计均为优秀</p>
<p>获奖情况</p>
<p>2009年6月软件设计师认证</p>
<p>2008-2009年度优秀团员</p>
<p>2007-2008年度优秀学生会（社团）干部（担任学生会宣传部部长）</p>
<p>2007-2008年度优秀学生会干部二等奖（担任班级学习委员）</p>
<p>2007-2008年度学习进步奖（三等奖学金）</p>
<p>2008年第五届XX数学建模联赛成功参赛奖</p>
<p>2008年XXX团委学生会院标设计大赛三等奖</p>
<p>2008年5XXX大学ACM编程大赛三等奖</p>
<p>2007年12月XXX大学第二届数学建模竞赛一等奖</p>
<p>2007年12月XXX大学科技文化节装机大赛三等奖</p>
]]></content:encoded>
    </item>
    <item>
      <title>CCAV报道了开心网</title>
      <link>https://blog.alswl.com/2009/07/reported-net-ccav-happy/</link>
      <pubDate>Sat, 18 Jul 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/07/reported-net-ccav-happy/</guid>
      <description>&lt;p&gt;今天家里做饭时候突然听到身后电视机里隐约传来「开心网」这几个词，心里纳闷，我一般电视机只放在新闻频道，回头一看，果然是在放关于开心网的新闻。&lt;/p&gt;
&lt;p&gt;报道持续了将近半个小时，这是我第一次在央视新闻频道看到这么长时间的报道IT企业。「央视记者」花了大篇幅报道开心网怎么使用，功能如何，有什么优势，甚至介绍开心
农场和好友买卖，采访了用户，问了关于各种小应用的使用感受。&lt;/p&gt;
&lt;p&gt;包括北大新闻学院的教授都纷纷出境，介绍社交性网站的优势，并介绍了开心网的盈利模式，一些嵌入式广告。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>今天家里做饭时候突然听到身后电视机里隐约传来「开心网」这几个词，心里纳闷，我一般电视机只放在新闻频道，回头一看，果然是在放关于开心网的新闻。</p>
<p>报道持续了将近半个小时，这是我第一次在央视新闻频道看到这么长时间的报道IT企业。「央视记者」花了大篇幅报道开心网怎么使用，功能如何，有什么优势，甚至介绍开心
农场和好友买卖，采访了用户，问了关于各种小应用的使用感受。</p>
<p>包括北大新闻学院的教授都纷纷出境，介绍社交性网站的优势，并介绍了开心网的盈利模式，一些嵌入式广告。</p>
<p>我个人觉有介绍这些时髦的东西也挺好，只是老拿开心网说事，丝毫没有提及其他的SNS网站（提及了一句FaceBook），未免显得有些猫腻。另一方面，我也由衷的佩
服开心网的公关能力。</p>
<p>我并不是在给校内说话，事实上，千橡的很多做法我很反感。只是觉得既然是新闻，还是综合介绍一下国内的实际情况再发言为好。</p>
<p>ps:看到开心网开发用的是EditPlus……呵呵，开心网应该是php,校内是.do结尾，貌似Struts写的……</p>
]]></content:encoded>
    </item>
    <item>
      <title>成功的定义</title>
      <link>https://blog.alswl.com/2009/07/the-definition-of-success/</link>
      <pubDate>Tue, 07 Jul 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/07/the-definition-of-success/</guid>
      <description>&lt;p&gt;最近在看《我的青春谁做主》，其中有一集是老太太和青楚讲成功的定义，我听了挺有感触，摘录如下：&lt;/p&gt;
&lt;p&gt;现在社会上给人灌输的成功观念太单一，你们年轻人追求的无外乎就是赚钱、成名，给自己贴上成功的标签。千篇一律，千人一面。这是典型的唯结果论。&lt;/p&gt;
&lt;p&gt;其实不是所有得到的结果都成功，也不是没有结果就失败。从我自己的体验来说，成功藏在过程里，将来回头看，乐趣肯定不在最后撞线的那一下。结果就像是买东西的赠品，有
了算白赚，没有也没什么&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近在看《我的青春谁做主》，其中有一集是老太太和青楚讲成功的定义，我听了挺有感触，摘录如下：</p>
<p>现在社会上给人灌输的成功观念太单一，你们年轻人追求的无外乎就是赚钱、成名，给自己贴上成功的标签。千篇一律，千人一面。这是典型的唯结果论。</p>
<p>其实不是所有得到的结果都成功，也不是没有结果就失败。从我自己的体验来说，成功藏在过程里，将来回头看，乐趣肯定不在最后撞线的那一下。结果就像是买东西的赠品，有
了算白赚，没有也没什么</p>
<p>我觉得这几句话很淳朴，但的确很有道理，和大家分享了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>成功软件技术人员的性格特质【转】</title>
      <link>https://blog.alswl.com/2009/07/the-success-of-software-technical-personnel-to-the-personality-trait/</link>
      <pubDate>Sat, 04 Jul 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/07/the-success-of-software-technical-personnel-to-the-personality-trait/</guid>
      <description>&lt;p&gt;原文作者：施文祥&lt;/p&gt;
&lt;p&gt;节选自：《程序员》&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自学精神&lt;/li&gt;
&lt;li&gt;吃苦耐劳&lt;/li&gt;
&lt;li&gt;良好的人际关系&lt;/li&gt;
&lt;li&gt;面对挫折的能力&lt;/li&gt;
&lt;li&gt;接受不同意见&lt;/li&gt;
&lt;li&gt;认真仔细&lt;/li&gt;
&lt;li&gt;荣誉感&lt;/li&gt;
&lt;li&gt;思而后行&lt;/li&gt;
&lt;/ol&gt;</description>
      <content:encoded><![CDATA[<p>原文作者：施文祥</p>
<p>节选自：《程序员》</p>
<ol>
<li>自学精神</li>
<li>吃苦耐劳</li>
<li>良好的人际关系</li>
<li>面对挫折的能力</li>
<li>接受不同意见</li>
<li>认真仔细</li>
<li>荣誉感</li>
<li>思而后行</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>不谈政治</title>
      <link>https://blog.alswl.com/2009/06/not-political/</link>
      <pubDate>Wed, 24 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/not-political/</guid>
      <description>&lt;p&gt;刚知道湖北那块发生的事情，就不在这儿说了，以免被河蟹，如果各位有兴趣可以去百度谷歌搜索。&lt;/p&gt;
&lt;p&gt;突然想，如果把Baidu的过滤词汇名单取出来，是不是应该是一件很神奇的事情。&lt;/p&gt;
&lt;p&gt;本博客只关注于技术和互联网发展，不谈政治&lt;/p&gt;
&lt;p&gt;我们都是沉默的羔羊&lt;/p&gt;
&lt;p&gt;顺便推荐一个网站，是哈佛大学一个教授发起的研究，关注全球范围内某一些地区不能登陆某些网站的现象www.herdict.org&amp;lt;&lt;a href=&#34;http://www.herdict.org/web/&#34;&gt;猛击这儿打开&lt;/a&gt;&amp;gt;。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>刚知道湖北那块发生的事情，就不在这儿说了，以免被河蟹，如果各位有兴趣可以去百度谷歌搜索。</p>
<p>突然想，如果把Baidu的过滤词汇名单取出来，是不是应该是一件很神奇的事情。</p>
<p>本博客只关注于技术和互联网发展，不谈政治</p>
<p>我们都是沉默的羔羊</p>
<p>顺便推荐一个网站，是哈佛大学一个教授发起的研究，关注全球范围内某一些地区不能登陆某些网站的现象www.herdict.org&lt;<a href="http://www.herdict.org/web/">猛击这儿打开</a>&gt;。</p>
]]></content:encoded>
    </item>
    <item>
      <title>某大网卡事件</title>
      <link>https://blog.alswl.com/2009/06/case-of-a-university-card/</link>
      <pubDate>Sun, 14 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/case-of-a-university-card/</guid>
      <description>&lt;p&gt;我最近不太去学校BBS，直到大校那边同学给我打电话，问我老校区还有网卡不，我才意识到问题的严重性。&lt;/p&gt;
&lt;p&gt;回宿舍一问，原来我们这儿也断网许久，网卡停售，全民Dota了。。。&lt;/p&gt;
&lt;p&gt;再后来，学生在线禁止谈论这个话题，只有几个老帖子有一些内幕流出，说是徐州电信想在学校推广天翼学子套餐，学校领导原来能从上网卡中获得回扣，而天翼套餐的计费方式
不明确，双方没有谈妥，学校不让电信进行天翼推广，电信也就拒绝售卡了。&lt;/p&gt;
&lt;p&gt;相关文章：&lt;a href=&#34;http://online.cumt.edu.cn/discuz/viewthread.php?tid=188053&#34;&gt;网卡哪儿去了？？？？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[此次电信与矿大关系崩裂，停止销售网卡之后幕](&lt;a href=&#34;http://online.cumt.edu.cn/space/space.php?uid=81570&amp;amp;do&#34;&gt;http://online.cumt.edu.cn/space/space.php?uid=81570&amp;amp;do&lt;/a&gt;
=thread&amp;amp;id=288)&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>我最近不太去学校BBS，直到大校那边同学给我打电话，问我老校区还有网卡不，我才意识到问题的严重性。</p>
<p>回宿舍一问，原来我们这儿也断网许久，网卡停售，全民Dota了。。。</p>
<p>再后来，学生在线禁止谈论这个话题，只有几个老帖子有一些内幕流出，说是徐州电信想在学校推广天翼学子套餐，学校领导原来能从上网卡中获得回扣，而天翼套餐的计费方式
不明确，双方没有谈妥，学校不让电信进行天翼推广，电信也就拒绝售卡了。</p>
<p>相关文章：<a href="http://online.cumt.edu.cn/discuz/viewthread.php?tid=188053">网卡哪儿去了？？？？</a></p>
<p>[此次电信与矿大关系崩裂，停止销售网卡之后幕](<a href="http://online.cumt.edu.cn/space/space.php?uid=81570&amp;do">http://online.cumt.edu.cn/space/space.php?uid=81570&amp;do</a>
=thread&amp;id=288)</p>
<p>[【天涯社区】中国电信推广天翼3G的手段是不是已经卑鄙无耻到了令人发指的地步？](<a href="http://www.tianya.cn/publicforum/cont">http://www.tianya.cn/publicforum/cont</a>
ent/funinfo/1/1492890.shtml)</p>
<p>这事大条了，你一个互联网接入商停止售卡，断了我的网，这儿大四的还在做毕业设计最后一段，其他各年级也需要课程设计，再不济打个网游，聊个QQ也得上网啊，这已经严
重影响到学生的正常生活了。</p>
<p>我是不知道这电信接入学校宿舍有没有相关协议，只是想来电信敢这么做，也肯定有了法律上的充足准备，我们小小屁民也只能在宿舍单机接入，期盼早日接入互联网，不要把宿
舍整成一个杨教授的戒网所。</p>
<p>话说这几天大四的可以用学生证去电信总营业厅办一张临时上网卡，其他年级就各安天命了。。。</p>
<p>再话说中国移动在宿舍每层楼安装了无线接入器组件无线局域网，貌似因为一些细节和学校没有谈妥，一直没有供电，设备处于停用状态。</p>
<p>最近悲剧事情很多啊。。。。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
