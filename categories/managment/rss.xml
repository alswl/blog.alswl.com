<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Managment on Log4D</title>
    <link>https://blog.alswl.com/categories/managment/</link>
    <description>Recent content in Managment on Log4D</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 15 Jul 2022 23:40:00 +0800</lastBuildDate>
    <atom:link href="https://blog.alswl.com/categories/managment/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>跟 Google 学开公司 - 谈谈方向、文化和人</title>
      <link>https://blog.alswl.com/2022/07/company/</link>
      <pubDate>Fri, 15 Jul 2022 23:40:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2022/07/company/</guid>
      <description>我居然也有胆来想这个命题了。 困惑 - 换个视角看待公司 大部分年轻人都在一个商业组织（即公司）中工作。 我们似乎对这个商业组织的运作已经很熟悉： 接触公司并进行面试和岗位匹配，在特定的岗位里面工作，过程也许开心或沮丧，通过组织的种种管理手段（KPI / OKR）来完成上级分发的任务。 这个过程中，我们往往遇到不少困惑，有些朋友还经历过职场 PUA（Pick-Up Artist）；有些朋友可能感觉自己已经干的足够出色却</description>
      <content:encoded><![CDATA[<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/202207/google-900x500.png" alt="image via pixabay"  />


</p>
<blockquote>
<p>我居然也有胆来想这个命题了。</p>
</blockquote>
<h2 id="困惑---换个视角看待公司">困惑 - 换个视角看待公司</h2>
<p>大部分年轻人都在一个商业组织（即公司）中工作。
我们似乎对这个商业组织的运作已经很熟悉：
接触公司并进行面试和岗位匹配，在特定的岗位里面工作，过程也许开心或沮丧，通过组织的种种管理手段（KPI / OKR）来完成上级分发的任务。</p>
<p>这个过程中，我们往往遇到不少困惑，有些朋友还经历过职场 PUA（Pick-Up Artist）；有些朋友可能感觉自己已经干的足够出色却无法得到晋升；有些朋友感慨合作的上下游太不专业了；总之，<strong>我们对公司不满是常态，而对公司满意则是反常</strong>。</p>
<!-- more -->
<p>其实很多时候，雇员的感受是公司运行的规律的投影。
我们制定 OKR 时候想去创造，应该通过什么方法论去开拓工作？这是公司战略决定的。
公司是怎么定义优秀人选的，我有没有机会获得晋升？这是公司用人态度决定的。
996 这么辛苦，我们该怎么去保持生活工作平衡？这是公司价值观和文化决定的。</p>
<p>Google 在这个方面似乎做得不错，从 2022 福布斯雇主（<a href="https://www.forbes.com/lists/best-large-employers/">America&rsquo;s Best Large Employers 2022</a>）排名来看，Google 排在 34 名，互联网领域则是第 4 位（前三名分别是 Microsoft / Ultimate Kronos Group / LinkedIn）。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/202207/best-large-employers.png" alt="best-large-employers"  />


</p>
<p>Google 做对了哪些事情？让我们换一个视角，从雇员视角切换到雇主，甚至再宽阔一些，以投资者视角来观察公司。
来解答一些关键问题：公司是如何决定前进方向的？公司每年的目标是应该怎么制定出来？公司通过什么方式筛选和激励人才？</p>
<p><a href="https://book.douban.com/subject/26582822/">重新定义公司</a> 这本书告诉我们很多 Google 的回答，
国际大公司的方案未必能拿来立即用上，但这些答案可以给我们很多启发。</p>
<p><strong>Google 说：战略、人才、文化、沟通，这些是定义公司的关键。</strong></p>
<h2 id="公司往哪里走---战略和方向决定了收入">公司往哪里走 - 战略和方向决定了收入</h2>
<p>公司发展的真正原动力是什么？我思考答案的朴素的：科技在发展，世界在变得更复杂，人们希望自己生活更安全、幸福、高效。这时候就需要一些机构，尤其是利润驱动的商业公司来提供更好的服务来满足大家。从这个角度出发，公司只要是与人为善，帮助用户解决确实存在的问题，就创造了相应的价值。</p>
<p>那具体怎么创造，往哪个方向发展？追寻利润是唯一的驱动方向么？显然不是的，否则很多公司就要去围绕人性的弱点（黄赌毒）去开展业务了（你别说，这种公司还真的挺多）。</p>
<p>伟大的公司之所以伟大，是他们仅仅将利润看作一个副产品。真正指引是 <strong>基于对新兴技术的洞见而形成的判断</strong>。这是一种那什么是「洞见」呢？
技术洞见是创新方式应用科技或设计，<strong>达到成本或者特性的 10X 变化，甚至是代际变化</strong>。</p>
<p>制定的战略要足够有挑战。
Google 说 [这个战略是否足够吸引人，就好比 NASA 登月计划一样，让渴望的人聚拢在一起。而不是单纯一份体面的工作。」</p>
<p>如果想做一鸣惊人的事情确实比较困难，也不符合科技发展规律。
有时我们的创新仅仅是「<strong>组合式创新</strong>」，将领域 A 的知识复用到领域 B，
就形成了创新。计算机为什么持续受到热捧，因为这个作为基础领域可以跟大量其他领域进行相结合。</p>
<p>战略实施中，是否需要时刻盯着竞争对手？
这样做反而会落了下乘，
最关键的还是自己要找到自己的专业领域，一以贯之持续投入。
成为这个领域的专家。很多时候技术洞见，本质还是来自于人对领域的了解，
如果不是领域专家，那就不是洞见而是空想。</p>
<p>阿里集团和蚂蚁的愿景是什么？「让天下没有难做的生意」/「为世界带来微小而美好的改变」。这个愿景确实非常伟大，
也很有现实价值意义。
大公司提出的愿景也非常宏伟。宏伟也带来了不真实感，
字节「建设“全球创作与交流平台”」搭建平台，创造空间，提供场合，或者说大白话提供一个流量交换地。
Google 的<a href="https://about.google/intl/zh-CN/">愿景</a>是「整合全球信息，供大众使用，使人人受益」，其实也是抽象的概念。
这些公司的愿景都是足够伟大，上限足够高，可以在这个方向上持之以恒挖掘代际感的产品/方案出来。</p>
<h2 id="文化---公司决策的投射">文化 - 公司决策的投射</h2>
<p>每个公司都有自己的文化，文化是设计出来的么？是也不是。
顶层设计时候都会有一些期望的文化状态（一般都是正确的废话）。
但真实的文化是民间形成的，<strong>这是在一次次冲突和决策下培育出来的</strong>。
比如阿里味、腾讯瑞雪、字节范儿（不过字节范儿据说官方自己定义了）。</p>
<p>Google 的文化，大家最熟悉的可能就是「不作恶」了。除此之外还有几个可以总结出来的点：</p>
<ul>
<li>驱逐恶棍、保护明星：恶棍是指品格的恶，明星可能有怪癖但是有高产出</li>
<li>快乐工作强扭不来</li>
<li>跟我来：TL 需要热情，要有舍我其谁的气概</li>
<li>不作恶</li>
</ul>
<p>除了这些标语式的文化，Google 一些公司形态也很值得了解：</p>
<ul>
<li>按照业务 BU 划分团队还是按照职能划分？
<ul>
<li>按照职能，不要考虑什么部门成本，要考虑将人的潜力发挥，专人专用，促进专业能力深化</li>
</ul>
</li>
<li>要不要 WLB
<ul>
<li>鼓励贡献，喜欢那些想做事情，从而不区分 WL 的人，反对「过劳」</li>
</ul>
</li>
<li>要不要限制团队规模？
<ul>
<li>不刻意要求，小团队、扁平化都可以</li>
</ul>
</li>
</ul>
<p>文化不是定义出来的，阿里味的文化其实也是民间长出来的，官方创新地将多个场景的「土话」提炼成阿里价值观。
阿里味：（我的总结）<strong>敢批评，勇于接受批评；内部产品创新；使命必达；组织结构动态调整</strong>。
外部所谓恶臭的味道：互联网黑话、面向 KPI、PPT、谈概念、PUA，
其实是某些媒体和个人的妖魔化。他们对立了雇主和雇员的关系，而弱化了创新、竞争的初心。但也不可否认，清水时间久了会变脏，文化不沉淀就会被稀释，</p>
<p>为什么产生这么大的认识差异。我理解：扩张太快，人才质量良莠不齐；外部社会形势变化，雇员压力被放大。
尤其是第二点，价值观这一件内核严肃的事情，从内心出发的感想行动，变成由外力驱动的事情。
为了和在这个价值观下群体行动一致，倒逼成为假阿里味。</p>
<p>是价值观错了？太形而上么？我对此持乐观态度，是有这么一群人，向善而行，也希望将公司做大做强。
越伟大的愿景，对成员的要求越高，也越难达到所有成员高度认可价值观状态。
在薪酬差异不大、业务技术创新性要求没那么高时候，要允许一部分人混口饭吃。</p>
<p>文化，尤其是民间自发形成的文化，没有对错，什么土壤结什么果。
这个公司做大做强，他的文化就是好文化了。一个成功的文化移植另外环境，未必一样能获得成功。
说白了，企业内部的文化，就是职场最佳实践。</p>
<h2 id="关于人才和招聘---花最多的钱找最强的人">关于人才和招聘 - 花最多的钱找最强的人</h2>
<p>公司要找什么什么样的人？老黄牛要不要，野狗要不要？是要高性价比人才还是要奢侈品？</p>
<p>Google 使用的招聘策略很特别，即<strong>用溢价来招聘最一流的成员</strong>。
他们甚至因为担心 B 级人才会引入 BCD 级别人才，而拒绝 B 级人才。</p>
<p>这一切的前提是 <strong>核心业务运行稳健并足够赚钱</strong>，才能让公司用溢价来留住优秀的人员。
另外，人才密度高也是一把双刃剑，过高的人才密度可能导致内卷。
想留住人才还是要靠优秀的现金流、提供足够有挑战的任务，良好的合作环境，以及良好的社会环境。</p>
<p>如果不满足这几个点，贸然学习 Google 的人才策略，就是东施效颦，会适得其反。
人才筛选说到底，还是投入产出比问题。有钱了喜欢买奢侈品，没钱平替也很好用。</p>
<p>Google 鼓励所有成员参与招聘，并且在绩效/影响力评估会考虑这个点。
同时设立了招聘委员会来对人才评级，避免出现不专业出现。
令人惊讶的是，所有人员的最终入职确认，都要 CEO 过目。
想象一下阿里的人都要逍遥子审批，这是多么巨量的工作。（我对 Google 这个讲法深表怀疑，可能呈现的数据是结构化之后的数据）。</p>
<h2 id="合作和决策---点头和摇头">合作和决策 - 点头和摇头</h2>
<p>合作中遇到最大的问题，就是点头和摇头。<strong>点头不附和，摇头有理由</strong>。
Google 鼓励成员用数据做决策，并且鼓励过程中的摇头，以及最终的分歧消灭。
话都是对的，但在真正执行中，如何能够创造一个敢说真话，讲信息含量高的话环境？</p>
<p><strong>Google 也没讲出来</strong>。</p>
<p>我只能默认由于愿景广阔、人才质量高，人才溢价高，导致大家的合作是更为理性，更<strong>不考虑本位而是考虑真正的问题</strong>。
更愿意从公司的价值思考。但有人的地方就有江湖，人性也总是自私的。
理性决策最终还是要靠制度才能进行下去，也不存在最性价比的方案。</p>
<h2 id="小结">小结</h2>
<p>尽管想一下子弄清楚这么多问题是困难和不现实的。Google 的一系列做法给我们很多启示：
<strong>做到世界第一流公司要志向远大，雇佣最一流的人才，并且给他们提供孵化创新的土壤</strong>。</p>
<p>合上书闭上眼深思，回想自己身边，不敢评价全局，只能说身边的技术团队，现在在一个历史时间：
债务多，演变不彻底。技术洞见不少，但是落地困难。还有没有机会提出「登月计划」，引领下一代的科技变革呢？</p>
<hr />
<h2 id="附录">附录</h2>
<p>老样子，我整理了大纲和一些有意思的摘录，供反复研读。</p>
<p>框架和纲要：</p>
<ul>
<li>文化，相信自己的口号
<ul>
<li>拥挤出成绩：创建促进交流共同的环境</li>
<li>一起吃住，一起工作</li>
<li>别听父母的：杂乱是种美德：办公室逼格是无所谓的，办公室要促进共同交流</li>
<li>别听「河马」的话：别迷信权威资深人事</li>
<li>7 法则：扁平化</li>
<li>切莫自扫门前雪：按职能划分团队，而不是按 BU 划分</li>
<li>重组工作的关键：快刀斩乱麻</li>
<li>贝索斯的「两个披萨」原则：Google 不设限，大小团队都接受</li>
<li>组织要以最优影响力的人为中心：不看岗位和经验，看表现和热情</li>
<li>驱逐恶棍、保护明星：恶棍是指品格的恶，明星可能有怪癖但是有高产出</li>
<li>「过劳」有道：谷歌不宣扬 WLB，赞同合理的的节奏进行</li>
<li>营造说「好」的企业文化：促进互相帮助的文化</li>
<li>快乐工作强扭不来</li>
<li>别光着身子就行</li>
<li>跟我来：TL 需要热情，要有舍我其谁的气概</li>
<li>不作恶</li>
</ul>
</li>
<li>战略，你的计划是错误的：信任团队而不是信任完美的商业计划
<ul>
<li>信赖技术洞见，而非市场调查：技术洞见是创新方式应用科技或设计，达到成本或者特性的代际变化</li>
<li>组合创新时代时代的到来</li>
<li>别去找快马：（去找车）</li>
<li>为成长而优化</li>
<li>科斯与企业的性质：做平台</li>
<li>专注的力量：做专业做好</li>
<li>开放为王</li>
<li>选择封闭系统的前提：如果封闭利益更高的话</li>
<li>莫被竞争对手牵着鼻子走</li>
</ul>
</li>
<li>人才：招聘是你最重要的工作：摒弃层级制度，同事评估，委员会定夺
<ul>
<li>羊群效应：优秀的人吸引优秀的人，B 级人才还会招 B、C、D 级</li>
<li>有激情的人不把激情挂嘴边：观其行</li>
<li>雇佣学习型动物</li>
<li>机场测试：待上 6h，看看是否味道符合</li>
<li>客观评价人才：以事实作为标准</li>
<li>加大光圈甄才：扩大人才入选范围</li>
<li>全员出动招募人才：所有员工的职责，并鼓励参与招聘，并参考到评估业绩和晋升能力中</li>
<li>面试是最重要的技能：</li>
<li>将面试时间设为 30 分钟</li>
<li>自由主张</li>
<li>设立招聘委员会：所有人入职都要审核</li>
<li>宁缺毋滥</li>
<li>给优秀人才超出常规的回报</li>
<li>换出巧克力，留下葡萄干</li>
<li>爱他，就让他走</li>
<li>宁可漏聘，也不误聘</li>
</ul>
</li>
<li>决策：共识的真正含义
<ul>
<li>用数据做决策</li>
<li>谨防摇头娃娃的附和：其实是点头娃娃</li>
<li>该响铃时就响铃：拿捏时机，乐于行动</li>
<li>少做决策：减少分歧，放出权利</li>
<li>每天开会：高频率沟通，尤其是重大决策</li>
<li>你们两边说的都对：柔性沟通</li>
<li>每场会议都需要有主人</li>
<li>马背原则：短暂高效地审视当下所处的环境</li>
<li>把 80% 的时间花在 80% 的收入上：集中注意力到核心业务</li>
<li>接班人计划</li>
</ul>
</li>
<li>沟通：最牛的路由器，管理者要成为团队沟通最强的路由器。
<ul>
<li>心态开放：信息透明、OKR 开放</li>
<li>掌握细节：摘要能力</li>
<li>为讲真话营造安全的环境</li>
<li>制造话题：为沟通提供一些桥梁</li>
<li>祷文不会因重复而失色：反复重复</li>
<li>以旅行报告作为会议的开场：先招人总结一下旅行的见闻和学习到的内容，作为一个快乐会议的开场</li>
<li>自我评价</li>
<li>电邮常识：迅速回复、精简、经常清理、为搜索做准备</li>
<li>备一本情境手册：模板，一对一、董事会、合作伙伴、媒体</li>
<li>靠关系而非层级</li>
</ul>
</li>
<li>创新：缔造原始的混沌
<ul>
<li>创新是什么：新颖、出人意料、非常实用</li>
<li>了解环境：首先，你得对这个领域有了解，最好是有洞见</li>
<li>首席执行官必须兼任首席创新官</li>
<li>聚焦用户</li>
<li>往大处想：Think Big</li>
<li>制定（近乎）遥不可及的目标：OKR</li>
<li>70 / 20 / 10 原则：核心产品，新兴产品，全新产品</li>
<li>20% 时间制：给个人创新提供空间</li>
<li>创意无处不在</li>
<li>交付，迭代</li>
<li>败得漂亮：Fast Fail</li>
<li>与钱无关：创新不需要利益驱动</li>
</ul>
</li>
</ul>
<p>Google 招聘之行为准则：</p>
<blockquote>
<ol>
<li>雇用那些比你更聪明、更有见识的人。</li>
<li>不要雇用那些不能让你有所收获也不能对你构成挑战的人。</li>
<li>雇用那些能对产品和文化带来价值的人。</li>
<li>不要雇用那些无法为产品和文化带来积极影响的人。</li>
<li>雇用那些做实事的人。</li>
<li>不要雇用那些只想不做的人呢。</li>
<li>雇用那些满腔热情、自动自发的人。</li>
<li>不要雇用那些只想混口饭吃的人。</li>
<li>雇用那些能启发别人且善于与人相处的人。</li>
<li>不要雇用那些偏爱自己单干的人。</li>
<li>雇用那些能随着团队和企业一同成长发展的人。</li>
<li>不要雇用那些枯燥乏味、不具备全面技能的人。</li>
<li>雇用那些多才多艺、兼具独特兴趣和天赋的人呢。</li>
<li>不要雇用那些只为工作而活的人。</li>
<li>雇用那些道德高尚、坦诚沟通的人呢。</li>
<li>不要雇用那些趋炎附势、工于心计的人呢。</li>
<li>务必雇用优秀的候选人。</li>
<li>宁缺毋滥。</li>
</ol>
</blockquote>
<p>Goole 对高质量人才定义叫做「创意精英」，什么是创意精英呢？</p>
<blockquote>
<p>所谓创意精英，不仅拥有过硬的专业知识，懂得如何使用专业工具，还需要具备充足的实践经验。</p>
<p>创意精英有分析头脑，他们对数据运用自如，可以利用数据做出决策，同时也懂得数据的误导性，因此不会沉迷其中。他们认为，数据</p>
<p>对做判断大有帮助，但绝不对被数据牵着鼻子走。</p>
<p>创意精英有商业头脑。他们知道专业技术、优质产品与商业成功是环环相扣的，也对这三个要素的价值了然于胸。</p>
<p>创意精英有竞争头脑。在工作中，他们的杀手锏源自创新，但也离不开实干的积累。他们追求卓越、干净十足，即使在工作之余也不回</p>
<p>停止前进的脚步。</p>
<p>创意精英拥有用户头脑。无论身处那个行业，几乎没有人能比他们更懂得用户或消费者对产品的看法。我们把创意精英叫做超级用户，</p>
<p>因为他们对自己的兴趣并非浅尝辄止，而是近乎痴迷。</p>
<p>创意精英是新颖原创构想的源泉。他们用不同于你我的展新视角看问题。</p>
<p>创意精英充满好奇心。他们总是在提问，绝不满足于守常不变。</p>
<p>创意精英喜爱冒险。</p>
<p>创意精英自动自发。</p>
<p>创意精英心态开放。</p>
<p>创意精英一丝不苟</p>
<p>创意精英善于沟通。</p>
<p>创意精英必须具备商业头脑、专业知识、创造力已经实践经验，这些都是基本特征。</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>海贼王和创业团队</title>
      <link>https://blog.alswl.com/2016/04/onepiece-startup/</link>
      <pubDate>Wed, 27 Apr 2016 00:36:10 +0800</pubDate>
      <guid>https://blog.alswl.com/2016/04/onepiece-startup/</guid>
      <description>一个同事在知乎提了一个问题 如果把草帽海贼团比作一个创业团队,这个Team的组织架构是怎样的?有哪些优势,又有哪些不足? 这个话题很有趣，作为追了多年的 fans ，又是身处互联网创业团队的我要来强答一记。 海贼王的世界很大，富有个性的角色和团队也很多，恰好可以和显示世界中的互联网创业团队进行对比。 柳传志讲的好，做大事，要「建班子，定战略，带队伍」，我们就着金句来看看草帽这个团队怎么样。 产品和战略 我先讲产品和战略</description>
      <content:encoded><![CDATA[<p>一个同事在知乎提了一个问题 <a href="https://www.zhihu.com/question/35037806">如果把草帽海贼团比作一个创业团队,这个Team的组织架构是怎样的?有哪些优势,又有哪些不足?</a></p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201604/onepiece.jpg" alt="201604/onepiece.jpg"  />


</p>
<p>这个话题很有趣，作为追了多年的 fans ，又是身处互联网创业团队的我要来强答一记。</p>
<p>海贼王的世界很大，富有个性的角色和团队也很多，恰好可以和显示世界中的互联网创业团队进行对比。
柳传志讲的好，做大事，要「建班子，定战略，带队伍」，我们就着金句来看看草帽这个团队怎么样。</p>
<!-- more -->
<h2 id="产品和战略">产品和战略</h2>
<p>我先讲产品和战略。</p>
<p>由于海贼王世界的设定，以及作为一个全年段漫画动画的原因。
海贼王世界的整体战略是较为简单，海贼团的目标都较为单一，即「找到 哥尔 D 罗杰 留下的宝藏」。
海贼团们实现目标的路径也较为单一，打斗增强战斗力，不断寻找线索，去伟大航道寻找宝藏。</p>
<p>所以故事的开展反而是围绕另外一条隐秘的线索「历史的真相」，尾田大神埋坑很深。
「历史的真相」并不是作为大部分人努力和前进的目标，所以「海贼王」世界的故事虽然曲折跌宕，
但是产品模型极为单一，不具备太多可以讨论的点。</p>
<h2 id="团队">团队</h2>
<p>接着讲团队，一个团队第一重要的是创始人，这必须要是一位领袖人物。</p>
<p>评价领袖优秀程度，从这么几个角度评价：</p>
<ul>
<li>意志力：打不死的小强，不达目标誓不罢休</li>
<li>专业技能：能打、脑子灵光、心灵手巧、一技之长</li>
<li>规划能力：除了体力值和专业智慧，也要讲讲战略和谋略</li>
<li>管理能力：沟通协调、团队管理促进能力，能够带领团队实现目标，促进他人成长</li>
</ul>
<p>以这个标准来看几个具有领袖气质的角色：</p>
<ul>
<li>路飞
<ul>
<li>意志力：5</li>
<li>专业技能：5</li>
<li>规划能力：1（率性而为的大爷）</li>
<li>管理能力：1（团队自由生长）</li>
</ul>
</li>
<li>白胡子
<ul>
<li>意志力：5</li>
<li>专业技能：5</li>
<li>规划能力：4（顶上之战的过程证明）</li>
<li>管理能力：5（队长们的成长和忠诚度证明）</li>
</ul>
</li>
<li>多弗朗明哥
<ul>
<li>意志力：5</li>
<li>专业技能：5</li>
<li>规划能力：5</li>
<li>管理能力：5</li>
</ul>
</li>
<li>艾斯
<ul>
<li>意志力：5</li>
<li>专业技能：4（以牺牲的时间点战斗力打分）</li>
<li>规划能力：2（追踪黑胡子，一个人冒进，被黑胡子摆了一道）</li>
<li>管理能力：2（也就混到一个队长，能够鼓励其他人，但是没发现黑胡子成长的问题）</li>
</ul>
</li>
<li>唐僧（乱入一个对比）
<ul>
<li>意志力：5+</li>
<li>专业技能：4（熟读经书算不算专业能力？）</li>
<li>规划能力：0</li>
<li>管理能力：0</li>
</ul>
</li>
</ul>
<p>从上面的判断可以看出，对于一个领袖而言，路飞仅仅是不错，但是谈不上多么优秀，
倒是白胡子，典范啊典范。</p>
<p>根据上面提到的能力模型，草帽海贼团的其他角色大家也可以心里评估出来了：
大部分人都是意志力、专业技能强悍（即便是乌索普，射击能力也是可以评上 3），但是同时也在规划能力和管理能力上面较弱。</p>
<p>唉，这么弱，很难继续支撑草帽海贼团继续走下去啊，怎么办呢？</p>
<h2 id="带队伍">带队伍</h2>
<p>草帽海贼团，一个极为漂亮的「自组织团队」。</p>
<p>什么是「自组织团队」？来自 InfoQ 的一篇文章 <a href="http://www.infoq.com/cn/articles/what-are-self-organising-teams">什么是自组织团队？</a> 里面讲到团队的特性：</p>
<blockquote>
<ul>
<li>分散式的控制，也就是说与集中式的控制截然相反，</li>
<li>不断适应改变的环境，</li>
<li>在局部相互作用下自然浮现出来的结构,</li>
<li>反馈，包括肯定的和否定的</li>
<li>弹性，归结于系统修复和调整的能力。</li>
</ul>
</blockquote>
<p>用简单的关键词概括，其实是这么几个关键词：</p>
<ul>
<li>自行决策</li>
<li>自己成长</li>
<li>适应环境变化</li>
<li>团队内部信任并且沟通顺畅</li>
</ul>
<p>从这几个关键词来看，草帽海贼团和这种自组织模式极为匹配。路飞从来不会发号施令，统一调度，顶多喊几句口号振奋一下大家。
路飞自身的规划能力和帮助他人成长的能力也远不及格。团队里面其他的成员，索隆、香吉士等的成长，完全是靠自己，
甚至在「两年」跨度这么长的时间，尾田也是借外部力量帮助团队这些成员成长，而不是依靠领袖来培养成员。</p>
<p>路飞选择这种自组织模式，不仅仅是一种巧合，更多的是一种逼不得已。尾田大神写的就是青春热血漫画，要是换成一个有勇有谋，
那就成主旋律电视剧了，大家可能也是因为路飞这种优点和缺点喜欢他。</p>
<h3 id="anti-自组织模式">Anti-自组织模式</h3>
<p>和「自组织模式」相反的情况，可以参照一下多弗朗明哥的团队。我们可以看到，在多弗朗明哥团里里面，有严密的等级关系（四大干部，家族干部，普通小兵），
有帮助人才成长的流程（培训罗的一系列流程）。
这种设定也是多弗朗明哥的战略能力和管理能力的体现。</p>
<p>还有一种更极致的组织模式「集权模式」，由核心层发号施令，协同作战。
海贼王的世界里，较少发现这样的模式，反派角色海军有一点点像。
倒是另外一部作品「星球大战」，其中的帝国、第一秩序，都是典型的 Manager 发号施令，底层士兵只要好好作战即可。
统一培养成行的克隆人，就可以支撑这样的团队发挥十足战力。</p>
<p>这种集权模式，缺少向上反馈能力，缺少自发的创新能力。在业务发展顺利规模扩张阶段，也许可以发展不错，但是长久以往，
核心层必然会发觉创新力和驱动力不足，花费大量的精力在管理、制度建设、奖惩机制上面。</p>
<p>路飞的缺点和优点一样鲜明，他很幸运的（可能也完全不知道）使用了「自组织团队」这种模式，完成了创业的起步阶段。
但是这种模式有也有自带的缺陷，需要目标一致性很高，团队成员自身有极高成长度。一旦遇到业务爆炸（顶上之战这种规模的战役），
这团队就完蛋了。期望路飞在未来的航道上，注意培养一下自己不善于的能力。好消息是，从最近的「庞克哈撒德篇」和「德雷斯罗撒篇」战况来看，
路飞已经开始学会制定「寻找友军结盟」、「树立竞争对手标杆」这样的初级战略方案了。</p>
<h2 id="末">末</h2>
<p>海贼王的世界，真的就是现实中「海盗」的正式写照吧。完成不可能的目标，成就团队，成就自己。</p>
<p>「世代传承的意志，时代的变迁，人们的梦，只要人们继续追求自由的答案，这一切的一切都将永不停止.这世界……没错！一个追求自由任凭选择的世界，就在我们的眼前无限地延伸，如果我们的梦想可以引导你的方向的话，就去追寻吧！在名为信念的旗帜下」</p>
]]></content:encoded>
    </item>
    <item>
      <title>技术之外</title>
      <link>https://blog.alswl.com/2016/02/team-geek/</link>
      <pubDate>Sun, 28 Feb 2016 18:16:01 +0800</pubDate>
      <guid>https://blog.alswl.com/2016/02/team-geek/</guid>
      <description>这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。 在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候， 经常和新同事聊到一个词：软实力。 我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样， 我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。 这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力， 而软实力则是考衡人</description>
      <content:encoded><![CDATA[<p>这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。</p>
<hr />
<p>在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候，
经常和新同事聊到一个词：软实力。
我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样，
我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。</p>
<p>这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力，
而软实力则是考衡人的因素。这种晚来的意识让我在一段时间里面，
将自己的工作陷入困境，并且得不到解药。</p>
<p>Google 的两位工程师 Brian W. Fitzpatrick 和 Ben Collins-Sussman
写了一本书<a href="http://book.douban.com/subject/21372237/">极客与团队</a>，通过他们的视角，
告诉大家想要在团队中获得成功的另一面。不要被书名误解，我觉得「开发者和团队」是更好的名字，
虽然没那么酷。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201602/s26354473.jpg" alt="s26354473.jpg"  />


</p>
<!-- more -->
<blockquote>
<p>要在团队中获得成功，你必须以<strong>谦虚</strong>、<strong>尊重</strong>和<strong>信任</strong>为核心原则。</p>
</blockquote>
<p>要做的第一件事情，应该就是沟通了。让自己成为一个玻璃玲珑人，
其他人可以看到你的方向、目标和里程碑，同时可以看到你的进展和问题点。
这样不但可以获得工作中的肯定，当个人的目标设定和团队出现偏差，
又或是开发过程中在一个点停顿了太久，可以有其他人参与进来或直接伸出援手。</p>
<p>这种透明度对上对下都应该如此。团队的领导，
应当在开发周期内的早期就明确告知团队愿景、目标和设定的里程碑。
产生共鸣的愿景可以让人对目标有渴望，对自己工作有认同。
各位还记得中国中小学开学第一周里，大多都有一个开学典礼讲话。讲的好的领导，
会阐述自己的教学理念，去年取得的成绩，今年的教学着重点。
讲的差的领导就是泛泛而谈，每年都是一套话术，完全看不到长进。</p>
<p>缺失沟通，还会将个人陷于单打独斗的境地，一个篮球队需要 5 个人大，
一个人牛逼没屁用。</p>
<p>提高工程质量的一个有效手段就是 CI（持续集成），将开发过程中一点点的小进展都以一种机械的方式呈现出来，
并进行测试。另一个有效手段是 Code Review，不但推荐要 CR，更是要尽早、快速的 CR。
避免屎积压多了拉，太臭。</p>
<p>我突然想到一条实践：即便是做一个人的项目，在精简程度上也保持最小的一个阈值，
想象明天就要长假，工作要交给别人维护，如何在交付物里面有足够的信息让其他人知晓细节。
而不是丢给后继维护者一句冰冷的话：「看代码」。</p>
<p>沟通必须是有效的，我想任何人都不想听一个嘴碎的人在那边逼逼一下午。
有很多结构化、一部的沟通可以显著提高沟通效率：
项目看板、设计文档、Code Review、代码注释、数据字典等。</p>
<p>第二个重要的观点是，接受失败，承认自己不是无能的。你可能很聪明，但所做的事情不一定完全都是正确的，
连上帝都会犯错，何况是普通人。犯错不可怕，但是犯错还认识不到可怕。犯错并且认识到了，
但是拒绝承认错误的人，不是可怕，而是应该要被淘汰，这类人会极其难以合作。
如何你周围都是这样的人，或者你上司是这样的人，也许你可以考虑换一个地方，在拉钩搜索「堆糖」试试吧。</p>
<p>关于接受失败的另外一个隐含后续发展就是「成长」。意识到这个世界是动态发展的，
「要以发展的眼光看待事物」是一个非常非常有用的认知。
能自己意识到失败，并且会主动复盘，重新认知自己的人，往往会成长的极为迅速。
关于成长的话题可以讨论很深，以后可以单独拎出来讨论。</p>
<p>书中提到一个失败后回顾的清单：</p>
<blockquote>
<ol>
<li>简要</li>
<li>时间的时间线，从发现到调查，再到最终见过</li>
<li>事件发生的主因</li>
<li>影响和损失评估</li>
<li>立即修正问题的步骤</li>
<li>防止事件再次发生的步骤</li>
<li>得到的教训</li>
</ol>
</blockquote>
<p>我就哈哈哈了，这不就是我大堆糖的故障报告模板么？</p>
<p>第三点，如何成长？简单来说，去冒险，去承担自己能力之外的任务，
去挑战没有经历过的任务。有一条<a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%E5%8E%9F%E7%90%86">彼得定律</a>：「在组织或企业的等级制度中，
人会因其某种特质或特殊技能，令他在被擢升到不能胜任的职位，相反变成组织的障碍物（冗员）及负资产。」。
前半段含义是，大部分情况下面，并不是具有了相应能力才去承担，而是试着去承担任务。
无论成功与否，对当前去挑战的人来说，都能够得到历练，从而能力得到提升。</p>
<p>第四点是：成为 Leader，而不是 Manager。
一个团队是一艘危机四伏的海面上一只船，如果没有一个船长，那么就前途叵测。
在职业生涯的某些阶段，你可能自然成为船长，也许是一个项目的船长，也许是一个小 Team 的船长。
那么切记，船长是 Leader，而不是 Manager，是能力综合，可守可攻，顺风时候会把舵，
缺人时候可以顶任何岗位的船长。而不是手持大鞭的 Manager。
我觉得新闻联播里面描述的人民公仆，就是一个很好的 Leader。</p>
<p>一年多前之前和铁柱聊过，一个 Leader 是否需要要以能力服众。
我仍然保持当初的观点：「是的」。在目标管理、方向把握上面，
强大的技术背景可以有魄力的开展工作，挖掘新技术，推动变化。
在遇到困难时候，可以决策、解决问题。
这是由这个行业特质决定的，互联网是依赖创造力的脑力劳动，而不是根据人数线性增加产出的体力劳动。</p>
<p>但毕竟不是每个人都一定拥有 Leader 特质，难道就要一辈子做技术得不到上升？
Google 的一种做法，可以很好解决这个问题。分离 TL（techlead）和 TLM（techleadmanager），
前者更着重技术，后者不但关心技术，还关心手下工程师的成长。
用国内互联网的职责分工描述，大概就是有技术专家和团队负责人的区别。</p>
<p>关于这条，书中的几点最佳实践非常棒：</p>
<blockquote>
<ol>
<li>放下自负</li>
<li>做一个禅师（保持冷静和理性）</li>
<li>成为催化剂</li>
<li>当一个导师</li>
<li>设置明确的目标</li>
<li>坦诚（三明治赞美法）</li>
<li>记录快乐程度</li>
</ol>
</blockquote>
<p>最后聊一下对书本身的评价。黄易山在 Quora 写过一段非常有名的
<a href="https://www.quora.com/What-makes-engineering-management-hard">为什么工程师管理这么难？</a>。
这本书讨论的内容要比黄易山那篇回答范围更大，讲述的也更详细（废话，这是书）。
作者是典型的工程师，书目结构易读，第五章从反模式来思考问题非常赞。</p>
<p>我读过几本技术管理相关的书籍，印象深刻的有两本，一本是温伯格的<a href="http://book.douban.com/subject/1132623/">成为技术领导者</a>，另外一本是此书。温伯格的行文比较跳跃、比较抽象，不容易读。
而这本书不但通俗异动，也添加了非常具有可操作性的最佳实践。
从创造力驱动的角度出发，技术开发者都是管理者。因为他们需要设计方案，创造价值，而不是重复劳动，
所以我推荐每个开发者阅读。</p>
<p>好了，学习够了充分的理论，下面就是做起来了，「知行合一」。</p>
<hr />
<p>开给自己的处方：</p>
<ul>
<li>上面提到的最佳实践</li>
<li>谦逊：谦逊一些，低调一些，向他人学习</li>
<li>坚毅：认准目标，稳步前行，不放弃</li>
<li>信心：信念也许可以重建，但是对自己始终保有信心，也许会错，但是要相信自己的判断</li>
<li>开会技巧：超过 5 人的会用单向宣讲更有效</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>带理想的执行者 - 柳比歇夫的一生</title>
      <link>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</link>
      <pubDate>Sun, 12 Jul 2015 17:29:19 +0800</pubDate>
      <guid>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</guid>
      <description>作为战斗民族的俄罗斯民族，不但能在热带风暴级的灿鸿中进行正常起降， 历来也盛产各种奇葩人物。 最近我有看到一本描述一个科学家的如何生活的书，叫「奇特的一生」。 让人拍案称奇。 主人公是一位名叫柳比歇夫的科学家，想必他在「回首往事时候没有因为虚度年华而悔恨」， 因为他将自己的一生都精确的奉献到分类学、地蚤研究上面。 他的工作投入，不是单纯激情洋溢投入，而是精确到分钟级别的投入， 是奉献完整一生的投入。 除了学术上面</description>
      <content:encoded><![CDATA[<p>作为战斗民族的俄罗斯民族，不但能在热带风暴级的灿鸿中进行正常起降，
历来也盛产各种奇葩人物。
最近我有看到一本描述一个科学家的如何生活的书，叫「奇特的一生」。
让人拍案称奇。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201507/liu_bi_xie_fu.jpg" alt="201507/liu_bi_xie_fu.jpg"  />


</p>
<p>主人公是一位名叫柳比歇夫的科学家，想必他在「回首往事时候没有因为虚度年华而悔恨」，
因为他将自己的一生都精确的奉献到分类学、地蚤研究上面。
他的工作投入，不是单纯激情洋溢投入，而是精确到分钟级别的投入，
是奉献完整一生的投入。</p>
<p>除了学术上面的成功，他的时间记录法也很牛逼，甚至让苏联科学院进行研究。怎么描述他的牛逼呢？如果他生活在今天，大致会这样写：</p>
<blockquote>
<p>今天我 19:00 - 19:25 看了新闻联播，感受到社会各阶级在党的领导下面获得令人振奋的成绩</p>
<p>19:25 休息了一会，避过无聊的天气预报时间</p>
<p>19:30 - 20:30 学习了「XXX 的讲话精神研究」</p>
<p>附加工作：20:35 - 20:40 小解，顺便刷了一会朋友圈作为今天的娱乐放松，评论了隔壁老王老婆的出行照片</p>
</blockquote>
<p>看到没有，他精确的记录了自己的时间使用记录，犹如脑子里面有个精确的 GTD
管理器，那个年代 David Allen 还没出生呢，肯定也谈不上了解 Get Things Done。苏联真是靠各类牛逼人物撑起了一战、二战时候工业大跃进和各种黑科技的崛起。</p>
<p>简单记录时间当然不能带来效率和成果的提升，柳比歇夫明显没有纳什这种神经病天才的聪明，他能获得这样比较高的成就，必须还有真正的大招。</p>
<p>第一招是他有坚定的奋斗目标：「创立生物自然分类法」。我们暂不管这不出名的法则是什么，能在 1918 年（他时年 28 岁，我擦，和我现在差不多大啊）就提出自己一生奋斗的目标，着实了不起。
从书中的记录来看，28 岁的青年教师柳比歇夫，
在日记里面描述他想要做什么事情，需要具备什么素质，
并且在估算重要里程碑时间点。</p>
<p>我估摸着，在战争中成长起来的人，不仅仅需要幸运，还需要勇气和坚韧意志，
19 世纪初年，沙皇政权摇摇欲坠，布尔什维克们应该还在密谋革命造反，
民众生活艰苦（感觉好像民国时期的中国）。
这种时代的大环境造就了各阶级人物命运的跌宕起伏，附带效应是出产优秀的文人和思想家。
柳比歇夫既然在这个时期成长，那也会渴望建树功勋，做点改变世界的事情。</p>
<p>第二招是，他就去做了。</p>
<p>「听过了很多大道理，却依然过不好这一生」，无非是缺在执行。
柳比歇夫的时间记录法，不是简单作为一个日记本在使用，
关键点在于回顾和计划。通过过去的记录，分析自我，总结经验，判断未来。</p>
<p>哎哟，道理说起来都简单，做起来都难，柳比歇夫作为一个很好的例子，
告诉我们，一个资质普通的人，决定牺牲自我，奉献到某个特定事业时候，
可以获得的成绩，他完成了「立言」。</p>
<p>在这个物欲横流，信息多得炸掉脑仁，各类媒体都在抢占眼珠的时代，能够不忘初心，
去做点实际的事情，是一件不容易的事情。
对快 30 的我来说，别说「立言」，就光「立命」，
就已经让我困苦不堪，在这和平年代，没有家仇国恨美国梦，想要做点牛逼的事情，就得需要勇气和爱来驱动。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201507/da_sheng_gui_lai.jpeg" alt="201507/da_sheng_gui_lai.jpeg"  />


</p>
]]></content:encoded>
    </item>
    <item>
      <title>《项目管理修炼之道》笔记</title>
      <link>https://blog.alswl.com/2014/08/manage-it/</link>
      <pubDate>Sun, 31 Aug 2014 20:12:06 +0800</pubDate>
      <guid>https://blog.alswl.com/2014/08/manage-it/</guid>
      <description>随着团队规模的变大，成员之间合作的模式逐渐由单打独斗变成协作开发。 这时候会遇到很多意想不到的问题，项目管理的重要性也就显现出来了。 项目管理修炼之道 是一本讲技术类项目管理方法和实践的书。 从业者可以从这本书获得了有益的指导。 我在 Kindle 上面翻了好几遍，感觉受益匪浅，就把读书笔记拿出来供大家参考。 内容 核心内容是项目管理的生命周期和每个阶段的交付物： 项目章程 日程规划 开发（控制节奏） 结束项目，项目回顾 其他内容： 如</description>
      <content:encoded><![CDATA[<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201408/s6089513.jpg" alt="项目管理修炼之道"  />


</p>
<p>随着团队规模的变大，成员之间合作的模式逐渐由单打独斗变成协作开发。
这时候会遇到很多意想不到的问题，项目管理的重要性也就显现出来了。
<a href="http://book.douban.com/subject/4058336/">项目管理修炼之道</a>
是一本讲技术类项目管理方法和实践的书。
从业者可以从这本书获得了有益的指导。
我在 Kindle 上面翻了好几遍，感觉受益匪浅，就把读书笔记拿出来供大家参考。</p>
<h2 id="内容">内容</h2>
<p>核心内容是项目管理的生命周期和每个阶段的交付物：</p>
<ul>
<li>项目章程</li>
<li>日程规划</li>
<li>开发（控制节奏）</li>
<li>结束项目，项目回顾</li>
</ul>
<p>其他内容：</p>
<ul>
<li>如何和投资者沟通</li>
<li>管理会议</li>
<li>控制项目节奏</li>
</ul>
<!-- more -->
<h2 id="关键字">关键字</h2>
<ul>
<li>项目定义：一个独特的任务或是系统化的流程，其目的是创建新的产品或服务，
产品和服务交付完成标志着项目的结束。项目都有风险，并且受制于有限的资源。</li>
<li>关键（章程）
<ul>
<li>驱动因素：功能集合、发布时间、缺陷等级，只能有一个</li>
<li>约束：环境、流程、人力资源、预算等，决定了规模</li>
<li>浮动因素</li>
</ul>
</li>
<li>规划：带有项目发布条件的项目计划
<ul>
<li>日程安排：对工作项目的有序描述</li>
<li>发布条件：S.M.A.R.T.，需要一起协商</li>
</ul>
</li>
<li>仪表盘
<ul>
<li>定性或者定量的方式，将结果公布出来</li>
</ul>
</li>
<li>保持项目节奏的方法
<ul>
<li>快速开发
<ul>
<li>持续集成</li>
<li>自动冒烟测试</li>
</ul>
</li>
<li>功能拆分和日程排期
<ul>
<li>按功能实现，而非架构</li>
<li>优先实现高价值功能</li>
<li>通过用户故事、角色和场景来定义需求</li>
<li>分离需求和 GUI</li>
</ul>
</li>
<li>质量控制
<ul>
<li>复查：Code Review，结对编程</li>
<li>重构</li>
</ul>
</li>
</ul>
</li>
<li>项目成员的角色构成
<ul>
<li>项目经理</li>
<li>架构师</li>
<li>开发人员</li>
<li>测试人员</li>
<li>业务分析师</li>
<li>运维</li>
</ul>
</li>
</ul>
<h2 id="我的问题和部分解答">我的问题和部分解答</h2>
<p>Q：项目经理的职责是什么？</p>
<blockquote>
<p>监控项目进度，牢记里程碑验收条件。保障项目按需求交付。</p>
</blockquote>
<p>Q：如何成为优秀的项目经理？</p>
<p>项目经理需要下面这些技能：</p>
<blockquote>
<ul>
<li>
<p>倾听</p>
</li>
<li>
<p>谈判技巧</p>
</li>
<li>
<p>协作和表达技能</p>
</li>
<li>
<p>目标导向</p>
</li>
<li>
<p>真诚，尊重</p>
</li>
<li>
<p>信息不足下进行决策能力</p>
</li>
<li>
<p>解决问题的技巧</p>
</li>
<li>
<p>发现问题能力</p>
</li>
<li>
<p>理解产品的生命周期</p>
</li>
<li>
<p>认识自己技术的不足</p>
</li>
<li>
<p>能够安排日程</p>
</li>
<li>
<p>能够估算任务，并指导其他人完成任务估算</p>
</li>
<li>
<p>指导如何管理风险，评估项目状态</p>
</li>
</ul>
</blockquote>
<p>Q：用何种生命周期组织项目？</p>
<p>互联网项目看中发布时间和功能集合，适合用迭代式的生命周期。</p>
<p>Q：如何安排项目日程？</p>
<p>细化日程，让成员自省讨论，<strong>基于可交付物</strong> 的日程规划。
注意，这里的日程和具体的时间安排没有关系，而是处理任务之间的依赖关系。</p>
<p>Q：如何估算日程中每个任务</p>
<p>书中给了一个方法：使用日期范围，但问题是，在小团队工作时候，
可能整个项目周期也就 1 个月，如果按日期范围估计，就比较难评估了。</p>
<p>还有一个方法是使用「1、2、3、5、8、13、21、34、55、89」这样的方式来拆解估算任务。</p>
<p>每个任务可以拆解成小石子（不超过 2 天的任务）。</p>
<p>还有一个 tip 是使用波浪式规划，即不在一开始时候规划全部。在进行的过程中调整日程。
以 2 周或者 4 周的长度规划，太长了就更容易出错，对预测能力要求太高。</p>
<p>项目经理目标是<strong>按驱动因素完成既定需求，而不是给一个漂亮的甘特图</strong>。</p>
<p>关于估算日程的三条忠告：</p>
<blockquote>
<ul>
<li>绝对不要提供确定的项目结束日期</li>
<li>任务越小，估算起来越容易</li>
<li>寻求估算的准确性，而不是精确性</li>
</ul>
</blockquote>
<p>Q：前期延迟了，后期能追赶么？</p>
<p>不能，强行安排的话，是一个日程安排游戏。但是从 Deadline 意识来说，需要对成员达成 Deadline 意识。</p>
<p>Q：如何创建优秀团队？</p>
<p>招对的人，激励个人，形成团队凝聚力。
团队发展分成 5 个时期：组建、激荡、规范、表现、终止。</p>
<p>Q：如何估算日程安排里面的时间？</p>
<p>参见上面所说「1、2、3、5、8、13」和小石子。</p>
<p>Q：如何对项目的模块进行拆分？</p>
<p>书中没有过多提及，我从自己经验得出的答案是：</p>
<ul>
<li>原则：拆解成耦合度低，可以并发进行的子任务，互不依赖</li>
<li>每个拆分出来的子任务，是可以被描述，并且其产出是可量化的</li>
<li>如果子任务之间，有相互依赖点，需要在早期就约定好接口和交付时间点</li>
<li>如果一个模块 A 很大（比如超过 4 周开发时间），
那应该团队作战以这个模块为开发目标，将模块 A 拆成多个子任务，然后并发进行。
而不是模块 A、模块 B 并发进行。</li>
</ul>
<p>Q：如何保持项目节奏，避免发生延期？</p>
<p>参见上面的「关键词」中「项目节奏」部分。</p>
<p>Q：如何管理工程（多个项目），并且在里面进行协调？</p>
<p>多个项目，但是<strong>使用一个发布计划</strong>（类比前端、后台、移动端）。
并一起制定好各个项目的计划。如果基于敏捷开发，问题可以被简化，
因为每条线都是随时可以发布的状态。如果不行，那就组织里程碑的发布计划。</p>
<p>需要管理各个子项目的项目经理，并且创建统一的日程表。</p>
<p>Q：团队里面有执行迟缓，不听从决策的人员，怎么办？</p>
<p>这个问题其实是管理问题，而不是项目管理问题。
书中并没有合适答案，我自身感想是这几方面：</p>
<ul>
<li>弄清楚为什么不听从决策，需要明确项目的发布目标</li>
<li>从精神、物质上面进行激励</li>
<li>直白的进行沟通，向对方请求帮助</li>
<li>从自身寻找问题，提高自身沟通能力和专业技能能力</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>从 SVN 到 Git，找回丢失的历史</title>
      <link>https://blog.alswl.com/2014/01/renamed-svn-to-git/</link>
      <pubDate>Tue, 21 Jan 2014 00:20:06 +0800</pubDate>
      <guid>https://blog.alswl.com/2014/01/renamed-svn-to-git/</guid>
      <description>前段时间在将公司的 SVN 项目迁移到 Git 上面去，遇到一个很少见的问题： 有一个小伙伴使用 git-svn 做 rename 操作时候，将一个目录 svn mv 了， 导致新目录只存了最近几个月提交历史，丢失了历史信息。对团队开发而言， 历史提交是非常宝贵的财产，我们想了一些办法，把这些数据提取出来。 # 找出丢失之前的版本，列出丢失目录上层的操作记录。 svn log -l 2000 svn://log4d.com/trunk/apps/ios/ | less # 将重命名之前的版本拷贝到一个临时目录 svn copy svn://log4d.com/trunk/apps/ios/nami@43252 svn://log4d.com/trunk/apps/ios/nami_lost # 准备现有代码到 Git git svn clone svn://log4d.com/ -T trunk/apps/ios/nami -t tags -b branches -r 13532 nami #</description>
      <content:encoded><![CDATA[<p>前段时间在将公司的 SVN 项目迁移到 Git 上面去，遇到一个很少见的问题：
有一个小伙伴使用 git-svn 做 <code>rename</code> 操作时候，将一个目录 <code>svn mv</code> 了，
导致新目录只存了最近几个月提交历史，丢失了历史信息。对团队开发而言，
历史提交是非常宝贵的财产，我们想了一些办法，把这些数据提取出来。</p>
<!-- more -->
<pre tabindex="0"><code># 找出丢失之前的版本，列出丢失目录上层的操作记录。
svn log -l 2000 svn://log4d.com/trunk/apps/ios/ | less

# 将重命名之前的版本拷贝到一个临时目录
svn copy svn://log4d.com/trunk/apps/ios/nami@43252 svn://log4d.com/trunk/apps/ios/nami_lost

# 准备现有代码到 Git
git svn clone svn://log4d.com/ -T trunk/apps/ios/nami -t tags -b branches -r 13532 nami

# 修改 .git/config 来加入丢失的历史数据 Remote
[svn-remote &#34;svn-lost&#34;]
	url = svn://log4d.com
	fetch = trunk/apps/ios/nami_lost:refs/remotes/trunk-lost

# 并抓取 Remote 内容
git svn fetch

# Rebase 新代码到恢复过来的历史记录上
git checkout master
git rebase --committer-date-is-author-date trunk-lost
</code></pre><p>其中注意的是手动添加一个 <code>svn-remote</code> 地址为历史数据副本地址。
还有就是 <code>rebase</code> 时候参数 <code>--committer-date-is-author-date</code>
可以保证 <code>rebase</code> 不会造成提交时间被修改，方便回溯。</p>
<p>整整搞了一天，说出来都是泪，希望看到的人用不到，搜到的人用得到。</p>
]]></content:encoded>
    </item>
    <item>
      <title>读《人件》</title>
      <link>https://blog.alswl.com/2013/04/peopleware/</link>
      <pubDate>Wed, 10 Apr 2013 23:35:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2013/04/peopleware/</guid>
      <description>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要， 还是通过语言/工具来约束人重要」。 我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。 如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。 并不是静态编译和工具检查就能搞定了。 我愤愤的在 QQ 对话框中写道： 我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学 后来痛苦与代码质量</description>
      <content:encoded><![CDATA[<p>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要，
还是通过语言/工具来约束人重要」。
我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。
如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。
并不是静态编译和工具检查就能搞定了。</p>
<p>我愤愤的在 QQ 对话框中写道：</p>
<blockquote>
<p>我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学
后来痛苦与代码质量，阅读了《重构》，开始坚信代码质量决定产品质量
现在痛苦于人和语言的冲突，动态和静态的冲突，我想读《人件》了</p>
</blockquote>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/201304/s1299961.jpg" alt="人件"  />


</p>
<p>人件已经绝版，只能在找线上版，我花了两个星期把它读完。
书中给了我一部分答案，另外还有一些意外的收获。</p>
<!-- more -->
<p>《人件》其实讲了一件事情：怎样将脑力劳动者管理好，打造出一个高效的团队。</p>
<p>《人件》@豆瓣： <a href="http://book.douban.com/subject/1108725/">http://book.douban.com/subject/1108725/</a></p>
<p>《人件》在线阅读地址： <a href="http://book.zi5.me/books/read/2206">http://book.zi5.me/books/read/2206</a></p>
<p>吐槽：翻译太烂太烂太烂了，下次要看直接去看翻译版。</p>
<h2 id="以人为本">以人为本</h2>
<blockquote>
<p>我们工作的主要挑战，与其说来源于技术，不如说来源于团队成员本身</p>
</blockquote>
<p>技术人员转成项目经理经理之后，往往继续用工程化思维管理人员，
认为人是可以设计成标准化接口，是可以替换的。很可惜，这种想法不是那么 <strong>有效</strong>。</p>
<p>因为脑力劳动和体力重复劳动不一样，不是在卖汉堡这种重复工作，
而是需要创造、思考和发明的工作。软件经理需要提供有限额的错误机会。
错误无法完全避免，并且是工作内容的健康组成部分。一旦硬性阻止犯错，
会让团队成员失去创造的勇气。
我相信这也是为什么 Facebook 早期会践行「Break it Down」。</p>
<h2 id="何不双赢">何不双赢</h2>
<blockquote>
<p>西班牙人的理论坚持认为地球上只有一个固定数量的价值，
因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富。
而英国人的理论认为价值可以通过天才和技术创造出来。因此英国就产生了工业革命，
而西班牙人就转动起了车轮，开始开拓疆土和剥削在新大陆的印第安人。
他们从海上运回大量的黄金，
他们所有努力带来的却是通货膨胀（太多的金钱追逐太少的有用货物）。</p>
</blockquote>
<p>我坚信公司和员工并不是对立面的，双赢才是正确的路线。
大部分情况下，我愿意牺牲个人时间和精力来完成公司的任务。
前提就是对产品有认同感，对公司有归属感。</p>
<h2 id="最好和最坏">最好和最坏</h2>
<p>作者通过一个持续两年，有来自 92 个公司的 600 多名开发程序员参加的比赛，
分析出以下数据：</p>
<ul>
<li>成绩最好与成绩最差的人之间的绩效比率是10 : 1。</li>
<li>最好选手成绩大约是中等成绩选手成绩的2.5倍。</li>
<li>成绩中等以上的一半选手与另外一半选手的绩效比是2 : 1</li>
</ul>
<p><a href="http://www.aqee.net/">外刊 IT 评论</a>的
<a href="http://www.aqee.net/why-programmers-are-not-paid-in-proportion-to-their-productivity/">为什么程序员的工作效率跟他们的工资不成比例</a> 一文中也提供一些数据支持。</p>
<p>我离最好还有很长的距离，但是我相信个人能力是可以提升的，
并且在个人能力上面的投资汇报比极高。</p>
<h2 id="高效工作的秘诀">高效工作的秘诀</h2>
<blockquote>
<ul>
<li>进入顺流：咦？怎么时间过得这么快？！</li>
<li>邮件比电话更不容易打乱人的思绪</li>
</ul>
</blockquote>
<h2 id="团队的力量">团队的力量</h2>
<blockquote>
<ul>
<li>团结起来，工作的更高效更开心</li>
<li>有目标的团队，1 + 1 &gt; 2</li>
<li>为一个共同的目标走到一起</li>
<li>优秀的团队里的成员，不会因为钱、阶层、晋升的问题离开团队</li>
<li>优秀的团队往往是带有个性的</li>
</ul>
</blockquote>
<p>《人人都是产品经理》中当时讲了一个愿景（Vison）问题，
我相信一个好的愿景可以吸引更多高质量人才，为赚钱而创建的团队是不会长久的。</p>
<h2 id="烂团队的苗头">烂团队的苗头</h2>
<blockquote>
<ul>
<li>防范团队成员</li>
<li>官僚作风</li>
<li>不挨在一起工作（空间上）</li>
<li>某个成员的职责被分割多份</li>
<li>对产品质量要求降低</li>
<li>无意义的截止日期（不可能达到的目标）</li>
<li>结党营私</li>
<li>加班</li>
<li>绩效考核 / 目标奖励</li>
<li>早期时候人员超编</li>
</ul>
</blockquote>
<p>这里和上文的愿景问题是对应的，无论是强制加班还是通过考核回报激励，
都不是激发人的创造力和战斗力的好方法。老大们应该学会画饼，画大饼。
另外，管理团队果然好难：做的事情必须靠谱，才能吸引到人才；
需要能管理好有个性的人才（比如伞哥这样的）； 在中国大环境下，还要不错的物质回报。</p>
<h2 id="经营好团队">经营好团队</h2>
<blockquote>
<ul>
<li>崇拜高质量：因为市场和用户需要高质量的产品</li>
<li>通过里程碑的方式管理任务，提高士气</li>
<li>崇拜精英</li>
<li>允许和鼓励异端：异端代表创新和进化，没有异端就会种群灭亡</li>
<li>给予自由度：对成员信任，而不是纯粹服从权威工作</li>
<li>交流，唤醒那些有潜力的巨人（唤醒了才能将脑力劳动能力发挥到极限）</li>
<li>内部竞争和培养</li>
<li>管理层自身的学习，公司自身定位的不断改变</li>
<li>将公司内部建设出社区文化（我觉得就是公司团队文化建设嘛）</li>
</ul>
</blockquote>
<p>我有一个观点是工程质量决定产品质量，产品质量决定整个团队。
质量的一个标准是：<strong>我以此为荣</strong></p>
<h2 id="工作是一种乐趣">工作是一种乐趣</h2>
<blockquote>
<ul>
<li>将混乱重建成秩序是有趣的</li>
<li>敢于用小项目来做尝试</li>
<li>组织竞赛游戏</li>
<li>团队头脑风暴</li>
</ul>
</blockquote>
<p>这本这么老的书居然提到团队竞争游戏，和 Facebook 的 Hackday 异曲同工啊。
再为这种乐趣补充一点：将公司的成果分享到开源社区。</p>
<blockquote>
<p>团队成员需要做到：</p>
<ul>
<li>界定自己工作，成为主人翁</li>
<li>促使自己成长为多面手，而不是单纯某个职位</li>
</ul>
</blockquote>
<p>给了成员足够的自由度，那么就会有相应的风险，需要对他们进行监测，
另外招人时候就需要找靠谱的人，这也是为什么 Facebook / Google / 早期百度对招人要求极其严格。</p>
<h2 id="流程改进">流程改进</h2>
<blockquote>
<ul>
<li>CMM 是标准，是标准的话就一定不是对于个体的最优情况</li>
<li>CMM 自身也在改进，说明上一个版本的 CMM 不是最优</li>
<li>流程的目标是：提高质量 / 提高生产力 / 减少风险</li>
</ul>
</blockquote>
<h2 id="读后感">读后感</h2>
<p>发挥个人的能力才是最关键的，要点在于信任、自由、乐趣。原则是 Pull 而不是 Push。</p>
<p>我会继续学习和思考这些原则，因为总有一天我也会面临这样的挑战。</p>
]]></content:encoded>
    </item>
    <item>
      <title>软件开发中的角色扮演</title>
      <link>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</guid>
      <description>说到软件开发的过程、环节等等，我印象里只剩下一大堆术语和一些流程的大概，但是因为缺乏正规开发的经验，所以并没有对软件开发中每个人的角色有深入理解，今天在周末 检查Delicious Temp标签时候，看到 圆木菠萝头 的这片文章，收获颇丰，现在转载与大家分享。 原文链接：[ 软件开发中的角色扮演 - 软件开发 - 圆木菠萝罐](http://blog.boluotou.com/Developer/2009/06/S oftware_Role)</description>
      <content:encoded><![CDATA[<p>说到软件开发的过程、环节等等，我印象里只剩下一大堆术语和一些流程的大概，但是因为缺乏正规开发的经验，所以并没有对软件开发中每个人的角色有深入理解，今天在周末
检查Delicious Temp标签时候，看到 <a href="http://blog.boluotou.com/">圆木菠萝头</a>
的这片文章，收获颇丰，现在转载与大家分享。</p>
<p>原文链接：[ 软件开发中的角色扮演 - 软件开发 - 圆木菠萝罐](<a href="http://blog.boluotou.com/Developer/2009/06/S">http://blog.boluotou.com/Developer/2009/06/S</a>
oftware_Role) （我稍微调了一下格式，没有修改文章内容 ^_^）</p>
<p>××××××XXX分哥线XXX×××××××</p>
<p>商业软件开发并不是只有一个编程的人，而是可以分为不同的角色。</p>
<p>不同的软件公司因为规模大小性质各不相同，所以围绕软件的角色也各不相同。这就好比在重点学校里面分级很明确，每科有个老师，每个年级每个班级都有各自的老师，也有主
任书记校长支持角色。而在电影《一个都不能少》级别的学校里面，往往一个老师兼职从语文教到体育，年级从一年级到六年级。类似的说，一个大型的软件外包企业，外资企业
，往往分工明确细致，每个人像螺丝钉一样在一起工作，让整个大机器得以运转。而在一个小型创业企业里面，往往一个人从接触客户，到开发产品到交付产品＊＊＊走完，整个
产品周期就一个人，甚至几个产品周期就一个人。</p>
<p>所以解释角色要针对性。远的不说，就拿我们的项目组来举例。我们项目组可以说一共有5种角色，开发（DEV），测试（QA），质量监督（SQA），技术主管
（Tech-Lead）,开发经理（SDM）。</p>
<h2 id="1-开发-dev">1. 开发 （DEV）</h2>
<p>编程能力 ★★★★★</p>
<p>业务认知 ★★☆</p>
<p>沟通能力 ★★☆</p>
<p>管理能力 N/A</p>
<p>全局观 N/A</p>
<p>开发就是大家经常说的编程的人。工作主要是写代码，其次是跟团队成员客户沟通。前后者比例大概是7：3的关系。开发是整个软件开发团队当中的最重要的角色之一，道理很
简单，产品出自于他们的亲手。说到开发，大家的印象就是整天呆在电脑面前，目光呆滞，头发凌乱的计算机人士。确实，整天和计算机打交道的人的确容易变成这样，因为开发
首要解决的问题就是如何用技术能力去解决客户的需求，而不是自己的形象怎么样。事实上这种情况在现代中得到很大改善，很多IT人士都很注重自身形象。</p>
<p>具体的工作不仅要写代码用算法实现业务逻辑，更要有程序设计的思想，大到整个的程序框架，小到某个小模块的扩展性兼容性，都是在开发真正写代码之前着重要考虑的方面。</p>
<p>现在的编程不像以前打孔式编程那么艰涩，大厂商开发的强大的编程工具（IDE）让编程事半功倍。然而技术在变简单的同时，客户需求又在日趋复杂化。而技术就是为了实现
业务逻辑，将业务逻辑抽象建模用计算机程序的方式表现出来，所以一个不懂业务逻辑的开发不会了解模块和模块之间如何协同工作，这便给工作带来很大的局限性。而如果一个
开发只关注每个模块之内的细节实现，那在现实中便不是一个好开发，至少不是一个好用的开发。</p>
<p>沟通方面，开发需要和测试，技术主管，开发经理，甚至客户方面沟通，所以必要的沟通能力还是很需要的。现在的软件不再是一个人在战斗，在团队作战中，开发有时需要和测
试讨论&quot;某个软件Bug（缺陷）是不是Bug&quot;，有时需要和技术主管讨论客户的某个需求到底是要实现什么内容，有时需要和开发经理讨论项目的进度是否需要推迟。</p>
<p>就开发的工作本身而言，是不太需要管理能力和全局观的，如果能够做好编程的工作之外，这两方面也比较强，可能就离升职加薪不远了。</p>
<h2 id="2-测试qa">2. 测试（QA）</h2>
<p>编程能力 ★★☆</p>
<p>业务认知 ★★★★</p>
<p>沟通能力 ★★★</p>
<p>管理能力 N/A</p>
<p>全局观 ★☆</p>
<p>任何一个产品都需要测试，就好比制造业中如果生产了一批电灯，我们不能听制灯师傅说信得过而信得过，而得通过一系列模拟用户的行为来对电灯进行测试，指标合格后方可出
厂投入市场。</p>
<p>软件测试也一样，需要对开发者开发出来的模块，产品进行全方位的测试。</p>
<p>原则是&quot;做正确的事&quot;，让客户需求功能得到满足。</p>
<p>基本做事方法就是模拟客户的一切日常行为，包括一些极其变态的行为，考验软件在各个方面的情况下的可用性和稳定性。而这些&quot;日常行为&quot;便称之为测试用例（Test
case），一个好的QA会设计出一套可以覆盖所有检查点（check point），又不重叠的测试用例，这套功底可以参考MECE方法。既然如此，QA就需要对整
个软件的业务相当熟悉，因为她（他）要知道在某个用户行为下，软件是否做出了正确的反应。</p>
<p>既然是模拟用户行为，那么QA就需要去手动&quot;跑&quot;测试用例。当一个系统很大的时候，测试用例极其多，光用手点一遍是非常耗费时间和人力的，所以QA可以做自动化测试。
所谓自动化，便是QA编写一些脚本代码，让计算机帮助去实现一些人为的行为，而不用自己手动点。所以这就需要QA做有一些代码编写能力。</p>
<p>测试方面有个重要的概念是黑盒测试和白盒测试。简单的说，黑盒测试就是在软件界面上用手点，不管后面的代码写得怎么样，只要我点击某个按钮或者其他元件的时候，结果是
我想要的就OK。所以叫&quot;黑盒&quot;，意思是看不到&quot;里面的代码&quot;。而白盒测试就是要直接审阅（review）代码，通过看代码发现业务逻辑，代码效率，后台数据操作等等
，可以说比黑盒测试要细致得多，当然成本可能也更多。所以叫&quot;白盒&quot;，意思是透明的盒子，可以看到里面的代码。所以，白盒测试是需要QA有一定的编程能力的。</p>
<p>沟通方面，QA经常要和DEV讨论Bug（软件缺陷），Bug的意思是本应该有的功能却没有做到的功能。对于某些比较似是而非的Bug, 怎么能够让开发者心服口服地
承认并去修复往往需要花费一番口舌。而这些Bug往往是根据不同的人的价值观认定是不是Bug，所以合理地传递价值观也是QA的一个基本素质。现实的一个案例是，公司
某QA&quot;传递价值观&quot;能力极强，于是被拉去做市场去了。除此之外，QA还要经常和技术主管沟通，熟悉客户需求。</p>
<p>全局观是因为QA要做集成测试，这样需要对产品本身有个全局的观念。比如产品有个用户管理系统和订单管理系统，那么对于&quot;删除一个用户&quot;的行为，用户的订单会怎么处理
？这便是一个全局观的意识。往往一个好的QA在这点上可以帮用户想到很多用户没想到的东西。</p>
<h2 id="3-质量监督sqa">3. 质量监督（SQA）</h2>
<p>编程能力 N/A</p>
<p>业务认知 ★</p>
<p>沟通能力 ★★★☆</p>
<p>管理能力 ★★★</p>
<p>全局观 ★★☆</p>
<p>如果说QA的作用是确保&quot;做正确的事&quot;，那么SQA的作用就是确保&quot;正确的做事&quot;。</p>
<p>通常SQA是不会直接参与软件开发的工作中，而是通过在一旁监督软件开发的过程，然后把监测的结果反馈给软件开发团队。</p>
<p>既然是监督过程，所以SQA经常是流程化的代名词。流程是外企当中比较看重的东西，从每天的Daily report, 到每周的weekly meeting，从什
么时候把当天的结果存到服务器上，到为什么团队出现重大事故，几乎都会有SQA的参与。所以在前期制定一个符合项目的流程是SQA的必然工作。项目运行过程中，所有项
目流程规定的点所涉及到的邮件都要CC一份给SQA。</p>
<p>当SQA通过流程观察项目的运行情况的时候，必然会收集到很多数据（包括刚才提到的邮件）。SQA会对这些数据进行统计归纳，然后总结出规律和报告直接递交给总监（D
irector）。鉴于此，SQA在我们公司地位还是很高的。</p>
<p>SQA还会不定期对开发团队进行个人的face to
face面对面一对一沟通，名字叫Audit，中文翻译过来类似叫审计。这种行为更针对&quot;人&quot;的评估，而不再是产品。因为产品的好坏决定于人的好坏。</p>
<h2 id="4-技术主管tech-lead">4. 技术主管（Tech-Lead）</h2>
<p>编程能力 ★★★★☆</p>
<p>业务认知 ★★★★★</p>
<p>沟通能力 ★★★★☆</p>
<p>管理能力 ★★★★</p>
<p>全局观 ★★★★</p>
<p>技术主管在我们公司往往就是一个项目的负责人。最主要的工作莫过于软件架构设计，客户需求沟通，技术难点解决和内部团队管理。</p>
<p>技术主管，名字便告诉了大家技术功底一定要很牛，在我们公司经常是一些工作了2-3年以上的软件工程师或者高级软件工程师担当。虽然技术很牛，不过实际上直接参与软件
开发的还是DEV（开发者），技术主管只是在比较高的一层面进行协调，所以直接代码编程很少。但是遇到了技术障碍DEV无法克服的时候，技术主管一定要及时站出来做一
个Problem solver。</p>
<p>技术主管的日常主要工作就是和客户沟通，熟悉需求，然后把业务需求转换成软件需求给DEV去做。所以技术主管对业务逻辑要相当的熟悉，在整个项目角色中，对业务最熟悉
的除了客户就是技术主管。所以技术主管起到了一个衔接的作用，沟通起了客户和开发，连接起了现实的业务需求和虚拟的软件实现。这一切，对技术主管的沟通能力的要求就很
高了。</p>
<p>软件团队不是一直和谐的，有时会出现某个模块的接口和另外一个模块的接口衔接不上，有时会出现一个人的工作被另外一个人的工作Block（中断）了，有时也会出现某个
DEV总是不买某个QA的账等等，所有的这一切，从技术到人本身，都在时时考验一个技术主管的管理水平。</p>
<h2 id="5-开发经理sdm">5. 开发经理（SDM）</h2>
<p>编程能力 ★★★☆</p>
<p>业务认知 ★★★★☆</p>
<p>沟通能力 ★★★★★</p>
<p>管理能力 ★★★★★</p>
<p>全局观 ★★★★★</p>
<p>软件开发经理是一般软件项目中执行层面上的最高职位了。其主要作用是项目的进度控制，客户高层沟通，甚至到项目预算控制。</p>
<p>软件开发经理的编程功底要看具体人而定，在我们公司软件开发经理一般都是技术出身，5-8年的工作经验或软件行业的资历。在具体的项目中，几乎不参与任何代码的编写和
设计工作。前期的项目计划（Project Plan），中期的项目进度管理和客户需求管理，到后期的项目交付，所有的工作都是软件开发经理和客户主要要沟通的东西。</p>
<p>业务方面，软件开发经理对业务认知的能力是非常强悍的，因为资历深的人对很多陌生的业务嗅觉和认知要比其他人强。不过在实际中，业务需求方面大部分工作给技术主管做了
，所以软件开发经理主要关注于项目总体，对细节不太关注了。</p>
<p>软件开发经理还有个重要的作用便是在软件项目过程中，积极地调动项目内外的资源。简单的说，把合适的人放在合适的位置上。当团队出现无法解决的问题时，软件开发经理会
想方设法从外部获取资源帮助团队渡过难关。</p>
<p>总的说了这么多，只是为了从宏观层面解释下这些角色的作用，目的是让新手大概的了解下这些角色的作用，以便今后在工作中将自己放在合适的角色以及和其他角色合作中心里
有个准备。</p>
]]></content:encoded>
    </item>
    <item>
      <title>用户权限设计的问题</title>
      <link>https://blog.alswl.com/2009/06/design-of-user-rights/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/design-of-user-rights/</guid>
      <description>问题 用户权限设计这一块，一直是一个我觉得比较难解决的问题。 以前我用了「伪继承」，虽然管理员继承了普通用户，但是数据库却是分开设计的。又或者压根没有继承关系，是两个不同的实体。 解决方案 这次在贴吧系统，有三个用户角色：普通用户、吧主、管理员，想设计的符合OO，但又要利于数据库的实现。就有几个问题需要解决：1.需要继承么；2.数据库怎么设计； 3.Hibernate怎么映射。最后参考几篇文章，设计成如下。</description>
      <content:encoded><![CDATA[<h3 id="问题">问题</h3>
<p>用户权限设计这一块，一直是一个我觉得比较难解决的问题。</p>
<p>以前我用了「伪继承」，虽然管理员继承了普通用户，但是数据库却是分开设计的。又或者压根没有继承关系，是两个不同的实体。</p>
<h3 id="解决方案">解决方案</h3>
<p>这次在贴吧系统，有三个用户角色：普通用户、吧主、管理员，想设计的符合OO，但又要利于数据库的实现。就有几个问题需要解决：1.需要继承么；2.数据库怎么设计；
3.Hibernate怎么映射。最后参考几篇文章，设计成如下。</p>
<p>使用User类，Roll类，User具有一般用户属性，Roll负责角色，他们是1对1关系，最好在数据库有一张User-
Roll的对应关系表。来标明这个User具有哪个Roll。</p>
<p>在我这个系统，Roll类有三种，分别对应三种角色：普通用户，吧主和管理员。</p>
<p>这种独立出Roll角色类的方法被称为基于角色的用户权限设计方法。</p>
<p>




<img loading="lazy" src="https://e25ba8-log4d-c.dijingchao.com/upload_dropbox/200906/Snap2-300x148.jpg" alt="User Roll UML类图"  />


](../../static/images/upload_dropbox/200906/Snap2.jpg)</p>
<p>我给出的这个其实还不完善，完整的解决方案应该还包含ACL列表，可以定制Roll对应ACL列表的对应，来修改某一个角色的权限。因为我的系统角色固定，而且系统规
模比较小，我所说的三种发难已经能够满足我的要求了。</p>
<h3 id="参考资料">参考资料</h3>
<p>用户权限设计&lt;<a href="http://blog.chinaunix.net/u1/42750/showart_359641.html">猛击这里打开</a>&gt;</p>
<p>基于角色的用户权限设计问题&lt;[猛击这里打开](<a href="http://blog.csdn.net/seapen/archive/2006/03/15/624734.a">http://blog.csdn.net/seapen/archive/2006/03/15/624734.a</a>
spx)&gt;</p>
]]></content:encoded>
    </item>
    <item>
      <title>用户界面设计黄金原则</title>
      <link>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</link>
      <pubDate>Tue, 02 Jun 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</guid>
      <description>在《用户界面设计要素》一书（1997）中，T.Mandel提出了3条「黄金」知道规则： 让用户驾驭软件，而不是软件驾驭用户。那种在给用户的操作加上许多约束和限制的界面虽然设计容易，却往往难学难用。 尽可能减少用户的记忆。为此可建立易记的快捷键（例如Ctrl+p启动「打印」）；采用演进形式显示「提示」信息，以免要用户一次记忆大量信息。 保持界面的一致性。例如在同类产品中使用相同的设计规则；尽可能不改变用户</description>
      <content:encoded><![CDATA[<p>在《用户界面设计要素》一书（1997）中，T.Mandel提出了3条「黄金」知道规则：</p>
<ol>
<li>让用户驾驭软件，而不是软件驾驭用户。那种在给用户的操作加上许多约束和限制的界面虽然设计容易，却往往难学难用。</li>
<li>尽可能减少用户的记忆。为此可建立易记的快捷键（例如Ctrl+p启动「打印」）；采用演进形式显示「提示」信息，以免要用户一次记忆大量信息。</li>
<li>保持界面的一致性。例如在同类产品中使用相同的设计规则；尽可能不改变用户已熟悉的操作功能键（例如用Ctrl+S保存文件）；设定界面的缺省状态。
最近停下了贴吧的下一步开发，恶补软件工程，为下一步开发做理论基础。</li>
</ol>
<p>一边啃Rober C.大人写的《敏捷软件开发》。白天都浪迹在考研自习室（很是安静啊），更新变慢，勿怪。</p>
]]></content:encoded>
    </item>
    <item>
      <title>软件自然理论</title>
      <link>https://blog.alswl.com/2009/05/natural-theory-of-software/</link>
      <pubDate>Sun, 31 May 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/05/natural-theory-of-software/</guid>
      <description>所谓软件自然理论，就是说：一个优秀的软件，他的功能模块设计，应该与用户在完全没有接触过这个系统时候所想要的功能设计一致，用户觉得他想要的功能在什么地方，应该 怎样实现，那么这个功能就是应该在那里，就是应该这样实现。 这么说感觉上会很绕口，那么举个例子。Office就是一个比较优秀的软件，如果一个用户完全没有接触过Office（当然，必须具备基本的电脑使用水平），如果该用 户想对字体进行设置，那么他就觉得</description>
      <content:encoded><![CDATA[<p>所谓软件自然理论，就是说：一个优秀的软件，他的功能模块设计，应该与用户在完全没有接触过这个系统时候所想要的功能设计一致，用户觉得他想要的功能在什么地方，应该
怎样实现，那么这个功能就是应该在那里，就是应该这样实现。</p>
<p>这么说感觉上会很绕口，那么举个例子。Office就是一个比较优秀的软件，如果一个用户完全没有接触过Office（当然，必须具备基本的电脑使用水平），如果该用
户想对字体进行设置，那么他就觉得字体设置属于格式，就应该在格式菜单里面，用户去点击这个菜单，就找到了自己需要的功能。</p>
<p>其他的，比如WinRAR，IE浏览器，都是出色的软件，他们的模块设计也都是符合用户的想法的。</p>
<p>如果一个软件功能过于复杂，或者说功能的安排有很多方案，那么用户往往会难于在短时间内找到自己想要的功能，就会产生对该软件的「惰性」，也就是不想用这个软件了。比
如说AutoCAD,3DMax，如果想熟练使用，往往要经过一段时间的学习的。</p>
<p>ps:这个理论你肯定找不到的，Google也不会有，因为&hellip;.这是我編出来忽悠继烨、道哥的&hellip;.很不幸，他们纷纷上当&hellip;.</p>
]]></content:encoded>
    </item>
    <item>
      <title>我在看设计模式</title>
      <link>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</link>
      <pubDate>Sun, 18 Jan 2009 00:00:00 +0800</pubDate>
      <guid>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</guid>
      <description>花了6天时间把创建型5种模式看完了，很有感触，但是感触不意味着我理解，我甚至私下里觉得OOD的设计模式不适合我现在做的那些程序，那些都是一次成型，根本谈不上 需求的改变。没有改变，就不需要OO思想。因为我这样的想法，我看起来很累。 我知道这些思想对我以后的发展很有帮助，会从思想上把我解救出来，我被这些新的设计想法激动着（虽然出来很多年，可是对于我来说完全是新的，呵呵```）。 嗯，坚持下去 这几天我也在想</description>
      <content:encoded><![CDATA[<p>花了6天时间把创建型5种模式看完了，很有感触，但是感触不意味着我理解，我甚至私下里觉得OOD的设计模式不适合我现在做的那些程序，那些都是一次成型，根本谈不上
需求的改变。没有改变，就不需要OO思想。因为我这样的想法，我看起来很累。
我知道这些思想对我以后的发展很有帮助，会从思想上把我解救出来，我被这些新的设计想法激动着（虽然出来很多年，可是对于我来说完全是新的，呵呵```）。</p>
<p>嗯，坚持下去</p>
<p>这几天我也在想以后走IT哪一条路。想了好久，现在的想法是：计算机本质上是一种工具，软件的存在是为了计算机更好的服务。既然是一个工具，就要有工具的觉悟，就必须
不断适应生产力的发展，需要完善自身功能，也就是需求的变化。正是因为需求的变化，使得敏捷软件开发成为现在的主流。</p>
<p>呃<code>我才看了几天设计模式，就说的这么狂</code>激动了，激动了```</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
