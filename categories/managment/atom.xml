<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>managment on Log4D</title>
    <link>https://blog.alswl.com/categories/managment/</link>
    <description>Recent content in managment on Log4D</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 15 Jul 2022 23:40:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/categories/managment/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>跟 Google 学开公司 - 谈谈方向、文化和人</title>
      <link>https://blog.alswl.com/2022/07/company/</link>
      <pubDate>Fri, 15 Jul 2022 23:40:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2022/07/company/</guid>
      <description>我居然也有胆来想这个命题了。 困惑 - 换个视角看待公司 大部分年轻人都在一个商业组织（即公司）中工作。 我们似乎对这个商业组织的运作已经很熟悉： 接触公司并进行面试和岗位匹配，在特定的岗位里面工作，过程也许开心或沮丧，通过组织的种种管理手段（KPI / OKR）来完成上级分发的任务。 这个过程中，我们往往遇到不少困惑，有些朋友还经历过职场 PUA（Pick-Up Artist）；有些朋友可能感觉自己已经干的足够出色却</description>
    </item>
    
    <item>
      <title>海贼王和创业团队</title>
      <link>https://blog.alswl.com/2016/04/onepiece-startup/</link>
      <pubDate>Wed, 27 Apr 2016 00:36:10 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2016/04/onepiece-startup/</guid>
      <description>一个同事在知乎提了一个问题 如果把草帽海贼团比作一个创业团队,这个Team的组织架构是怎样的?有哪些优势,又有哪些不足? 这个话题很有趣，作为追了多年的 fans ，又是身处互联网创业团队的我要来强答一记。 海贼王的世界很大，富有个性的角色和团队也很多，恰好可以和显示世界中的互联网创业团队进行对比。 柳传志讲的好，做大事，要「建班子，定战略，带队伍」，我们就着金句来看看草帽这个团队怎么样。 产品和战略 我先讲产品和战略</description>
    </item>
    
    <item>
      <title>技术之外</title>
      <link>https://blog.alswl.com/2016/02/team-geek/</link>
      <pubDate>Sun, 28 Feb 2016 18:16:01 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2016/02/team-geek/</guid>
      <description>这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。 在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候， 经常和新同事聊到一个词：软实力。 我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样， 我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。 这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力， 而软实力则是考衡人</description>
    </item>
    
    <item>
      <title>带理想的执行者 - 柳比歇夫的一生</title>
      <link>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</link>
      <pubDate>Sun, 12 Jul 2015 17:29:19 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</guid>
      <description>作为战斗民族的俄罗斯民族，不但能在热带风暴级的灿鸿中进行正常起降， 历来也盛产各种奇葩人物。 最近我有看到一本描述一个科学家的如何生活的书，叫「奇特的一生」。 让人拍案称奇。 主人公是一位名叫柳比歇夫的科学家，想必他在「回首往事时候没有因为虚度年华而悔恨」， 因为他将自己的一生都精确的奉献到分类学、地蚤研究上面。 他的工作投入，不是单纯激情洋溢投入，而是精确到分钟级别的投入， 是奉献完整一生的投入。 除了学术上面</description>
    </item>
    
    <item>
      <title>《项目管理修炼之道》笔记</title>
      <link>https://blog.alswl.com/2014/08/manage-it/</link>
      <pubDate>Sun, 31 Aug 2014 20:12:06 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2014/08/manage-it/</guid>
      <description>随着团队规模的变大，成员之间合作的模式逐渐由单打独斗变成协作开发。 这时候会遇到很多意想不到的问题，项目管理的重要性也就显现出来了。 项目管理修炼之道 是一本讲技术类项目管理方法和实践的书。 从业者可以从这本书获得了有益的指导。 我在 Kindle 上面翻了好几遍，感觉受益匪浅，就把读书笔记拿出来供大家参考。 内容 核心内容是项目管理的生命周期和每个阶段的交付物： 项目章程 日程规划 开发（控制节奏） 结束项目，项目回顾 其他内容： 如</description>
    </item>
    
    <item>
      <title>从 SVN 到 Git，找回丢失的历史</title>
      <link>https://blog.alswl.com/2014/01/renamed-svn-to-git/</link>
      <pubDate>Tue, 21 Jan 2014 00:20:06 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2014/01/renamed-svn-to-git/</guid>
      <description>前段时间在将公司的 SVN 项目迁移到 Git 上面去，遇到一个很少见的问题： 有一个小伙伴使用 git-svn 做 rename 操作时候，将一个目录 svn mv 了， 导致新目录只存了最近几个月提交历史，丢失了历史信息。对团队开发而言， 历史提交是非常宝贵的财产，我们想了一些办法，把这些数据提取出来。 # 找出丢失之前的版本，列出丢失目录上层的操作记录。 svn log -l 2000 svn://log4d.com/trunk/apps/ios/ | less # 将重命名之前的版本拷贝到一个临时目录 svn copy svn://log4d.com/trunk/apps/ios/nami@43252 svn://log4d.com/trunk/apps/ios/nami_lost # 准备现有代码到 Git git svn clone svn://log4d.com/ -T trunk/apps/ios/nami -t tags -b branches -r 13532 nami #</description>
    </item>
    
    <item>
      <title>读《人件》</title>
      <link>https://blog.alswl.com/2013/04/peopleware/</link>
      <pubDate>Wed, 10 Apr 2013 23:35:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2013/04/peopleware/</guid>
      <description>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要， 还是通过语言/工具来约束人重要」。 我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。 如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。 并不是静态编译和工具检查就能搞定了。 我愤愤的在 QQ 对话框中写道： 我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学 后来痛苦与代码质量</description>
    </item>
    
    <item>
      <title>软件开发中的角色扮演</title>
      <link>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</guid>
      <description>说到软件开发的过程、环节等等，我印象里只剩下一大堆术语和一些流程的大概，但是因为缺乏正规开发的经验，所以并没有对软件开发中每个人的角色有深入理解，今天在周末 检查Delicious Temp标签时候，看到 圆木菠萝头 的这片文章，收获颇丰，现在转载与大家分享。 原文链接：[ 软件开发中的角色扮演 - 软件开发 - 圆木菠萝罐](http://blog.boluotou.com/Developer/2009/06/S oftware_Role)</description>
    </item>
    
    <item>
      <title>用户权限设计的问题</title>
      <link>https://blog.alswl.com/2009/06/design-of-user-rights/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/design-of-user-rights/</guid>
      <description>问题 用户权限设计这一块，一直是一个我觉得比较难解决的问题。 以前我用了「伪继承」，虽然管理员继承了普通用户，但是数据库却是分开设计的。又或者压根没有继承关系，是两个不同的实体。 解决方案 这次在贴吧系统，有三个用户角色：普通用户、吧主、管理员，想设计的符合OO，但又要利于数据库的实现。就有几个问题需要解决：1.需要继承么；2.数据库怎么设计； 3.Hibernate怎么映射。最后参考几篇文章，设计成如下。</description>
    </item>
    
    <item>
      <title>用户界面设计黄金原则</title>
      <link>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</link>
      <pubDate>Tue, 02 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</guid>
      <description>在《用户界面设计要素》一书（1997）中，T.Mandel提出了3条「黄金」知道规则： 让用户驾驭软件，而不是软件驾驭用户。那种在给用户的操作加上许多约束和限制的界面虽然设计容易，却往往难学难用。 尽可能减少用户的记忆。为此可建立易记的快捷键（例如Ctrl+p启动「打印」）；采用演进形式显示「提示」信息，以免要用户一次记忆大量信息。 保持界面的一致性。例如在同类产品中使用相同的设计规则；尽可能不改变用户</description>
    </item>
    
    <item>
      <title>软件自然理论</title>
      <link>https://blog.alswl.com/2009/05/natural-theory-of-software/</link>
      <pubDate>Sun, 31 May 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/05/natural-theory-of-software/</guid>
      <description>所谓软件自然理论，就是说：一个优秀的软件，他的功能模块设计，应该与用户在完全没有接触过这个系统时候所想要的功能设计一致，用户觉得他想要的功能在什么地方，应该 怎样实现，那么这个功能就是应该在那里，就是应该这样实现。 这么说感觉上会很绕口，那么举个例子。Office就是一个比较优秀的软件，如果一个用户完全没有接触过Office（当然，必须具备基本的电脑使用水平），如果该用 户想对字体进行设置，那么他就觉得</description>
    </item>
    
    <item>
      <title>我在看设计模式</title>
      <link>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</link>
      <pubDate>Sun, 18 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</guid>
      <description>花了6天时间把创建型5种模式看完了，很有感触，但是感触不意味着我理解，我甚至私下里觉得OOD的设计模式不适合我现在做的那些程序，那些都是一次成型，根本谈不上 需求的改变。没有改变，就不需要OO思想。因为我这样的想法，我看起来很累。 我知道这些思想对我以后的发展很有帮助，会从思想上把我解救出来，我被这些新的设计想法激动着（虽然出来很多年，可是对于我来说完全是新的，呵呵```）。 嗯，坚持下去 这几天我也在想</description>
    </item>
    
  </channel>
</rss>
