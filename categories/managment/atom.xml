<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>managment on Log4D</title><link>https://blog.alswl.com/categories/managment/</link><description>Recent content in managment on Log4D</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Jul 2022 23:40:00 +0800</lastBuildDate><atom:link href="https://blog.alswl.com/categories/managment/atom.xml" rel="self" type="application/rss+xml"/><item><title>跟 Google 学开公司 - 谈谈方向、文化和人</title><link>https://blog.alswl.com/2022/07/company/</link><pubDate>Fri, 15 Jul 2022 23:40:00 +0800</pubDate><guid>https://blog.alswl.com/2022/07/company/</guid><description>我居然也有胆来想这个命题了。
困惑 - 换个视角看待公司 大部分年轻人都在一个商业组织（即公司）中工作。 我们似乎对这个商业组织的运作已经很熟悉： 接触公司并进行面试和岗位匹配，在特定的岗位里面工作，过程也许开心或沮丧，通过组织的种种管理手段（KPI / OKR）来完成上级分发的任务。
这个过程中，我们往往遇到不少困惑，有些朋友还经历过职场 PUA（Pick-Up Artist）；有些朋友可能感觉自己已经干的足够出色却无法得到晋升；有些朋友感慨合作的上下游太不专业了；总之，我们对公司不满是常态，而对公司满意则是反常。
其实很多时候，雇员的感受是公司运行的规律的投影。 我们制定 OKR 时候想去创造，应该通过什么方法论去开拓工作？这是公司战略决定的。 公司是怎么定义优秀人选的，我有没有机会获得晋升？这是公司用人态度决定的。 996 这么辛苦，我们该怎么去保持生活工作平衡？这是公司价值观和文化决定的。
Google 在这个方面似乎做得不错，从 2022 福布斯雇主（America&amp;rsquo;s Best Large Employers 2022）排名来看，Google 排在 34 名，互联网领域则是第 4 位（前三名分别是 Microsoft / Ultimate Kronos Group / LinkedIn）。
Google 做对了哪些事情？让我们换一个视角，从雇员视角切换到雇主，甚至再宽阔一些，以投资者视角来观察公司。 来解答一些关键问题：公司是如何决定前进方向的？公司每年的目标是应该怎么制定出来？公司通过什么方式筛选和激励人才？
重新定义公司 这本书告诉我们很多 Google 的回答， 国际大公司的方案未必能拿来立即用上，但这些答案可以给我们很多启发。
Google 说：战略、人才、文化、沟通，这些是定义公司的关键。
公司往哪里走 - 战略和方向决定了收入 公司发展的真正原动力是什么？我思考答案的朴素的：科技在发展，世界在变得更复杂，人们希望自己生活更安全、幸福、高效。这时候就需要一些机构，尤其是利润驱动的商业公司来提供更好的服务来满足大家。从这个角度出发，公司只要是与人为善，帮助用户解决确实存在的问题，就创造了相应的价值。
那具体怎么创造，往哪个方向发展？追寻利润是唯一的驱动方向么？显然不是的，否则很多公司就要去围绕人性的弱点（黄赌毒）去开展业务了（你别说，这种公司还真的挺多）。
伟大的公司之所以伟大，是他们仅仅将利润看作一个副产品。真正指引是 基于对新兴技术的洞见而形成的判断。这是一种那什么是「洞见」呢？ 技术洞见是创新方式应用科技或设计，达到成本或者特性的 10X 变化，甚至是代际变化。
制定的战略要足够有挑战。 Google 说 [这个战略是否足够吸引人，就好比 NASA 登月计划一样，让渴望的人聚拢在一起。而不是单纯一份体面的工作。」
如果想做一鸣惊人的事情确实比较困难，也不符合科技发展规律。 有时我们的创新仅仅是「组合式创新」，将领域 A 的知识复用到领域 B， 就形成了创新。计算机为什么持续受到热捧，因为这个作为基础领域可以跟大量其他领域进行相结合。</description></item><item><title>海贼王和创业团队</title><link>https://blog.alswl.com/2016/04/onepiece-startup/</link><pubDate>Wed, 27 Apr 2016 00:36:10 +0800</pubDate><guid>https://blog.alswl.com/2016/04/onepiece-startup/</guid><description>一个同事在知乎提了一个问题 如果把草帽海贼团比作一个创业团队,这个Team的组织架构是怎样的?有哪些优势,又有哪些不足?
这个话题很有趣，作为追了多年的 fans ，又是身处互联网创业团队的我要来强答一记。
海贼王的世界很大，富有个性的角色和团队也很多，恰好可以和显示世界中的互联网创业团队进行对比。 柳传志讲的好，做大事，要「建班子，定战略，带队伍」，我们就着金句来看看草帽这个团队怎么样。
产品和战略 我先讲产品和战略。
由于海贼王世界的设定，以及作为一个全年段漫画动画的原因。 海贼王世界的整体战略是较为简单，海贼团的目标都较为单一，即「找到 哥尔 D 罗杰 留下的宝藏」。 海贼团们实现目标的路径也较为单一，打斗增强战斗力，不断寻找线索，去伟大航道寻找宝藏。
所以故事的开展反而是围绕另外一条隐秘的线索「历史的真相」，尾田大神埋坑很深。 「历史的真相」并不是作为大部分人努力和前进的目标，所以「海贼王」世界的故事虽然曲折跌宕， 但是产品模型极为单一，不具备太多可以讨论的点。
团队 接着讲团队，一个团队第一重要的是创始人，这必须要是一位领袖人物。
评价领袖优秀程度，从这么几个角度评价：
意志力：打不死的小强，不达目标誓不罢休 专业技能：能打、脑子灵光、心灵手巧、一技之长 规划能力：除了体力值和专业智慧，也要讲讲战略和谋略 管理能力：沟通协调、团队管理促进能力，能够带领团队实现目标，促进他人成长 以这个标准来看几个具有领袖气质的角色：
路飞 意志力：5 专业技能：5 规划能力：1（率性而为的大爷） 管理能力：1（团队自由生长） 白胡子 意志力：5 专业技能：5 规划能力：4（顶上之战的过程证明） 管理能力：5（队长们的成长和忠诚度证明） 多弗朗明哥 意志力：5 专业技能：5 规划能力：5 管理能力：5 艾斯 意志力：5 专业技能：4（以牺牲的时间点战斗力打分） 规划能力：2（追踪黑胡子，一个人冒进，被黑胡子摆了一道） 管理能力：2（也就混到一个队长，能够鼓励其他人，但是没发现黑胡子成长的问题） 唐僧（乱入一个对比） 意志力：5+ 专业技能：4（熟读经书算不算专业能力？） 规划能力：0 管理能力：0 从上面的判断可以看出，对于一个领袖而言，路飞仅仅是不错，但是谈不上多么优秀， 倒是白胡子，典范啊典范。
根据上面提到的能力模型，草帽海贼团的其他角色大家也可以心里评估出来了： 大部分人都是意志力、专业技能强悍（即便是乌索普，射击能力也是可以评上 3），但是同时也在规划能力和管理能力上面较弱。
唉，这么弱，很难继续支撑草帽海贼团继续走下去啊，怎么办呢？
带队伍 草帽海贼团，一个极为漂亮的「自组织团队」。
什么是「自组织团队」？来自 InfoQ 的一篇文章 什么是自组织团队？ 里面讲到团队的特性：
分散式的控制，也就是说与集中式的控制截然相反， 不断适应改变的环境， 在局部相互作用下自然浮现出来的结构, 反馈，包括肯定的和否定的 弹性，归结于系统修复和调整的能力。 用简单的关键词概括，其实是这么几个关键词：</description></item><item><title>技术之外</title><link>https://blog.alswl.com/2016/02/team-geek/</link><pubDate>Sun, 28 Feb 2016 18:16:01 +0800</pubDate><guid>https://blog.alswl.com/2016/02/team-geek/</guid><description>这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。
在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候， 经常和新同事聊到一个词：软实力。 我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样， 我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。
这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力， 而软实力则是考衡人的因素。这种晚来的意识让我在一段时间里面， 将自己的工作陷入困境，并且得不到解药。
Google 的两位工程师 Brian W. Fitzpatrick 和 Ben Collins-Sussman 写了一本书极客与团队，通过他们的视角， 告诉大家想要在团队中获得成功的另一面。不要被书名误解，我觉得「开发者和团队」是更好的名字， 虽然没那么酷。
要在团队中获得成功，你必须以谦虚、尊重和信任为核心原则。
要做的第一件事情，应该就是沟通了。让自己成为一个玻璃玲珑人， 其他人可以看到你的方向、目标和里程碑，同时可以看到你的进展和问题点。 这样不但可以获得工作中的肯定，当个人的目标设定和团队出现偏差， 又或是开发过程中在一个点停顿了太久，可以有其他人参与进来或直接伸出援手。
这种透明度对上对下都应该如此。团队的领导， 应当在开发周期内的早期就明确告知团队愿景、目标和设定的里程碑。 产生共鸣的愿景可以让人对目标有渴望，对自己工作有认同。 各位还记得中国中小学开学第一周里，大多都有一个开学典礼讲话。讲的好的领导， 会阐述自己的教学理念，去年取得的成绩，今年的教学着重点。 讲的差的领导就是泛泛而谈，每年都是一套话术，完全看不到长进。
缺失沟通，还会将个人陷于单打独斗的境地，一个篮球队需要 5 个人大， 一个人牛逼没屁用。
提高工程质量的一个有效手段就是 CI（持续集成），将开发过程中一点点的小进展都以一种机械的方式呈现出来， 并进行测试。另一个有效手段是 Code Review，不但推荐要 CR，更是要尽早、快速的 CR。 避免屎积压多了拉，太臭。
我突然想到一条实践：即便是做一个人的项目，在精简程度上也保持最小的一个阈值， 想象明天就要长假，工作要交给别人维护，如何在交付物里面有足够的信息让其他人知晓细节。 而不是丢给后继维护者一句冰冷的话：「看代码」。
沟通必须是有效的，我想任何人都不想听一个嘴碎的人在那边逼逼一下午。 有很多结构化、一部的沟通可以显著提高沟通效率： 项目看板、设计文档、Code Review、代码注释、数据字典等。
第二个重要的观点是，接受失败，承认自己不是无能的。你可能很聪明，但所做的事情不一定完全都是正确的， 连上帝都会犯错，何况是普通人。犯错不可怕，但是犯错还认识不到可怕。犯错并且认识到了， 但是拒绝承认错误的人，不是可怕，而是应该要被淘汰，这类人会极其难以合作。 如何你周围都是这样的人，或者你上司是这样的人，也许你可以考虑换一个地方，在拉钩搜索「堆糖」试试吧。
关于接受失败的另外一个隐含后续发展就是「成长」。意识到这个世界是动态发展的， 「要以发展的眼光看待事物」是一个非常非常有用的认知。 能自己意识到失败，并且会主动复盘，重新认知自己的人，往往会成长的极为迅速。 关于成长的话题可以讨论很深，以后可以单独拎出来讨论。
书中提到一个失败后回顾的清单：
简要 时间的时间线，从发现到调查，再到最终见过 事件发生的主因 影响和损失评估 立即修正问题的步骤 防止事件再次发生的步骤 得到的教训 我就哈哈哈了，这不就是我大堆糖的故障报告模板么？
第三点，如何成长？简单来说，去冒险，去承担自己能力之外的任务， 去挑战没有经历过的任务。有一条彼得定律：「在组织或企业的等级制度中， 人会因其某种特质或特殊技能，令他在被擢升到不能胜任的职位，相反变成组织的障碍物（冗员）及负资产。」。 前半段含义是，大部分情况下面，并不是具有了相应能力才去承担，而是试着去承担任务。 无论成功与否，对当前去挑战的人来说，都能够得到历练，从而能力得到提升。</description></item><item><title>带理想的执行者 - 柳比歇夫的一生</title><link>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</link><pubDate>Sun, 12 Jul 2015 17:29:19 +0800</pubDate><guid>https://blog.alswl.com/2015/07/liu-bi-xie-fu/</guid><description>作为战斗民族的俄罗斯民族，不但能在热带风暴级的灿鸿中进行正常起降， 历来也盛产各种奇葩人物。 最近我有看到一本描述一个科学家的如何生活的书，叫「奇特的一生」。 让人拍案称奇。
主人公是一位名叫柳比歇夫的科学家，想必他在「回首往事时候没有因为虚度年华而悔恨」， 因为他将自己的一生都精确的奉献到分类学、地蚤研究上面。 他的工作投入，不是单纯激情洋溢投入，而是精确到分钟级别的投入， 是奉献完整一生的投入。
除了学术上面的成功，他的时间记录法也很牛逼，甚至让苏联科学院进行研究。怎么描述他的牛逼呢？如果他生活在今天，大致会这样写：
今天我 19:00 - 19:25 看了新闻联播，感受到社会各阶级在党的领导下面获得令人振奋的成绩
19:25 休息了一会，避过无聊的天气预报时间
19:30 - 20:30 学习了「XXX 的讲话精神研究」
附加工作：20:35 - 20:40 小解，顺便刷了一会朋友圈作为今天的娱乐放松，评论了隔壁老王老婆的出行照片
看到没有，他精确的记录了自己的时间使用记录，犹如脑子里面有个精确的 GTD 管理器，那个年代 David Allen 还没出生呢，肯定也谈不上了解 Get Things Done。苏联真是靠各类牛逼人物撑起了一战、二战时候工业大跃进和各种黑科技的崛起。
简单记录时间当然不能带来效率和成果的提升，柳比歇夫明显没有纳什这种神经病天才的聪明，他能获得这样比较高的成就，必须还有真正的大招。
第一招是他有坚定的奋斗目标：「创立生物自然分类法」。我们暂不管这不出名的法则是什么，能在 1918 年（他时年 28 岁，我擦，和我现在差不多大啊）就提出自己一生奋斗的目标，着实了不起。 从书中的记录来看，28 岁的青年教师柳比歇夫， 在日记里面描述他想要做什么事情，需要具备什么素质， 并且在估算重要里程碑时间点。
我估摸着，在战争中成长起来的人，不仅仅需要幸运，还需要勇气和坚韧意志， 19 世纪初年，沙皇政权摇摇欲坠，布尔什维克们应该还在密谋革命造反， 民众生活艰苦（感觉好像民国时期的中国）。 这种时代的大环境造就了各阶级人物命运的跌宕起伏，附带效应是出产优秀的文人和思想家。 柳比歇夫既然在这个时期成长，那也会渴望建树功勋，做点改变世界的事情。
第二招是，他就去做了。
「听过了很多大道理，却依然过不好这一生」，无非是缺在执行。 柳比歇夫的时间记录法，不是简单作为一个日记本在使用， 关键点在于回顾和计划。通过过去的记录，分析自我，总结经验，判断未来。
哎哟，道理说起来都简单，做起来都难，柳比歇夫作为一个很好的例子， 告诉我们，一个资质普通的人，决定牺牲自我，奉献到某个特定事业时候， 可以获得的成绩，他完成了「立言」。
在这个物欲横流，信息多得炸掉脑仁，各类媒体都在抢占眼珠的时代，能够不忘初心， 去做点实际的事情，是一件不容易的事情。 对快 30 的我来说，别说「立言」，就光「立命」， 就已经让我困苦不堪，在这和平年代，没有家仇国恨美国梦，想要做点牛逼的事情，就得需要勇气和爱来驱动。</description></item><item><title>《项目管理修炼之道》笔记</title><link>https://blog.alswl.com/2014/08/manage-it/</link><pubDate>Sun, 31 Aug 2014 20:12:06 +0800</pubDate><guid>https://blog.alswl.com/2014/08/manage-it/</guid><description>随着团队规模的变大，成员之间合作的模式逐渐由单打独斗变成协作开发。 这时候会遇到很多意想不到的问题，项目管理的重要性也就显现出来了。 项目管理修炼之道 是一本讲技术类项目管理方法和实践的书。 从业者可以从这本书获得了有益的指导。 我在 Kindle 上面翻了好几遍，感觉受益匪浅，就把读书笔记拿出来供大家参考。
内容 核心内容是项目管理的生命周期和每个阶段的交付物：
项目章程 日程规划 开发（控制节奏） 结束项目，项目回顾 其他内容：
如何和投资者沟通 管理会议 控制项目节奏 关键字 项目定义：一个独特的任务或是系统化的流程，其目的是创建新的产品或服务， 产品和服务交付完成标志着项目的结束。项目都有风险，并且受制于有限的资源。 关键（章程） 驱动因素：功能集合、发布时间、缺陷等级，只能有一个 约束：环境、流程、人力资源、预算等，决定了规模 浮动因素 规划：带有项目发布条件的项目计划 日程安排：对工作项目的有序描述 发布条件：S.M.A.R.T.，需要一起协商 仪表盘 定性或者定量的方式，将结果公布出来 保持项目节奏的方法 快速开发 持续集成 自动冒烟测试 功能拆分和日程排期 按功能实现，而非架构 优先实现高价值功能 通过用户故事、角色和场景来定义需求 分离需求和 GUI 质量控制 复查：Code Review，结对编程 重构 项目成员的角色构成 项目经理 架构师 开发人员 测试人员 业务分析师 运维 我的问题和部分解答 Q：项目经理的职责是什么？
监控项目进度，牢记里程碑验收条件。保障项目按需求交付。
Q：如何成为优秀的项目经理？
项目经理需要下面这些技能：
倾听
谈判技巧
协作和表达技能
目标导向
真诚，尊重
信息不足下进行决策能力
解决问题的技巧
发现问题能力
理解产品的生命周期
认识自己技术的不足
能够安排日程
能够估算任务，并指导其他人完成任务估算
指导如何管理风险，评估项目状态</description></item><item><title>从 SVN 到 Git，找回丢失的历史</title><link>https://blog.alswl.com/2014/01/renamed-svn-to-git/</link><pubDate>Tue, 21 Jan 2014 00:20:06 +0800</pubDate><guid>https://blog.alswl.com/2014/01/renamed-svn-to-git/</guid><description>前段时间在将公司的 SVN 项目迁移到 Git 上面去，遇到一个很少见的问题： 有一个小伙伴使用 git-svn 做 rename 操作时候，将一个目录 svn mv 了， 导致新目录只存了最近几个月提交历史，丢失了历史信息。对团队开发而言， 历史提交是非常宝贵的财产，我们想了一些办法，把这些数据提取出来。
# 找出丢失之前的版本，列出丢失目录上层的操作记录。 svn log -l 2000 svn://log4d.com/trunk/apps/ios/ | less # 将重命名之前的版本拷贝到一个临时目录 svn copy svn://log4d.com/trunk/apps/ios/nami@43252 svn://log4d.com/trunk/apps/ios/nami_lost # 准备现有代码到 Git git svn clone svn://log4d.com/ -T trunk/apps/ios/nami -t tags -b branches -r 13532 nami # 修改 .git/config 来加入丢失的历史数据 Remote [svn-remote &amp;#34;svn-lost&amp;#34;] url = svn://log4d.com fetch = trunk/apps/ios/nami_lost:refs/remotes/trunk-lost # 并抓取 Remote 内容 git svn fetch # Rebase 新代码到恢复过来的历史记录上 git checkout master git rebase --committer-date-is-author-date trunk-lost 其中注意的是手动添加一个 svn-remote 地址为历史数据副本地址。 还有就是 rebase 时候参数 --committer-date-is-author-date 可以保证 rebase 不会造成提交时间被修改，方便回溯。</description></item><item><title>读《人件》</title><link>https://blog.alswl.com/2013/04/peopleware/</link><pubDate>Wed, 10 Apr 2013 23:35:00 +0800</pubDate><guid>https://blog.alswl.com/2013/04/peopleware/</guid><description>事情起源于动态语言和静态语言之争，最后争论焦点转移到：「相信人本身的能力重要， 还是通过语言/工具来约束人重要」。 我认为项目开发中最重要的是个人能力和团队协作能力，工具只是加分项。 如果代码质量差、监控难、性能难以优化，解决根本问题的关键还是在人身上。 并不是静态编译和工具检查就能搞定了。
我愤愤的在 QQ 对话框中写道：
我工作第一年痛苦于开发流程，阅读了《人月神话》，就开始坚信软件工程的哲学 后来痛苦与代码质量，阅读了《重构》，开始坚信代码质量决定产品质量 现在痛苦于人和语言的冲突，动态和静态的冲突，我想读《人件》了
人件已经绝版，只能在找线上版，我花了两个星期把它读完。 书中给了我一部分答案，另外还有一些意外的收获。
《人件》其实讲了一件事情：怎样将脑力劳动者管理好，打造出一个高效的团队。
《人件》@豆瓣： http://book.douban.com/subject/1108725/
《人件》在线阅读地址： http://book.zi5.me/books/read/2206
吐槽：翻译太烂太烂太烂了，下次要看直接去看翻译版。
以人为本 我们工作的主要挑战，与其说来源于技术，不如说来源于团队成员本身
技术人员转成项目经理经理之后，往往继续用工程化思维管理人员， 认为人是可以设计成标准化接口，是可以替换的。很可惜，这种想法不是那么 有效。
因为脑力劳动和体力重复劳动不一样，不是在卖汉堡这种重复工作， 而是需要创造、思考和发明的工作。软件经理需要提供有限额的错误机会。 错误无法完全避免，并且是工作内容的健康组成部分。一旦硬性阻止犯错， 会让团队成员失去创造的勇气。 我相信这也是为什么 Facebook 早期会践行「Break it Down」。
何不双赢 西班牙人的理论坚持认为地球上只有一个固定数量的价值， 因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富。 而英国人的理论认为价值可以通过天才和技术创造出来。因此英国就产生了工业革命， 而西班牙人就转动起了车轮，开始开拓疆土和剥削在新大陆的印第安人。 他们从海上运回大量的黄金， 他们所有努力带来的却是通货膨胀（太多的金钱追逐太少的有用货物）。
我坚信公司和员工并不是对立面的，双赢才是正确的路线。 大部分情况下，我愿意牺牲个人时间和精力来完成公司的任务。 前提就是对产品有认同感，对公司有归属感。
最好和最坏 作者通过一个持续两年，有来自 92 个公司的 600 多名开发程序员参加的比赛， 分析出以下数据：
成绩最好与成绩最差的人之间的绩效比率是10 : 1。 最好选手成绩大约是中等成绩选手成绩的2.5倍。 成绩中等以上的一半选手与另外一半选手的绩效比是2 : 1 外刊 IT 评论的 为什么程序员的工作效率跟他们的工资不成比例 一文中也提供一些数据支持。
我离最好还有很长的距离，但是我相信个人能力是可以提升的， 并且在个人能力上面的投资汇报比极高。
高效工作的秘诀 进入顺流：咦？怎么时间过得这么快？！ 邮件比电话更不容易打乱人的思绪 团队的力量 团结起来，工作的更高效更开心 有目标的团队，1 + 1 &amp;gt; 2 为一个共同的目标走到一起 优秀的团队里的成员，不会因为钱、阶层、晋升的问题离开团队 优秀的团队往往是带有个性的 《人人都是产品经理》中当时讲了一个愿景（Vison）问题， 我相信一个好的愿景可以吸引更多高质量人才，为赚钱而创建的团队是不会长久的。</description></item><item><title>软件开发中的角色扮演</title><link>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</link><pubDate>Sat, 09 Jan 2010 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2010/01/software-development-in-the-role-playing/</guid><description>说到软件开发的过程、环节等等，我印象里只剩下一大堆术语和一些流程的大概，但是因为缺乏正规开发的经验，所以并没有对软件开发中每个人的角色有深入理解，今天在周末 检查Delicious Temp标签时候，看到 圆木菠萝头 的这片文章，收获颇丰，现在转载与大家分享。
原文链接：[ 软件开发中的角色扮演 - 软件开发 - 圆木菠萝罐](http://blog.boluotou.com/Developer/2009/06/S oftware_Role) （我稍微调了一下格式，没有修改文章内容 ^_^）
××××××XXX分哥线XXX×××××××
商业软件开发并不是只有一个编程的人，而是可以分为不同的角色。
不同的软件公司因为规模大小性质各不相同，所以围绕软件的角色也各不相同。这就好比在重点学校里面分级很明确，每科有个老师，每个年级每个班级都有各自的老师，也有主 任书记校长支持角色。而在电影《一个都不能少》级别的学校里面，往往一个老师兼职从语文教到体育，年级从一年级到六年级。类似的说，一个大型的软件外包企业，外资企业 ，往往分工明确细致，每个人像螺丝钉一样在一起工作，让整个大机器得以运转。而在一个小型创业企业里面，往往一个人从接触客户，到开发产品到交付产品＊＊＊走完，整个 产品周期就一个人，甚至几个产品周期就一个人。
所以解释角色要针对性。远的不说，就拿我们的项目组来举例。我们项目组可以说一共有5种角色，开发（DEV），测试（QA），质量监督（SQA），技术主管 （Tech-Lead）,开发经理（SDM）。
1. 开发 （DEV） 编程能力 ★★★★★
业务认知 ★★☆
沟通能力 ★★☆
管理能力 N/A
全局观 N/A
开发就是大家经常说的编程的人。工作主要是写代码，其次是跟团队成员客户沟通。前后者比例大概是7：3的关系。开发是整个软件开发团队当中的最重要的角色之一，道理很 简单，产品出自于他们的亲手。说到开发，大家的印象就是整天呆在电脑面前，目光呆滞，头发凌乱的计算机人士。确实，整天和计算机打交道的人的确容易变成这样，因为开发 首要解决的问题就是如何用技术能力去解决客户的需求，而不是自己的形象怎么样。事实上这种情况在现代中得到很大改善，很多IT人士都很注重自身形象。
具体的工作不仅要写代码用算法实现业务逻辑，更要有程序设计的思想，大到整个的程序框架，小到某个小模块的扩展性兼容性，都是在开发真正写代码之前着重要考虑的方面。
现在的编程不像以前打孔式编程那么艰涩，大厂商开发的强大的编程工具（IDE）让编程事半功倍。然而技术在变简单的同时，客户需求又在日趋复杂化。而技术就是为了实现 业务逻辑，将业务逻辑抽象建模用计算机程序的方式表现出来，所以一个不懂业务逻辑的开发不会了解模块和模块之间如何协同工作，这便给工作带来很大的局限性。而如果一个 开发只关注每个模块之内的细节实现，那在现实中便不是一个好开发，至少不是一个好用的开发。
沟通方面，开发需要和测试，技术主管，开发经理，甚至客户方面沟通，所以必要的沟通能力还是很需要的。现在的软件不再是一个人在战斗，在团队作战中，开发有时需要和测 试讨论&amp;quot;某个软件Bug（缺陷）是不是Bug&amp;quot;，有时需要和技术主管讨论客户的某个需求到底是要实现什么内容，有时需要和开发经理讨论项目的进度是否需要推迟。
就开发的工作本身而言，是不太需要管理能力和全局观的，如果能够做好编程的工作之外，这两方面也比较强，可能就离升职加薪不远了。
2. 测试（QA） 编程能力 ★★☆
业务认知 ★★★★
沟通能力 ★★★
管理能力 N/A
全局观 ★☆
任何一个产品都需要测试，就好比制造业中如果生产了一批电灯，我们不能听制灯师傅说信得过而信得过，而得通过一系列模拟用户的行为来对电灯进行测试，指标合格后方可出 厂投入市场。
软件测试也一样，需要对开发者开发出来的模块，产品进行全方位的测试。
原则是&amp;quot;做正确的事&amp;quot;，让客户需求功能得到满足。
基本做事方法就是模拟客户的一切日常行为，包括一些极其变态的行为，考验软件在各个方面的情况下的可用性和稳定性。而这些&amp;quot;日常行为&amp;quot;便称之为测试用例（Test case），一个好的QA会设计出一套可以覆盖所有检查点（check point），又不重叠的测试用例，这套功底可以参考MECE方法。既然如此，QA就需要对整 个软件的业务相当熟悉，因为她（他）要知道在某个用户行为下，软件是否做出了正确的反应。
既然是模拟用户行为，那么QA就需要去手动&amp;quot;跑&amp;quot;测试用例。当一个系统很大的时候，测试用例极其多，光用手点一遍是非常耗费时间和人力的，所以QA可以做自动化测试。 所谓自动化，便是QA编写一些脚本代码，让计算机帮助去实现一些人为的行为，而不用自己手动点。所以这就需要QA做有一些代码编写能力。
测试方面有个重要的概念是黑盒测试和白盒测试。简单的说，黑盒测试就是在软件界面上用手点，不管后面的代码写得怎么样，只要我点击某个按钮或者其他元件的时候，结果是 我想要的就OK。所以叫&amp;quot;黑盒&amp;quot;，意思是看不到&amp;quot;里面的代码&amp;quot;。而白盒测试就是要直接审阅（review）代码，通过看代码发现业务逻辑，代码效率，后台数据操作等等 ，可以说比黑盒测试要细致得多，当然成本可能也更多。所以叫&amp;quot;白盒&amp;quot;，意思是透明的盒子，可以看到里面的代码。所以，白盒测试是需要QA有一定的编程能力的。</description></item><item><title>用户权限设计的问题</title><link>https://blog.alswl.com/2009/06/design-of-user-rights/</link><pubDate>Thu, 25 Jun 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/06/design-of-user-rights/</guid><description>问题 用户权限设计这一块，一直是一个我觉得比较难解决的问题。
以前我用了「伪继承」，虽然管理员继承了普通用户，但是数据库却是分开设计的。又或者压根没有继承关系，是两个不同的实体。
解决方案 这次在贴吧系统，有三个用户角色：普通用户、吧主、管理员，想设计的符合OO，但又要利于数据库的实现。就有几个问题需要解决：1.需要继承么；2.数据库怎么设计； 3.Hibernate怎么映射。最后参考几篇文章，设计成如下。
使用User类，Roll类，User具有一般用户属性，Roll负责角色，他们是1对1关系，最好在数据库有一张User- Roll的对应关系表。来标明这个User具有哪个Roll。
在我这个系统，Roll类有三种，分别对应三种角色：普通用户，吧主和管理员。
这种独立出Roll角色类的方法被称为基于角色的用户权限设计方法。
[caption id=&amp;ldquo;attachment_12439&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;300&amp;rdquo; caption=&amp;ldquo;User Roll UML类图&amp;rdquo;] [/caption]
我给出的这个其实还不完善，完整的解决方案应该还包含ACL列表，可以定制Roll对应ACL列表的对应，来修改某一个角色的权限。因为我的系统角色固定，而且系统规 模比较小，我所说的三种发难已经能够满足我的要求了。
参考资料 用户权限设计&amp;lt;猛击这里打开&amp;gt;
基于角色的用户权限设计问题&amp;lt;[猛击这里打开](http://blog.csdn.net/seapen/archive/2006/03/15/624734.a spx)&amp;gt;</description></item><item><title>用户界面设计黄金原则</title><link>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</link><pubDate>Tue, 02 Jun 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/06/gold-user-interface-design-principles/</guid><description>在《用户界面设计要素》一书（1997）中，T.Mandel提出了3条「黄金」知道规则：
让用户驾驭软件，而不是软件驾驭用户。那种在给用户的操作加上许多约束和限制的界面虽然设计容易，却往往难学难用。 尽可能减少用户的记忆。为此可建立易记的快捷键（例如Ctrl+p启动「打印」）；采用演进形式显示「提示」信息，以免要用户一次记忆大量信息。 保持界面的一致性。例如在同类产品中使用相同的设计规则；尽可能不改变用户已熟悉的操作功能键（例如用Ctrl+S保存文件）；设定界面的缺省状态。 最近停下了贴吧的下一步开发，恶补软件工程，为下一步开发做理论基础。 一边啃Rober C.大人写的《敏捷软件开发》。白天都浪迹在考研自习室（很是安静啊），更新变慢，勿怪。</description></item><item><title>软件自然理论</title><link>https://blog.alswl.com/2009/05/natural-theory-of-software/</link><pubDate>Sun, 31 May 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/05/natural-theory-of-software/</guid><description>所谓软件自然理论，就是说：一个优秀的软件，他的功能模块设计，应该与用户在完全没有接触过这个系统时候所想要的功能设计一致，用户觉得他想要的功能在什么地方，应该 怎样实现，那么这个功能就是应该在那里，就是应该这样实现。
这么说感觉上会很绕口，那么举个例子。Office就是一个比较优秀的软件，如果一个用户完全没有接触过Office（当然，必须具备基本的电脑使用水平），如果该用 户想对字体进行设置，那么他就觉得字体设置属于格式，就应该在格式菜单里面，用户去点击这个菜单，就找到了自己需要的功能。
其他的，比如WinRAR，IE浏览器，都是出色的软件，他们的模块设计也都是符合用户的想法的。
如果一个软件功能过于复杂，或者说功能的安排有很多方案，那么用户往往会难于在短时间内找到自己想要的功能，就会产生对该软件的「惰性」，也就是不想用这个软件了。比 如说AutoCAD,3DMax，如果想熟练使用，往往要经过一段时间的学习的。
ps:这个理论你肯定找不到的，Google也不会有，因为&amp;hellip;.这是我編出来忽悠继烨、道哥的&amp;hellip;.很不幸，他们纷纷上当&amp;hellip;.</description></item><item><title>我在看设计模式</title><link>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</link><pubDate>Sun, 18 Jan 2009 00:00:00 +0800</pubDate><guid>https://blog.alswl.com/2009/01/i-look-at-design-patterns/</guid><description>花了6天时间把创建型5种模式看完了，很有感触，但是感触不意味着我理解，我甚至私下里觉得OOD的设计模式不适合我现在做的那些程序，那些都是一次成型，根本谈不上 需求的改变。没有改变，就不需要OO思想。因为我这样的想法，我看起来很累。 我知道这些思想对我以后的发展很有帮助，会从思想上把我解救出来，我被这些新的设计想法激动着（虽然出来很多年，可是对于我来说完全是新的，呵呵```）。
嗯，坚持下去
这几天我也在想以后走IT哪一条路。想了好久，现在的想法是：计算机本质上是一种工具，软件的存在是为了计算机更好的服务。既然是一个工具，就要有工具的觉悟，就必须 不断适应生产力的发展，需要完善自身功能，也就是需求的变化。正是因为需求的变化，使得敏捷软件开发成为现在的主流。
呃我才看了几天设计模式，就说的这么狂激动了，激动了```</description></item></channel></rss>